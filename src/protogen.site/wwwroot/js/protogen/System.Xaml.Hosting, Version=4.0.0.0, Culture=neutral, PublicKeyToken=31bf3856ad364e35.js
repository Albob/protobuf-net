/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm2E = JSIL.DeclareAssembly("System.Xaml.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Xaml");
JSIL.DeclareNamespace("System.Xaml.Hosting");
/* class System.Xaml.Hosting.XamlBuildProvider */ 

(function XamlBuildProvider$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm28.TypeRef("System.Web.Compilation.BuildProvider"), 
      Name: "System.Xaml.Hosting.XamlBuildProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendTypeName", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateCode", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGeneratedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultFlags", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.Compilation.BuildProviderResultFlags"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootXamlType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlBuildProviderExtension", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlBuildProviderExtensionFactory", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.Field({Static:false, Public:false}, "xamlBuildProviderExtension", $asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtension"));

    $.Field({Static:true , Public:false}, "xamlBuildProviderExtensionFactory", $asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtensionFactory"));

    $.Property({Static:false, Public:false}, "VirtualPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm28.TypeRef("System.Web.Compilation.BuildProviderAppliesToAttribute"), function () { return [$asm28.System.Web.Compilation.BuildProviderAppliesTo.Web]; });

})();

/* class System.Xaml.Hosting.XamlHttpHandlerFactory */ 

(function XamlHttpHandlerFactory$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.XamlHttpHandlerFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseHandler", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.IHttpHandler"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandlerFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.XamlHttpHandlerFactory+PathCache */ 

(function PathCache$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xaml.Hosting.XamlHttpHandlerFactory+PathCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "EnsurePathInfo", 
      new JSIL.MethodSignature($asm2E.TypeRef("System.Xaml.Hosting.XamlHttpHandlerFactory+PathInfo"), [$.String])
    );

    $.Field({Static:true , Public:false}, "pathCache", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "writeLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.XamlHttpHandlerFactory+HandlerWrapper */ 

(function HandlerWrapper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.XamlHttpHandlerFactory+HandlerWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm28.TypeRef("System.Web.IHttpHandler"), $asm28.TypeRef("System.Web.IHttpHandlerFactory")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [$asm28.TypeRef("System.Web.IHttpHandler"), $asm28.TypeRef("System.Web.IHttpHandlerFactory")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseWrappedHandler", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "factory", $asm28.TypeRef("System.Web.IHttpHandlerFactory"));

    $.Field({Static:false, Public:false}, "httpHandler", $asm28.TypeRef("System.Web.IHttpHandler"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.XamlHttpHandlerFactory+HandlerWrapper+AsyncHandlerWrapper */ 

(function AsyncHandlerWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2E.TypeRef("System.Xaml.Hosting.XamlHttpHandlerFactory+HandlerWrapper"), 
      Name: "System.Xaml.Hosting.XamlHttpHandlerFactory+HandlerWrapper+AsyncHandlerWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm28.TypeRef("System.Web.IHttpAsyncHandler"), $asm28.TypeRef("System.Web.IHttpHandlerFactory")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm28.TypeRef("System.Web.HttpContext"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "httpAsyncHandler", $asm28.TypeRef("System.Web.IHttpAsyncHandler"));

    $.ImplementInterfaces(
      /* 1 */ $asm28.TypeRef("System.Web.IHttpAsyncHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.XamlHttpHandlerFactory+PathInfo */ 

(function PathInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.XamlHttpHandlerFactory+PathInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledCustomString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHandlerFirstTime", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHandlerSubSequent", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.Field({Static:false, Public:false}, "cachedResult", $.Object);

    $.Field({Static:false, Public:false}, "hostedXamlType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "writeLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.HostingEnvironmentWrapper */ 

(function HostingEnvironmentWrapper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xaml.Hosting.HostingEnvironmentWrapper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "UnsafeImpersonate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xaml.Hosting.IXamlBuildProviderExtension */ 

JSIL.MakeInterface(
  "System.Xaml.Hosting.IXamlBuildProviderExtension", false, [], function ($) {
    $.Method({}, "GenerateCode", new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm07.TypeRef("System.IO.Stream"), 
          $asm28.TypeRef("System.Web.Compilation.BuildProvider")
        ]));
    $.Method({}, "GetGeneratedType", new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")]));
  }, []);

/* interface System.Xaml.Hosting.IXamlBuildProviderExtensionFactory */ 

JSIL.MakeInterface(
  "System.Xaml.Hosting.IXamlBuildProviderExtensionFactory", false, [], function ($) {
    $.Method({}, "GetXamlBuildProviderExtension", JSIL.MethodSignature.Return($asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtension")));
  }, []);

/* class System.Xaml.Hosting.SR */ 

(function SR$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CouldNotResolveType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConfigSectionNotFound", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceNotFound", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedEof", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "HttpHandlerForXamlTypeNotFound", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotHttpHandlerType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.Field({Static:true , Public:false}, "resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ConfigSectionNotFound", $.String);

    $.Property({Static:true , Public:false}, "ResourceNotFound", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedEof", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.TD */ 

(function TD$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.TD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEventDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureEventDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "HttpHandlerPickedForUrl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HttpHandlerPickedForUrlIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTraceSource", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm25.TypeRef("System.Runtime.TracePayload")
        ])
    );

    $.Field({Static:true , Public:false}, "resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "syncLock", $.Object);

    $.Field({Static:true , Public:false}, "eventDescriptorsCreated", $asm07.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.FxTrace */ 

(function FxTrace$Members () {
  var $, $thisType;























  JSIL.MakeStaticClass("System.Xaml.Hosting.FxTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureEtwProviderInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EventLog", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventSourceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.ExceptionTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCriticalToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceErrorToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformationToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerboseToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarningToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEnabledEventsList", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UpdateEventDefinitions", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.UInt16])])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "baseEventSourceName", $.String, "System.Xaml.Hosting");

    $.Constant({Static:true , Public:false}, "EventSourceVersion", $.String, "4.0.0.0");

    $.Field({Static:true , Public:false}, "etwProviderId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "eventSourceName", $.String);

    $.Field({Static:true , Public:false}, "exceptionTrace", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Field({Static:true , Public:false}, "enabledEvents", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false}, "end2EndEvents", $asm0A.TypeRef("System.Collections.Generic.SortedSet`1", [$.UInt16]));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerboseToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformationToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarningToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceErrorToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCriticalToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));


    function FxTrace__cctor () {
      $thisType.etwProviderId = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FxTrace__cctor
    );

    $.Property({Static:true , Public:true }, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:true }, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerbose", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceCriticalToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceErrorToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformationToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerboseToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarningToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "Exception", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Property({Static:true , Public:true }, "Trace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));

    $.Property({Static:true , Public:true }, "EventLog", $asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"));

    $.Property({Static:true , Public:false}, "EventSourceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.FxTrace+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Hosting.FxTrace+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInitializeTracing$gb__54_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__54_0", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Xaml.Hosting.Configuration");
/* class System.Xaml.Hosting.Configuration.HandlerElement */ 

(function HandlerElement$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Xaml.Hosting.Configuration.HandlerElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HttpHandlerType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XamlRootElementType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeProperties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadHttpHandlerType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadXamlRootElementType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HttpHandlerType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XamlRootElementType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false}, "httpHandlerCLRType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "xamlRootElementClrType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "HttpHandlerType", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["httpHandlerType"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "XamlRootElementType", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["xamlRootElementType"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.Configuration.HandlerElementCollection */ 

(function HandlerElementCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Xaml.Hosting.Configuration.HandlerElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetHttpHandlerType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm0E.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm2E.System.Xaml.Hosting.Configuration.HandlerElement.__Type__]; });

})();

/* class System.Xaml.Hosting.Configuration.XamlHostingSection */ 

(function XamlHostingSection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Xaml.Hosting.Configuration.XamlHostingSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      JSIL.MethodSignature.Return($asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElementCollection"))
    );

    $.Property({Static:false, Public:true }, "Handlers", $asm2E.TypeRef("System.Xaml.Hosting.Configuration.HandlerElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.Configuration.XamlHostingSectionGroup */ 

(function XamlHostingSectionGroup$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Xaml.Hosting.Configuration.XamlHostingSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XamlHostingSection", 
      JSIL.MethodSignature.Return($asm2E.TypeRef("System.Xaml.Hosting.Configuration.XamlHostingSection"))
    );

    $.Property({Static:false, Public:true }, "XamlHostingSection", $asm2E.TypeRef("System.Xaml.Hosting.Configuration.XamlHostingSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Hosting.Configuration.XamlHostingConfiguration */ 

(function XamlHostingConfiguration$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Xaml.Hosting.Configuration.XamlHostingConfiguration", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "LoadXamlHostingSection", 
      new JSIL.MethodSignature($asm2E.TypeRef("System.Xaml.Hosting.Configuration.XamlHostingSection"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetHttpHandlerType", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.Constant({Static:true , Public:false}, "CollectionName", $.String, "");

    $.Constant({Static:true , Public:false}, "HttpHandlerType", $.String, "httpHandlerType");

    $.Constant({Static:true , Public:false}, "XamlHostingConfigGroup", $.String, "system.xaml.hosting");

    $.Constant({Static:true , Public:false}, "XamlHostingSection", $.String, "system.xaml.hosting/httpHandlers");

    $.Constant({Static:true , Public:false}, "XamlRootElementType", $.String, "xamlRootElementType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

