/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm04 = JSIL.DeclareAssembly("Microsoft.Transactions.Bridge, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.ServiceModel");
JSIL.DeclareNamespace("System.ServiceModel.Internal");
/* interface System.ServiceModel.Internal.ITransactionBridge */ 

JSIL.MakeInterface(
  "System.ServiceModel.Internal.ITransactionBridge", false, [], function ($) {
    $.Method({}, "Init", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "Start", JSIL.MethodSignature.Void);
    $.Method({}, "Shutdown", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["d860d655-0b79-4aa6-a741-ab216007ef55"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class System.ServiceModel.Internal.TransactionBridge */ 

(function TransactionBridge$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Internal.TransactionBridge", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyMicrosoftSigned", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecoverWorkItem", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "config", $asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.TransactionBridgeSection"));

    $.Field({Static:false, Public:false}, "bridgeConfig", $.Object);

    $.Field({Static:false, Public:false}, "transactionManagers", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager")]));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.ServiceModel.Internal.ITransactionBridge")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["bffecca7-4069-49f9-b5ab-7ccbb078ed91"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ProgIdAttribute"), function () { return [""]; });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Transactions");
/* class Microsoft.Transactions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "Microsoft.Transactions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.Transactions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "Microsoft.Transactions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.Transactions.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "CouldNotLoadTM", $.String, "CouldNotLoadTM");

    $.Constant({Static:true , Public:false}, "TransactionManagerTypeWrongSignature", $.String, "TransactionManagerTypeWrongSignature");

    $.Constant({Static:true , Public:false}, "ProtocolTypeWrongSignature", $.String, "ProtocolTypeWrongSignature");

    $.Constant({Static:true , Public:false}, "CouldNotQueueStartUserWorkItem", $.String, "CouldNotQueueStartUserWorkItem");

    $.Constant({Static:true , Public:false}, "RegisterCompletionFailureDuplicate", $.String, "RegisterCompletionFailureDuplicate");

    $.Constant({Static:true , Public:false}, "RegisterFailureInvalidState", $.String, "RegisterFailureInvalidState");

    $.Constant({Static:true , Public:false}, "PplCreateTransactionFailed", $.String, "PplCreateTransactionFailed");

    $.Constant({Static:true , Public:false}, "PplCreateSuperiorEnlistmentFailed", $.String, "PplCreateSuperiorEnlistmentFailed");

    $.Constant({Static:true , Public:false}, "PplCreateSubordinateEnlistmentFailed", $.String, "PplCreateSubordinateEnlistmentFailed");

    $.Constant({Static:true , Public:false}, "DeserializationDataCorrupt", $.String, "DeserializationDataCorrupt");

    $.Constant({Static:true , Public:false}, "DeserializationLogEntryTooBig", $.String, "DeserializationLogEntryTooBig");

    $.Constant({Static:true , Public:false}, "SerializationLogEntryTooBig", $.String, "SerializationLogEntryTooBig");

    $.Constant({Static:true , Public:false}, "EndpointReferenceSerializationFailed", $.String, "EndpointReferenceSerializationFailed");

    $.Constant({Static:true , Public:false}, "InvalidTrustIdentity", $.String, "InvalidTrustIdentity");

    $.Constant({Static:true , Public:false}, "InvalidTrustIdentityType", $.String, "InvalidTrustIdentityType");

    $.Constant({Static:true , Public:false}, "InvalidSchemeWithTrustIdentity", $.String, "InvalidSchemeWithTrustIdentity");

    $.Constant({Static:true , Public:false}, "ReplyServerCredentialMismatch", $.String, "ReplyServerCredentialMismatch");

    $.Constant({Static:true , Public:false}, "ReplyServerIdentityAccessDenied", $.String, "ReplyServerIdentityAccessDenied");

    $.Constant({Static:true , Public:false}, "ProtocolInfoUnsupportedVersion", $.String, "ProtocolInfoUnsupportedVersion");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidFlags", $.String, "ProtocolInfoInvalidFlags");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidHttpsPort", $.String, "ProtocolInfoInvalidHttpsPort");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidMaxTimeout", $.String, "ProtocolInfoInvalidMaxTimeout");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidHostName", $.String, "ProtocolInfoInvalidHostName");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidNodeName", $.String, "ProtocolInfoInvalidNodeName");

    $.Constant({Static:true , Public:false}, "ProtocolInfoInvalidBasePath", $.String, "ProtocolInfoInvalidBasePath");

    $.Constant({Static:true , Public:false}, "IssuedTokenIdentifierMismatch", $.String, "IssuedTokenIdentifierMismatch");

    $.Constant({Static:true , Public:false}, "SupportingTokenSignatureExpected", $.String, "SupportingTokenSignatureExpected");

    $.Constant({Static:true , Public:false}, "InvalidAsyncResult", $.String, "InvalidAsyncResult");

    $.Constant({Static:true , Public:false}, "AsyncResultAlreadyEnded", $.String, "AsyncResultAlreadyEnded");

    $.Constant({Static:true , Public:false}, "CoordinatorRegistrationFaultedReason", $.String, "CoordinatorRegistrationFaultedReason");

    $.Constant({Static:true , Public:false}, "CoordinatorRegistrationFaultedUnknownReason", $.String, "CoordinatorRegistrationFaultedUnknownReason");

    $.Constant({Static:true , Public:false}, "CoordinatorRegistrationFailedReason", $.String, "CoordinatorRegistrationFailedReason");

    $.Constant({Static:true , Public:false}, "OpenClusterFailed", $.String, "OpenClusterFailed");

    $.Constant({Static:true , Public:false}, "ClusterOpenEnumFailed", $.String, "ClusterOpenEnumFailed");

    $.Constant({Static:true , Public:false}, "ClusterEnumFailed", $.String, "ClusterEnumFailed");

    $.Constant({Static:true , Public:false}, "OpenClusterResourceFailed", $.String, "OpenClusterResourceFailed");

    $.Constant({Static:true , Public:false}, "ClusterResourceControlFailed", $.String, "ClusterResourceControlFailed");

    $.Constant({Static:true , Public:false}, "ClusterResourceControlInvalidResults", $.String, "ClusterResourceControlInvalidResults");

    $.Constant({Static:true , Public:false}, "GetClusterResourceNetworkNameFailed", $.String, "GetClusterResourceNetworkNameFailed");

    $.Constant({Static:true , Public:false}, "GetClusterResourceKeyFailed", $.String, "GetClusterResourceKeyFailed");

    $.Constant({Static:true , Public:false}, "ClusterRegOpenKeyFailed", $.String, "ClusterRegOpenKeyFailed");

    $.Constant({Static:true , Public:false}, "ClusterRegQueryValueFailed", $.String, "ClusterRegQueryValueFailed");

    $.Constant({Static:true , Public:false}, "ClusterRegQueryValueInvalidResults", $.String, "ClusterRegQueryValueInvalidResults");

    $.Constant({Static:true , Public:false}, "ClusterResourceNotFound", $.String, "ClusterResourceNotFound");

    $.Constant({Static:true , Public:false}, "RegistryKeyOpenSubKeyFailed", $.String, "RegistryKeyOpenSubKeyFailed");

    $.Constant({Static:true , Public:false}, "RegistryKeyGetValueFailed", $.String, "RegistryKeyGetValueFailed");

    $.Constant({Static:true , Public:false}, "ConfigurationManagerGetSectionFailed", $.String, "ConfigurationManagerGetSectionFailed");

    $.Constant({Static:true , Public:false}, "UnexpectedStateMachineEventRecordSchema", $.String, "UnexpectedStateMachineEventRecordSchema");

    $.Constant({Static:true , Public:false}, "UnhandledStateMachineExceptionRecordSchema", $.String, "UnhandledStateMachineExceptionRecordSchema");

    $.Constant({Static:true , Public:false}, "PerformanceCounterSchema", $.String, "PerformanceCounterSchema");

    $.Constant({Static:true , Public:false}, "ProtocolServiceRecordSchema", $.String, "ProtocolServiceRecordSchema");

    $.Constant({Static:true , Public:false}, "ReasonWithEnlistmentRecordSchema", $.String, "ReasonWithEnlistmentRecordSchema");

    $.Constant({Static:true , Public:false}, "ReasonWithTransactionIdRecordSchema", $.String, "ReasonWithTransactionIdRecordSchema");

    $.Constant({Static:true , Public:false}, "RecoveryLogEntryRecordSchema", $.String, "RecoveryLogEntryRecordSchema");

    $.Constant({Static:true , Public:false}, "CreateTransactionFailure", $.String, "CreateTransactionFailure");

    $.Constant({Static:true , Public:false}, "EnlistTransactionFailure", $.String, "EnlistTransactionFailure");

    $.Constant({Static:true , Public:false}, "RegisterParticipantFailure", $.String, "RegisterParticipantFailure");

    $.Constant({Static:true , Public:false}, "VolatileOutcomeTimeout", $.String, "VolatileOutcomeTimeout");

    $.Constant({Static:true , Public:false}, "VolatileParticipantInDoubt", $.String, "VolatileParticipantInDoubt");

    $.Constant({Static:true , Public:false}, "DurableParticipantReplayWhilePreparing", $.String, "DurableParticipantReplayWhilePreparing");

    $.Constant({Static:true , Public:false}, "EnlistTransaction", $.String, "EnlistTransaction");

    $.Constant({Static:true , Public:false}, "RegisterCoordinator", $.String, "RegisterCoordinator");

    $.Constant({Static:true , Public:false}, "RegisterParticipant", $.String, "RegisterParticipant");

    $.Constant({Static:true , Public:false}, "ProtocolInitialized", $.String, "ProtocolInitialized");

    $.Constant({Static:true , Public:false}, "ProtocolStarted", $.String, "ProtocolStarted");

    $.Constant({Static:true , Public:false}, "PrepareMessageRetry", $.String, "PrepareMessageRetry");

    $.Constant({Static:true , Public:false}, "CommitMessageRetry", $.String, "CommitMessageRetry");

    $.Constant({Static:true , Public:false}, "PreparedMessageRetry", $.String, "PreparedMessageRetry");

    $.Constant({Static:true , Public:false}, "ReplayMessageRetry", $.String, "ReplayMessageRetry");

    $.Constant({Static:true , Public:false}, "ParticipantRecovered", $.String, "ParticipantRecovered");

    $.Constant({Static:true , Public:false}, "CoordinatorRecovered", $.String, "CoordinatorRecovered");

    $.Constant({Static:true , Public:false}, "ParticipantStateMachineFinished", $.String, "ParticipantStateMachineFinished");

    $.Constant({Static:true , Public:false}, "CoordinatorStateMachineFinished", $.String, "CoordinatorStateMachineFinished");

    $.Constant({Static:true , Public:false}, "RegistrationCoordinatorFaulted", $.String, "RegistrationCoordinatorFaulted");

    $.Constant({Static:true , Public:false}, "RegistrationCoordinatorFailed", $.String, "RegistrationCoordinatorFailed");

    $.Constant({Static:true , Public:false}, "RegistrationCoordinatorResponseInvalidMetadata", $.String, "RegistrationCoordinatorResponseInvalidMetadata");

    $.Constant({Static:true , Public:false}, "RecoveredCoordinatorInvalidMetadata", $.String, "RecoveredCoordinatorInvalidMetadata");

    $.Constant({Static:true , Public:false}, "RecoveredParticipantInvalidMetadata", $.String, "RecoveredParticipantInvalidMetadata");

    $.Constant({Static:true , Public:false}, "EnlistmentIdentityCheckFailed", $.String, "EnlistmentIdentityCheckFailed");

    $.Constant({Static:true , Public:false}, "InvalidPolicyReason", $.String, "InvalidPolicyReason");

    $.Constant({Static:true , Public:false}, "TooManyEnlistmentsReason", $.String, "TooManyEnlistmentsReason");

    $.Constant({Static:true , Public:false}, "DisabledReason", $.String, "DisabledReason");

    $.Constant({Static:true , Public:false}, "AlreadyRegisteredReason", $.String, "AlreadyRegisteredReason");

    $.Constant({Static:true , Public:false}, "ContextRefusedReason", $.String, "ContextRefusedReason");

    $.Constant({Static:true , Public:false}, "InconsistentInternalStateReason", $.String, "InconsistentInternalStateReason");

    $.Constant({Static:true , Public:false}, "InvalidParametersReason", $.String, "InvalidParametersReason");

    $.Constant({Static:true , Public:false}, "InvalidProtocolReason", $.String, "InvalidProtocolReason");

    $.Constant({Static:true , Public:false}, "InvalidStateReason", $.String, "InvalidStateReason");

    $.Constant({Static:true , Public:false}, "RequestReplyFault", $.String, "RequestReplyFault");

    $.Constant({Static:true , Public:false}, "InvalidMessageAction", $.String, "InvalidMessageAction");

    $.Constant({Static:true , Public:false}, "InvalidMessageBody", $.String, "InvalidMessageBody");

    $.Constant({Static:true , Public:false}, "InvalidCoordinationContext", $.String, "InvalidCoordinationContext");

    $.Constant({Static:true , Public:false}, "InvalidEnlistmentHeader", $.String, "InvalidEnlistmentHeader");

    $.Constant({Static:true , Public:false}, "ListenerCannotBeStarted", $.String, "ListenerCannotBeStarted");

    $.Constant({Static:true , Public:false}, "FailedToCreateChannelFactory", $.String, "FailedToCreateChannelFactory");

    $.Constant({Static:true , Public:false}, "FailedToOpenChannelFactory", $.String, "FailedToOpenChannelFactory");

    $.Constant({Static:true , Public:false}, "UnknownTransactionReason", $.String, "UnknownTransactionReason");

    $.Constant({Static:true , Public:false}, "CannotCreateContextReason", $.String, "CannotCreateContextReason");

    $.Constant({Static:true , Public:false}, "CannotRegisterParticipant", $.String, "CannotRegisterParticipant");

    $.Constant({Static:true , Public:false}, "ProxyCreationFailed", $.String, "ProxyCreationFailed");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Wsat");
JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.StateMachines");
/* class Microsoft.Transactions.Wsat.StateMachines.State */ 

(function State$Members () {
  var $, $thisType;






















































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.State", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistPrePrepare", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ForwardEnlistmentEventToSubordinate", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidCompletionMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionParticipantEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidDurableCoordinatorMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidEventFailfast", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidFaultEvent", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), 
          $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidInternalEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidParticipantFaultEvent", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidParticipantMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidRegisterCompletionMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidRegistrationCoordinatorMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidRegistrationCoordinatorMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidSendMessageFailureEvent", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidTimerEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidTransactionManagerEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidVolatileCoordinatorMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTmAsyncRollback", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTmRegisterResponse", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent"))
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryStartTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryStopTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryTime", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDurableCoordinatorActive", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceInvalidEvent", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySendAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySendAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySendFault", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySendFault", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToAbortTransaction", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment")])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.IIncomingEventSink")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.InactiveState */ 

(function InactiveState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.InactiveState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionInitializing */ 

(function CompletionInitializing$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionInitializing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionCreating */ 

(function CompletionCreating$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionCreating", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ActiveState */ 

(function ActiveState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ActiveState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionCreated */ 

(function CompletionCreated$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionCreated", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionActive */ 

(function CompletionActive$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DecidedState */ 

(function DecidedState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DecidedState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionCommitting */ 

(function CompletionCommitting$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionAborting */ 

(function CompletionAborting$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TerminalState */ 

(function TerminalState$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TerminalState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionCommitted */ 

(function CompletionCommitted$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionAborted */ 

(function CompletionAborted$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionInitializationFailed */ 

(function CompletionInitializationFailed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionInitializationFailed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorInitializing */ 

(function CoordinatorInitializing$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorInitializing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorEnlisting */ 

(function CoordinatorEnlisting$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorEnlisting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorEnlisted */ 

(function CoordinatorEnlisted$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorEnlisted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringBoth */ 

(function CoordinatorRegisteringBoth$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringBoth", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringDurable */ 

(function CoordinatorRegisteringDurable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringDurable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringVolatile */ 

(function CoordinatorRegisteringVolatile$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorRegisteringVolatile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatileActive */ 

(function CoordinatorVolatileActive$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatileActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparing */ 

(function CoordinatorVolatilePreparing$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparingRegistering */ 

(function CoordinatorVolatilePreparingRegistering$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparingRegistering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparingRegistered */ 

(function CoordinatorVolatilePreparingRegistered$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorVolatilePreparingRegistered", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorActive */ 

(function CoordinatorActive$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorPreparing */ 

(function CoordinatorPreparing$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorPreparing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorPrepared */ 

(function CoordinatorPrepared$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorPrepared", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorCommitting */ 

(function CoordinatorCommitting$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorRecovering */ 

(function CoordinatorRecovering$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorRecovering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorAwaitingEndOfRecovery */ 

(function CoordinatorAwaitingEndOfRecovery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorAwaitingEndOfRecovery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorFailedRecovery */ 

(function CoordinatorFailedRecovery$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorFailedRecovery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorRecovered */ 

(function CoordinatorRecovered$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorRecovered", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorCommitted */ 

(function CoordinatorCommitted$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorAborted */ 

(function CoordinatorAborted$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorForgotten */ 

(function CoordinatorForgotten$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorForgotten", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorReadOnlyInDoubt */ 

(function CoordinatorReadOnlyInDoubt$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorReadOnlyInDoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorInitializationFailed */ 

(function CoordinatorInitializationFailed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorInitializationFailed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRegistering */ 

(function DurableRegistering$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRegistering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableActive */ 

(function DurableActive$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableUnregistered */ 

(function DurableUnregistered$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableUnregistered", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurablePreparing */ 

(function DurablePreparing$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurablePreparing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurablePrepared */ 

(function DurablePrepared$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurablePrepared", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableCommitting */ 

(function DurableCommitting$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRecovering */ 

(function DurableRecovering$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRecovering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRejoined */ 

(function DurableRejoined$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRejoined", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryAwaitingCommit */ 

(function DurableRecoveryAwaitingCommit$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryAwaitingCommit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryReceivedCommit */ 

(function DurableRecoveryReceivedCommit$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryReceivedCommit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryAwaitingRollback */ 

(function DurableRecoveryAwaitingRollback$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryAwaitingRollback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryReceivedRollback */ 

(function DurableRecoveryReceivedRollback$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableRecoveryReceivedRollback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableFailedRecovery */ 

(function DurableFailedRecovery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableFailedRecovery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableCommitted */ 

(function DurableCommitted$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableAborted */ 

(function DurableAborted$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableInDoubt */ 

(function DurableInDoubt$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableInDoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableInitializationFailed */ 

(function DurableInitializationFailed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableInitializationFailed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.StateMachines.IIncomingEventSink */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.StateMachines.IIncomingEventSink", false, [], function ($) {
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorFaultEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorSendFailureEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCommitEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorFaultEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorFaultEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorSendFailureEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorSendFailureEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent")));
    $.Method({}, "OnEvent", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent")));
  }, []);

/* class Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent */ 

(function SynchronizationEvent$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StateMachine", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "enlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"));

    $.Property({Static:false, Public:true }, "Enlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"));

    $.Property({Static:false, Public:true }, "StateMachine", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionEvent */ 

(function CompletionEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Completion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.Field({Static:false, Public:false}, "completion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"));

    $.Property({Static:false, Public:true }, "Completion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionStatusEvent */ 

(function CompletionStatusEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionStatusEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.Field({Static:false, Public:false}, "status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));

    $.Property({Static:false, Public:true }, "Status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent */ 

(function CoordinatorEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Coordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "Coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorStatusEvent */ 

(function CoordinatorStatusEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorStatusEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.Field({Static:false, Public:false}, "status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));

    $.Property({Static:false, Public:true }, "Status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent */ 

(function CoordinatorCallbackEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallbackState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Field({Static:false, Public:false}, "callbackState", $.Object);

    $.Property({Static:false, Public:true }, "Callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Property({Static:false, Public:true }, "CallbackState", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorFaultEvent */ 

(function CoordinatorFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageFault"))
    );

    $.Field({Static:false, Public:false}, "fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Property({Static:false, Public:true }, "Fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent */ 

(function VolatileCoordinatorEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "VolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorStatusEvent */ 

(function VolatileCoordinatorStatusEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorStatusEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.Field({Static:false, Public:false}, "status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));

    $.Property({Static:false, Public:true }, "Status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorFaultEvent */ 

(function VolatileCoordinatorFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageFault"))
    );

    $.Field({Static:false, Public:false}, "fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Property({Static:false, Public:true }, "Fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent */ 

(function ParticipantEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Participant", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.Field({Static:false, Public:false}, "participant", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"));

    $.Property({Static:false, Public:true }, "Participant", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ParticipantStatusEvent */ 

(function ParticipantStatusEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ParticipantStatusEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.Field({Static:false, Public:false}, "status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));

    $.Property({Static:false, Public:true }, "Status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent */ 

(function ParticipantCallbackEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallbackState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Field({Static:false, Public:false}, "callbackState", $.Object);

    $.Property({Static:false, Public:true }, "Callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Property({Static:false, Public:true }, "CallbackState", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ParticipantFaultEvent */ 

(function ParticipantFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ParticipantFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageFault"))
    );

    $.Field({Static:false, Public:false}, "fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Property({Static:false, Public:true }, "Fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent */ 

(function MsgCreateTransactionEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "create", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Field({Static:false, Public:false}, "result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "Body", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Property({Static:false, Public:true }, "Result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent */ 

(function MsgEnlistTransactionEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "create", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Field({Static:false, Public:false}, "result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "Body", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Property({Static:false, Public:true }, "Result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent */ 

(function TmCreateTransactionResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"))
    );

    $.Field({Static:false, Public:false}, "e", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"));

    $.Property({Static:false, Public:true }, "SourceEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent */ 

(function TmEnlistTransactionResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.Field({Static:false, Public:false}, "e", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"));

    $.Property({Static:false, Public:true }, "SourceEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent */ 

(function MsgRegisterEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "register", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register"));

    $.Field({Static:false, Public:false}, "result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "Protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:true }, "Result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent */ 

(function MsgRegisterCompletionEvent$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantService", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Proxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "proxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"));

    $.Field({Static:false, Public:false}, "register", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register"));

    $.Field({Static:false, Public:false}, "result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "Proxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"));

    $.Property({Static:false, Public:true }, "Result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "ParticipantService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegisterResponseEvent */ 

(function MsgRegisterResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegisterResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistmentBase"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Proxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"))
    );

    $.Field({Static:false, Public:false}, "proxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"));

    $.Property({Static:false, Public:true }, "Proxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent */ 

(function MsgRegisterDurableResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterResponseEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Coordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "Coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent */ 

(function MsgRegisterVolatileResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterResponseEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "volatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "VolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorFaultEvent */ 

(function MsgRegistrationCoordinatorFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorFaultEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorSendFailureEvent */ 

(function MsgRegistrationCoordinatorSendFailureEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorSendFailureEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent */ 

(function TmRegisterResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent"))
    );

    $.Field({Static:false, Public:false}, "source", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent"));

    $.Property({Static:false, Public:true }, "SourceEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent */ 

(function TmSubordinateRegisterResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"))
    );

    $.Field({Static:false, Public:false}, "source", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"));

    $.Property({Static:false, Public:true }, "SourceEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionParticipantEvent */ 

(function CompletionParticipantEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionParticipantEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "faultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "messageID", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "ReplyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "FaultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "MessageId", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent */ 

(function MsgCompletionCommitEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent */ 

(function MsgCompletionRollbackEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent */ 

(function TmCompletionCommitResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent */ 

(function TmCompletionRollbackResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent */ 

(function VolatileTwoPhaseCommitCoordinatorEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "faultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "messageID", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "ReplyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "FaultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "MessageId", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent */ 

(function DurableTwoPhaseCommitCoordinatorEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "faultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "messageID", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "ReplyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "FaultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "MessageId", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent */ 

(function TwoPhaseCommitParticipantEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyTo", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "faultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "messageID", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "ReplyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "FaultTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "MessageId", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent */ 

(function MsgVolatilePrepareEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent */ 

(function MsgDurablePrepareEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCommitEvent */ 

(function MsgVolatileCommitEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCommitEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent */ 

(function MsgDurableCommitEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent */ 

(function MsgDurableRollbackEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DurableTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent */ 

(function MsgVolatileRollbackEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileTwoPhaseCommitCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorFaultEvent */ 

(function MsgDurableCoordinatorFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorFaultEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorFaultEvent */ 

(function MsgVolatileCoordinatorFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorFaultEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorSendFailureEvent */ 

(function MsgDurableCoordinatorSendFailureEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorSendFailureEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorSendFailureEvent */ 

(function MsgVolatileCoordinatorSendFailureEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorSendFailureEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent */ 

(function MsgPreparedEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent */ 

(function MsgAbortedEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent */ 

(function MsgReadOnlyEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent */ 

(function MsgCommittedEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent */ 

(function MsgReplayEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TwoPhaseCommitParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent */ 

(function MsgParticipantFaultEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantFaultEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent */ 

(function MsgParticipantSendFailureEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent */ 

(function TmPrePrepareEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent */ 

(function TmPrepareEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent */ 

(function TmSinglePhaseCommitEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent */ 

(function TmCommitEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent */ 

(function TmRollbackEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent */ 

(function TmParticipantForgetEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent */ 

(function TmAsyncRollbackEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallbackState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Field({Static:false, Public:false}, "callbackState", $.Object);

    $.Property({Static:false, Public:true }, "Callback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Property({Static:false, Public:true }, "CallbackState", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent */ 

(function TmEnlistPrePrepareEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent */ 

(function TmCoordinatorForgetEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent */ 

(function TmRejoinEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent */ 

(function TmReplayEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent */ 

(function TmPrePrepareResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent */ 

(function TmPrepareResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent */ 

(function TmCommitResponseEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorStatusEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent */ 

(function TmRollbackResponseEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.Field({Static:false, Public:false}, "status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));

    $.Property({Static:false, Public:true }, "Status", $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent */ 

(function TimerCoordinatorEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.Field({Static:false, Public:false}, "profile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent */ 

(function TimerParticipantEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Profile", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.Field({Static:false, Public:false}, "profile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"));

    $.Property({Static:false, Public:true }, "Profile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent */ 

(function InternalEnlistSubordinateTransactionEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.Field({Static:false, Public:false}, "source", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"));

    $.Property({Static:false, Public:true }, "SourceEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextEvent */ 

(function TransactionContextEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextManager", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.Field({Static:false, Public:false}, "contextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));

    $.Property({Static:false, Public:true }, "ContextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent */ 

(function TransactionContextEnlistTransactionEvent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "create", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Field({Static:false, Public:false}, "result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));

    $.Property({Static:false, Public:true }, "Body", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.Property({Static:false, Public:true }, "Result", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent */ 

(function TransactionContextCreatedEvent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"))
    );

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"));

    $.Property({Static:false, Public:true }, "TransactionContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent */ 

(function TransactionContextTransactionDoneEvent$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEvent"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.StateMachine */ 

(function StateMachine$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.StateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CancelTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ChangeState", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ChooseProfile", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispatch", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Enqueue", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_History", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextNotification", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTimer", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnTimerNotification", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "StartTimer", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceInvalidEvent", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "enlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"));

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "synchronization", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationManager"));

    $.Field({Static:false, Public:false}, "current", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "history", $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"));

    $.Field({Static:false, Public:false}, "timer", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine+TimerState"));

    $.Field({Static:false, Public:false}, "timerLock", $.Object);

    $.Property({Static:false, Public:true }, "State", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "Enlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"));

    $.Property({Static:false, Public:true }, "History", $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"));

    $.Property({Static:false, Public:true , Virtual:true }, "UniqueId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "NextNotification", $asm07.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ITimerRecipient")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.StateMachines.StateMachine+TimerState */ 

(function TimerState$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.StateMachine+TimerState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerInstance"));

    $.Field({Static:false, Public:true }, "Policy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:true }, "Notifications", $.Int64);

    $.Field({Static:false, Public:true }, "Active", $.Boolean);

    $.Field({Static:false, Public:true }, "CurrentInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:true }, "NextNotification", $asm07.TypeRef("System.TimeSpan"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.ParticipantStateMachine */ 

(function ParticipantStateMachine$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.ParticipantStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTimer", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.Field({Static:false, Public:false}, "participant", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.DurableStateMachine */ 

(function DurableStateMachine$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantStateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.DurableStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileStateMachine */ 

(function VolatileStateMachine$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantStateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SubordinateStateMachine */ 

(function SubordinateStateMachine$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SubordinateStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CompletionStateMachine */ 

(function CompletionStateMachine$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CompletionStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.CoordinatorStateMachine */ 

(function CoordinatorStateMachine$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.CoordinatorStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTimer", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.Field({Static:false, Public:false}, "coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextStateMachine */ 

(function TransactionContextStateMachine$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextStateMachine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextManager", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.Field({Static:false, Public:false}, "contextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedState", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "ContextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.StateMachines.TimerProfile */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.StateMachines.TimerProfile", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Preparing: 1, 
    Prepared: 2, 
    Replaying: 3, 
    Committing: 4, 
    VolatileOutcomeAssurance: 5, 
  }
);

/* class Microsoft.Transactions.Wsat.StateMachines.TimerInstance */ 

(function TimerInstance$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TimerInstance", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Profile", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"))
    );

    $.Field({Static:false, Public:false}, "profile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Preparing", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Prepared", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Replaying", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Committing", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "VolatileOutcomeAssurance", $.Type);

    $.Property({Static:false, Public:true }, "Profile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerProfile"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SubordinateInitializing */ 

(function SubordinateInitializing$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SubordinateInitializing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SubordinateRegistering */ 

(function SubordinateRegistering$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SubordinateRegistering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SubordinateActive */ 

(function SubordinateActive$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SubordinateActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SubordinateFinished */ 

(function SubordinateFinished$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SubordinateFinished", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.SynchronizationManager */ 

(function SynchronizationManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.SynchronizationManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Enqueue", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "queue", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent")]));

    $.Field({Static:false, Public:false}, "mutex", $.Object);

    $.Field({Static:false, Public:false}, "stateMachine", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextInitializing */ 

(function TransactionContextInitializing$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextInitializing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextInitializingCoordinator */ 

(function TransactionContextInitializingCoordinator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextInitializingCoordinator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextActive */ 

(function TransactionContextActive$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.TransactionContextFinished */ 

(function TransactionContextFinished$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.TransactionContextFinished", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileRegistering */ 

(function VolatileRegistering$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InactiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileRegistering", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseZeroActive */ 

(function VolatilePhaseZeroActive$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseZeroActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseZeroUnregistered */ 

(function VolatilePhaseZeroUnregistered$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseZeroUnregistered", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseOneUnregistered */ 

(function VolatilePhaseOneUnregistered$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePhaseOneUnregistered", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePrePreparing */ 

(function VolatilePrePreparing$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePrePreparing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePrePrepared */ 

(function VolatilePrePrepared$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ActiveState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePrePrepared", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatilePrepared */ 

(function VolatilePrepared$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatilePrepared", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileCommitting */ 

(function VolatileCommitting$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileAborting */ 

(function VolatileAborting$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.DecidedState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Leave", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileCommitted */ 

(function VolatileCommitted$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileAborted */ 

(function VolatileAborted$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileInDoubt */ 

(function VolatileInDoubt$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileInDoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Enter", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.StateMachines.VolatileInitializationFailed */ 

(function VolatileInitializationFailed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TerminalState"), 
      Name: "Microsoft.Transactions.Wsat.StateMachines.VolatileInitializationFailed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.Recovery");
/* class Microsoft.Transactions.Wsat.Recovery.LogEntryDeserializer */ 

(function LogEntryDeserializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntryDeserializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeExtended", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "mem", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "entry", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryDeserializer */ 

(function WsATv1LogEntryDeserializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntryDeserializer"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryDeserializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.MemoryStream"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckFlags", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryFlags"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeExtended", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryFlags", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    OptimizedEndpointRepresentation: 1, 
    UsesDefaultPort: 2, 
    UsesStandardCoordinatorAddressPath: 4, 
    UsesStandardParticipantAddressPath: 8, 
  }
);

/* enum Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryVersion", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    v1: 1, 
    v2: 2, 
  }
);

/* class Microsoft.Transactions.Wsat.Recovery.LogEntrySerializer */ 

(function LogEntrySerializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntrySerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeExtended", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "mem", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "logEntry", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"));

    $.Field({Static:false, Public:false}, "headerSerializer", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntrySerializer */ 

(function WsATv1LogEntrySerializer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntrySerializer"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntrySerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathFlags", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.WsATv1LogEntryFlags"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRemoteEnlistmentId", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeExtended", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "StandardCoordinatorAddressPath", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "StandardParticipantAddressPath", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "standardCoordinatorAddressPath10", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "standardCoordinatorAddressPath11", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "standardParticipantAddressPath10", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "standardParticipantAddressPath11", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.LogEntry */ 

(function LogEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Endpoint", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalEnlistmentId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalTransactionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoteTransactionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Endpoint", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "remoteTransactionId", $.String);

    $.Field({Static:false, Public:false}, "localTransactionId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "localEnlistmentId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "endpoint", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "RemoteTransactionId", $.String);

    $.Property({Static:false, Public:true }, "LocalTransactionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "LocalEnlistmentId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "Endpoint", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderDeserializer */ 

(function LogEntryHeaderDeserializer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderDeserializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeserializeHeader", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"))
    );

    $.Field({Static:false, Public:false}, "mem", $asm07.TypeRef("System.IO.MemoryStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderVersion", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    v1: 1, 
  }
);

/* enum Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderv1Flags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderv1Flags", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    StandardRemoteTransactionId: 1, 
  }
);

/* class Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderSerializer */ 

(function LogEntryHeaderSerializer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteHeader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.Field({Static:false, Public:false}, "logEntry", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderv1Deserializer */ 

(function LogEntryHeaderv1Deserializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderDeserializer"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderv1Deserializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckFlags", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntryHeaderv1Flags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeserializeHeader", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"))
    );

    $.Field({Static:false, Public:false}, "localTransactionId", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.LogEntrySerialization */ 

(function LogEntrySerialization$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.LogEntrySerialization", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDeserializer", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntryDeserializer"), [$asm07.TypeRef("System.IO.MemoryStream"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeserializeCoordinator", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeHeader", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"), [$asm07.TypeRef("System.IO.MemoryStream"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeLogEntry", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeserializeParticipant", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeLogEntry", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntry")])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:false, Public:false}, "maxLogEntrySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.SerializationException */ 

(function SerializationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Wsat.Recovery.SerializationException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Recovery.SerializationUtils */ 

(function SerializationUtils$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Recovery.SerializationUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AlignPosition", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IncrementPosition", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadByte", 
      new JSIL.MethodSignature($.Byte, [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.IO.MemoryStream"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadEndpointAddress", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm07.TypeRef("System.IO.MemoryStream"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadInt", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadUInt", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadUShort", 
      new JSIL.MethodSignature($.UInt16, [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteEndpointAddress", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.MemoryStream"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteInt", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteTimeout", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteUInt", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteUShort", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $.UInt16])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.Messaging");
/* interface Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator", false, [], function ($) {
    $.Method({}, "CreateCoordinationContext", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")]));
  }, []);

/* class Microsoft.Transactions.Wsat.Messaging.RequestMessageDispatcher */ 

(function RequestMessageDispatcher$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RequestMessageDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnMessageException", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm22.TypeRef("System.ServiceModel.Channels.Message"), 
          $asm22.TypeRef("System.ServiceModel.CommunicationException"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendFaultReply", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher */ 

(function ActivationCoordinatorDispatcher$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginCreateCoordinationContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndCreateCoordinationContext", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendFaultReply", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher10 */ 

(function ActivationCoordinatorDispatcher10$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginCreateCoordinationContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCreateCoordinationContext", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "activationCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher11 */ 

(function ActivationCoordinatorDispatcher11$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginCreateCoordinationContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCreateCoordinationContext", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "activationCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ActivationCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.ReferenceCountedObject */ 

(function ReferenceCountedObject$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ReferenceCountedObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Release", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "refCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Proxy */ 

(function Proxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedObject"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Proxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_From", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageVersion", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_To", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_From", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "coordinationService", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "messageVersion", $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"));

    $.Field({Static:false, Public:false}, "to", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "from", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Property({Static:false, Public:true }, "MessageVersion", $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"));

    $.Property({Static:false, Public:true }, "To", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "From", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Proxy`1 */ 

(function Proxy$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Proxy`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateChannel", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChannelCache", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannel", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChannelFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SelectChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$.GenericParameter("T")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])])
    );

    $.Field({Static:false, Public:false}, "referenceCountedChannel", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "interoperating", $.Boolean);

    $.Field({Static:false, Public:false}, "cf", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RequestReplyProxy */ 

(function RequestReplyProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RequestReplyProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginSendRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSendRequest", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChannelCache", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRequest", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReply", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ActivationProxy */ 

(function ActivationProxy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestReplyProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ActivationProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendCreateCoordinationContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")]), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCreateCoordinationContextMessage", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextMessage"), [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSendCreateCoordinationContext", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCreateCoordinationContext", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse"), [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SendCreateCoordinationContextResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SendFaultResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InteropActivationProxy */ 

(function InteropActivationProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ActivationProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InteropActivationProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SelectChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WindowsActivationProxy */ 

(function WindowsActivationProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ActivationProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WindowsActivationProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SelectChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult */ 

(function RequestAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.AsyncResult"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "End", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Finished", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Finished", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageVersion", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reply", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "reply", $asm22.TypeRef("System.ServiceModel.Channels.Message"));

    $.Field({Static:false, Public:false}, "messageVersion", $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"));

    $.Field({Static:false, Public:false}, "messageID", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "MessageVersion", $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"));

    $.Property({Static:false, Public:true }, "MessageId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "Reply", $asm22.TypeRef("System.ServiceModel.Channels.Message"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SendMessageFailureAsyncResult */ 

(function SendMessageFailureAsyncResult$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.AsyncResult"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SendMessageFailureAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "End", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationBinding */ 

(function CoordinationBinding$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.Binding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCompositeDuplexBindingElement", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInteropHttpsTransportBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamedPipeBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOneWayBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTextEncodingBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTransactionFlowBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTransportSecurityBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWindowsStreamSecurityBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateBindingElements", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Constant({Static:true , Public:false}, "MaxFaultSize", $.Int32, 65536);

    $.Property({Static:false, Public:true , Virtual:true }, "Scheme", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationBinding+DuplexCorrelationBindingElement */ 

(function DuplexCorrelationBindingElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.BindingElement"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationBinding+DuplexCorrelationBindingElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.BindingElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature("!!0", [$asm22.TypeRef("System.ServiceModel.Channels.BindingContext")], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding */ 

(function InteropRequestReplyBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.Field({Static:false, Public:false}, "clientBaseAddress", $asm0A.TypeRef("System.Uri"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InteropRegistrationBinding */ 

(function InteropRegistrationBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InteropRegistrationBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.Boolean, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportingTokenBindingElement", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement"))
    );

    $.Field({Static:false, Public:false}, "supportingTokenBE", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement"));

    $.Property({Static:false, Public:true }, "SupportingTokenBindingElement", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InteropActivationBinding */ 

(function InteropActivationBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InteropActivationBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InteropDatagramBinding */ 

(function InteropDatagramBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InteropDatagramBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.NamedPipeBinding */ 

(function NamedPipeBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.NamedPipeBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Scheme", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WindowsRequestReplyBinding */ 

(function WindowsRequestReplyBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationBinding"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WindowsRequestReplyBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddBindingElements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWindowsHttpsTransportBindingElement", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BindingElementCollection"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator", false, [], function ($) {
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Fault", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")]));
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant", false, [], function ($) {
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Fault", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")]));
  }, []);

/* class Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher */ 

(function DatagramMessageDispatcher$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateFaultProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnMessageException", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.CommunicationException")])
    );

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher */ 

(function CompletionCoordinatorDispatcher$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateFaultProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher10 */ 

(function CompletionCoordinatorDispatcher10$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "completionCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher11 */ 

(function CompletionCoordinatorDispatcher11$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "completionCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher */ 

(function CompletionParticipantDispatcher$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateFaultProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher10 */ 

(function CompletionParticipantDispatcher10$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "completionParticipantDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher11 */ 

(function CompletionParticipantDispatcher11$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "completionParticipantDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.DatagramProxy */ 

(function DatagramProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]), 
      Name: "Microsoft.Transactions.Wsat.Messaging.DatagramProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendFault", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm21.TypeRef("System.Xml.UniqueId"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendMessage", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSendMessage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChannelCache", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SelectChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])])
    );

    $.Field({Static:true , Public:false}, "noneAddress", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true , Virtual:true }, "ChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorProxy */ 

(function CompletionCoordinatorProxy$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendCommit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRollback", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy */ 

(function CompletionParticipantProxy$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendAborted", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendCommitted", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationContext */ 

(function CoordinationContext$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateNativeIdentifier", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpiresPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationFlags", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalTransactionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropagationToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationService", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNativeIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature($.Type, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm21.TypeRef("System.Xml.XmlDictionaryReader"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadOtherAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.XmlNode")]), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm21.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Identifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolationFlags", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolationLevel", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalTransactionId", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PropagationToken", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RegistrationService", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "WriteContent", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "coordinationXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Constant({Static:true , Public:true }, "MaxIdentifierLength", $.Int32, 256);

    $.Field({Static:false, Public:false}, "contextId", $.String);

    $.Field({Static:false, Public:false}, "unknownIdentifierAttributes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "expiresPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "expiration", $.UInt32);

    $.Field({Static:false, Public:false}, "unknownExpiresAttributes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "registrationRef", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "isoLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Field({Static:false, Public:false}, "isoFlags", $asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"));

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "localTxId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "propToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "unknownData", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.XmlNode")]));

    $.Constant({Static:true , Public:true }, "UuidScheme", $.String, "urn:uuid:");

    $.Property({Static:false, Public:true }, "Identifier", $.String);

    $.Property({Static:false, Public:true }, "ExpiresPresent", $.Boolean);

    $.Property({Static:false, Public:true }, "Expires", $.UInt32);

    $.Property({Static:false, Public:true }, "RegistrationService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "IsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:true }, "IsolationFlags", $asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "LocalTransactionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "PropagationToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.ImplementInterfaces(
      /* 0 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.Messaging.IDatagramService */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IDatagramService", false, [], function ($) {
    $.Method({}, "BeginSend", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndSend", JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult")));
  }, [$asm07.TypeRef("System.IDisposable")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IRequestReplyService */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IRequestReplyService", false, [], function ($) {
    $.Method({}, "SendRequest", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm22.TypeRef("System.ServiceModel.Channels.Message")]));
    $.Method({}, "BeginRequest", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndRequest", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")]));
  }, [$asm07.TypeRef("System.IDisposable")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator10", false, [], function ($) {
    $.Method({}, "BeginCreateCoordinationContext", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndCreateCoordinationContext", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")]));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator11", false, [], function ($) {
    $.Method({}, "BeginCreateCoordinationContext", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndCreateCoordinationContext", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")]));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSActivationCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator10", false, [], function ($) {
    $.Method({}, "BeginRegister", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndRegister", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")]));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator11", false, [], function ($) {
    $.Method({}, "BeginRegister", new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ]));
    $.Method({}, "EndRegister", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")]));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator10", false, [], function ($) {
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator11", false, [], function ($) {
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant10", false, [], function ($) {
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant11", false, [], function ($) {
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSCompletionParticipant")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator10", false, [], function ($) {
    $.Method({}, "Prepared", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "ReadOnly", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Replay", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator11", false, [], function ($) {
    $.Method({}, "Prepared", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "ReadOnly", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant", false, [], function ($) {
    $.Method({}, "get_ContractType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Property({}, "ContractType");
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant10 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant10", false, [], function ($) {
    $.Method({}, "Prepare", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* interface Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant11 */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant11", false, [], function ($) {
    $.Method({}, "Prepare", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsaFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WscoorFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "WsatFault", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
  }, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant")])
  .Attribute($asm22.TypeRef("System.ServiceModel.ServiceContractAttribute"));

/* enum Microsoft.Transactions.Wsat.Messaging.CoordinationServiceMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Messaging.CoordinationServiceMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Formatter: 1, 
    ProtocolService: 2, 
  }
);

/* struct Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration */ 

(function CoordinationServiceConfiguration$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Mode", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceMode"));

    $.Field({Static:false, Public:true }, "HostName", $.String);

    $.Field({Static:false, Public:true }, "BasePath", $.String);

    $.Field({Static:false, Public:true }, "HttpsPort", $.Int32);

    $.Field({Static:false, Public:true }, "OperationTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:true }, "X509Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:true }, "SupportingTokensEnabled", $.Boolean);

    $.Field({Static:false, Public:true }, "RemoteClientsEnabled", $.Boolean);

    $.Field({Static:false, Public:true }, "GlobalAclWindowsIdentities", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:true }, "GlobalAclX509CertificateThumbprints", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationService */ 

(function CoordinationService$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationService", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertProtocolServiceMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseChannelFactory", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ChannelFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateActivationProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ActivationProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.ChannelFactory`1", ["!!0"]), [$asm22.TypeRef("System.ServiceModel.Channels.Binding")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCompletionCoordinatorProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionCoordinatorProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCompletionParticipantProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateRegistrationProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateService", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceHost"), [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTwoPhaseCommitCoordinatorProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTwoPhaseCommitParticipantProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Config", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DatagramChannelCache", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalAcl", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.GlobalAclOperationRequirement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropActivationBinding", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropActivationChannelFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropDatagramBinding", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropDatagramBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropDatagramChannelFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropRegistrationBinding", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InteropRegistrationChannelFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamedPipeActivationBinding", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NamedPipeBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamedPipeActivationChannelFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestReplyChannelCache", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Security", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceSecurity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsActivationBinding", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WindowsRequestReplyBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsActivationChannelFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenChannelFactory", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.ChannelFactory`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.Field({Static:false, Public:false}, "config", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"));

    $.Field({Static:false, Public:false}, "security", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceSecurity"));

    $.Field({Static:false, Public:false}, "requestReplyChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Field({Static:false, Public:false}, "datagramChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]));

    $.Field({Static:false, Public:false}, "namedPipeActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NamedPipeBinding"));

    $.Field({Static:false, Public:false}, "namedPipeActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.ChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Field({Static:false, Public:false}, "windowsActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WindowsRequestReplyBinding"));

    $.Field({Static:false, Public:false}, "windowsActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.ChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Field({Static:false, Public:false}, "interopDatagramBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropDatagramBinding"));

    $.Field({Static:false, Public:false}, "interopDatagramChannelFactory", $asm22.TypeRef("System.ServiceModel.ChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]));

    $.Field({Static:false, Public:false}, "interopRegistrationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRegistrationBinding"));

    $.Field({Static:false, Public:false}, "interopRegistrationChannelFactory", $asm22.TypeRef("System.ServiceModel.ChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Field({Static:false, Public:false}, "interopActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropActivationBinding"));

    $.Field({Static:false, Public:false}, "interopActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.ChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Field({Static:false, Public:false}, "globalAclAuthz", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.GlobalAclOperationRequirement"));

    $.Field({Static:false, Public:false}, "httpsBaseAddressUri", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "namedPipeBaseAddressUri", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "Config", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"));

    $.Property({Static:false, Public:true }, "Security", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceSecurity"));

    $.Property({Static:false, Public:true }, "GlobalAcl", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.GlobalAclOperationRequirement"));

    $.Property({Static:false, Public:true }, "NamedPipeActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NamedPipeBinding"));

    $.Property({Static:false, Public:true }, "WindowsActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WindowsRequestReplyBinding"));

    $.Property({Static:false, Public:true }, "InteropDatagramBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropDatagramBinding"));

    $.Property({Static:false, Public:true }, "InteropRegistrationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"));

    $.Property({Static:false, Public:true }, "InteropActivationBinding", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.InteropRequestReplyBinding"));

    $.Property({Static:false, Public:true }, "NamedPipeActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Property({Static:false, Public:true }, "WindowsActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Property({Static:false, Public:true }, "InteropDatagramChannelFactory", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]));

    $.Property({Static:false, Public:true }, "InteropRegistrationChannelFactory", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Property({Static:false, Public:true }, "InteropActivationChannelFactory", $asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Property({Static:false, Public:true }, "RequestReplyChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]));

    $.Property({Static:false, Public:true }, "DatagramChannelCache", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IDatagramService")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationService+DisableTransactionFlowBehavior */ 

(function DisableTransactionFlowBehavior$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationService+DisableTransactionFlowBehavior", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "AddBindingParameters");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.ClientRuntime")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyClientBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.EndpointDispatcher")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyDispatchBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.Validate", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"))
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "Validate");

    $.Field({Static:true , Public:false}, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials */ 

(function SupportingTokenServiceCredentials$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Description.ServiceCredentials"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloneCore", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Description.ServiceCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenResolver", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"))
    );

    $.Field({Static:false, Public:false}, "tokenResolver", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "tokenAuthenticator", $asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenAuthenticator"));

    $.Property({Static:false, Public:true }, "TokenResolver", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials+SupportingTokenSecurityTokenManager */ 

(function SupportingTokenSecurityTokenManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials+SupportingTokenSecurityTokenManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenAuthenticator", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenRequirement"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdentityOfSelf", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointIdentity"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenRequirement")])
    );

    $.Field({Static:false, Public:false}, "serverCreds", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials */ 

(function DefaultServiceCredentials$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Description.ServiceCredentials"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloneCore", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Description.ServiceCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenManager"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials+DefaultSecurityTokenManager */ 

(function DefaultSecurityTokenManager$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials+DefaultSecurityTokenManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdentityOfSelf", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointIdentity"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenRequirement")])
    );

    $.Field({Static:false, Public:false}, "serverCreds", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DefaultServiceCredentials"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.DebugTrace */ 

(function DebugTrace$Members () {
  var $, $thisType;

























  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Messaging.DebugTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FormatEnlistmentTrace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Error", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pii", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Verbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Warning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Pii", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceEnter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceEnter", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceLeave", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceLeave", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TracePii", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TracePii", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceSendFailure", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceSendFailure", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TxTrace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $asm07.TypeRef("System.Guid"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TxTrace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $asm07.TypeRef("System.Guid"), 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TxTrace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $asm07.TypeRef("System.Guid"), 
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TxTrace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $asm07.TypeRef("System.Guid"), 
          $.String, $.Object, 
          $.Object, $.Object
        ])
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DebugTraceHelper"));

    $.Field({Static:true , Public:false}, "tracePiiEnabled", $.Boolean, false);

    $.Property({Static:true , Public:true }, "Verbose", $.Boolean);

    $.Property({Static:true , Public:true }, "Info", $.Boolean);

    $.Property({Static:true , Public:true }, "Warning", $.Boolean);

    $.Property({Static:true , Public:true }, "Error", $.Boolean);

    $.Property({Static:true , Public:true }, "Pii", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.DebugTraceHelper */ 

(function DebugTraceHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.DebugTraceHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Diagnostics.TraceSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceLevel"), $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceLevel")])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "traceSwitch", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.EnlistmentHeader */ 

(function EnlistmentHeader$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.AddressHeader"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.EnlistmentHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteAddressHeaderContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteStartAddressHeader", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
        ])
    );

    $.Constant({Static:true , Public:true }, "HeaderName", $.String, "Enlistment");

    $.Constant({Static:true , Public:true }, "HeaderNamespace", $.String, "http://schemas.microsoft.com/ws/2006/02/transactions");

    $.Field({Static:false, Public:false}, "enlistment", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InvalidMessageException */ 

(function InvalidMessageException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.CommunicationException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InvalidMessageException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InvalidCoordinationContextException */ 

(function InvalidCoordinationContextException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.CommunicationException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InvalidCoordinationContextException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.InvalidEnlistmentHeaderException */ 

(function InvalidEnlistmentHeaderException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.CommunicationException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.InvalidEnlistmentHeaderException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CreateChannelFailureException */ 

(function CreateChannelFailureException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CreateChannelFailureException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.MessagingInitializationException */ 

(function MessagingInitializationException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.MessagingInitializationException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WsatMessagingException */ 

(function WsatMessagingException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WsatMessagingException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WsatFaultException */ 

(function WsatFaultException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WsatMessagingException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WsatFaultException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageFault"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionMessage", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.Field({Static:false, Public:false}, "fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Property({Static:false, Public:true }, "Fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WsatSendFailureException */ 

(function WsatSendFailureException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WsatMessagingException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WsatSendFailureException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WsatReceiveFailureException */ 

(function WsatReceiveFailureException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.WsatMessagingException"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.WsatReceiveFailureException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Fault */ 

(function Fault$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Fault", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm22.TypeRef("System.ServiceModel.FaultCode"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.FaultCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reason", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.FaultReason"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReasonText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "code", $asm22.TypeRef("System.ServiceModel.FaultCode"));

    $.Field({Static:false, Public:false}, "reasonText", $.String);

    $.Field({Static:false, Public:false}, "reason", $asm22.TypeRef("System.ServiceModel.FaultReason"));

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.Property({Static:false, Public:true }, "Code", $asm22.TypeRef("System.ServiceModel.FaultCode"));

    $.Property({Static:false, Public:true }, "ReasonText", $.String);

    $.Property({Static:false, Public:true }, "Reason", $asm22.TypeRef("System.ServiceModel.FaultReason"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Faults */ 

(function Faults$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Faults", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateAccessDeniedFault", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CannotCreateContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionAlreadyRegistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateContextDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InconsistentInternalState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidParameters", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidPolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidProtocol", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidState", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationLoopback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationProxyFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SubordinateRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownCompletionEnlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownTransaction", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParticipantTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubordinateTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TMEnlistFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Version", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Field({Static:false, Public:false}, "invalidState", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "invalidProtocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "invalidParameters", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "inconsistentInternalState", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "invalidPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "CoordinatorRegistrationFailedCode", $asm22.TypeRef("System.ServiceModel.FaultCode"));

    $.Property({Static:false, Public:true }, "InvalidState", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true }, "InvalidProtocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true }, "InvalidParameters", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CannotCreateContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownCompletionEnlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateContextDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationProxyFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "SubordinateRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationLoopback", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionAlreadyRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true }, "InconsistentInternalState", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownTransaction", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true }, "InvalidPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Faults10 */ 

(function Faults10$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Faults10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CannotCreateContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionAlreadyRegistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateContextDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationLoopback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationProxyFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SubordinateRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownCompletionEnlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownTransaction", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParticipantTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubordinateTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TMEnlistFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.Field({Static:false, Public:false}, "contextRefused", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "alreadyRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "tooManyEnlistments", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "disabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"));

    $.Property({Static:false, Public:true , Virtual:true }, "CannotCreateContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownCompletionEnlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateContextDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationProxyFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "SubordinateRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationLoopback", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionAlreadyRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownTransaction", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.Faults11 */ 

(function Faults11$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Faults11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CannotCreateContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionAlreadyRegistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateContextDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationLoopback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParticipantRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationDispatchFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegistrationProxyFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SubordinateRegistrationNetAccessDisabled", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownCompletionEnlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnknownTransaction", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParticipantTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SubordinateTMRegistrationFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TMEnlistFailed", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), [$asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.Field({Static:false, Public:false}, "cannotCreateContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "cannotRegisterParticipant", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "unknownTransaction", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"));

    $.Property({Static:false, Public:true , Virtual:true }, "CannotCreateContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownCompletionEnlistment", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateContextDispatchFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegistrationProxyFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "SubordinateRegistrationNetAccessDisabled", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParticipantRegistrationLoopback", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionAlreadyRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true , Virtual:true }, "UnknownTransaction", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.GlobalAclOperationRequirement */ 

(function GlobalAclOperationRequirement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.ServiceAuthorizationManager"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.GlobalAclOperationRequirement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessCheck", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.Policy.AuthorizationContext"), $asm22.TypeRef("System.ServiceModel.Channels.MessageProperties"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessCheck", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.Policy.AuthorizationContext"), $asm22.TypeRef("System.ServiceModel.Channels.MessageProperties"), 
          $.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Claims.Claim")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AccessCheckReply", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSidDictionary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildThumbprintDictionary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckAccessCore", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.OperationContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodeThumbprint", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceAccessCheckResult", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm22.TypeRef("System.ServiceModel.Channels.MessageProperties")])
    );

    $.Field({Static:false, Public:false}, "sids", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "thumbprints", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.IdentifierElement */ 

(function IdentifierElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.IdentifierElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [$.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.Field({Static:false, Public:false}, "identifier", $.String);

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Property({Static:false, Public:true }, "Identifier", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.IdentifierElement10 */ 

(function IdentifierElement10$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IdentifierElement"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.IdentifierElement10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.IdentifierElement11 */ 

(function IdentifierElement11$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IdentifierElement"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.IdentifierElement11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.Library */ 

(function Library$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Messaging.Library", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateFaultMessage", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [
          $asm21.TypeRef("System.Xml.UniqueId"), $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBaseFaultCode", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.FaultCode"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFaultCodeName", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFaultCodeReason", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFaultToHeader", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFaultToHeader10", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFaultToHeader11", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetReplyToHeader", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SendFaultResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.Messaging.ICoordinationListener */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.ICoordinationListener", false, [], function ($) {
    $.Method({}, "Start", JSIL.MethodSignature.Void);
    $.Method({}, "Stop", JSIL.MethodSignature.Void);
    $.Method({}, "CreateEndpointReference", new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.AddressHeader")]));
  }, []);

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationServiceHost */ 

(function CoordinationServiceHost$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.ServiceHost"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationServiceHost", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBaseEndpointAddress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEndpointReference", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.EndpointAddress"), [$asm22.TypeRef("System.ServiceModel.Channels.AddressHeader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeRuntime", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "baseEndpoint", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.ImplementInterfaces(
      /* 3 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationMessage */ 

(function CoordinationMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.Message"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageProperties"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"))
    );

    $.Field({Static:false, Public:false}, "headers", $asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders"));

    $.Field({Static:false, Public:false}, "properties", $asm22.TypeRef("System.ServiceModel.Channels.MessageProperties"));

    $.Property({Static:false, Public:true , Virtual:true }, "Headers", $asm22.TypeRef("System.ServiceModel.Channels.MessageHeaders"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm22.TypeRef("System.ServiceModel.Channels.MessageProperties"));

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextMessage */ 

(function CreateCoordinationContextMessage$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "create", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponseMessage */ 

(function CreateCoordinationContextResponseMessage$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponseMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "response", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RegisterMessage */ 

(function RegisterMessage$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegisterMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "register", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RegisterResponseMessage */ 

(function RegisterResponseMessage$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegisterResponseMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "response", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.NotificationMessage */ 

(function NotificationMessage$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.NotificationMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRecoverMessage", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.Field({Static:false, Public:false}, "atomicTransactionStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.PrepareMessage */ 

(function PrepareMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.PrepareMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.PreparedMessage */ 

(function PreparedMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.PreparedMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ReadOnlyMessage */ 

(function ReadOnlyMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ReadOnlyMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CommitMessage */ 

(function CommitMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CommitMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RollbackMessage */ 

(function RollbackMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RollbackMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CommittedMessage */ 

(function CommittedMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CommittedMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AbortedMessage */ 

(function AbortedMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AbortedMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ReplayMessage */ 

(function ReplayMessage$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.NotificationMessage"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ReplayMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWriteBodyContents", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1 */ 

(function ReferenceCountedChannel$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedObject"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TChannel"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy`1", [$.GenericParameter("TChannel")]), $.GenericParameter("TChannel"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCacheKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      new JSIL.MethodSignature($.GenericParameter("TChannel"), null)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetChannel", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1", [$.GenericParameter("TChannel")]), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy`1", [$.GenericParameter("TChannel")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "OnChannelFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCloseComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "proxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy`1", [$.GenericParameter("TChannel")]));

    $.Field({Static:false, Public:false}, "channel", $.GenericParameter("TChannel"));

    $.Field({Static:false, Public:false}, "key", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCacheKey"));

    $.Property({Static:false, Public:true }, "Channel", $.GenericParameter("TChannel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ChannelMruCacheKey */ 

(function ChannelMruCacheKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ChannelMruCacheKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm22.TypeRef("System.ServiceModel.EndpointIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.Field({Static:false, Public:false}, "address", $.String);

    $.Field({Static:false, Public:false}, "identity", $asm22.TypeRef("System.ServiceModel.EndpointIdentity"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1 */ 

(function ChannelMruCache$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.MruCache`2", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ChannelMruCacheKey"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1", [new JSIL.GenericParameter("TItem", "Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1")])]), 
      Name: "Microsoft.Transactions.Wsat.Messaging.ChannelMruCache`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TItem"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSingleItemRemoved", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ReferenceCountedChannel`1", [$.GenericParameter("TItem")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Messaging.ControlProtocol */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Messaging.ControlProtocol", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Completion: 1, 
    Volatile2PC: 2, 
    Durable2PC: 3, 
  }
);

/* interface Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator", false, [], function ($) {
    $.Method({}, "Register", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")]));
  }, []);

/* class Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher */ 

(function RegistrationCoordinatorDispatcher$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginRegister", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndRegister", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendFaultReply", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher10 */ 

(function RegistrationCoordinatorDispatcher10$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRegister", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRegister", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "registrationCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher11 */ 

(function RegistrationCoordinatorDispatcher11$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRegister", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRegister", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "registrationCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSRegistrationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.RegistrationProxy */ 

(function RegistrationProxy$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestReplyProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegistrationProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRegister", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")]), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRegisterMessage", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterMessage"), [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSendRegister", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SelectChannelFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelFactory`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRequestReplyService")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.MessageVersion")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SendFaultResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRegister", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse"), [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Register")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SendRegisterResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegisterResponse")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationServiceSecurity */ 

(function CoordinationServiceSecurity$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationServiceSecurity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "AddIssuedToken", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse")])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddSupportingToken", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckIdentity", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy"), $asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateIssuedToken", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"), $jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateStandardsManager", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"), [$asm22.TypeRef("System.ServiceModel.MessageSecurityVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateStandardsManager", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeriveIssuedTokenKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityContextSecurityTokenParameters", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenParameters"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetIssuedToken", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSenderName", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSenderName", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.MessageProperties")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdentifierElementSerializer", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Runtime.Serialization.DataContractSerializer"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceCheckIdentityResult", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.Channels.Message")
        ])
    );

    $.Field({Static:false, Public:false}, "identityVerifier", $asm22.TypeRef("System.ServiceModel.Security.IdentityVerifier"));

    $.Field({Static:true , Public:false}, "securityContextSecurityTokenParameters", $asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenParameters"));

    $.Field({Static:true , Public:false}, "identifierElementSerializer10", $asm21.TypeRef("System.Runtime.Serialization.DataContractSerializer"));

    $.Field({Static:true , Public:false}, "identifierElementSerializer11", $asm21.TypeRef("System.Runtime.Serialization.DataContractSerializer"));

    $.Field({Static:true , Public:false}, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "SecurityStandardsManager2007", $asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"));

    $.Property({Static:true , Public:true }, "SecurityContextSecurityTokenParameters", $asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenParameters"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext */ 

(function CreateCoordinationContext$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContext", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpiresPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "coordinationXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "atomicTransactionStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:false, Public:false}, "expiresPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "expiration", $.UInt32);

    $.Field({Static:false, Public:true }, "CurrentContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Field({Static:false, Public:true }, "IssuedToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Field({Static:false, Public:true }, "IsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ExpiresPresent", $.Boolean);

    $.Property({Static:false, Public:true }, "Expires", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse */ 

(function CreateCoordinationContextResponse$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CreateCoordinationContextResponse", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:true }, "CoordinationContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Field({Static:false, Public:true }, "IssuedToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "coordinationXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Messaging.Register */ 

(function Register$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.Register", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:true }, "Protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Field({Static:false, Public:true }, "ParticipantProtocolService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "coordinationXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Field({Static:false, Public:true }, "Loopback", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "SupportingToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Messaging.RegisterResponse */ 

(function RegisterResponse$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.RegisterResponse", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:true }, "CoordinatorProtocolService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "coordinationStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Field({Static:false, Public:false}, "coordinationXmlDictionaryStrings", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.MessagingVersionHelper */ 

(function MessagingVersionHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Messaging.MessagingVersionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AddressingVersion", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.AddressingVersion"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MessageVersion", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.MessageVersion"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SecurityVersion", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.MessageSecurityVersion"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetReplyAddress", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement */ 

(function SupportingTokenBindingElement$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.BindingElement"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BuildChannelListener", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.IChannelListener`1", ["!!0"]), [$asm22.TypeRef("System.ServiceModel.Channels.BindingContext")], ["TChannel"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanBuildChannelListener", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.BindingContext")], ["TChannel"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.BindingElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceCredentials", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature("!!0", [$asm22.TypeRef("System.ServiceModel.Channels.BindingContext")], ["T"])
    );

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:false, Public:false}, "serverCreds", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ServiceCredentials", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenServiceCredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannel`1 */ 

(function SupportingTokenChannel$b1$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.ChannelBase"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TChannel"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Channels.ChannelManagerBase"), $.GenericParameter("TChannel"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SecurityStandardsManager", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginClose", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginOpen", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndOpen", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpen", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnReceive", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TrySendFaultReply", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "tokenResolver", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "innerChannel", $.GenericParameter("TChannel"));

    $.Field({Static:true , Public:false}, "securityStandardsManager", $asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.GenericProperty({Static:true , Public:false}, "SecurityStandardsManager", $asm22.TypeRef("System.ServiceModel.Security.SecurityStandardsManager"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenDuplexChannel */ 

(function SupportingTokenDuplexChannel$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannel`1", [$asm22.TypeRef("System.ServiceModel.Channels.IDuplexChannel")]), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenDuplexChannel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Channels.ChannelManagerBase"), $asm22.TypeRef("System.ServiceModel.Channels.IDuplexChannel"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginReceive", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginReceive", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginSend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginSend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.TimeSpan"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTryReceive", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWaitForMessage", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndReceive", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndSend", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndTryReceive", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.Message")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWaitForMessage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalAddress", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RemoteAddress", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Via", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.Message"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Send", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Send", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryReceive", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TimeSpan"), $jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.Message")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TrySendFaultReply", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WaitForMessage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "LocalAddress", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true , Virtual:true }, "RemoteAddress", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true , Virtual:true }, "Via", $asm0A.TypeRef("System.Uri"));

    $.ImplementInterfaces(
      /* 3 */ $asm22.TypeRef("System.ServiceModel.Channels.IDuplexChannel"), 
      /* 4 */ $asm22.TypeRef("System.ServiceModel.Channels.IInputChannel"), 
      /* 5 */ $asm22.TypeRef("System.ServiceModel.Channels.IOutputChannel")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannelListener`1 */ 

(function SupportingTokenChannelListener$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.LayeredChannelListener`1", [new JSIL.GenericParameter("TChannel", "Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannelListener`1")]), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenChannelListener`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TChannel"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenBindingElement"), $asm22.TypeRef("System.ServiceModel.Channels.BindingContext"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAcceptChannel", 
      new JSIL.MethodSignature($.GenericParameter("TChannel"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginAcceptChannel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginWaitForChannel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndAcceptChannel", 
      new JSIL.MethodSignature($.GenericParameter("TChannel"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndWaitForChannel", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpening", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnWaitForChannel", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapChannel", 
      new JSIL.MethodSignature($.GenericParameter("TChannel"), [$.GenericParameter("TChannel")])
    );

    $.Field({Static:false, Public:false}, "innerChannelListener", $asm22.TypeRef("System.ServiceModel.Channels.IChannelListener`1", [$.GenericParameter("TChannel")]));

    $.Field({Static:false, Public:false}, "tokenResolver", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver */ 

(function SupportingTokenSecurityTokenResolver$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.SupportingTokenSecurityTokenResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddContext", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ClearContexts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeriveToken", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken"), [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FaultInSupportingToken", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllContexts", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken")]), [$asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetContext", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken"), [$asm21.TypeRef("System.Xml.UniqueId"), $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRegistrationHeader", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Transactions.WsatRegistrationHeader"), [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAllContexts", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveContext", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.UniqueId"), $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAddContext", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UpdateContextCachingTime", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken"), $asm07.TypeRef("System.DateTime")])
    );

    $.Field({Static:true , Public:false}, "currentSct", $asm22.TypeRef("System.ServiceModel.Security.Tokens.SecurityContextSecurityToken"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.ImplementInterfaces(
      /* 1 */ $asm22.TypeRef("System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator", false, [], function ($) {
    $.Method({}, "Prepared", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "ReadOnly", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Committed", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Replay", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Fault", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")]));
  }, []);

/* interface Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant", false, [], function ($) {
    $.Method({}, "Prepare", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message")));
    $.Method({}, "Fault", new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")]));
  }, []);

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher */ 

(function TwoPhaseCommitCoordinatorDispatcher$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateFaultProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadOnly", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Replay", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher10 */ 

(function TwoPhaseCommitCoordinatorDispatcher10$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOnly", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Replay", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "twoPhaseCommitCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher11 */ 

(function TwoPhaseCommitCoordinatorDispatcher11$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOnly", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "twoPhaseCommitCoordinatorDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher */ 

(function TwoPhaseCommitParticipantDispatcher$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramMessageDispatcher"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateFaultProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "dispatch", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher10 */ 

(function TwoPhaseCommitParticipantDispatcher10$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "twoPhaseCommitParticipantDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant10"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher11 */ 

(function TwoPhaseCommitParticipantDispatcher11$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContractType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsaFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WsatFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WscoorFault", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.Field({Static:false, Public:false}, "twoPhaseCommitParticipantDispatcher", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantDispatcher"));

    $.Property({Static:false, Public:true , Virtual:true }, "ContractType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant11"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IWSTwoPhaseCommitParticipant")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm22.TypeRef("System.ServiceModel.ServiceBehaviorAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy */ 

(function TwoPhaseCommitCoordinatorProxy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendAborted", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendCommitted", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendPrepared", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRecoverMessage", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy */ 

(function TwoPhaseCommitParticipantProxy$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendCommit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendPrepare", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRollback", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.WSAtomicTransactionStrings */ 

(function WSAtomicTransactionStrings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Messaging.WSAtomicTransactionStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ProtocolToWellKnownName", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WellKnownNameToProtocol", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), [$.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.BindingStrings */ 

(function BindingStrings$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Messaging.BindingStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ActivationCoordinatorSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompletionCoordinatorSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompletionParticipantSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "InteropBindingQName", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "RegistrationCoordinatorSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TwoPhaseCommitCoordinatorSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TwoPhaseCommitParticipantSuffix", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Constant({Static:true , Public:true }, "AddressPrefix", $.String, "WsatService");

    $.Constant({Static:true , Public:true }, "InteropBindingName", $.String, "Interop");

    $.Constant({Static:true , Public:true }, "NamedPipeBindingName", $.String, "NamedPipe");

    $.Constant({Static:true , Public:true }, "WindowsBindingName", $.String, "Windows");

    $.Field({Static:true , Public:false, ReadOnly:true }, "InteropBindingQName10", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InteropBindingQName11", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NamedPipeBindingQName", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "WindowsBindingQName", $.String);

    $.Constant({Static:true , Public:true }, "RemoteProxySuffix", $.String, "Remote/");

    $.Constant({Static:true , Public:true }, "DisabledSuffix", $.String, "Disabled/");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationStrings */ 

(function CoordinationStrings$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationStrings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActivationCoordinatorPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlreadyRegistered", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CannotCreateContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CannotRegisterParticipant", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextRefused", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinationContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorProtocolService", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateCoordinationContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateCoordinationContextResponse", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidProtocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoActivity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantProtocolService", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Register", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegisterResponse", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationCoordinatorPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationService", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Version", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "CreateCoordinationContext", $.String);

    $.Property({Static:false, Public:true }, "CreateCoordinationContextResponse", $.String);

    $.Property({Static:false, Public:true }, "CoordinationContext", $.String);

    $.Property({Static:false, Public:true }, "CurrentContext", $.String);

    $.Property({Static:false, Public:true }, "CoordinationType", $.String);

    $.Property({Static:false, Public:true }, "RegistrationService", $.String);

    $.Property({Static:false, Public:true }, "Register", $.String);

    $.Property({Static:false, Public:true }, "RegisterResponse", $.String);

    $.Property({Static:false, Public:true }, "Protocol", $.String);

    $.Property({Static:false, Public:true }, "CoordinatorProtocolService", $.String);

    $.Property({Static:false, Public:true }, "ParticipantProtocolService", $.String);

    $.Property({Static:false, Public:true }, "Expires", $.String);

    $.Property({Static:false, Public:true }, "Identifier", $.String);

    $.Property({Static:false, Public:true }, "ActivationCoordinatorPortType", $.String);

    $.Property({Static:false, Public:true }, "RegistrationCoordinatorPortType", $.String);

    $.Property({Static:false, Public:true }, "InvalidState", $.String);

    $.Property({Static:false, Public:true }, "InvalidProtocol", $.String);

    $.Property({Static:false, Public:true }, "InvalidParameters", $.String);

    $.Property({Static:false, Public:true }, "NoActivity", $.String);

    $.Property({Static:false, Public:true }, "ContextRefused", $.String);

    $.Property({Static:false, Public:true }, "AlreadyRegistered", $.String);

    $.Property({Static:false, Public:true }, "CannotCreateContext", $.String);

    $.Property({Static:false, Public:true }, "CannotRegisterParticipant", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationStrings10 */ 

(function CoordinationStrings10$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationStrings10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationStrings11 */ 

(function CoordinationStrings11$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationStrings11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings */ 

(function CoordinationXmlDictionaryStrings$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActivationCoordinatorPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlreadyRegistered", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CannotCreateContext", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CannotRegisterParticipant", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextRefused", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinationContext", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinationType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorProtocolService", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateCoordinationContext", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateCoordinationContextResponse", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentContext", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidParameters", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidProtocol", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidState", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoActivity", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantProtocolService", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Register", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegisterResponse", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationCoordinatorPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationService", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Version", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CreateCoordinationContext", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CreateCoordinationContextResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CoordinationContext", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CurrentContext", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CoordinationType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "RegistrationService", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Register", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "RegisterResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Protocol", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CoordinatorProtocolService", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ParticipantProtocolService", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Expires", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Identifier", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ActivationCoordinatorPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "RegistrationCoordinatorPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "InvalidState", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "InvalidProtocol", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "InvalidParameters", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "NoActivity", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ContextRefused", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "AlreadyRegistered", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CannotCreateContext", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CannotRegisterParticipant", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings10 */ 

(function CoordinationXmlDictionaryStrings10$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings11 */ 

(function CoordinationXmlDictionaryStrings11$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CreateCoordinationContextResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegisterResponseAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationXmlDictionaryStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CreateCoordinationContextResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegisterResponseAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings */ 

(function AtomicTransactionStrings$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Aborted", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Commit", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Committed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCoordinatorPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionParticipantPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InconsistentInternalState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantPortType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prepare", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prepared", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Replay", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rollback", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnknownTransaction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Version", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Prepare", $.String);

    $.Property({Static:false, Public:true }, "Prepared", $.String);

    $.Property({Static:false, Public:true }, "ReadOnly", $.String);

    $.Property({Static:false, Public:true }, "Commit", $.String);

    $.Property({Static:false, Public:true }, "Rollback", $.String);

    $.Property({Static:false, Public:true }, "Committed", $.String);

    $.Property({Static:false, Public:true }, "Aborted", $.String);

    $.Property({Static:false, Public:true }, "Replay", $.String);

    $.Property({Static:false, Public:true }, "CompletionCoordinatorPortType", $.String);

    $.Property({Static:false, Public:true }, "CompletionParticipantPortType", $.String);

    $.Property({Static:false, Public:true }, "CoordinatorPortType", $.String);

    $.Property({Static:false, Public:true }, "ParticipantPortType", $.String);

    $.Property({Static:false, Public:true }, "InconsistentInternalState", $.String);

    $.Property({Static:false, Public:true }, "UnknownTransaction", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings10 */ 

(function AtomicTransactionStrings10$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings11 */ 

(function AtomicTransactionStrings11$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings */ 

(function AtomicTransactionXmlDictionaryStrings$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Aborted", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Commit", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Committed", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCoordinatorPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionParticipantPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InconsistentInternalState", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantPortType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prepare", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prepared", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadOnly", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Replay", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rollback", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnknownTransaction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Version", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Prepare", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Prepared", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ReadOnly", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Commit", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Rollback", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Committed", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Aborted", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Replay", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CompletionCoordinatorPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CompletionParticipantPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "CoordinatorPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ParticipantPortType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "InconsistentInternalState", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "UnknownTransaction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings10 */ 

(function AtomicTransactionXmlDictionaryStrings10$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings11 */ 

(function AtomicTransactionXmlDictionaryStrings11$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"), 
      Name: "Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AbortedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommitAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommittedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletionUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Durable2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FaultAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PrepareAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreparedAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadOnlyAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplayAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RollbackAction", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Volatile2PCUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:true , Public:false}, "instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Property({Static:true , Public:true }, "Instance", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.AtomicTransactionXmlDictionaryStrings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletionUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Durable2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Volatile2PCUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommitAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "RollbackAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommittedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "AbortedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PrepareAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreparedAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadOnlyAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReplayAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "FaultAction", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.InputOutput");
/* class Microsoft.Transactions.Wsat.InputOutput.ActivationCoordinator */ 

(function ActivationCoordinator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.ActivationCoordinator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCoordinationContext", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCreateCoordinationContextResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendFault", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IActivationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.CompletionCoordinator */ 

(function CompletionCoordinator$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.CompletionCoordinator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMessage", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendComplete", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PoliteSendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendAborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommitted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommitted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendFault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "sendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "politeSendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICompletionCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.CoordinatorRegistrationFailedFault */ 

(function CoordinatorRegistrationFailedFault$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.CoordinatorRegistrationFailedFault", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFault", 
      new JSIL.MethodSignature($.Type, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.FaultSender */ 

(function FaultSender$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.FaultSender", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendFaultComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendFaultComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySendCompletionParticipantFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySendFault", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.DatagramProxy"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySendTwoPhaseCommitCoordinatorFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrySendTwoPhaseCommitParticipantFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "sendFaultComplete", $asm07.TypeRef("System.AsyncCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.Ports */ 

(function Ports$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.InputOutput.Ports", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetGuidFromTransactionId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetAddress", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Proxy")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetEnlistment", 
      new JSIL.MethodSignature($.Boolean, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetEnlistment", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetFromAddress", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.RegistrationCoordinator */ 

(function RegistrationCoordinator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.RegistrationCoordinator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Register", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendFault", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRegisterResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RequestAsyncResult"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.IRegistrationCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.RegistrationParticipant */ 

(function RegistrationParticipant$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.RegistrationParticipant", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendDurableRegisterComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendRegisterComplete", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm07.TypeRef("System.IAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendVolatileRegisterComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendDurableRegister", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendRegister", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendVolatileRegister", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "sendDurableRegisterComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "sendVolatileRegisterComplete", $asm07.TypeRef("System.AsyncCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.TransactionManagerReceive */ 

(function TransactionManagerReceive$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.TransactionManagerReceive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Begin", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistPrePrepare", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Forget", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarshalTransaction", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrePrepare", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Pull", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Push", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RecoveryBeginning", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RecoveryComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rejoin", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Replay", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SinglePhaseCommit", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"), 
      /* 1 */ $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.TransactionManagerResponse */ 

(function TransactionManagerResponse$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerResponse", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CommitResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompletionCommitResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompletionRollbackResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTransactionResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EnlistTransactionResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrepareResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrePrepareResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RegisterResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RollbackResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubordinateRegisterResponse", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
          $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.TransactionManagerSend */ 

(function TransactionManagerSend$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.TransactionManagerSend", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Commit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Commit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Committed", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTransaction", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistPrePrepareResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistTransaction", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForgetResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PrePrepare", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PrePrepareAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PrePrepared", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadOnly", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Register", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterEvent")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Register", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Rejoined", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Replayed", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "propagation", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"));

    $.Field({Static:false, Public:false}, "coordination", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"));

    $.Field({Static:false, Public:false}, "createTransactionResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "enlistTransactionResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "registerResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "subordinateRegisterResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "completionCommitResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "completionRollbackResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "prePrepareResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "prepareResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "commitResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));

    $.Field({Static:false, Public:false}, "rollbackResponseCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitCoordinator */ 

(function TwoPhaseCommitCoordinator$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitCoordinator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMessage", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateForgottenSource", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnPoliteSendComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSendComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PoliteSendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOnly", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Replay", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommit", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendFault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendPrepare", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRollback", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendRollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "sendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "politeSendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "forgottenSource", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitCoordinator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitParticipant */ 

(function TwoPhaseCommitParticipant$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitParticipant", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DurableSendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDurableSendComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnPoliteSendComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnVolatileSendComplete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PoliteSendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendAborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendAborted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommitted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendCommitted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendCommitted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendDurableAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendDurableReadOnly", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendFault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendFault", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendPrepared", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendReadOnly", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRecoverMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendVolatileAborted", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendVolatileReadOnly", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VolatileSendComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "durableSendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "volatileSendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "politeSendComplete", $asm07.TypeRef("System.AsyncCallback"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ITwoPhaseCommitParticipant")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.Clusters");
JSIL.DeclareNamespace("Microsoft.Transactions.Wsat.Protocol");
/* class Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider */ 

(function ConfigurationProvider$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenKey", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInteger", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadMultiString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.ClusterRegistryConfigurationProvider */ 

(function ClusterRegistryConfigurationProvider$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.ClusterRegistryConfigurationProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringFromMultiSz", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $asm07.TypeRef("Microsoft.Win32.RegistryValueKind")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInteger", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadMultiString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "hKey", $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.ClusterUtils */ 

(function ClusterUtils$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Clusters.ClusterUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetResourceFromEnumeration", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHCluster"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHClusEnum"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceNetworkName", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceType", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTransactionManagerClusterResource", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IssueClusterResourceControl", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.ClusterResourceControlCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IssueClusterResourceControlString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.ClusterResourceControlCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTransactionManager", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $.String, 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle */ 

(function SafeClusterHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.SafeHCluster */ 

(function SafeHCluster$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeHCluster", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseCluster", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "clusapi.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.SafeHResource */ 

(function SafeHResource$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeHResource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseClusterResource", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "clusapi.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.SafeHClusEnum */ 

(function SafeHClusEnum$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeHClusEnum", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "ClusterCloseEnum", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "clusapi.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Clusters.SafeHKey */ 

(function SafeHKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeClusterHandle"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeHKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "ClusterRegCloseKey", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "clusapi.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Clusters.ClusterEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Clusters.ClusterEnum", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Node: 1, 
    ResType: 2, 
    Resource: 4, 
    Group: 8, 
    Network: 16, 
    NetInterface: 32, 
    InternalNetwork: 2147483648, 
  }
);

/* enum Microsoft.Transactions.Wsat.Clusters.ClusterResourceControlCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Clusters.ClusterResourceControlCode", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    GetResourceType: 16777261, 
  }
);

/* class Microsoft.Transactions.Wsat.Clusters.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Clusters.SafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:true }, "ClusterEnum", 
      new JSIL.MethodSignature($.UInt32, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHClusEnum"), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ClusterOpenEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHClusEnum"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHCluster"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.ClusterEnum")]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ClusterRegOpenKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey"), $.String, 
          $asm07.TypeRef("System.Security.AccessControl.RegistryRights"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey")])
        ]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ClusterRegQueryValue", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.RegistryValueKind")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "Array", 
            Out: true
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ClusterResourceControl", 
      new JSIL.MethodSignature($.UInt32, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $.IntPtr, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.ClusterResourceControlCode"), $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetClusterResourceKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHKey"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $asm07.TypeRef("System.Security.AccessControl.RegistryRights")]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetClusterResourceNetworkName", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenCluster", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHCluster"), [$.String]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenClusterResource", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHResource"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Clusters.SafeHCluster"), $.String]), 
      {
        Module: "clusapi.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );

    $.Constant({Static:true , Public:true }, "ClusApi", $.String, "clusapi.dll");

    $.Constant({Static:true , Public:true }, "ERROR_SUCCESS", $.UInt32, 0);

    $.Constant({Static:true , Public:true }, "ERROR_FILE_NOT_FOUND", $.UInt32, 2);

    $.Constant({Static:true , Public:true }, "ERROR_MORE_DATA", $.UInt32, 234);

    $.Constant({Static:true , Public:true }, "ERROR_NO_MORE_ITEMS", $.UInt32, 259);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterStrings */ 

(function PerformanceCounterStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterStrings", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterStrings+MSDTC_BRIDGE */ 

(function MSDTC_BRIDGE$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterStrings+MSDTC_BRIDGE", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "TransactionBridgeV1PerfCounters", $.String, "MSDTC Bridge 4.0.0.0");

    $.Constant({Static:true , Public:false}, "MessageSendFailureCountPerInterval", $.String, "Message send failures/sec");

    $.Constant({Static:true , Public:false}, "PrepareRetryCountPerInterval", $.String, "Prepare retry count/sec");

    $.Constant({Static:true , Public:false}, "CommitRetryCountPerInterval", $.String, "Commit retry count/sec");

    $.Constant({Static:true , Public:false}, "PreparedRetryCountPerInterval", $.String, "Prepared retry count/sec");

    $.Constant({Static:true , Public:false}, "ReplayRetryCountPerInterval", $.String, "Replay retry count/sec");

    $.Constant({Static:true , Public:false}, "FaultsReceivedCountPerInterval", $.String, "Faults received count/sec");

    $.Constant({Static:true , Public:false}, "FaultsSentCountPerInterval", $.String, "Faults sent count/sec");

    $.Constant({Static:true , Public:false}, "AverageParticipantPrepareResponseTime", $.String, "Average participant prepare response time");

    $.Constant({Static:true , Public:false}, "AverageParticipantPrepareResponseTimeBase", $.String, "Average participant prepare response time Base");

    $.Constant({Static:true , Public:false}, "AverageParticipantCommitResponseTime", $.String, "Average participant commit response time");

    $.Constant({Static:true , Public:false}, "AverageParticipantCommitResponseTimeBase", $.String, "Average participant commit response time Base");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.TimerPolicy */ 

(function TimerPolicy$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TimerPolicy", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "InitialDelay", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:true }, "NotificationInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:true }, "MaxNotificationInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:true }, "MaxNotifications", $.UInt32);

    $.Field({Static:false, Public:true }, "IntervalIncreasePercentage", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.Configuration */ 

(function Configuration$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.Configuration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExtractSubjectName", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindCertificateByThumbprint", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommitPolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkEndpointsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortConfiguration", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreparedPolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreparePolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplayPolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileOutcomePolicy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBasePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigurationProvider", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOverrideSectionConfiguration", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.WSTransactionSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDiagnosticTracingConfiguration", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadPortConfiguration", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPositiveTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), $.String, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTimeoutConfiguration", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTimerPolicyConfiguration", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), $.String, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTraceSourceLevel", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.SourceLevels"), [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.SourceLevels")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUShort", 
      new JSIL.MethodSignature($.UInt16, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), $.String, 
          $.UInt16
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadX509CertificateIdentity", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceConfiguration", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateIdentityCertificate", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.Constant({Static:true , Public:true }, "DefaultHttpsPort", $.Int32, 2372);

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Constant({Static:true , Public:false}, "WsatRegistryKey", $.String, "Software\\Microsoft\\WSAT\\3.0");

    $.Constant({Static:true , Public:false}, "WsatClusterKey", $.String, "WSATPrivate\\3.0");

    $.Constant({Static:true , Public:false}, "TimersSubKey", $.String, "Timers");

    $.Constant({Static:true , Public:false}, "DefaultTimeoutValue", $.String, "DefaultTimeout");

    $.Constant({Static:true , Public:false}, "MaxTimeoutValue", $.String, "MaxTimeout");

    $.Constant({Static:true , Public:false}, "OperationTimeoutValue", $.String, "OperationTimeout");

    $.Constant({Static:true , Public:false}, "HttpsPortValue", $.String, "HttpsPort");

    $.Constant({Static:true , Public:false}, "IssuedTokensEnabledValue", $.String, "IssuedTokensEnabled");

    $.Constant({Static:true , Public:false}, "X509CertificateIdentityValue", $.String, "X509CertificateIdentity");

    $.Constant({Static:true , Public:false}, "KerberosGlobalAclValue", $.String, "KerberosGlobalAcl");

    $.Constant({Static:true , Public:false}, "X509GlobalAclValue", $.String, "X509GlobalAcl");

    $.Constant({Static:true , Public:false}, "DiagnosticTracingLevelValue", $.String, "DiagnosticTracing");

    $.Constant({Static:true , Public:false}, "ServiceModelDiagnosticTracingLevelValue", $.String, "ServiceModelDiagnosticTracing");

    $.Constant({Static:true , Public:false}, "DiagnosticTracingPropagateActivityValue", $.String, "DiagnosticTracingPropagateActivity");

    $.Constant({Static:true , Public:false}, "DiagnosticTracingActivityTracingValue", $.String, "DiagnosticTracingActivityTracing");

    $.Constant({Static:true , Public:false}, "DiagnosticTracingTracePIIValue", $.String, "DiagnosticTracingTracePII");

    $.Constant({Static:true , Public:false}, "PrepareInitialDelayValue", $.String, "PrepareInitialDelay");

    $.Constant({Static:true , Public:false}, "PrepareNotificationIntervalValue", $.String, "PrepareNotificationInterval");

    $.Constant({Static:true , Public:false}, "PrepareIntervalIncreasePercentageValue", $.String, "PrepareIntervalIncreasePercentage");

    $.Constant({Static:true , Public:false}, "PrepareMaxNotificationIntervalValue", $.String, "PrepareMaxNotificationInterval");

    $.Constant({Static:true , Public:false}, "PrepareMaxNotificationsValue", $.String, "PrepareMaxNotifications");

    $.Constant({Static:true , Public:false}, "CommitInitialDelayValue", $.String, "CommitInitialDelay");

    $.Constant({Static:true , Public:false}, "CommitNotificationIntervalValue", $.String, "CommitNotificationInterval");

    $.Constant({Static:true , Public:false}, "CommitIntervalIncreasePercentageValue", $.String, "CommitIntervalIncreasePercentage");

    $.Constant({Static:true , Public:false}, "CommitMaxNotificationIntervalValue", $.String, "CommitMaxNotificationInterval");

    $.Constant({Static:true , Public:false}, "CommitMaxNotificationsValue", $.String, "CommitMaxNotifications");

    $.Constant({Static:true , Public:false}, "PreparedInitialDelayValue", $.String, "PreparedInitialDelay");

    $.Constant({Static:true , Public:false}, "PreparedNotificationIntervalValue", $.String, "PreparedNotificationInterval");

    $.Constant({Static:true , Public:false}, "PreparedIntervalIncreasePercentageValue", $.String, "PreparedIntervalIncreasePercentage");

    $.Constant({Static:true , Public:false}, "PreparedMaxNotificationIntervalValue", $.String, "PreparedMaxNotificationInterval");

    $.Constant({Static:true , Public:false}, "PreparedMaxNotificationsValue", $.String, "PreparedMaxNotifications");

    $.Constant({Static:true , Public:false}, "ReplayInitialDelayValue", $.String, "ReplayInitialDelay");

    $.Constant({Static:true , Public:false}, "ReplayNotificationIntervalValue", $.String, "ReplayNotificationInterval");

    $.Constant({Static:true , Public:false}, "ReplayIntervalIncreasePercentageValue", $.String, "ReplayIntervalIncreasePercentage");

    $.Constant({Static:true , Public:false}, "ReplayMaxNotificationIntervalValue", $.String, "ReplayMaxNotificationInterval");

    $.Constant({Static:true , Public:false}, "ReplayMaxNotificationsValue", $.String, "ReplayMaxNotifications");

    $.Constant({Static:true , Public:false}, "VolatileOutcomeInitialDelayValue", $.String, "VolatileOutcomeDelay");

    $.Field({Static:false, Public:false}, "overrideSection", $asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.WSTransactionSection"));

    $.Field({Static:false, Public:false}, "defaultTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "maxTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "preparePolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:false}, "commitPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:false}, "preparedPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:false}, "replayPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:false}, "volatileOutcomePolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Field({Static:false, Public:false}, "portConfig", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"));

    $.Field({Static:false, Public:false}, "diagnosticTraceLevel", $asm0A.TypeRef("System.Diagnostics.SourceLevels"));

    $.Field({Static:false, Public:false}, "serviceModelDiagnosticTraceLevel", $asm0A.TypeRef("System.Diagnostics.SourceLevels"));

    $.Field({Static:false, Public:false}, "tracePii", $.Boolean);

    $.Property({Static:false, Public:true }, "PortConfiguration", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationServiceConfiguration"));

    $.Property({Static:false, Public:true }, "NetworkEndpointsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "PreparePolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Property({Static:false, Public:true }, "CommitPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Property({Static:false, Public:true }, "PreparedPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Property({Static:false, Public:true }, "ReplayPolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));

    $.Property({Static:false, Public:true }, "VolatileOutcomePolicy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ConfigurationProviderException */ 

(function ConfigurationProviderException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ConfigurationProviderException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.DebugTracingEventSink */ 

(function DebugTracingEventSink$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.DebugTracingEventSink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCreateTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCreateTransactionResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistTransactionResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterCompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterDurableResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegisterVolatileResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgRegistrationCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRegisterResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSubordinateRegisterResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCompletionRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCompletionRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatilePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurablePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgDurableCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgVolatileCoordinatorSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgPreparedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgAbortedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReadOnlyEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgCommittedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantFaultEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.MsgParticipantSendFailureEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackResponseEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmPrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmSinglePhaseCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCommitEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmParticipantForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmRejoinEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmCoordinatorForgetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmAsyncRollbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerCoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TimerParticipantEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.InternalEnlistSubordinateTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextCreatedEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextTransactionDoneEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceFault", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.MessageFault"), $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceGenericEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceNotificationMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CompletionEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceNotificationMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceNotificationMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.VolatileCoordinatorEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceNotificationMessage", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTmEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTmEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.CoordinatorCallbackEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTmResponse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.IIncomingEventSink")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Protocol.TransactionOutcome */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.TransactionOutcome", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Committed: 0, 
    Aborted: 1, 
    InDoubt: 2, 
  }
);

/* class Microsoft.Transactions.Wsat.Protocol.TxTraceCode */ 

(function TxTraceCode$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.TxTraceCode", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "TransactionBridge", $.Int32, 720896);

    $.Constant({Static:true , Public:true }, "CreateTransactionFailure", $.Int32, 720897);

    $.Constant({Static:true , Public:true }, "EnlistTransactionFailure", $.Int32, 720898);

    $.Constant({Static:true , Public:true }, "RegisterParticipantFailure", $.Int32, 720899);

    $.Constant({Static:true , Public:true }, "VolatileOutcomeTimeout", $.Int32, 720900);

    $.Constant({Static:true , Public:true }, "DurableParticipantReplayWhilePreparing", $.Int32, 720901);

    $.Constant({Static:true , Public:true }, "RegistrationCoordinatorFaulted", $.Int32, 720902);

    $.Constant({Static:true , Public:true }, "RegistrationCoordinatorFailed", $.Int32, 720903);

    $.Constant({Static:true , Public:true }, "RegistrationCoordinatorResponseInvalidMetadata", $.Int32, 720904);

    $.Constant({Static:true , Public:true }, "RecoveredCoordinatorInvalidMetadata", $.Int32, 720905);

    $.Constant({Static:true , Public:true }, "RecoveredParticipantInvalidMetadata", $.Int32, 720906);

    $.Constant({Static:true , Public:true }, "EnlistTransaction", $.Int32, 720907);

    $.Constant({Static:true , Public:true }, "RegisterCoordinator", $.Int32, 720908);

    $.Constant({Static:true , Public:true }, "RegisterParticipant", $.Int32, 720909);

    $.Constant({Static:true , Public:true }, "ProtocolInitialized", $.Int32, 720910);

    $.Constant({Static:true , Public:true }, "ProtocolStarted", $.Int32, 720911);

    $.Constant({Static:true , Public:true }, "PrepareMessageRetry", $.Int32, 720928);

    $.Constant({Static:true , Public:true }, "CommitMessageRetry", $.Int32, 720929);

    $.Constant({Static:true , Public:true }, "PreparedMessageRetry", $.Int32, 720930);

    $.Constant({Static:true , Public:true }, "ReplayMessageRetry", $.Int32, 720931);

    $.Constant({Static:true , Public:true }, "ParticipantRecovered", $.Int32, 720932);

    $.Constant({Static:true , Public:true }, "CoordinatorRecovered", $.Int32, 720933);

    $.Constant({Static:true , Public:true }, "EnlistmentIdentityCheckFailed", $.Int32, 720934);

    $.Constant({Static:true , Public:true }, "ParticipantStateMachineFinished", $.Int32, 720935);

    $.Constant({Static:true , Public:true }, "CoordinatorStateMachineFinished", $.Int32, 720936);

    $.Constant({Static:true , Public:true }, "VolatileParticipantInDoubt", $.Int32, 720937);

    $.Constant({Static:true , Public:true }, "VolatileParticipantInDoubt11", $.Int32, 720938);

    $.Constant({Static:true , Public:true }, "RegisterParticipantFailure11", $.Int32, 720939);

    $.Constant({Static:true , Public:true }, "RegisterCoordinator11", $.Int32, 720940);

    $.Constant({Static:true , Public:true }, "RegisterParticipant11", $.Int32, 720941);

    $.Constant({Static:true , Public:true }, "ParticipantRecovered11", $.Int32, 720942);

    $.Constant({Static:true , Public:true }, "CoordinatorRecovered11", $.Int32, 720943);

    $.Constant({Static:true , Public:true }, "RecoveredCoordinatorInvalidMetadata11", $.Int32, 720944);

    $.Constant({Static:true , Public:true }, "RecoveredParticipantInvalidMetadata11", $.Int32, 720945);

    $.Constant({Static:true , Public:true }, "RegistrationCoordinatorResponseInvalidMetadata11", $.Int32, 720946);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.TxTraceUtility */ 

(function TxTraceUtility$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.TxTraceUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $.Object, $asm07.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.Field({Static:true , Public:false}, "traceCodes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionTraceRecord */ 

(function TransactionTraceRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.TransactionTraceRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "SerializeRecord", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.UnhandledStateMachineExceptionRecord */ 

(function UnhandledStateMachineExceptionRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.UnhandledStateMachineExceptionRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"), $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.FatalUnexpectedStateMachineEventRecord */ 

(function FatalUnexpectedStateMachineEventRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.FatalUnexpectedStateMachineEventRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"), $.String, 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveryLogEntryCorruptRecord */ 

(function ParticipantRecoveryLogEntryCorruptRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveryLogEntryCorruptRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveryLogEntryCorruptRecord */ 

(function CoordinatorRecoveryLogEntryCorruptRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveryLogEntryCorruptRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionBridgeRecoveryFailureRecord */ 

(function TransactionBridgeRecoveryFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.TransactionBridgeRecoveryFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveryLogEntryCreationFailureRecord */ 

(function CoordinatorRecoveryLogEntryCreationFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveryLogEntryCreationFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveryLogEntryCreationFailureRecord */ 

(function ParticipantRecoveryLogEntryCreationFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveryLogEntryCreationFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolInitializationFailureRecord */ 

(function ProtocolInitializationFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolInitializationFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolStartFailureRecord */ 

(function ProtocolStartFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolStartFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryCompleteFailureRecord */ 

(function ProtocolRecoveryCompleteFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryCompleteFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryBeginningFailureRecord */ 

(function ProtocolRecoveryBeginningFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryBeginningFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolStopFailureRecord */ 

(function ProtocolStopFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolStopFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.NonFatalUnexpectedStateMachineEventRecord */ 

(function NonFatalUnexpectedStateMachineEventRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.NonFatalUnexpectedStateMachineEventRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"), $.String, 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterInitializationFailureRecord */ 

(function PerformanceCounterInitializationFailureRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterInitializationFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CreateTransactionFailureRecord */ 

(function CreateTransactionFailureRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CreateTransactionFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.EnlistTransactionFailureRecord */ 

(function EnlistTransactionFailureRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.EnlistTransactionFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), 
          $.String
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterParticipantFailureRecord */ 

(function RegisterParticipantFailureRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegisterParticipantFailureRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileOutcomeTimeoutRecord */ 

(function VolatileOutcomeTimeoutRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.VolatileOutcomeTimeoutRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome"), $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileParticipantInDoubtRecord */ 

(function VolatileParticipantInDoubtRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.VolatileParticipantInDoubtRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.DurableParticipantReplayWhilePreparingRecord */ 

(function DurableParticipantReplayWhilePreparingRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.DurableParticipantReplayWhilePreparingRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFaultedRecord */ 

(function RegistrationCoordinatorFaultedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFaultedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFailedRecord */ 

(function RegistrationCoordinatorFailedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFailedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataRecord */ 

(function RegistrationCoordinatorResponseInvalidMetadataRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm07.TypeRef("System.Exception"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoveredCoordinatorInvalidMetadataRecord */ 

(function RecoveredCoordinatorInvalidMetadataRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RecoveredCoordinatorInvalidMetadataRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoveredParticipantInvalidMetadataRecord */ 

(function RecoveredParticipantInvalidMetadataRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RecoveredParticipantInvalidMetadataRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.EnlistTransactionRecord */ 

(function EnlistTransactionRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.EnlistTransactionRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext")])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecord */ 

(function RegisterCoordinatorRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecord */ 

(function RegisterParticipantRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolInitializedRecord */ 

(function ProtocolInitializedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolInitializedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolStartedRecord */ 

(function ProtocolStartedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolStartedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryCompleteRecord */ 

(function ProtocolRecoveryCompleteRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolRecoveryCompleteRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolStoppedRecord */ 

(function ProtocolStoppedRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolStoppedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PrepareMessageRetryRecord */ 

(function PrepareMessageRetryRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.PrepareMessageRetryRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.Int32
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CommitMessageRetryRecord */ 

(function CommitMessageRetryRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CommitMessageRetryRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.Int32
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PreparedMessageRetryRecord */ 

(function PreparedMessageRetryRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.PreparedMessageRetryRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.Int32
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ReplayMessageRetryRecord */ 

(function ReplayMessageRetryRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ReplayMessageRetryRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $.Int32
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveredRecord */ 

(function ParticipantRecoveredRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ParticipantRecoveredRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveredRecord */ 

(function CoordinatorRecoveredRecord$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CoordinatorRecoveredRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.Field({Static:true , Public:false}, "type", $asm07.TypeRef("System.Type"), function ($pi) {
        return $thisType.__Type__;
      });

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.EnlistmentIdentityCheckFailedRecord */ 

(function EnlistmentIdentityCheckFailedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.EnlistmentIdentityCheckFailedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantStateMachineFinishedRecord */ 

(function ParticipantStateMachineFinishedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ParticipantStateMachineFinishedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome")
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorStateMachineFinishedRecord */ 

(function CoordinatorStateMachineFinishedRecord$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.CoordinatorStateMachineFinishedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome")
        ])
    );

    $.Property({Static:true , Public:true }, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ThumbPrintNotFoundRecord */ 

(function ThumbPrintNotFoundRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ThumbPrintNotFoundRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ThumbPrintNotValidatedRecord */ 

(function ThumbPrintNotValidatedRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ThumbPrintNotValidatedRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.SslNoPrivateKeyRecord */ 

(function SslNoPrivateKeyRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.SslNoPrivateKeyRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.SslNoAccessiblePrivateKeyRecord */ 

(function SslNoAccessiblePrivateKeyRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.SslNoAccessiblePrivateKeyRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.MissingNecessaryKeyUsageRecord */ 

(function MissingNecessaryKeyUsageRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.MissingNecessaryKeyUsageRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509KeyUsageFlags")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.MissingNecessaryEnhancedKeyUsageRecord */ 

(function MissingNecessaryEnhancedKeyUsageRecord$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.MissingNecessaryEnhancedKeyUsageRecord", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLog", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.UnhandledStateMachineExceptionRecordSchema */ 

(function UnhandledStateMachineExceptionRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.UnhandledStateMachineExceptionRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/UnhandledStateMachineExceptionTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "stateMachine", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "currentState", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "history", $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.UnexpectedStateMachineEventRecordSchema */ 

(function UnexpectedStateMachineEventRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.UnexpectedStateMachineEventRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/UnexpectedStateMachineEventTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "stateMachine", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "currentState", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "history", $asm04.TypeRef("Microsoft.Transactions.Bridge.StateMachineHistory"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "unexpectedEvent", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "unexpectedEventDetails", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoveryLogEntryRecordSchema */ 

(function RecoveryLogEntryRecordSchema$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoveryLogEntryRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecoveryDataBase64", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecoveryDataLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RecoveryDataBase64", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RecoveryDataLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RecoveryLogEntryTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "recoveryData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "RecoveryDataLength", $.Int64)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false}, "RecoveryDataBase64", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionRecordSchema */ 

(function TransactionRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TransactionRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/TransactionTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.EnlistmentRecordSchema */ 

(function EnlistmentRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.EnlistmentRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/EnlistmentTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ReasonRecordSchema */ 

(function ReasonRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ReasonRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ReasonTraceRecord");

    $.Field({Static:false, Public:false}, "reason", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ReasonWithTransactionIdRecordSchema */ 

(function ReasonWithTransactionIdRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ReasonWithTransactionIdRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ReasonWithTransactionIdTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "reason", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ReasonWithEnlistmentRecordSchema */ 

(function ReasonWithEnlistmentRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ReasonWithEnlistmentRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ReasonWithEnlistmentTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "reason", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinationContextRecordSchema */ 

(function CoordinationContextRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CoordinationContextRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/CoordinationContextTraceRecord");

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema */ 

(function RegisterFailureRecordSchema$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Field({Static:false, Public:false}, "reason", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema10 */ 

(function RegisterFailureRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterFailureTraceRecord");

    $.Field({Static:false, Public:false}, "protocolService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema11 */ 

(function RegisterFailureRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterFailureRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterFailure11TraceRecord");

    $.Field({Static:false, Public:false}, "protocolService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.EnlistmentTimeoutRecordSchema */ 

(function EnlistmentTimeoutRecordSchema$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.EnlistmentTimeoutRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome"), $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Outcome", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Timeout", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Outcome", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Timeout", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/EnlistmentTimeoutTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "outcome", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome"));

    $.Field({Static:false, Public:false}, "timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Outcome", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false}, "Timeout", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema */ 

(function VolatileEnlistmentInDoubtRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema10 */ 

(function VolatileEnlistmentInDoubtRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/VolatileEnlistmentInDoubtTraceRecord");

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema11 */ 

(function VolatileEnlistmentInDoubtRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.VolatileEnlistmentInDoubtRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/VolatileEnlistmentInDoubt11TraceRecord");

    $.Field({Static:false, Public:false}, "replyTo", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema */ 

(function RegisterCoordinatorRecordSchema$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema10 */ 

(function RegisterCoordinatorRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterCoordinatorTraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema11 */ 

(function RegisterCoordinatorRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterCoordinatorRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterCoordinator11TraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema */ 

(function RegisterParticipantRecordSchema$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema10 */ 

(function RegisterParticipantRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterParticipantTraceRecord");

    $.Field({Static:false, Public:false}, "participantService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema11 */ 

(function RegisterParticipantRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegisterParticipantRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegisterParticipant11TraceRecord");

    $.Field({Static:false, Public:false}, "participantService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolServiceRecordSchema */ 

(function ProtocolServiceRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ProtocolServiceRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ProtocolServiceTraceRecord");

    $.Field({Static:false, Public:false}, "protocolName", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocolId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantRetryMessageRecordSchema */ 

(function ParticipantRetryMessageRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ParticipantRetryMessageRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ParticipantRetryMessageTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorRetryMessageRecordSchema */ 

(function CoordinatorRetryMessageRecordSchema$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CoordinatorRetryMessageRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/CoordinatorRetryMessageTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema */ 

(function RecoverParticipantRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema10 */ 

(function RecoverParticipantRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RecoverParticipantTraceRecord");

    $.Field({Static:false, Public:false}, "participantService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema11 */ 

(function RecoverParticipantRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverParticipantRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RecoverParticipant11TraceRecord");

    $.Field({Static:false, Public:false}, "participantService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema */ 

(function RecoverCoordinatorRecordSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm22.TypeRef("System.ServiceModel.EndpointAddress"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema10 */ 

(function RecoverCoordinatorRecordSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RecoverCoordinatorTraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema11 */ 

(function RecoverCoordinatorRecordSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RecoverCoordinatorRecordSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RecoverCoordinator11TraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantOutcomeRecordSchema */ 

(function ParticipantOutcomeRecordSchema$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ParticipantOutcomeRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Outcome", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Outcome", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ParticipantOutcomeTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "outcome", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Outcome", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorOutcomeRecordSchema */ 

(function CoordinatorOutcomeRecordSchema$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CoordinatorOutcomeRecordSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Outcome", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Outcome", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/CoordinatorOutcomeTraceRecord");

    $.Field({Static:false, Public:false}, "transactionId", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "outcome", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionOutcome"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Outcome", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFaultedSchema */ 

(function RegistrationCoordinatorFaultedSchema$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFaultedSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.Channels.MessageFault")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Fault", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Fault", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegistrationCoordinatorFaultedTraceRecord");

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Field({Static:false, Public:false}, "fault", $asm22.TypeRef("System.ServiceModel.Channels.MessageFault"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false}, "Fault", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFailedSchema */ 

(function RegistrationCoordinatorFailedSchema$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorFailedSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegistrationCoordinatorFailedTraceRecord");

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema */ 

(function RegistrationCoordinatorResponseInvalidMetadataSchema$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Instance", 
      new JSIL.MethodSignature($.Type, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "schemaId", $.String);

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    $.Property({Static:false, Public:false}, "Protocol", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema10 */ 

(function RegistrationCoordinatorResponseInvalidMetadataSchema10$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegistrationCoordinatorResponseInvalidMetadataTraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddressAugust2004"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema11 */ 

(function RegistrationCoordinatorResponseInvalidMetadataSchema11$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistrationCoordinatorResponseInvalidMetadataSchema11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), 
          $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.Constant({Static:true , Public:false}, "id", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/RegistrationCoordinatorResponseInvalidMetadata11TraceRecord");

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress10"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterSchema */ 

(function PerformanceCounterSchema$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PerformanceCounterSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "schemaId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/PerformanceCounterTraceRecord");

    $.Field({Static:false, Public:false}, "counterName", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment */ 

(function TransactionEnlistment$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ActivateTransactionContextManager", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToLookupTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.UInt32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateEnlistmentOptions", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"), [
          $.UInt32, $.Boolean, 
          $asm27.TypeRef("System.Transactions.IsolationLevel"), $asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTransactionContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "DeliverCallback", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.Status"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAndActivateTransactionContextManager", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextManager", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enlistment", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistmentId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Retries", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StateMachine", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContextManager", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Retries", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCallback", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTransferEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndTraceEnlistmentOptions", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "stateMachine", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"));

    $.Field({Static:false, Public:false}, "ourContextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));

    $.Field({Static:false, Public:false}, "enlistment", $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "lastCallback", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"));

    $.Field({Static:false, Public:false}, "lastCallbackState", $.Object);

    $.Field({Static:false, Public:false}, "retries", $.Int32);

    $.Field({Static:false, Public:false}, "removeEnlistmentFromLookupTable", $.Boolean);

    $.Property({Static:false, Public:true }, "State", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Property({Static:false, Public:true }, "ContextManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"));

    $.Property({Static:false, Public:true }, "Enlistment", $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"));

    $.Property({Static:false, Public:true }, "EnlistmentId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "StateMachine", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.StateMachine"));

    $.Property({Static:false, Public:true }, "Retries", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistmentBase */ 

(function CoordinatorEnlistmentBase$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistmentBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParticipantService", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorProxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantService", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCoordinatorProxy", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"))
    );

    $.Field({Static:false, Public:false}, "participantService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "coordinatorProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"));

    $.Property({Static:false, Public:true }, "CoordinatorProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"));

    $.Property({Static:false, Public:true }, "ParticipantService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment */ 

(function VolatileCoordinatorEnlistment$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistmentBase"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Coordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"))
    );

    $.Field({Static:false, Public:false}, "coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "Coordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment */ 

(function CoordinatorEnlistment$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistmentBase"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CoordinatorEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), 
          $asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConfigureEnlistment", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistPrePrepareEvent", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastCompletedVolatileCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreparingVolatileCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegisterVolatileCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationProxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuperiorContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuperiorIssuedToken", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OnCoordinatorEnlisted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "OnDurableCoordinatorActive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "OnEnlistPrePrepare", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnlistPrePrepareEvent", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LastCompletedVolatileCoordinator", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreparingVolatileCoordinator", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RegisterVolatileCoordinator", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetRegistrationProxy", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"))
    );

    $.Field({Static:false, Public:false}, "registerVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Field({Static:false, Public:false}, "preparingVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Field({Static:false, Public:false}, "lastCompletedVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Field({Static:false, Public:false}, "recoveredCoordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "superiorContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Field({Static:false, Public:false}, "superiorRstr", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Field({Static:false, Public:false}, "registrationProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"));

    $.Field({Static:false, Public:false}, "enlistPrePrepareEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"));

    $.Field({Static:false, Public:false}, "volatileCoordinators", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment")]));

    $.Property({Static:false, Public:true }, "SuperiorContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Property({Static:false, Public:true }, "SuperiorIssuedToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Property({Static:false, Public:true }, "RegistrationProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"));

    $.Property({Static:false, Public:true }, "RegisterVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "PreparingVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "LastCompletedVolatileCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.VolatileCoordinatorEnlistment"));

    $.Property({Static:false, Public:true }, "EnlistPrePrepareEvent", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmEnlistPrePrepareEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment */ 

(function ParticipantEnlistment$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ParticipantEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), 
          $asm07.TypeRef("System.Guid"), $asm22.TypeRef("System.ServiceModel.EndpointAddress")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm22.TypeRef("System.ServiceModel.Transactions.WsatRegistrationHeader"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConfigureEnlistment", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Transactions.WsatRegistrationHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCoordinatorService", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ControlProtocol", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorService", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastMessageTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantProxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeoutEstimate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OnParticipantRegistered", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "OnSubordinateRegistered", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LastMessageTime", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "protocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "participantProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy"));

    $.Field({Static:false, Public:false}, "timeoutEstimate", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "lastMessageTime", $.Int64);

    $.Property({Static:false, Public:true }, "TimeoutEstimate", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ControlProtocol", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ControlProtocol"));

    $.Property({Static:false, Public:true }, "LastMessageTime", $.Int64);

    $.Property({Static:false, Public:true }, "CoordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "ParticipantProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment */ 

(function CompletionEnlistment$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.CompletionEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConfigureEnlistment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorService", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.EndpointAddress"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParticipantProxy", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OnRootTransactionCreated", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCompletionProxy", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"))
    );

    $.Field({Static:false, Public:false}, "coordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Field({Static:false, Public:false}, "participantProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"));

    $.Property({Static:false, Public:true }, "CoordinatorService", $asm22.TypeRef("System.ServiceModel.EndpointAddress"));

    $.Property({Static:false, Public:true }, "ParticipantProxy", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.LookupTables */ 

(function LookupTables$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.LookupTables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Threading.ReaderWriterLock"), 
          "!!0", "!!1"
        ], ["T", "S"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEnlistment", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddTransactionContextManager", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Threading.ReaderWriterLock"), 
          "!!0"
        ], ["T", "S"])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindEnlistment", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindOrAdd", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Threading.ReaderWriterLock"), 
          "!!0", "!!1", 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], ["T", "S"])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindOrAddTransactionContextManager", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindTransactionContextManager", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", "!!1"]), $asm07.TypeRef("System.Threading.ReaderWriterLock"), 
          "!!0", "!!1"
        ], ["T", "S"])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEnlistment", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveTransactionContextManager", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "transactionLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "enlistmentLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "enlistments", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Guid"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment")]));

    $.Field({Static:false, Public:false}, "transactions", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContextManager")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper */ 

(function PerformanceCounterWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementBy", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.Field({Static:false, Public:false}, "counter", $asm0A.TypeRef("System.Diagnostics.PerformanceCounter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PerformanceCounterHolder */ 

(function PerformanceCounterHolder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PerformanceCounterHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AverageParticipantCommitResponseTime", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AverageParticipantCommitResponseTimeBase", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AverageParticipantPrepareResponseTime", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AverageParticipantPrepareResponseTimeBase", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommitRetryCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultsReceivedCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultsSentCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageSendFailureCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreparedRetryCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrepareRetryCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplayRetryCountPerInterval", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"))
    );

    $.Field({Static:false, Public:false}, "messageSendFailureCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "prepareRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "commitRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "preparedRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "replayRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "faultsReceivedCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "faultsSentCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "averageParticipantPrepareResponseTime", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "averageParticipantPrepareResponseTimeBase", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "averageParticipantCommitResponseTime", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Field({Static:false, Public:false}, "averageParticipantCommitResponseTimeBase", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "MessageSendFailureCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "PrepareRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "CommitRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "PreparedRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "ReplayRetryCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "FaultsReceivedCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "FaultsSentCountPerInterval", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "AverageParticipantPrepareResponseTime", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "AverageParticipantPrepareResponseTimeBase", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "AverageParticipantCommitResponseTime", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));

    $.Property({Static:false, Public:true }, "AverageParticipantCommitResponseTimeBase", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterWrapper"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Protocol.ProtocolVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.ProtocolVersion", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Version10: 1, 
    Version11: 2, 
  }
);

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolVersionHelper */ 

(function ProtocolVersionHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.ProtocolVersionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AssertProtocolVersion", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertProtocolVersion10", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertProtocolVersion11", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PluggableProtocol */ 

(function PluggableProtocol$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PluggableProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CoordinatorService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MarshalCapabilities", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropagationService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProtocolInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Id", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Name", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "protocolProviderState", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderState"));

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "protocolId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true , Virtual:true }, "CoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"));

    $.Property({Static:false, Public:true , Virtual:true }, "PropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderState"));

    $.Property({Static:false, Public:true , Virtual:true }, "MarshalCapabilities", $.UInt32);

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PluggableProtocol10 */ 

(function PluggableProtocol10$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PluggableProtocol"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PluggableProtocol10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProtocolInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ProtocolGuid", $asm07.TypeRef("System.Guid"));

    $.Constant({Static:true , Public:false}, "ProtocolName", $.String, "WS-AtomicTransaction 1.0");


    function PluggableProtocol10__cctor () {
      $thisType.ProtocolGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PluggableProtocol10__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolId", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.PluggableProtocol11 */ 

(function PluggableProtocol11$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PluggableProtocol"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.PluggableProtocol11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProtocolInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ProtocolGuid", $asm07.TypeRef("System.Guid"));

    $.Constant({Static:true , Public:false}, "ProtocolName", $.String, "WS-AtomicTransaction 1.1");


    function PluggableProtocol11__cctor () {
      $thisType.ProtocolGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PluggableProtocol11__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolId", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolInformationReader */ 

(function ProtocolInformationReader$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ProtocolInformationReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckFlags", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolInformationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BasePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HttpsPort", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClustered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuedTokensEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsV10Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsV11Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkClientAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkInboundAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkOutboundAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadProtocolInformation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.Field({Static:false, Public:false}, "httpsPort", $.Int32);

    $.Field({Static:false, Public:false}, "hostName", $.String);

    $.Field({Static:false, Public:false}, "nodeName", $.String);

    $.Field({Static:false, Public:false}, "basePath", $.String);

    $.Field({Static:false, Public:false}, "maxTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "flags", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolInformationFlags"));

    $.Field({Static:false, Public:false}, "isV10Enabled", $.Boolean);

    $.Field({Static:false, Public:false}, "isV11Enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "HttpsPort", $.Int32);

    $.Property({Static:false, Public:true }, "HostName", $.String);

    $.Property({Static:false, Public:true }, "NodeName", $.String);

    $.Property({Static:false, Public:true }, "BasePath", $.String);

    $.Property({Static:false, Public:true }, "MaxTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IssuedTokensEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "NetworkInboundAccess", $.Boolean);

    $.Property({Static:false, Public:true }, "NetworkOutboundAccess", $.Boolean);

    $.Property({Static:false, Public:true }, "NetworkClientAccess", $.Boolean);

    $.Property({Static:false, Public:true }, "IsClustered", $.Boolean);

    $.Property({Static:false, Public:true }, "IsV10Enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "IsV11Enabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Protocol.ProtocolInformationMajorVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.ProtocolInformationMajorVersion", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    v1: 1, 
  }
);

/* enum Microsoft.Transactions.Wsat.Protocol.ProtocolInformationMinorVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.ProtocolInformationMinorVersion", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    v1: 1, 
    v2: 2, 
  }
);

/* enum Microsoft.Transactions.Wsat.Protocol.ProtocolInformationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.ProtocolInformationFlags", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    IssuedTokensEnabled: 1, 
    NetworkClientAccess: 2, 
    NetworkInboundAccess: 4, 
    NetworkOutboundAccess: 8, 
    IsClustered: 16, 
  }
);

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolInformationWriter */ 

(function ProtocolInformationWriter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ProtocolInformationWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetProtocolInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProtocolInformationFlags", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolInformationFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteProtocolInformation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.ProtocolState */ 

(function ProtocolState$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.ProtocolState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager"), $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupOnFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueRecoveryReplay", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TmReplayEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActivationCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.ActivationCoordinator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.CompletionCoordinator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCoordinatorListener", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Config", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.Configuration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugTraceSink", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.DebugTracingEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElapsedTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Faults", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FaultSender", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.FaultSender"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogEntrySerialization", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntrySerialization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lookup", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.LookupTables"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Perf", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterHolder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Recovering", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationCoordinator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationCoordinatorListener", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegistrationParticipant", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationParticipant"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Service", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_States", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.StateContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimerManager", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionManager", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionManagerReceive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerReceive"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionManagerSend", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerSend"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TwoPhaseCommitCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitCoordinator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TwoPhaseCommitCoordinatorListener", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TwoPhaseCommitParticipant", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitParticipant"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TwoPhaseCommitParticipantListener", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessPendingRecoveryEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RecoveryBeginning", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RecoveryComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartListeners", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StopListeners", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TryCreateCompletionParticipantProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CompletionParticipantProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryCreateRegistrationProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.RegistrationProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryCreateTwoPhaseCommitCoordinatorProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitCoordinatorProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryCreateTwoPhaseCommitParticipantProxy", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.TwoPhaseCommitParticipantProxy"), [$asm22.TypeRef("System.ServiceModel.EndpointAddress")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnqueueRecoveryOutcome", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.ParticipantCallbackEvent")])
    );

    $.Field({Static:false, Public:false}, "processId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "protocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Field({Static:false, Public:false}, "tm", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager"));

    $.Field({Static:false, Public:false}, "tmReceive", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerReceive"));

    $.Field({Static:false, Public:false}, "tmSend", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerSend"));

    $.Field({Static:false, Public:false}, "config", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.Configuration"));

    $.Field({Static:false, Public:false}, "allStates", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.StateContainer"));

    $.Field({Static:true , Public:false}, "perfCounters", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterHolder"));

    $.Field({Static:false, Public:false}, "lookupTables", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.LookupTables"));

    $.Field({Static:false, Public:false}, "timerManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerManager"));

    $.Field({Static:true , Public:false}, "clock", $asm0A.TypeRef("System.Diagnostics.Stopwatch"));

    $.Field({Static:false, Public:false}, "coordination", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Field({Static:false, Public:false}, "activationCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.ActivationCoordinator"));

    $.Field({Static:false, Public:false}, "registrationCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationCoordinator"));

    $.Field({Static:false, Public:false}, "registrationParticipant", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationParticipant"));

    $.Field({Static:false, Public:false}, "completionCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.CompletionCoordinator"));

    $.Field({Static:false, Public:false}, "twoPhaseCommitCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitCoordinator"));

    $.Field({Static:false, Public:false}, "twoPhaseCommitParticipant", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitParticipant"));

    $.Field({Static:false, Public:false}, "activationCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Field({Static:false, Public:false}, "registrationCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Field({Static:false, Public:false}, "completionCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Field({Static:false, Public:false}, "twoPhaseCommitCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Field({Static:false, Public:false}, "twoPhaseCommitParticipantListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Field({Static:false, Public:false}, "debugTrace", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.DebugTracingEventSink"));

    $.Field({Static:false, Public:false}, "faults", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"));

    $.Field({Static:false, Public:false}, "faultsender", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.FaultSender"));

    $.Field({Static:false, Public:false}, "recoveryQueue", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.SynchronizationEvent")]));

    $.Field({Static:false, Public:false}, "recovering", $.Boolean);

    $.Field({Static:false, Public:false}, "recoveryLock", $.Object);

    $.Field({Static:false, Public:false}, "serializer", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntrySerialization"));

    $.Property({Static:false, Public:true }, "ProcessId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolVersion"));

    $.Property({Static:false, Public:true }, "TransactionManager", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager"));

    $.Property({Static:false, Public:true }, "TransactionManagerReceive", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerReceive"));

    $.Property({Static:false, Public:true }, "TransactionManagerSend", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TransactionManagerSend"));

    $.Property({Static:false, Public:true }, "Config", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.Configuration"));

    $.Property({Static:false, Public:true }, "States", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.StateContainer"));

    $.Property({Static:false, Public:true }, "Perf", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.PerformanceCounterHolder"));

    $.Property({Static:false, Public:true }, "Lookup", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.LookupTables"));

    $.Property({Static:false, Public:true }, "TimerManager", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TimerManager"));

    $.Property({Static:false, Public:true }, "ElapsedTime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ActivationCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.ActivationCoordinator"));

    $.Property({Static:false, Public:true }, "RegistrationCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationCoordinator"));

    $.Property({Static:false, Public:true }, "RegistrationParticipant", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.RegistrationParticipant"));

    $.Property({Static:false, Public:true }, "CompletionCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.CompletionCoordinator"));

    $.Property({Static:false, Public:true }, "TwoPhaseCommitCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitCoordinator"));

    $.Property({Static:false, Public:true }, "TwoPhaseCommitParticipant", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.TwoPhaseCommitParticipant"));

    $.Property({Static:false, Public:true }, "RegistrationCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Property({Static:false, Public:true }, "CompletionCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Property({Static:false, Public:true }, "TwoPhaseCommitCoordinatorListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Property({Static:false, Public:true }, "TwoPhaseCommitParticipantListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.ICoordinationListener"));

    $.Property({Static:false, Public:true }, "Service", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationService"));

    $.Property({Static:false, Public:true }, "DebugTraceSink", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.DebugTracingEventSink"));

    $.Property({Static:false, Public:true }, "Faults", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Faults"));

    $.Property({Static:false, Public:true }, "FaultSender", $asm04.TypeRef("Microsoft.Transactions.Wsat.InputOutput.FaultSender"));

    $.Property({Static:false, Public:true }, "Recovering", $.Boolean);

    $.Property({Static:false, Public:true }, "LogEntrySerialization", $asm04.TypeRef("Microsoft.Transactions.Wsat.Recovery.LogEntrySerialization"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.StateContainer */ 

(function StateContainer$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.StateContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionAborted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionAborting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCommitted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCommitting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCreated", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionCreating", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionInitializationFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompletionInitializing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorAborted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorAwaitingEndOfRecovery", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorCommitted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorCommitting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorEnlisted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorEnlisting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorFailedRecovery", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorForgotten", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorInitializationFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorInitializing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorPrepared", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorPreparing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorReadOnlyInDoubt", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorRecovered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorRecovering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorRegisteringBoth", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorRegisteringDurable", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorRegisteringVolatile", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorVolatileActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorVolatilePreparing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorVolatilePreparingRegistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorVolatilePreparingRegistering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableAborted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableCommitted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableCommitting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableFailedRecovery", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableInDoubt", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableInitializationFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurablePrepared", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurablePreparing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRecovering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRecoveryAwaitingCommit", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRecoveryAwaitingRollback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRecoveryReceivedCommit", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRecoveryReceivedRollback", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRegistering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableRejoined", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DurableUnregistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubordinateActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubordinateFinished", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubordinateInitializing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubordinateRegistering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContextActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContextFinished", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContextInitializing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContextInitializingCoordinator", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileAborted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileAborting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileCommitted", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileCommitting", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileInDoubt", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileInitializationFailed", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePhaseOneUnregistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePhaseZeroActive", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePhaseZeroUnregistered", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePrepared", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePrePrepared", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatilePrePreparing", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileRegistering", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"))
    );

    $.Field({Static:false, Public:false}, "coordinatorInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorEnlisting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorEnlisted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorRegisteringBoth", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorRegisteringDurable", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorRegisteringVolatile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorVolatileActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorVolatilePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorVolatilePreparingRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorVolatilePreparingRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorPreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorPrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorRecovering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorRecovered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorAwaitingEndOfRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorFailedRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorForgotten", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorReadOnlyInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "coordinatorInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionCreating", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionCreated", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionAborting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "completionInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "subordinateInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "subordinateRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "subordinateActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "subordinateFinished", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durablePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durablePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRecovering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRejoined", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRecoveryAwaitingCommit", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRecoveryReceivedCommit", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRecoveryAwaitingRollback", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableRecoveryReceivedRollback", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableFailedRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "durableInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePhaseZeroActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePhaseZeroUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePhaseOneUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePrePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePrePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatilePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileAborting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "volatileInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "transactionContextInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "transactionContextInitializingCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "transactionContextActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Field({Static:false, Public:false}, "transactionContextFinished", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorEnlisting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorEnlisted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorRegisteringBoth", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorRegisteringDurable", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorRegisteringVolatile", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorVolatileActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorVolatilePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorVolatilePreparingRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorVolatilePreparingRegistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorPreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorPrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorRecovering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorRecovered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorAwaitingEndOfRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorFailedRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorForgotten", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorReadOnlyInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CoordinatorInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionCreating", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionCreated", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionAborting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "CompletionInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "SubordinateInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "SubordinateRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "SubordinateActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "SubordinateFinished", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurablePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurablePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRecovering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRejoined", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRecoveryAwaitingCommit", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRecoveryReceivedCommit", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRecoveryAwaitingRollback", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableRecoveryReceivedRollback", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableFailedRecovery", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "DurableInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileRegistering", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePhaseZeroActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePhaseZeroUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePhaseOneUnregistered", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePrePreparing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePrePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatilePrepared", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileCommitting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileAborting", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileCommitted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileAborted", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileInDoubt", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "VolatileInitializationFailed", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "TransactionContextInitializing", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "TransactionContextInitializingCoordinator", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "TransactionContextActive", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));

    $.Property({Static:false, Public:true }, "TransactionContextFinished", $asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.State"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RegistryConfigurationProvider */ 

(function RegistryConfigurationProvider$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.RegistryConfigurationProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ConfigurationProvider"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInteger", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadMultiString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "regKey", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Transactions.Wsat.Protocol.ITimerRecipient */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Wsat.Protocol.ITimerRecipient", false, [], function ($) {
    $.Method({}, "get_NextNotification", JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan")));
    $.Method({}, "get_UniqueId", JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid")));
    $.Method({}, "OnTimerNotification", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "NextNotification");
    $.Property({}, "UniqueId");
  }, []);

/* class Microsoft.Transactions.Wsat.Protocol.TimerManager */ 

(function TimerManager$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TimerManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ActivateTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ITimerRecipient"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeactivateTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnTimer", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ITimerRecipient"))
    );

    $.Field({Static:false, Public:false}, "state", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"));

    $.Field({Static:false, Public:false}, "timerList", $asm07.TypeRef("System.Collections.SortedList"));

    $.Field({Static:false, Public:false}, "timer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "active", $.Boolean);

    $.Field({Static:false, Public:false}, "reminderGranularity", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "reminderTolerance", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "maxNotificationTime", $asm07.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionContext */ 

(function TransactionContext$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TransactionContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"), $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinationContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuedToken", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Field({Static:false, Public:false}, "issuedToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));

    $.Property({Static:false, Public:true }, "CoordinationContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.CoordinationContext"));

    $.Property({Static:false, Public:true }, "IssuedToken", $asm22.TypeRef("System.ServiceModel.Security.RequestSecurityTokenResponse"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.TransactionContextManager */ 

(function TransactionContextManager$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionEnlistment"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TransactionContextManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.ProtocolState"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Requests", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContext", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnStateMachineComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Fault", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransactionContext", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"))
    );

    $.Field({Static:false, Public:false}, "identifier", $.String);

    $.Field({Static:false, Public:false}, "context", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"));

    $.Field({Static:false, Public:false}, "fault", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Field({Static:false, Public:false}, "requests", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent")]));

    $.Property({Static:false, Public:true }, "Identifier", $.String);

    $.Property({Static:false, Public:true }, "TransactionContext", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TransactionContext"));

    $.Property({Static:false, Public:true }, "Fault", $asm04.TypeRef("Microsoft.Transactions.Wsat.Messaging.Fault"));

    $.Property({Static:false, Public:true }, "Requests", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm04.TypeRef("Microsoft.Transactions.Wsat.StateMachines.TransactionContextEnlistTransactionEvent")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.WsatEtwTraceListener */ 

(function WsatEtwTraceListener$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.WsatEtwTraceListener", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(4, "data", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(5, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceInternal", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $asm0A.TypeRef("System.Diagnostics.TraceEventType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceTypeOf", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TraceType"), [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Wsat.Protocol.EtwStructSizes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.EtwStructSizes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SizeofGuid: 16, 
    SizeofMofField: 16, 
    SizeofEventHeader: 48, 
    SizeofBaseEvent: 176, 
  }
);

/* enum Microsoft.Transactions.Wsat.Protocol.TraceType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Wsat.Protocol.TraceType", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Trace: 0, 
    Start: 1, 
    Stop: 2, 
    Transfer: 5, 
    Suspend: 10, 
    Resume: 11, 
  }
);

/* class Microsoft.Transactions.Wsat.Protocol.EtwTrace */ 

(function EtwTrace$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.EtwTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Provider", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceProvider"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TraceType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceInternal", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Guid"), $.String, 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TraceType"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceTransfer", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceTransfer", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid")])
    );

    $.Field({Static:true , Public:false}, "WsatTraceGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "WsatProviderGuid", $asm07.TypeRef("System.Guid"));

    $.Constant({Static:true , Public:false}, "MaxSupportedStringSize", $.Int32, 65486);

    $.Field({Static:true , Public:false}, "provider", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceProvider"));

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);


    function EtwTrace__cctor () {
      $thisType.WsatTraceGuid = new $asm07.System.Guid();
      $thisType.WsatProviderGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EtwTrace__cctor
    );

    $.Property({Static:true , Public:false}, "Provider", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceProvider"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Transactions.Wsat.Protocol.EtwTraceCallback */ 

JSIL.MakeDelegate("Microsoft.Transactions.Wsat.Protocol.EtwTraceCallback", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.UInt32"), [
      $asm07.TypeRef("System.UInt32"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Byte")])
    ]));

/* class Microsoft.Transactions.Wsat.Protocol.EtwTraceProvider */ 

(function EtwTraceProvider$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.EtwTraceProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EtwNotificationCallback", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ShouldTrace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LevelFromInt", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.SourceLevels"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Trace", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.MofEvent")])])
    );

    $.Field({Static:false, Public:false}, "controlGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "eventClassGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "etwProc", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceCallback"));

    $.Field({Static:false, Public:false}, "registrationHandle", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwHandle"));

    $.Field({Static:false, Public:false}, "traceHandle", $.UInt64);

    $.Property({Static:false, Public:false}, "ShouldTrace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.RequestCodes */ 

(function RequestCodes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.RequestCodes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "GetAllData", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "GetSingleInstance", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "SetSingleInstance", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "SetSingleItem", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "EnableEvents", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DisableEvents", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "EnableCollection", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "DisableCollection", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "RegInfo", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "ExecuteMethod", $.Int32, 9);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.EventTraceHeader */ 

(function EventTraceHeader$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.EventTraceHeader", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 48, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "BufferSize", $.UInt16);

    $.Field({Static:false, Public:false, Offset: 4}, "Type", $.Byte);

    $.Field({Static:false, Public:false, Offset: 5}, "Level", $.Byte);

    $.Field({Static:false, Public:false, Offset: 6}, "Version", $.Int16);

    $.Field({Static:false, Public:false, Offset: 8}, "HistoricalContext", $.UInt64);

    $.Field({Static:false, Public:false, Offset: 16}, "TimeStamp", $.Int64);

    $.Field({Static:false, Public:false, Offset: 24}, "Guid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 40}, "ClientContext", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 44}, "Flags", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.GuidEvent */ 

(function GuidEvent$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.GuidEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 64, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "Header", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EventTraceHeader"));

    $.Field({Static:false, Public:false, Offset: 48}, "Guid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.Guid2Event */ 

(function Guid2Event$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.Guid2Event", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 80, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "Header", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EventTraceHeader"));

    $.Field({Static:false, Public:false, Offset: 48}, "Guid1", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 64}, "Guid2", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.MofEvent */ 

(function MofEvent$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.MofEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 64, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "Header", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EventTraceHeader"));

    $.Field({Static:false, Public:false, Offset: 48}, "Mof", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.MofField"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.Mof3Event */ 

(function Mof3Event$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.Mof3Event", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 96, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "Header", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EventTraceHeader"));

    $.Field({Static:false, Public:false, Offset: 48}, "Mof1", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.MofField"));

    $.Field({Static:false, Public:false, Offset: 64}, "Mof2", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.MofField"));

    $.Field({Static:false, Public:false, Offset: 80}, "Mof3", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.MofField"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.MofField */ 

(function MofField$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.MofField", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 16, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "Data", $.IntPtr);

    $.Field({Static:false, Public:false, Offset: 8}, "Length", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 12}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Wsat.Protocol.TraceGuidRegistration */ 

(function TraceGuidRegistration$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.TraceGuidRegistration", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Guid", $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Guid")]));

    $.Field({Static:false, Public:false}, "RegHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.WnodeFlags */ 

(function WnodeFlags$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.WnodeFlags", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "WnodeFlagTracedGuid", $.UInt32, 131072);

    $.Constant({Static:true , Public:false}, "WnodeFlagLogWnode", $.UInt32, 262144);

    $.Constant({Static:true , Public:false}, "WnodeFlagUseGuidPointer", $.UInt32, 524288);

    $.Constant({Static:true , Public:false}, "WnodeFlagUseMofPointer", $.UInt32, 1048576);

    $.Constant({Static:true , Public:false}, "WnodeFlagUseNoHeader", $.UInt32, 2097152);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.EtwNativeMethods */ 

(function EtwNativeMethods$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Transactions.Wsat.Protocol.EtwNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetTraceEnableFlags", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetTraceEnableLevel", 
      new JSIL.MethodSignature($.Byte, [$.UInt64]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "RegisterTraceGuids", 
      new JSIL.MethodSignature($.UInt32, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceCallback"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TraceGuidRegistration")]), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
        EntryPoint: "RegisterTraceGuidsW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64, $jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "UnregisterTraceGuids", 
      new JSIL.MethodSignature($.Int32, [$.UInt64]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Wsat.Protocol.EtwHandle */ 

(function EtwHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "Microsoft.Transactions.Wsat.Protocol.EtwHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:false}, "RegisterTraceGuids", 
      new JSIL.MethodSignature($.Type, [
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.EtwTraceCallback"), $asm07.TypeRef("System.Guid"), 
          $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.TraceGuidRegistration")
        ])
    );

    $.Field({Static:false, Public:false}, "traceHandle", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Bridge");
/* class Microsoft.Transactions.Bridge.DiagnosticUtility */ 

(function DiagnosticUtility$Members () {
  var $, $thisType;




























  JSIL.MakeStaticClass("Microsoft.Transactions.Bridge.DiagnosticUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "FailFast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DiagnosticTrace", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EtwListener", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.WsatEtwTraceListener"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventLog", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Level", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldUseActivity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Utility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDiagnosticTraceImpl", 
      new JSIL.MethodSignature(null, [$asm33.TypeRef("System.ServiceModel.Diagnostics.TraceSourceKind"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitializeServiceModelSource", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.SourceLevels"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTransactionSource", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeFinalHandler", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Level", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceHandledException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TraceSourceName", $.String, "Microsoft.Transactions.Bridge");

    $.Constant({Static:true , Public:false}, "EventSourceName", $.String, "Microsoft.Transactions.Bridge 4.0.0.0");

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", $.String, "Default");

    $.Field({Static:true , Public:false}, "level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"), function ($pi) {
        return $asm0A.System.Diagnostics.SourceLevels.Off;
      });

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldUseActivity", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "exceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), null);

    $.Field({Static:true , Public:false}, "utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"), null);

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "bridgeTracingInitialized", $.Boolean);

    $.Field({Static:true , Public:false}, "serviceModelTracingInitialized", $.Boolean);

    $.Field({Static:true , Public:false}, "etwListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.WsatEtwTraceListener"));

    $.Property({Static:true , Public:false}, "Level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"));

    $.Property({Static:true , Public:false}, "DiagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Property({Static:true , Public:false}, "ExceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"));

    $.Property({Static:true , Public:false}, "Utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"));

    $.Property({Static:true , Public:false}, "EventLog", $asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"));

    $.Property({Static:true , Public:false}, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldUseActivity", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceVerbose", $.Boolean);

    $.Property({Static:true , Public:false}, "EtwListener", $asm04.TypeRef("Microsoft.Transactions.Wsat.Protocol.WsatEtwTraceListener"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Bridge.Notifications */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.Notifications", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Phase0: 1, 
    TwoPhaseCommit: 2, 
    Outcome: 4, 
    AllProtocols: 7, 
    InDoubt: 8, 
    Volatile: 16, 
    All: 31, 
  }
);

/* class Microsoft.Transactions.Bridge.Enlistment */ 

(function Enlistment$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.Enlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistmentId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistmentOptions", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalTransactionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotificationMask", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Notifications"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolProviderContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoteTransactionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionManagerContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRecoveryData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnlistmentOptions", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalTransactionId", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotificationMask", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.Notifications"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProtocolProviderContext", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemoteTransactionId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransactionManagerContext", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetRecoveryData", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "localTransactionId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "enlistmentId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "remoteTransactionId", $.String);

    $.Field({Static:false, Public:false}, "recoveryData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "notificationMask", $asm04.TypeRef("Microsoft.Transactions.Bridge.Notifications"));

    $.Field({Static:false, Public:false}, "enlistmentOptions", $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"));

    $.Field({Static:false, Public:false}, "transactionManagerContext", $.Object);

    $.Field({Static:false, Public:false}, "protocolProviderContext", $.Object);

    $.Property({Static:false, Public:true }, "EnlistmentId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "LocalTransactionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "RemoteTransactionId", $.String);

    $.Property({Static:false, Public:true }, "TransactionManagerContext", $.Object);

    $.Property({Static:false, Public:true }, "ProtocolProviderContext", $.Object);

    $.Property({Static:false, Public:true }, "NotificationMask", $asm04.TypeRef("Microsoft.Transactions.Bridge.Notifications"));

    $.Property({Static:false, Public:true }, "EnlistmentOptions", $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.PluggableProtocolException */ 

(function PluggableProtocolException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Bridge.PluggableProtocolException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.TransactionBridgeException */ 

(function TransactionBridgeException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Transactions.Bridge.TransactionBridgeException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Bridge.ProtocolProviderState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.ProtocolProviderState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Uninitialized: 0, 
    Initialized: 1, 
    Starting: 2, 
    Started: 3, 
    Stopping: 4, 
    Stopped: 5, 
  }
);

/* enum Microsoft.Transactions.Bridge.ProtocolMarshalCapabilities */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.ProtocolMarshalCapabilities", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    ExplicitMarshalRequest: 1, 
    IncludeAsDefault: 2, 
    UseStaticProtocolInformation: 4, 
  }
);

/* interface Microsoft.Transactions.Bridge.IProtocolProvider */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Bridge.IProtocolProvider", false, [], function ($) {
    $.Method({}, "Initialize", JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManager")));
    $.Method({}, "Start", JSIL.MethodSignature.Void);
    $.Method({}, "Stop", JSIL.MethodSignature.Void);
    $.Method({}, "get_CoordinatorService", JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService")));
    $.Method({}, "get_PropagationService", JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService")));
    $.Method({}, "get_ProtocolId", JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid")));
    $.Method({}, "get_State", JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderState")));
    $.Method({}, "GetProtocolInformation", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "get_MarshalCapabilities", JSIL.MethodSignature.Return($.UInt32));
    $.Property({}, "CoordinatorService");
    $.Property({}, "PropagationService");
    $.Property({}, "ProtocolId");
    $.Property({}, "State");
    $.Property({}, "MarshalCapabilities");
  }, []);

/* delegate Microsoft.Transactions.Bridge.ProtocolProviderCallback */ 

JSIL.MakeDelegate("Microsoft.Transactions.Bridge.ProtocolProviderCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
      $asm07.TypeRef("System.Object")
    ]));

/* interface Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService", false, [], function ($) {
    $.Method({}, "Commit", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "Prepare", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "PrePrepare", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "SinglePhaseCommit", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "Rollback", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "Forget", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
  }, []);

/* interface Microsoft.Transactions.Bridge.IProtocolProviderPropagationService */ 

JSIL.MakeInterface(
  "Microsoft.Transactions.Bridge.IProtocolProviderPropagationService", false, [], function ($) {
    $.Method({}, "Begin", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "Pull", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), $.Object
        ]));
    $.Method({}, "Push", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), $.Object
        ]));
    $.Method({}, "RecoveryBeginning", JSIL.MethodSignature.Void);
    $.Method({}, "RecoveryComplete", JSIL.MethodSignature.Void);
    $.Method({}, "Rejoin", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "Replay", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "MarshalTransaction", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
    $.Method({}, "EnlistPrePrepare", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.ProtocolProviderCallback"), 
          $.Object
        ]));
  }, []);

/* enum Microsoft.Transactions.Bridge.Status */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.Status", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    Error: 1, 
    Committed: 2, 
    Aborted: 3, 
    Prepared: 4, 
    Readonly: 5, 
    PrePrepared: 6, 
    InDoubt: 7, 
    DuplicateTransaction: 8, 
    TooLate: 9, 
    TransactionNotFound: 10, 
    TooManySubordinateEnlistments: 11, 
    InvalidRecoveryData: 12, 
    LocalPropagation: 13, 
    DuplicatePropagation: 14, 
  }
);

/* enum Microsoft.Transactions.Bridge.TransactionManagerState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.TransactionManagerState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Uninitialized: 0, 
    Initialized: 1, 
    Starting: 2, 
    Started: 3, 
    Stopping: 4, 
    Stopped: 5, 
  }
);

/* delegate Microsoft.Transactions.Bridge.TransactionManagerCallback */ 

JSIL.MakeDelegate("Microsoft.Transactions.Bridge.TransactionManagerCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.Status"), 
      $asm07.TypeRef("System.Object")
    ]));

/* class Microsoft.Transactions.Bridge.EnlistmentOptions */ 

(function EnlistmentOptions$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.EnlistmentOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationFlags", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationFlagsLong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsoLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolationFlags", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolationFlagsLong", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsoLevel", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.Field({Static:false, Public:false}, "expires", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "isoLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Field({Static:false, Public:false}, "isoFlags", $asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"));

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Property({Static:false, Public:true }, "Expires", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsoLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:true }, "IsolationFlags", $asm22.TypeRef("System.ServiceModel.Transactions.IsolationFlags"));

    $.Property({Static:false, Public:true }, "IsolationFlagsLong", $.UInt64);

    $.Property({Static:false, Public:true }, "Description", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.PropagationProtocolsTracing */ 

(function PropagationProtocolsTracing$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Bridge.PropagationProtocolsTracing", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "TraceError", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceVerbose", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "pplTraceSwitch", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Field({Static:true , Public:false}, "dateTimeFormatInfo", $asm07.TypeRef("System.Globalization.DateTimeFormatInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Transactions.Bridge.StringCount */ 

(function StringCount$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Transactions.Bridge.StringCount", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Count", $.Int32);

    $.Field({Static:true , Public:false}, "nullCount", $.Type);


    function StringCount__cctor () {
      $thisType.nullCount = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      StringCount__cctor
    );

    $.Property({Static:true , Public:true }, "Null", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.StateMachineHistory */ 

(function StateMachineHistory$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.StateMachineHistory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEvent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddState", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEvent", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Bridge.StringCount"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadState", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "history", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Microsoft.Transactions.Bridge.StringCount")]));

    $.ImplementInterfaces(
      /* 0 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.TransactionManager */ 

(function TransactionManager$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.TransactionManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BridgeConfiguration", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CoordinatorService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IProtocolProvider", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IProtocolProviderCoordinatorService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IProtocolProviderPropagationService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MaxLogEntrySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropagationService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionManagerCoordinatorService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionManagerPropagationService", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionManagerSettings", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Recover", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionManagerCoordinatorService", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionManagerPropagationService", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionManagerSettings", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.Field({Static:false, Public:false}, "protocolProvider", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProvider"));

    $.Field({Static:false, Public:false}, "protocolProviderCoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"));

    $.Field({Static:false, Public:false}, "protocolProviderPropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService"));

    $.Field({Static:false, Public:false}, "transactionManagerCoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"));

    $.Field({Static:false, Public:false}, "transactionManagerPropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"));

    $.Field({Static:false, Public:false}, "transactionManagerSettings", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"));

    $.Field({Static:false, Public:false}, "id", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "bridgeConfig", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxLogEntrySize", $.Int32);

    $.Property({Static:false, Public:true }, "CoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"));

    $.Property({Static:false, Public:true }, "PropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"));

    $.Property({Static:false, Public:true }, "Settings", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"));

    $.Property({Static:false, Public:true }, "IProtocolProvider", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProvider"));

    $.Property({Static:false, Public:true }, "IProtocolProviderCoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderCoordinatorService"));

    $.Property({Static:false, Public:true }, "IProtocolProviderPropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.IProtocolProviderPropagationService"));

    $.Property({Static:false, Public:false}, "TransactionManagerCoordinatorService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService"));

    $.Property({Static:false, Public:false}, "TransactionManagerPropagationService", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerPropagationService"));

    $.Property({Static:false, Public:false}, "TransactionManagerSettings", $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerSettings"));

    $.Property({Static:false, Public:false}, "BridgeConfiguration", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService */ 

(function TransactionManagerCoordinatorService$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.TransactionManagerCoordinatorService", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrePrepare", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SinglePhaseCommit", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.TransactionManagerPropagationService */ 

(function TransactionManagerPropagationService$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.TransactionManagerPropagationService", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSubordinateEnlistment", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSuperiorEnlistment", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTransaction", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Transactions.Bridge.Enlistment"), $asm04.TypeRef("Microsoft.Transactions.Bridge.EnlistmentOptions"), 
          $asm04.TypeRef("Microsoft.Transactions.Bridge.TransactionManagerCallback"), $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Transactions.Bridge.AuthenticationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Transactions.Bridge.AuthenticationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NoAuthenticationRequired: 0, 
    IncomingAuthenticationRequired: 1, 
    MutualAuthenticationRequired: 2, 
  }
);

/* class Microsoft.Transactions.Bridge.TransactionManagerSettings */ 

(function TransactionManagerSettings$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Transactions.Bridge.TransactionManagerSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AnyNetworkAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuthenticationLevel", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.AuthenticationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClusterResourceType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClustered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NetworkAdministrationAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NetworkClientAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NetworkInboundAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NetworkOutboundAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NetworkTransactionAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VirtualServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsClustered", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ClusterResourceType", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "VirtualServerName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AnyNetworkAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NetworkAdministrationAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NetworkTransactionAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NetworkClientAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NetworkInboundAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NetworkOutboundAccess", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AuthenticationLevel", $asm04.TypeRef("Microsoft.Transactions.Bridge.AuthenticationLevel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Transactions.Bridge.Configuration");
/* class Microsoft.Transactions.Bridge.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Transactions.Bridge.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "AddressPrefix", $.String, "addressPrefix");

    $.Constant({Static:true , Public:false}, "Protocols", $.String, "protocols");

    $.Constant({Static:true , Public:false}, "SectionGroupName", $.String, "microsoft.transactions.bridge");

    $.Constant({Static:true , Public:false}, "TransactionBridgeSectionName", $.String, "transactionBridge");

    $.Constant({Static:true , Public:false}, "TransactionManagerType", $.String, "transactionManagerType");

    $.Constant({Static:true , Public:false}, "Type", $.String, "type");

    $.Constant({Static:true , Public:false}, "WSTransactionSectionName", $.String, "wsTransaction");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.Configuration.ProtocolElement */ 

(function ProtocolElement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "Microsoft.Transactions.Bridge.Configuration.ProtocolElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.Configuration.TransactionBridgeSection */ 

(function TransactionBridgeSection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "Microsoft.Transactions.Bridge.Configuration.TransactionBridgeSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocols", 
      JSIL.MethodSignature.Return($asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionManagerType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransactionManagerType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Constant({Static:true , Public:false}, "dtcGatewayType", $.String, "Microsoft.Transactions.Bridge.Dtc.GatewayTransactionManager, Microsoft.Transactions.Bridge.Dtc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Protocols", $asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["protocols"]; });

    $.Property({Static:false, Public:true }, "TransactionManagerType", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["transactionManagerType"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.Configuration.WSTransactionSection */ 

(function WSTransactionSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "Microsoft.Transactions.Bridge.Configuration.WSTransactionSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddressPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AddressPrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "AddressPrefix", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["addressPrefix"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Transactions.Bridge.Configuration.ProtocolElementCollection */ 

(function ProtocolElementCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "Microsoft.Transactions.Bridge.Configuration.ProtocolElementCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AssertBothWsatProtocolVersions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaults", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "wstxProtocolType10", $.String, "Microsoft.Transactions.Wsat.Protocol.PluggableProtocol10, Microsoft.Transactions.Bridge, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "wstxProtocolType11", $.String, "Microsoft.Transactions.Wsat.Protocol.PluggableProtocol11, Microsoft.Transactions.Bridge, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Property({Static:false, Public:true }, "Item", $asm04.TypeRef("Microsoft.Transactions.Bridge.Configuration.ProtocolElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm04.Microsoft.Transactions.Bridge.Configuration.ProtocolElement.__Type__]; });

})();

/* class Microsoft.Transactions.Bridge.Configuration.TransactionsSectionGroup */ 

(function TransactionsSectionGroup$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "Microsoft.Transactions.Bridge.Configuration.TransactionsSectionGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

