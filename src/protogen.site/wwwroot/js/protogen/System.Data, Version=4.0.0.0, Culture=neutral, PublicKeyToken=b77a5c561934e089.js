/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm11 = JSIL.DeclareAssembly("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class SNINativeMethodWrapper */ 

(function SNINativeMethodWrapper$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SNINativeMethodWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process, $asm07.System.Runtime.Versioning.ResourceScope.Process]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process]; });

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultAppDomain", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System._AppDomain"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process, $asm07.System.Runtime.Versioning.ResourceScope.Process]; });

    $.ExternalMethod({Static:true , Public:false}, "SetData", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process, $asm07.System.Runtime.Versioning.ResourceScope.Process]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Process]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIAddProvider", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+ProviderEnum"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNICheckConnection", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SNIClose", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "SniGetConnectionId", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIGetLastError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("SNINativeMethodWrapper+SNI_Error"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIInitialize", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIOpenMarsSession", 
      new JSIL.MethodSignature($.UInt32, [
          $asm11.TypeRef("SNINativeMethodWrapper+ConsumerInfo"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIOpenSyncEx", 
      new JSIL.MethodSignature($.UInt32, [
          $asm11.TypeRef("SNINativeMethodWrapper+ConsumerInfo"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $.Boolean, $.Int32, 
          $.Boolean, $.Int32, 
          $.Int32, $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketAllocate", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+IOType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketGetData", 
      new JSIL.MethodSignature($.UInt32, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketRelease", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketReset", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+IOType"), 
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+ConsumerNumber")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketSetData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Security.SecureString")]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SNIQueryInfo", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("SNINativeMethodWrapper+QTypes"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIQueryInfo", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("SNINativeMethodWrapper+QTypes"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIReadAsync", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIReadSyncOverAsync", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIRemoveProvider", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+ProviderEnum")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SNISecGenClientContext", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SNISecInitPackage", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIServerEnumClose", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIServerEnumOpen", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIServerEnumRead", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; });

    $.ExternalMethod({Static:true , Public:false}, "SNISetInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm11.TypeRef("SNINativeMethodWrapper+QTypes"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SNITerminate", 
      JSIL.MethodSignature.Return($.UInt32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIWaitForSSLHandshakeToComplete", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceConsumptionAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.Machine, $asm07.System.Runtime.Versioning.ResourceScope.Machine]; });

    $.ExternalMethod({Static:true , Public:false}, "SNIWritePacket", 
      new JSIL.MethodSignature($.UInt32, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.Field({Static:true , Public:false}, "SniMaxComposedSpnLength", $asm07.TypeRef("System.Int32"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

})();

/* enum SNINativeMethodWrapper+QTypes */ 

JSIL.MakeEnum(
  {
    FullName: "SNINativeMethodWrapper+QTypes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SNI_QUERY_CONN_INFO: 0, 
    SNI_QUERY_CONN_BUFSIZE: 1, 
    SNI_QUERY_CONN_KEY: 2, 
    SNI_QUERY_CLIENT_ENCRYPT_POSSIBLE: 3, 
    SNI_QUERY_SERVER_ENCRYPT_POSSIBLE: 4, 
    SNI_QUERY_CERTIFICATE: 5, 
    SNI_QUERY_LOCALDB_HMODULE: 6, 
    SNI_QUERY_CONN_ENCRYPT: 7, 
    SNI_QUERY_CONN_PROVIDERNUM: 8, 
    SNI_QUERY_CONN_CONNID: 9, 
    SNI_QUERY_CONN_PARENTCONNID: 10, 
    SNI_QUERY_CONN_SECPKG: 11, 
    SNI_QUERY_CONN_NETPACKETSIZE: 12, 
    SNI_QUERY_CONN_NODENUM: 13, 
    SNI_QUERY_CONN_PACKETSRECD: 14, 
    SNI_QUERY_CONN_PACKETSSENT: 15, 
    SNI_QUERY_CONN_PEERADDR: 16, 
    SNI_QUERY_CONN_PEERPORT: 17, 
    SNI_QUERY_CONN_LASTREADTIME: 18, 
    SNI_QUERY_CONN_LASTWRITETIME: 19, 
    SNI_QUERY_CONN_CONSUMER_ID: 20, 
    SNI_QUERY_CONN_CONNECTTIME: 21, 
    SNI_QUERY_CONN_HTTPENDPOINT: 22, 
    SNI_QUERY_CONN_LOCALADDR: 23, 
    SNI_QUERY_CONN_LOCALPORT: 24, 
    SNI_QUERY_CONN_SSLHANDSHAKESTATE: 25, 
    SNI_QUERY_CONN_SOBUFAUTOTUNING: 26, 
    SNI_QUERY_CONN_SECPKGNAME: 27, 
    SNI_QUERY_CONN_SECPKGMUTUALAUTH: 28, 
    SNI_QUERY_CONN_CONSUMERCONNID: 29, 
    SNI_QUERY_CONN_SNIUCI: 30, 
    SNI_QUERY_TCP_SKIP_IO_COMPLETION_ON_SUCCESS: 35, 
  }
);

/* enum SNINativeMethodWrapper+ProviderEnum */ 

JSIL.MakeEnum(
  {
    FullName: "SNINativeMethodWrapper+ProviderEnum", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    HTTP_PROV: 0, 
    NP_PROV: 1, 
    SESSION_PROV: 2, 
    SIGN_PROV: 3, 
    SM_PROV: 4, 
    SMUX_PROV: 5, 
    SSL_PROV: 6, 
    TCP_PROV: 7, 
    VIA_PROV: 8, 
    MAX_PROVS: 9, 
    INVALID_PROV: 10, 
  }
);

/* enum SNINativeMethodWrapper+IOType */ 

JSIL.MakeEnum(
  {
    FullName: "SNINativeMethodWrapper+IOType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    READ: 0, 
    WRITE: 1, 
  }
);

/* enum SNINativeMethodWrapper+ConsumerNumber */ 

JSIL.MakeEnum(
  {
    FullName: "SNINativeMethodWrapper+ConsumerNumber", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SNI_Consumer_SNI: 0, 
    SNI_Consumer_SSB: 1, 
    SNI_Consumer_PacketIsReleased: 2, 
    SNI_Consumer_Invalid: 3, 
  }
);

/* delegate SNINativeMethodWrapper+SqlAsyncCallbackDelegate */ 

JSIL.MakeDelegate("SNINativeMethodWrapper+SqlAsyncCallbackDelegate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.UInt32")
    ]));

/* class SNINativeMethodWrapper+ConsumerInfo */ 

(function ConsumerInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SNINativeMethodWrapper+ConsumerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "defaultBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "readDelegate", $asm11.TypeRef("SNINativeMethodWrapper+SqlAsyncCallbackDelegate"));

    $.Field({Static:false, Public:false}, "writeDelegate", $asm11.TypeRef("SNINativeMethodWrapper+SqlAsyncCallbackDelegate"));

    $.Field({Static:false, Public:false}, "key", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

})();

/* class SNINativeMethodWrapper+SNI_Error */ 

(function SNI_Error$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SNINativeMethodWrapper+SNI_Error", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "provider", $asm11.TypeRef("SNINativeMethodWrapper+ProviderEnum"));

    $.Field({Static:false, Public:false}, "errorMessage", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "nativeError", $.UInt32);

    $.Field({Static:false, Public:false}, "sniError", $.UInt32);

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.Field({Static:false, Public:false}, "$function", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

})();

/* class Win32NativeMethods */ 

(function Win32NativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Win32NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTokenRestrictedWrapper", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

})();

/* class NativeOledbWrapper */ 

(function NativeOledbWrapper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "NativeOledbWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IChapteredRowsetReleaseChapter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$.IntPtr, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "ITransactionAbort", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "ITransactionCommit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "MemoryCompare", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.ExternalMethod({Static:true , Public:false}, "MemoryCopy", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.Versioning.ResourceExposureAttribute"), function () { return [$asm07.System.Runtime.Versioning.ResourceScope.None]; });

    $.Field({Static:true , Public:false}, "SizeOfPROPVARIANT", $asm07.TypeRef("System.Int32"), 16);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

})();

/* class AdalException */ 

(function AdalException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "AdalException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.UInt32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCategory", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetState", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStatus", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_category", $.UInt32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_status", $.UInt32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_state", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ADALNativeWrapper */ 

(function ADALNativeWrapper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ADALNativeWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ADALGetAccessToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.IntPtr, 
          $.String, $.String, 
          $asm07.TypeRef("System.ValueType"), $.String, 
          $asm07.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ADALGetAccessToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.ValueType"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ADALGetAccessToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $asm07.TypeRef("System.Security.SecureString"), 
          $.String, $.String, 
          $asm07.TypeRef("System.ValueType"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ADALGetAccessTokenForWindowsIntegrated", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $asm07.TypeRef("System.ValueType"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ADALInitialize", 
      JSIL.MethodSignature.Return($.Int32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
/* class <CrtImplementationDetails>.ModuleLoadException */ 

(function ModuleLoadException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "<CrtImplementationDetails>.ModuleLoadException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:true }, "Nested", $.String, "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleLoadExceptionHandlerException */ 

(function ModuleLoadExceptionHandlerException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), 
      Name: "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "formatString", $.String, "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n");

    $.Field({Static:false, Public:false}, "$lbacking_store$gNestedException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "NestedException", $asm07.TypeRef("System.Exception"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleUninitializer */ 

(function ModuleUninitializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Stack"), 
      Name: "<CrtImplementationDetails>.ModuleUninitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Field({Static:true , Public:false}, "lock", $.Object);

    $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Bid */ 

(function Bid$Members () {
  var $, $thisType;









































































































  JSIL.MakeStaticClass("Bid", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddMetaText", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CorrelationTrace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CorrelationTrace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CorrelationTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DASSERT", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "deterministicStaticInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "doneEntryPoint", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "DTRACE", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DTRACE", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "get_AdvancedOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultCmdSpace", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ID", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoData", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScopeOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "getAppDomainFriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "getIdentity", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Module")])
    );

    $.ExternalMethod({Static:true , Public:false}, "getModulePath", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Module")])
    );

    $.ExternalMethod({Static:true , Public:false}, "initEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "internalInitialize", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Bid+ApiGroup")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PutStr", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeLeave", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetApiGroupBits", 
      new JSIL.MethodSignature($asm11.TypeRef("Bid+ApiGroup"), [$asm11.TypeRef("Bid+ApiGroup"), $asm11.TypeRef("Bid+ApiGroup")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int64, 
          $.UInt32, $.Int32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int64, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int64, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceBin", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt16
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceBinEx", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEx", 
      new JSIL.MethodSignature(null, [$.UInt32, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEx", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceSqlReturn", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "TraceSqlReturn", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "dllName", $.String, "System.Data.dll");

    $.Field({Static:true , Public:false}, "__noData", $.IntPtr);

    $.Field({Static:true , Public:false}, "_setBitsLock", $.Object);

    $.Field({Static:true , Public:false}, "modID", $.IntPtr);

    $.Field({Static:true , Public:false}, "modFlags", $asm11.TypeRef("Bid+ApiGroup"));

    $.Field({Static:true , Public:false}, "modIdentity", $.String);

    $.Field({Static:true , Public:false}, "ctrlCallback", $asm11.TypeRef("Bid+CtrlCB"));

    $.Field({Static:true , Public:false}, "cookieObject", $asm11.TypeRef("Bid+BindingCookie"));

    $.Field({Static:true , Public:false}, "hCookie", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:true , Public:false}, "__defaultCmdSpace", $.IntPtr);

    $.Constant({Static:true , Public:false}, "BidVer", $.Int32, 9210);

    $.Constant({Static:true , Public:false}, "configFlags", $.UInt32, 3489660928);

    $.Field({Static:true , Public:false}, "ai", $asm11.TypeRef("Bid+AutoInit"));


    function Bid__cctor () {
      $thisType.__noData = new $asm07.System.IntPtr();
      $thisType.modID = new $asm07.System.IntPtr();
      $thisType.hCookie = new $asm07.System.Runtime.InteropServices.GCHandle();
      $thisType.__defaultCmdSpace = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Bid__cctor
    );

    $.Property({Static:true , Public:false}, "TraceOn", $.Boolean);

    $.Property({Static:true , Public:false}, "ScopeOn", $.Boolean);

    $.Property({Static:true , Public:false}, "AdvancedOn", $.Boolean);

    $.Property({Static:true , Public:false}, "NoData", $.IntPtr);

    $.Property({Static:true , Public:false}, "ID", $.IntPtr);

    $.Property({Static:true , Public:false}, "IsInitialized", $.Boolean);

    $.Property({Static:true , Public:false}, "DefaultCmdSpace", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Bid+NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;





























































  JSIL.MakeStaticClass("Bid+NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "AddMetaText", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $asm11.TypeRef("Bid+CtlCmd"), $.IntPtr, 
          $.String, $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidCtlProc", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DllBidEntryPoint", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $.String, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Bid+ApiGroup")]), $asm11.TypeRef("Bid+CtrlCB"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Bid+BIDEXTINFO")]), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DllBidEntryPoint", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Bid+ApiGroup")]), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "DllBidFinalize", 
      JSIL.MethodSignature.Void, 
      {
        Module: "System.Data.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "DllBidInitialize", 
      JSIL.MethodSignature.Void, 
      {
        Module: "System.Data.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "PutStr", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidPutStrW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.String, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Boolean, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.String, 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.String, $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32, $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeLeave", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "System.Data.dll", 
        EntryPoint: "DllBidScopeLeave", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int64, $.UInt32, 
          $.Int32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.IntPtr
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Boolean, $.String, 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.Int32, $.Int32, 
          $.Boolean
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int64
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int64
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String, $.String, 
          $.Int64
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Int32, $.Int64
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int64, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int64, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.String, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "TraceBin", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32
        ]), 
      {
        Module: "System.Data.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* enum Bid+ApiGroup */ 

JSIL.MakeEnum(
  {
    FullName: "Bid+ApiGroup", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Off: 0, 
    Default: 1, 
    Trace: 2, 
    Scope: 4, 
    Perf: 8, 
    Resource: 16, 
    Memory: 32, 
    StatusOk: 64, 
    Advanced: 128, 
    MaskBid: 4095, 
    Pooling: 4096, 
    Dependency: 8192, 
    StateDump: 16384, 
    Correlation: 262144, 
    MaskUser: 4294963200, 
    MaskAll: 4294967295, 
  }
);

/* delegate Bid+CtrlCB */ 

JSIL.MakeDelegate("Bid+CtrlCB", false, [], 
  new JSIL.MethodSignature($asm11.TypeRef("Bid+ApiGroup"), [$asm11.TypeRef("Bid+ApiGroup"), $asm11.TypeRef("Bid+ApiGroup")]));

/* class Bid+BindingCookie */ 

(function BindingCookie$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Bid+BindingCookie", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Invalidate", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "_data", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Bid+CtlCmd */ 

JSIL.MakeEnum(
  {
    FullName: "Bid+CtlCmd", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Reverse: 1, 
    Unicode: 2, 
    DcsBase: 1073741824, 
    CmdSpaceCount: 1073741824, 
    CmdSpaceEnum: 1073741828, 
    CmdSpaceQuery: 1073741832, 
    GetEventID: 1073741846, 
    ParseString: 1073741850, 
    AddExtension: 1073741854, 
    AddMetaText: 1073741858, 
    AddResHandle: 1073741862, 
    Shutdown: 1073741866, 
    LastItem: 1073741867, 
    DcsMax: 1610612732, 
    CplBase: 1610612736, 
    CplMax: 2147483644, 
  }
);

/* struct Bid+BIDEXTINFO */ 

(function BIDEXTINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Bid+BIDEXTINFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.String, 
          $.String, $.IntPtr
        ])
    );

    $.Field({Static:false, Public:false}, "hModule", $.IntPtr);

    $.Field({Static:false, Public:false}, "DomainName", $.String);

    $.Field({Static:false, Public:false}, "Reserved2", $.Int32);

    $.Field({Static:false, Public:false}, "Reserved", $.Int32);

    $.Field({Static:false, Public:false}, "ModulePath", $.String);

    $.Field({Static:false, Public:false}, "ModulePathA", $.IntPtr);

    $.Field({Static:false, Public:false}, "pBindCookie", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Bid+AutoInit */ 

(function AutoInit$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Bid+AutoInit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_bInitialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SqlDependencyProcessDispatcher */ 

(function SqlDependencyProcessDispatcher$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "SqlDependencyProcessDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppDomainUnloading", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SingletonProcessDispatcher", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHashHelper", 
      new JSIL.MethodSignature($asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Invalidate", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlNotification")])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueueAppDomainUnloading", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartWithDefault", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stop", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:true , Public:false}, "_staticInstance", $.Type);

    $.Field({Static:false, Public:false}, "_connectionContainers", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"), $asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainer")]));

    $.Field({Static:false, Public:false}, "_sqlDependencyPerAppDomainDispatchers", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "SingletonProcessDispatcher", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SqlDependencyProcessDispatcher+SqlConnectionContainer */ 

(function SqlConnectionContainer$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SqlDependencyProcessDispatcher+SqlConnectionContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppDomainUnload", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsynchronouslyQueryServiceBrokerQueue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AsyncResultCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateQueueAndService", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HashHelper", 
      JSIL.MethodSignature.Return($asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InErrorState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Queue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Server", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementStartCount", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNotificationResults", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Restart", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Stop", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronouslyQueryServiceBrokerQueue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TearDownAndDispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_con", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_com", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_conversationGuidParam", $asm11.TypeRef("System.Data.SqlClient.SqlParameter"));

    $.Field({Static:false, Public:false}, "_timeoutParam", $asm11.TypeRef("System.Data.SqlClient.SqlParameter"));

    $.Field({Static:false, Public:false}, "_hashHelper", $asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"));

    $.Field({Static:false, Public:false}, "_windowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "_queue", $.String);

    $.Field({Static:false, Public:false}, "_receiveQuery", $.String);

    $.Field({Static:false, Public:false}, "_beginConversationQuery", $.String);

    $.Field({Static:false, Public:false}, "_endConversationQuery", $.String);

    $.Field({Static:false, Public:false}, "_concatQuery", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultWaitforTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_escapedQueueName", $.String);

    $.Field({Static:false, Public:false}, "_sprocName", $.String);

    $.Field({Static:false, Public:false}, "_dialogHandle", $.String);

    $.Field({Static:false, Public:false}, "_cachedServer", $.String);

    $.Field({Static:false, Public:false}, "_cachedDatabase", $.String);

    $.Field({Static:false, Public:false}, "_errorState", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_stop", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_stopped", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_serviceQueueCreated", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_startCount", $.Int32);

    $.Field({Static:false, Public:false}, "_retryTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "_appDomainKeyHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Database", $.String);

    $.Property({Static:false, Public:false}, "HashHelper", $asm11.TypeRef("SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper"));

    $.Property({Static:false, Public:false}, "InErrorState", $.Boolean);

    $.Property({Static:false, Public:false}, "Queue", $.String);

    $.Property({Static:false, Public:false}, "Server", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SqlDependencyProcessDispatcher+SqlNotificationParser */ 

(function SqlNotificationParser$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SqlDependencyProcessDispatcher+SqlNotificationParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessMessage", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlNotification"), [$asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
    );

    $.Constant({Static:true , Public:false}, "RootNode", $.String, "QueryNotification");

    $.Constant({Static:true , Public:false}, "MessageNode", $.String, "Message");

    $.Constant({Static:true , Public:false}, "InfoAttribute", $.String, "info");

    $.Constant({Static:true , Public:false}, "SourceAttribute", $.String, "source");

    $.Constant({Static:true , Public:false}, "TypeAttribute", $.String, "type");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SqlDependencyProcessDispatcher+SqlNotificationParser+MessageAttributes */ 

JSIL.MakeEnum(
  {
    FullName: "SqlDependencyProcessDispatcher+SqlNotificationParser+MessageAttributes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Type: 1, 
    Source: 2, 
    Info: 4, 
    All: 7, 
  }
);

/* class SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper */ 

(function SqlConnectionContainerHashHelper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "SqlDependencyProcessDispatcher+SqlConnectionContainerHashHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Queue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Field({Static:false, Public:false}, "_queue", $.String);

    $.Field({Static:false, Public:false}, "_connectionStringBuilder", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder"));

    $.Property({Static:false, Public:false}, "ConnectionStringBuilder", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder"));

    $.Property({Static:false, Public:false}, "Identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Property({Static:false, Public:false}, "Queue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BidIdentityAttribute */ 

(function BidIdentityAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidIdentityAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdentityString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_identity", $.String);

    $.Property({Static:false, Public:false}, "IdentityString", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Module]; });

})();

/* class BidMetaTextAttribute */ 

(function BidMetaTextAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidMetaTextAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_metaText", $.String);

    $.Property({Static:false, Public:false}, "MetaText", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Module]; });

})();

/* class BidMethodAttribute */ 

(function BidMethodAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidMethodAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS"]; });

})();

/* class BidArgumentTypeAttribute */ 

(function BidArgumentTypeAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidArgumentTypeAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "ArgumentType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Method", "Parameter")]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS"]; });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.SqlServer");
JSIL.DeclareNamespace("Microsoft.SqlServer.Server");
/* enum Microsoft.SqlServer.Server.ExtendedClrTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.ExtendedClrTypeCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Invalid: -1, 
    First: 0, 
    Boolean: 0, 
    Byte: 1, 
    Char: 2, 
    DateTime: 3, 
    DBNull: 4, 
    Decimal: 5, 
    Double: 6, 
    Empty: 7, 
    Int16: 8, 
    Int32: 9, 
    Int64: 10, 
    SByte: 11, 
    Single: 12, 
    String: 13, 
    UInt16: 14, 
    UInt32: 15, 
    UInt64: 16, 
    Object: 17, 
    ByteArray: 18, 
    CharArray: 19, 
    Guid: 20, 
    SqlBinary: 21, 
    SqlBoolean: 22, 
    SqlByte: 23, 
    SqlDateTime: 24, 
    SqlDouble: 25, 
    SqlGuid: 26, 
    SqlInt16: 27, 
    SqlInt32: 28, 
    SqlInt64: 29, 
    SqlMoney: 30, 
    SqlDecimal: 31, 
    SqlSingle: 32, 
    SqlString: 33, 
    SqlChars: 34, 
    SqlBytes: 35, 
    SqlXml: 36, 
    DataTable: 37, 
    DbDataReader: 38, 
    IEnumerableOfSqlDataRecord: 39, 
    TimeSpan: 40, 
    DateTimeOffset: 41, 
    Stream: 42, 
    TextReader: 43, 
    XmlReader: 44, 
    Last: 44, 
  }
);

/* interface Microsoft.SqlServer.Server.ITypedGetters */ 

JSIL.MakeInterface(
  "Microsoft.SqlServer.Server.ITypedGetters", false, [], function ($) {
    $.Method({}, "IsDBNull", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "GetVariantType", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$.Int32]));
    $.Method({}, "GetBoolean", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "GetByte", new JSIL.MethodSignature($.Byte, [$.Int32]));
    $.Method({}, "GetBytes", new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetChar", new JSIL.MethodSignature($.Char, [$.Int32]));
    $.Method({}, "GetChars", new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetInt16", new JSIL.MethodSignature($.Int16, [$.Int32]));
    $.Method({}, "GetInt32", new JSIL.MethodSignature($.Int32, [$.Int32]));
    $.Method({}, "GetInt64", new JSIL.MethodSignature($.Int64, [$.Int32]));
    $.Method({}, "GetFloat", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "GetDouble", new JSIL.MethodSignature($.Double, [$.Int32]));
    $.Method({}, "GetString", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetDecimal", new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32]));
    $.Method({}, "GetDateTime", new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32]));
    $.Method({}, "GetGuid", new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32]));
    $.Method({}, "GetSqlBoolean", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32]));
    $.Method({}, "GetSqlByte", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32]));
    $.Method({}, "GetSqlInt16", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32]));
    $.Method({}, "GetSqlInt32", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32]));
    $.Method({}, "GetSqlInt64", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32]));
    $.Method({}, "GetSqlSingle", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32]));
    $.Method({}, "GetSqlDouble", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32]));
    $.Method({}, "GetSqlMoney", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32]));
    $.Method({}, "GetSqlDateTime", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32]));
    $.Method({}, "GetSqlDecimal", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32]));
    $.Method({}, "GetSqlString", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32]));
    $.Method({}, "GetSqlBinary", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32]));
    $.Method({}, "GetSqlGuid", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32]));
    $.Method({}, "GetSqlChars", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32]));
    $.Method({}, "GetSqlBytes", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32]));
    $.Method({}, "GetSqlXml", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32]));
    $.Method({}, "GetSqlBytesRef", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32]));
    $.Method({}, "GetSqlCharsRef", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32]));
    $.Method({}, "GetSqlXmlRef", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32]));
  }, []);

/* interface Microsoft.SqlServer.Server.ITypedGettersV3 */ 

JSIL.MakeInterface(
  "Microsoft.SqlServer.Server.ITypedGettersV3", false, [], function ($) {
    $.Method({}, "IsDBNull", new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetVariantType", new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetBoolean", new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetByte", new JSIL.MethodSignature($.Byte, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetBytesLength", new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetBytes", new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]));
    $.Method({}, "GetCharsLength", new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetChars", new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ]));
    $.Method({}, "GetString", new JSIL.MethodSignature($.String, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetInt16", new JSIL.MethodSignature($.Int16, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetInt32", new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetInt64", new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetSingle", new JSIL.MethodSignature($.Single, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetDouble", new JSIL.MethodSignature($.Double, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetSqlDecimal", new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetDateTime", new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "GetGuid", new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
  }, []);

/* interface Microsoft.SqlServer.Server.ITypedSetters */ 

JSIL.MakeInterface(
  "Microsoft.SqlServer.Server.ITypedSetters", false, [], function ($) {
    $.Method({}, "SetDBNull", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "SetBoolean", new JSIL.MethodSignature(null, [$.Int32, $.Boolean]));
    $.Method({}, "SetByte", new JSIL.MethodSignature(null, [$.Int32, $.Byte]));
    $.Method({}, "SetBytes", new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "SetChar", new JSIL.MethodSignature(null, [$.Int32, $.Char]));
    $.Method({}, "SetChars", new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "SetInt16", new JSIL.MethodSignature(null, [$.Int32, $.Int16]));
    $.Method({}, "SetInt32", new JSIL.MethodSignature(null, [$.Int32, $.Int32]));
    $.Method({}, "SetInt64", new JSIL.MethodSignature(null, [$.Int32, $.Int64]));
    $.Method({}, "SetFloat", new JSIL.MethodSignature(null, [$.Int32, $.Single]));
    $.Method({}, "SetDouble", new JSIL.MethodSignature(null, [$.Int32, $.Double]));
    $.Method({}, "SetString", new JSIL.MethodSignature(null, [$.Int32, $.String]));
    $.Method({}, "SetString", new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Int32
        ]));
    $.Method({}, "SetDecimal", new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Decimal")]));
    $.Method({}, "SetDateTime", new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")]));
    $.Method({}, "SetGuid", new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")]));
    $.Method({}, "SetSqlBoolean", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")]));
    $.Method({}, "SetSqlByte", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlByte")]));
    $.Method({}, "SetSqlInt16", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")]));
    $.Method({}, "SetSqlInt32", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")]));
    $.Method({}, "SetSqlInt64", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")]));
    $.Method({}, "SetSqlSingle", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")]));
    $.Method({}, "SetSqlDouble", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")]));
    $.Method({}, "SetSqlMoney", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")]));
    $.Method({}, "SetSqlDateTime", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")]));
    $.Method({}, "SetSqlDecimal", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")]));
    $.Method({}, "SetSqlString", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString")]));
    $.Method({}, "SetSqlString", new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString"), 
          $.Int32
        ]));
    $.Method({}, "SetSqlBinary", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary")]));
    $.Method({}, "SetSqlBinary", new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), 
          $.Int32
        ]));
    $.Method({}, "SetSqlGuid", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")]));
    $.Method({}, "SetSqlChars", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars")]));
    $.Method({}, "SetSqlChars", new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars"), 
          $.Int32
        ]));
    $.Method({}, "SetSqlBytes", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes")]));
    $.Method({}, "SetSqlBytes", new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), 
          $.Int32
        ]));
    $.Method({}, "SetSqlXml", new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlXml")]));
  }, []);

/* interface Microsoft.SqlServer.Server.ITypedSettersV3 */ 

JSIL.MakeInterface(
  "Microsoft.SqlServer.Server.ITypedSettersV3", false, [], function ($) {
    $.Method({}, "SetVariantMetaData", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ]));
    $.Method({}, "SetDBNull", new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32]));
    $.Method({}, "SetBoolean", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Boolean
        ]));
    $.Method({}, "SetByte", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Byte
        ]));
    $.Method({}, "SetBytes", new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]));
    $.Method({}, "SetBytesLength", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ]));
    $.Method({}, "SetChars", new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ]));
    $.Method({}, "SetCharsLength", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ]));
    $.Method({}, "SetString", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.String, $.Int32, 
          $.Int32
        ]));
    $.Method({}, "SetInt16", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int16
        ]));
    $.Method({}, "SetInt32", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "SetInt64", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ]));
    $.Method({}, "SetSingle", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Single
        ]));
    $.Method({}, "SetDouble", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Double
        ]));
    $.Method({}, "SetSqlDecimal", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ]));
    $.Method({}, "SetDateTime", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTime")
        ]));
    $.Method({}, "SetGuid", new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.Guid")
        ]));
  }, []);

/* class Microsoft.SqlServer.Server.MetaDataUtilsSmi */ 

(function MetaDataUtilsSmi$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.MetaDataUtilsSmi", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustMaxLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("System.Data.SqlDbType"), $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetermineExtendedTypeCode", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetermineExtendedTypeCodeForUseWithSqlDbType", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Boolean, 
          $.Object, $asm07.TypeRef("System.Type"), 
          $.UInt64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetermineExtendedTypeCodeFromType", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferSqlDbTypeFromType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferSqlDbTypeFromType_Katmai", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferSqlDbTypeFromTypeCode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAnsiType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBinaryType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCharOrXmlType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPlpFormat", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnicodeType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidForSmiVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "SmiExtendedMetaDataToSqlMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SmiMetaDataFromDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SmiMetaDataFromSchemaTableRow", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlMetaDataToSmiExtendedMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")])
    );

    $.Constant({Static:true , Public:false}, "InvalidSqlDbType", $asm11.TypeRef("System.Data.SqlDbType"), -1);

    $.Constant({Static:true , Public:false}, "InvalidMaxLength", $.Int64, -2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "__extendedTypeCodeToSqlDbTypeMap", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlDbType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "__typeToExtendedTypeCodeMap", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiConnection */ 

(function SmiConnection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiConnection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.IsolationLevel"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CommitTransaction", 
      new JSIL.MethodSignature(null, [$.Int64, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTransactionSavePoint", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.String, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistTransaction", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCurrentDatabase", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDTCAddress", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteTransaction", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int64, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RollbackTransaction", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.String, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrentDatabase", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiContext */ 

(function SmiContext$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "add_OutOfScope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRecordBuffer", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRequestExecutor", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiRequestExecutor"), [
          $.String, $asm11.TypeRef("System.Data.CommandType"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ContextConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ContextTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ContextTransactionId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasContextPipe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetContextValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetScratchStream", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiStream"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTriggerInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Boolean])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Microsoft.SqlServer.Server.TriggerAction")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "remove_OutOfScope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendMessageToPipe", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendResultsEndToPipe", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendResultsRowToPipe", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendResultsStartToPipe", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetContextValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ContextConnection", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "ContextTransactionId", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "ContextTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasContextPipe", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Event({Static:false, Public:false, Virtual:true }, "OutOfScope", $asm07.TypeRef("System.EventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiContextFactory */ 

(function SmiContextFactory$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiContextFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NegotiatedSmiVersion", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStaticField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_smiLink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiLink"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_negotiatedSmiVersion", $.UInt64);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_majorVersion", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_minorVersion", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buildNum", $.Int16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_serverVersion", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_eventSinkForGetCurrentContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Constant({Static:true , Public:false}, "YukonVersion", $.UInt64, 100);

    $.Constant({Static:true , Public:false}, "KatmaiVersion", $.UInt64, 210);

    $.Constant({Static:true , Public:false}, "LatestVersion", $.UInt64, 210);

    $.Field({Static:false, Public:false, ReadOnly:true }, "__supportedSmiVersions", $jsilcore.TypeRef("System.Array", [$.UInt64]));

    $.Property({Static:false, Public:false}, "NegotiatedSmiVersion", $.UInt64);

    $.Property({Static:false, Public:false}, "ServerVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiEventSink */ 

(function SmiEventSink$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiEventSink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BatchCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DefaultDatabaseChanged", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MessagePosted", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.String, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MetaDataAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiQueryMetaData")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParameterAvailable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParametersAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StatementCompleted", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionCommitted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionDefected", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnded", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnlisted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionRolledBack", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionStarted", 
      JSIL.MethodSignature.Action($.Int64)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiEventSink_Default */ 

(function SmiEventSink_Default$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), 
      Name: "Microsoft.SqlServer.Server.SmiEventSink_Default", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BatchCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanMessages", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DefaultDatabaseChanged", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DispatchMessages", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasMessages", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Warnings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MessagePosted", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.String, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MetaDataAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiQueryMetaData")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParameterAvailable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParametersAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessMessages", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessMessagesAndThrow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessMessagesAndThrow", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Parent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StatementCompleted", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionCommitted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionDefected", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnded", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnlisted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionRolledBack", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionStarted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "_parent", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"));

    $.Field({Static:false, Public:false}, "_errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_warnings", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Property({Static:false, Public:false}, "Errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Property({Static:false, Public:false}, "HasMessages", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:false}, "Parent", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"));

    $.Property({Static:false, Public:false}, "Warnings", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.SqlServer.Server.SmiEventSink_Default+UnexpectedEventType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SmiEventSink_Default+UnexpectedEventType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BatchCompleted: 0, 
    ColumnInfoAvailable: 1, 
    DefaultDatabaseChanged: 2, 
    MessagePosted: 3, 
    MetaDataAvailable: 4, 
    ParameterAvailable: 5, 
    ParametersAvailable: 6, 
    RowAvailable: 7, 
    StatementCompleted: 8, 
    TableNameAvailable: 9, 
    TransactionCommitted: 10, 
    TransactionDefected: 11, 
    TransactionEnlisted: 12, 
    TransactionEnded: 13, 
    TransactionRolledBack: 14, 
    TransactionStarted: 15, 
  }
);

/* class Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing */ 

(function SmiEventSink_DeferedProcessing$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
      Name: "Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DispatchMessages", 
      JSIL.MethodSignature.Action($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiEventStream */ 

(function SmiEventStream$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiEventStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessEvent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "HasEvents", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.SqlServer.Server.SmiExecuteType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SmiExecuteType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NonQuery: 0, 
    Reader: 1, 
    ToPipe: 2, 
  }
);

/* class Microsoft.SqlServer.Server.SmiGettersStream */ 

(function SmiGettersStream$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.SqlServer.Server.SmiGettersStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_getters", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"));

    $.Field({Static:false, Public:false}, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "_readPosition", $.Int64);

    $.Field({Static:false, Public:false}, "_metaData", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiLink */ 

(function SmiLink$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiLink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCurrentContext", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NegotiateVersion", 
      new JSIL.MethodSignature($.UInt64, [$.UInt64])
    );

    $.Constant({Static:true , Public:false}, "InterfaceVersion", $.UInt64, 210);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiMetaData */ 

(function SmiMetaData$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyQualifiedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompareOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultChar", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNChar", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNText", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNVarChar", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultText", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultVarChar", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldMetaData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMultiValued", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocaleId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlDbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeWithoutThrowing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultForType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSupportedDbType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidMaxLengthForCtorGivenType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultsForType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_databaseType", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Field({Static:false, Public:false}, "_maxLength", $.Int64);

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_localeId", $.Int64);

    $.Field({Static:false, Public:false}, "_compareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.Field({Static:false, Public:false}, "_clrType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_udtAssemblyQualifiedName", $.String);

    $.Field({Static:false, Public:false}, "_isMultiValued", $.Boolean);

    $.Field({Static:false, Public:false}, "_fieldMetaData", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]));

    $.Field({Static:false, Public:false}, "_extendedProperties", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"));

    $.Constant({Static:true , Public:false}, "UnlimitedMaxLengthIndicator", $.Int64, -1);

    $.Constant({Static:true , Public:false}, "MaxUnicodeCharacters", $.Int64, 4000);

    $.Constant({Static:true , Public:false}, "MaxANSICharacters", $.Int64, 8000);

    $.Constant({Static:true , Public:false}, "MaxBinaryLength", $.Int64, 8000);

    $.Constant({Static:true , Public:false}, "MinPrecision", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "MinScale", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MaxTimeScale", $.Int32, 7);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxSmallDateTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MinSmallDateTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxSmallMoney", $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MinSmallMoney", $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"));

    $.Constant({Static:true , Public:false}, "DefaultStringCompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 25);

    $.Constant({Static:true , Public:false}, "MaxNameLength", $.Int64, 128);

    $.Field({Static:true , Public:false, ReadOnly:true }, "__emptyFieldList", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]));

    $.Field({Static:true , Public:false}, "__maxLenFromPrecision", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "__maxVarTimeLenOffsetFromScale", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultBigInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultBit", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultChar_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultDateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultDecimal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultFloat", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultImage", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultMoney", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultNChar_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultNText_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultNVarChar_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultReal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultUniqueIdentifier", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultSmallDateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultSmallInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultSmallMoney", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultText_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultTimestamp", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultTinyInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultVarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultVarChar_NoCollation", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultVariant", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultXml", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultUdt_NoType", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultStructured", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultDate", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultDateTime2", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultDateTimeOffset", $.Type);

    $.Field({Static:true , Public:false}, "__defaultValues", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:true , Public:false}, "__typeNameByDatabaseType", $jsilcore.TypeRef("System.Array", [$.String]));


    function SmiMetaData__cctor () {
      $thisType.MaxSmallDateTime = new $asm07.System.DateTime();
      $thisType.MinSmallDateTime = new $asm07.System.DateTime();
      $thisType.MaxSmallMoney = new $asm11.System.Data.SqlTypes.SqlMoney();
      $thisType.MinSmallMoney = new $asm11.System.Data.SqlTypes.SqlMoney();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SmiMetaData__cctor
    );

    $.Property({Static:true , Public:false}, "DefaultChar", $.Type);

    $.Property({Static:true , Public:false}, "DefaultNChar", $.Type);

    $.Property({Static:true , Public:false}, "DefaultNText", $.Type);

    $.Property({Static:true , Public:false}, "DefaultNVarChar", $.Type);

    $.Property({Static:true , Public:false}, "DefaultText", $.Type);

    $.Property({Static:true , Public:false}, "DefaultVarChar", $.Type);

    $.Property({Static:false, Public:false}, "CompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.Property({Static:false, Public:false}, "LocaleId", $.Int64);

    $.Property({Static:false, Public:false}, "MaxLength", $.Int64);

    $.Property({Static:false, Public:false}, "Precision", $.Byte);

    $.Property({Static:false, Public:false}, "Scale", $.Byte);

    $.Property({Static:false, Public:false}, "SqlDbType", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TypeWithoutThrowing", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "AssemblyQualifiedName", $.String);

    $.Property({Static:false, Public:false}, "IsMultiValued", $.Boolean);

    $.Property({Static:false, Public:false}, "FieldMetaData", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]));

    $.Property({Static:false, Public:false}, "ExtendedProperties", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiExtendedMetaData */ 

(function SmiExtendedMetaData$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
      Name: "Microsoft.SqlServer.Server.SmiExtendedMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 15, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), 
          $.String, $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSpecificNamePart1", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSpecificNamePart2", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSpecificNamePart3", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_typeSpecificNamePart1", $.String);

    $.Field({Static:false, Public:false}, "_typeSpecificNamePart2", $.String);

    $.Field({Static:false, Public:false}, "_typeSpecificNamePart3", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "TypeSpecificNamePart1", $.String);

    $.Property({Static:false, Public:false}, "TypeSpecificNamePart2", $.String);

    $.Property({Static:false, Public:false}, "TypeSpecificNamePart3", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiParameterMetaData */ 

(function SmiParameterMetaData$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), 
      Name: "Microsoft.SqlServer.Server.SmiParameterMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 16, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.ParameterDirection")
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.ParameterDirection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.ParameterDirection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.ParameterDirection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_direction", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Property({Static:false, Public:false}, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiStorageMetaData */ 

(function SmiStorageMetaData$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), 
      Name: "Microsoft.SqlServer.Server.SmiStorageMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 24, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), $.String, 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowsDBNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CatalogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsColumnSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_allowsDBNull", $.Boolean);

    $.Field({Static:false, Public:false}, "_serverName", $.String);

    $.Field({Static:false, Public:false}, "_catalogName", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_tableName", $.String);

    $.Field({Static:false, Public:false}, "_columnName", $.String);

    $.Field({Static:false, Public:false}, "_isKey", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Field({Static:false, Public:false}, "_isIdentity", $.Boolean);

    $.Field({Static:false, Public:false}, "_isColumnSet", $.Boolean);

    $.Property({Static:false, Public:false}, "AllowsDBNull", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerName", $.String);

    $.Property({Static:false, Public:false}, "CatalogName", $.String);

    $.Property({Static:false, Public:false}, "SchemaName", $.String);

    $.Property({Static:false, Public:false}, "TableName", $.String);

    $.Property({Static:false, Public:false}, "ColumnName", $.String);

    $.Property({Static:false, Public:false}, "IsKey", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Property({Static:false, Public:false}, "IsIdentity", $.Boolean);

    $.Property({Static:false, Public:false}, "IsColumnSet", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiQueryMetaData */ 

(function SmiQueryMetaData$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiStorageMetaData"), 
      Name: "Microsoft.SqlServer.Server.SmiQueryMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 28, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Byte, $.Byte, 
          $.Int64, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection"), $.String, 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAliased", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExpression", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHidden", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_isExpression", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Field({Static:false, Public:false}, "_isAliased", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Field({Static:false, Public:false}, "_isHidden", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsExpression", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Property({Static:false, Public:false}, "IsAliased", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Property({Static:false, Public:false}, "IsHidden", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiTypedGetterSetter */ 

(function SmiTypedGetterSetter$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiTypedGetterSetter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndElements", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytesLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharsLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTypedGetterSetter", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetVariantType", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NewElement", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytesLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCharsLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTimeOffset")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSingle", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetVariantMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "CanGet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CanSet", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
      /* 1 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiRecordBuffer */ 

(function SmiRecordBuffer$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
      Name: "Microsoft.SqlServer.Server.SmiRecordBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytesRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlCharsRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXmlRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetVariantType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetFloat", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlByte", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlChars", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlMoney", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlSingle", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlString", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlString", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlXml", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "CanGet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CanSet", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"), 
      /* 3 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSetters"), 
      /* 4 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiRequestExecutor */ 

(function SmiRequestExecutor$Members () {
  var $, $thisType;



















































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
      Name: "Microsoft.SqlServer.Server.SmiRequestExecutor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Execute", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventStream"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"), $.Int64, 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm11.TypeRef("System.Data.CommandBehavior"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExecuteType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Execute", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventStream"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"), $.Int64, 
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExecuteType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytesRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlCharsRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXmlRef", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetVariantType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSetAsDefault", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetDefault", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetFloat", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlByte", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlChars", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlMoney", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlSingle", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlString", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlString", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlXml", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "CanGet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CanSet", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSetters"), 
      /* 3 */ $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"), 
      /* 4 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiSettersStream */ 

(function SmiSettersStream$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.SqlServer.Server.SmiSettersStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_setters", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"));

    $.Field({Static:false, Public:false}, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "_lengthWritten", $.Int64);

    $.Field({Static:false, Public:false}, "_metaData", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiStream */ 

(function SmiStream$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPosition", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int64, 
          $asm07.TypeRef("System.IO.SeekOrigin")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetPosition", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiXetterAccessMap */ 

(function SmiXetterAccessMap$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiXetterAccessMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGetterAccessValid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiXetterTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSetterAccessValid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiXetterTypeCode")])
    );

    $.Constant({Static:true , Public:false}, "X", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "_", $.Boolean, false);

    $.Field({Static:true , Public:false}, "__isGetterAccessValid", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false}, "__isSetterAccessValid", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(2)]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.SqlServer.Server.SmiXetterTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SmiXetterTypeCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    XetBoolean: 0, 
    XetByte: 1, 
    XetBytes: 2, 
    XetChars: 3, 
    XetString: 4, 
    XetInt16: 5, 
    XetInt32: 6, 
    XetInt64: 7, 
    XetSingle: 8, 
    XetDouble: 9, 
    XetSqlDecimal: 10, 
    XetDateTime: 11, 
    XetGuid: 12, 
    GetVariantMetaData: 13, 
    GetXet: 14, 
    XetTime: 15, 
    XetTimeSpan: 15, 
    XetDateTimeOffset: 16, 
  }
);

/* class Microsoft.SqlServer.Server.SqlContext */ 

(function SqlContext$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentContext", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstancePipe", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SqlPipe"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceTriggerContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SqlTriggerContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceWindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pipe", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SqlPipe"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TriggerContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SqlTriggerContext"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnOutOfScope", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.Field({Static:false, Public:false}, "_smiContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Field({Static:false, Public:false}, "_pipe", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlPipe"));

    $.Field({Static:false, Public:false}, "_triggerContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlTriggerContext"));

    $.Property({Static:true , Public:true }, "IsAvailable", $.Boolean);

    $.Property({Static:true , Public:true }, "Pipe", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlPipe"));

    $.Property({Static:true , Public:true }, "TriggerContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlTriggerContext"));

    $.Property({Static:true , Public:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:true , Public:false}, "CurrentContext", $.Type);

    $.Property({Static:false, Public:false}, "InstancePipe", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlPipe"));

    $.Property({Static:false, Public:false}, "InstanceTriggerContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlTriggerContext"));

    $.Property({Static:false, Public:false}, "InstanceWindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlDataRecord */ 

(function SqlDataRecord$Members () {
  var $, $thisType;





























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlDataRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")]))
    )
      .Parameter(0, "metaData", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")])])
    )
      .Parameter(1, "metaData", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "EnsureSubclassOverride", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordBuffer", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SmiVersion", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSmiMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetMetaData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetSmiMetaData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTimeOffset", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetFloat", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBoolean", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlByte", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlChars", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlMoney", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlSingle", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlString", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlXml", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTimeSpan", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(0, "values", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataRecord.GetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$.Int32])
    )
      .Overrides($asm11.TypeRef("System.Data.IDataRecord"), "GetData")
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInvalidOrdinal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_recordBuffer", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"));

    $.Field({Static:false, Public:false}, "_recordContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Field({Static:false, Public:false}, "_columnSmiMetaData", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]));

    $.Field({Static:false, Public:false}, "_eventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_columnMetaData", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")]));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "_usesStringStorageForXml", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "__maxNVarCharForXml", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:false}, "RecordBuffer", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"));

    $.Property({Static:false, Public:false}, "RecordContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Property({Static:false, Public:false}, "SmiVersion", $.UInt64);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IDataRecord")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.SqlServer.Server.SqlPipe */ 

(function SqlPipe$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlPipe", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPipeBusy", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureNormalSendValid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureResultStarted", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteAndSend", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSendingResults", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnOutOfScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Send", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Send", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Send", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendResultsEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SendResultsRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SendResultsStart", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPipeBusy", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_smiContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Field({Static:false, Public:false}, "_recordBufferSent", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"));

    $.Field({Static:false, Public:false}, "_metaDataSent", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData")]));

    $.Field({Static:false, Public:false}, "_eventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_isBusy", $.Boolean);

    $.Field({Static:false, Public:false}, "_hadErrorInResultSet", $.Boolean);

    $.Property({Static:false, Public:true }, "IsSendingResults", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlTriggerContext */ 

(function SqlTriggerContext$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlTriggerContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.TriggerAction"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlXml")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlXml"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TriggerAction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.TriggerAction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUpdatedColumn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_triggerAction", $asm11.TypeRef("Microsoft.SqlServer.Server.TriggerAction"));

    $.Field({Static:false, Public:false}, "_columnsUpdated", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_eventInstanceData", $asm11.TypeRef("System.Data.SqlTypes.SqlXml"));

    $.Property({Static:false, Public:true }, "ColumnCount", $.Int32);

    $.Property({Static:false, Public:true }, "EventData", $asm11.TypeRef("System.Data.SqlTypes.SqlXml"));

    $.Property({Static:false, Public:true }, "TriggerAction", $asm11.TypeRef("Microsoft.SqlServer.Server.TriggerAction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.ValueUtilsSmi */ 

(function ValueUtilsSmi$Members () {
  var $, $thisType;





























































































































































































  JSIL.MakeStaticClass("Microsoft.SqlServer.Server.ValueUtilsSmi", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CanAccessGetterDirectly", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanAccessSetterDirectly", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckXetParameters", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.SqlDbType"), $.Int64, 
          $.Int64, $.Int64, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyIntoNewSmiScratchStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [
          $asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyIntoNewSmiScratchStreamChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"), [
          $asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillCompatibleITypedSettersFromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), $asm11.TypeRef("System.Data.SqlClient.SqlDataReader")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillCompatibleITypedSettersFromRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillCompatibleITypedSettersFromRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiDefaultFieldsProperty")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillCompatibleSettersFromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]), $asm11.TypeRef("System.Data.Common.DbDataReader")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillCompatibleSettersFromRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiDefaultFieldsProperty")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBoolean_Unchecked", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByte", 
      new JSIL.MethodSignature($.Byte, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByte_Unchecked", 
      new JSIL.MethodSignature($.Byte, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByteArray_Unchecked", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes_Unchecked", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesConversion", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesInternal", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesLength_Unchecked", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCharArray_Unchecked", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChars_Unchecked", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCharsLength_Unchecked", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTime_Unchecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTimeOffset_Unchecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDecimal_PossiblyMoney", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDouble_Unchecked", 
      new JSIL.MethodSignature($.Double, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGuid_Unchecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt16_Unchecked", 
      new JSIL.MethodSignature($.Int16, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt32_Unchecked", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInt64_Unchecked", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNullOutputParameterSmi", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOutputParameterV200Smi", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"), $asm11.TypeRef("System.Data.SqlClient.SqlBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOutputParameterV3Smi", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"), $asm11.TypeRef("System.Data.SqlClient.SqlBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSequentialStream", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlSequentialStreamSmi"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSequentialTextReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReaderSmi"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSingle", 
      new JSIL.MethodSignature($.Single, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSingle_Unchecked", 
      new JSIL.MethodSignature($.Single, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlBinary_Unchecked", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDecimal_Unchecked", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlMoney_Unchecked", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlValue200", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlXml_Unchecked", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString_Unchecked", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTextReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.TextReader"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeSpan_Unchecked", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUdt_LengthChecked", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue200", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDBNull_Unchecked", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullUdtInstance", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PositiveMin", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBoolean", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBoolean_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetByte", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetByte_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetByteArray_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetByteArray_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBytes_FromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.Common.DbDataReader"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBytes_FromRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBytes_Unchecked", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBytesLength", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCharArray_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCharArray_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetChars", 
      new JSIL.MethodSignature($.Int64, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetChars_FromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.Common.DbDataReader"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetChars_FromRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetChars_Unchecked", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCharsOrString_FromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.Common.DbDataReader"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCompatibleValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Object, $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCompatibleValueV200", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Object, $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.ParameterPeekAheadValue"), $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCompatibleValueV200", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Object, $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode"), 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.ParameterPeekAheadValue")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDataTable_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.DataTable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDate_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDate_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTime", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTime_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTime_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTime2_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTime2_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.DateTimeOffset"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDateTimeOffset_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm07.TypeRef("System.DateTimeOffset")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDbDataReader_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.Common.DbDataReader")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDBNull", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDBNull_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDecimal", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDecimal_PossiblyMoney", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDecimal_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm07.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDouble", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDouble_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetGuid", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetGuid_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetIEnumerableOfSqlDataRecord_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord")]), $asm11.TypeRef("System.Data.SqlClient.ParameterPeekAheadValue")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt16", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt16_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Int16
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt32", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt32_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInt64_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSingle", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSingle_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBinary", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBinary")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBinary_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBinary_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBoolean", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBoolean_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlByte", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlByte")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlByte_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlByte")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBytes", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBytes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBytes_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlBytes_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), 
          $.Int32, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlChars", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlChars")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlChars_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlChars"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlChars_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlChars"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDateTime", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDateTime_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDateTime_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDecimal_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDouble", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlDouble_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlDouble")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlGuid", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlGuid_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlGuid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt16", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt16_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt16")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt32", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt32_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt32")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlInt64_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlInt64")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlMoney", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlMoney_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlMoney_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlMoney")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlSingle", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlSingle_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlSingle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlString")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlString_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlString"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlString_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlString"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlXml", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlTypes.SqlXml")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetSqlXml_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlXml")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetStream_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlClient.StreamDataFeed")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetString_FromReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.Common.DbDataReader"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetString_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetString_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTextReader_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm11.TypeRef("System.Data.SqlClient.TextDataFeed")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.TimeSpan"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTimeSpan_Checked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTimeSpan_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32, $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetUdt_LengthChecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetXmlReader_Unchecked", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedSettersV3"), 
          $.Int32, $asm2F.TypeRef("System.Xml.XmlReader")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDbTypeToStorageType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"), [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfInvalidSetterAccess", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.ExtendedClrTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfITypedGettersIsNull", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyDateTimeRange", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlDbType"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyTimeRange", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlDbType"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.Constant({Static:true , Public:false}, "__maxByteChunkSize", $.Int32, 8000);

    $.Constant({Static:true , Public:false}, "__maxCharChunkSize", $.Int32, 4000);

    $.Constant({Static:true , Public:false}, "NoLengthLimit", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "constBinBufferSize", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "constTextBufferSize", $.Int32, 4096);

    $.Field({Static:true , Public:false}, "__typeSpecificNullForSqlValue", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:true , Public:false}, "__dbTypeToStorageType", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_dtSmallMax", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_dtSmallMin", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_timeMin", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_timeMax", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "X", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "_", $.Boolean, false);

    $.Field({Static:true , Public:false}, "__canAccessGetterDirectly", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false}, "__canAccessSetterDirectly", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(2)]));


    function ValueUtilsSmi__cctor () {
      $thisType.x_dtSmallMax = new $asm07.System.DateTime();
      $thisType.x_dtSmallMin = new $asm07.System.DateTime();
      $thisType.x_timeMin = new $asm07.System.TimeSpan();
      $thisType.x_timeMax = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ValueUtilsSmi__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlClientWrapperSmiStream */ 

(function SqlClientWrapperSmiStream$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.SqlServer.Server.SqlClientWrapperSmiStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiStream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_stream", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiStream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Data");
JSIL.DeclareNamespace("System.Data.SqlTypes");
/* class System.Data.SqlTypes.SqlStreamChars */ 

(function SqlStreamChars$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SqlStreamChars", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadChar", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlStreamChars+NullSqlStreamChars */ 

(function NullSqlStreamChars$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"), 
      Name: "System.Data.SqlTypes.SqlStreamChars+NullSqlStreamChars", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlClientWrapperSmiStreamChars */ 

(function SqlClientWrapperSmiStreamChars$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"), 
      Name: "Microsoft.SqlServer.Server.SqlClientWrapperSmiStreamChars", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiStream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_stream", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiStream"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.SqlServer.Server.IBinarySerialize */ 

JSIL.MakeInterface(
  "Microsoft.SqlServer.Server.IBinarySerialize", true, [], function ($) {
    $.Method({}, "Read", JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.BinaryReader")));
    $.Method({}, "Write", JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.BinaryWriter")));
  }, []);

/* class Microsoft.SqlServer.Server.InvalidUdtException */ 

(function InvalidUdtException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "Microsoft.SqlServer.Server.InvalidUdtException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlFacetAttribute */ 

(function SqlFacetAttribute$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlFacetAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFixedLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFixedLength", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_IsFixedLength", $.Boolean);

    $.Field({Static:false, Public:false}, "m_MaxSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_Scale", $.Int32);

    $.Field({Static:false, Public:false}, "m_Precision", $.Int32);

    $.Field({Static:false, Public:false}, "m_IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFixedLength", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxSize", $.Int32);

    $.Property({Static:false, Public:true }, "Precision", $.Int32);

    $.Property({Static:false, Public:true }, "Scale", $.Int32);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* enum Microsoft.SqlServer.Server.DataAccessKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.DataAccessKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Read: 1, 
  }
);

/* enum Microsoft.SqlServer.Server.SystemDataAccessKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SystemDataAccessKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Read: 1, 
  }
);

/* class Microsoft.SqlServer.Server.SqlFunctionAttribute */ 

(function SqlFunctionAttribute$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlFunctionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAccess", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.DataAccessKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FillRowMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeterministic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrecise", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemDataAccess", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SystemDataAccessKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableDefinition", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAccess", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.DataAccessKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FillRowMethodName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDeterministic", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsPrecise", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SystemDataAccess", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SystemDataAccessKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TableDefinition", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_fDeterministic", $.Boolean);

    $.Field({Static:false, Public:false}, "m_eDataAccess", $asm11.TypeRef("Microsoft.SqlServer.Server.DataAccessKind"));

    $.Field({Static:false, Public:false}, "m_eSystemDataAccess", $asm11.TypeRef("Microsoft.SqlServer.Server.SystemDataAccessKind"));

    $.Field({Static:false, Public:false}, "m_fPrecise", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fName", $.String);

    $.Field({Static:false, Public:false}, "m_fTableDefinition", $.String);

    $.Field({Static:false, Public:false}, "m_FillRowMethodName", $.String);

    $.Property({Static:false, Public:true }, "IsDeterministic", $.Boolean);

    $.Property({Static:false, Public:true }, "DataAccess", $asm11.TypeRef("Microsoft.SqlServer.Server.DataAccessKind"));

    $.Property({Static:false, Public:true }, "SystemDataAccess", $asm11.TypeRef("Microsoft.SqlServer.Server.SystemDataAccessKind"));

    $.Property({Static:false, Public:true }, "IsPrecise", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "TableDefinition", $.String);

    $.Property({Static:false, Public:true }, "FillRowMethodName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class Microsoft.SqlServer.Server.SqlMetaData */ 

(function SqlMetaData$Members () {
  var $, $thisType;


























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlMetaData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 12, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $asm07.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Byte, $.Byte, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Byte, 
          $.Byte, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Byte, 
          $.Byte, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Byte, 
          $.Byte, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $.String, 
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Byte, 
          $.Byte, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Int16, [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$asm11.TypeRef("System.Data.SqlTypes.SqlChars")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$asm11.TypeRef("System.Data.SqlTypes.SqlBytes")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$asm11.TypeRef("System.Data.SqlTypes.SqlXml")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$asm07.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Byte, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($.Char, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertNameIsValid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int64, $.Int64, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Byte, $.Byte, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SortOrder"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompareOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPartialLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUniqueKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocaleId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Max", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SortOrder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SortOrder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SortOrdinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SqlDbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UdtTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseServerDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionDatabase", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionOwningSchema", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPartialLengthMetaData", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "InferFromValue", 
      new JSIL.MethodSignature($.Type, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferScaleFromTimeTicks", 
      new JSIL.MethodSignature($.Byte, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdjustSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdjustTimeTicks", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultsForType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSortOrder", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyDateTimeRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyMoneyRange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTimeRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "m_strName", $.String);

    $.Field({Static:false, Public:false}, "m_lMaxLength", $.Int64);

    $.Field({Static:false, Public:false}, "m_sqlDbType", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Field({Static:false, Public:false}, "m_bPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "m_bScale", $.Byte);

    $.Field({Static:false, Public:false}, "m_lLocale", $.Int64);

    $.Field({Static:false, Public:false}, "m_eCompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.Field({Static:false, Public:false}, "m_XmlSchemaCollectionDatabase", $.String);

    $.Field({Static:false, Public:false}, "m_XmlSchemaCollectionOwningSchema", $.String);

    $.Field({Static:false, Public:false}, "m_XmlSchemaCollectionName", $.String);

    $.Field({Static:false, Public:false}, "m_serverTypeName", $.String);

    $.Field({Static:false, Public:false}, "m_bPartialLength", $.Boolean);

    $.Field({Static:false, Public:false}, "m_udttype", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_useServerDefault", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isUniqueKey", $.Boolean);

    $.Field({Static:false, Public:false}, "m_columnSortOrder", $asm11.TypeRef("System.Data.SqlClient.SortOrder"));

    $.Field({Static:false, Public:false}, "m_sortOrdinal", $.Int32);

    $.Constant({Static:true , Public:false}, "x_lMax", $.Int64, -1);

    $.Constant({Static:true , Public:false}, "x_lServerMaxUnicode", $.Int64, 4000);

    $.Constant({Static:true , Public:false}, "x_lServerMaxANSI", $.Int64, 8000);

    $.Constant({Static:true , Public:false}, "x_lServerMaxBinary", $.Int64, 8000);

    $.Constant({Static:true , Public:false}, "x_defaultUseServerDefault", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "x_defaultIsUniqueKey", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "x_defaultColumnSortOrder", $asm11.TypeRef("System.Data.SqlClient.SortOrder"), -1);

    $.Constant({Static:true , Public:false}, "x_defaultSortOrdinal", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "x_eDefaultStringCompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 25);

    $.Field({Static:true , Public:false}, "__maxLenFromPrecision", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "MaxTimeScale", $.Byte, 7);

    $.Field({Static:true , Public:false}, "__maxVarTimeLenOffsetFromScale", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_dtSmallMax", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_dtSmallMin", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_smSmallMax", $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_smSmallMin", $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_timeMin", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_timeMax", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "__unitTicksFromScale", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Field({Static:true , Public:false}, "sxm_rgSqlDbTypeToDbType", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DbType")]));

    $.Field({Static:true , Public:false}, "sxm_rgDefaults", $jsilcore.TypeRef("System.Array", [$.Type]));


    function SqlMetaData__cctor () {
      $thisType.x_dtSmallMax = new $asm07.System.DateTime();
      $thisType.x_dtSmallMin = new $asm07.System.DateTime();
      $thisType.x_smSmallMax = new $asm11.System.Data.SqlTypes.SqlMoney();
      $thisType.x_smSmallMin = new $asm11.System.Data.SqlTypes.SqlMoney();
      $thisType.x_timeMin = new $asm07.System.TimeSpan();
      $thisType.x_timeMax = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlMetaData__cctor
    );

    $.Property({Static:false, Public:true }, "CompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.Property({Static:false, Public:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:true }, "IsUniqueKey", $.Boolean);

    $.Property({Static:false, Public:true }, "LocaleId", $.Int64);

    $.Property({Static:true , Public:true }, "Max", $.Int64);

    $.Property({Static:false, Public:true }, "MaxLength", $.Int64);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Precision", $.Byte);

    $.Property({Static:false, Public:true }, "Scale", $.Byte);

    $.Property({Static:false, Public:true }, "SortOrder", $asm11.TypeRef("System.Data.SqlClient.SortOrder"));

    $.Property({Static:false, Public:true }, "SortOrdinal", $.Int32);

    $.Property({Static:false, Public:true }, "SqlDbType", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "ServerTypeName", $.String);

    $.Property({Static:false, Public:true }, "UseServerDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionDatabase", $.String);

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionName", $.String);

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionOwningSchema", $.String);

    $.Property({Static:false, Public:false}, "IsPartialLength", $.Boolean);

    $.Property({Static:false, Public:false}, "UdtTypeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlMethodAttribute */ 

(function SqlMethodAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SqlFunctionAttribute"), 
      Name: "Microsoft.SqlServer.Server.SqlMethodAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvokeIfReceiverIsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMutator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnNullCall", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InvokeIfReceiverIsNull", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsMutator", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnNullCall", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_fCallOnNullInputs", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fMutator", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fInvokeIfReceiverIsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "OnNullCall", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMutator", $.Boolean);

    $.Property({Static:false, Public:true }, "InvokeIfReceiverIsNull", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class Microsoft.SqlServer.Server.FieldInfoEx */ 

(function FieldInfoEx$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.FieldInfoEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Int32, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "offset", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldInfo", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "normalizer", $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.Normalizer */ 

(function Normalizer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.Normalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlipAllBits", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizer", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.FieldInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "m_skipNormalize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.BinaryOrderedUdtNormalizer */ 

(function BinaryOrderedUdtNormalizer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.BinaryOrderedUdtNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeNormalizeInternal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeNormalizeTopObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeTopObject", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_fieldsToNormalize", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.FieldInfoEx")]));

    $.Field({Static:false, Public:false}, "m_size", $.Int32);

    $.Field({Static:false, Public:false}, "m_PadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NullInstance", $.Object);

    $.Field({Static:false, Public:false}, "m_isTopLevelUdt", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.BooleanNormalizer */ 

(function BooleanNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.BooleanNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SByteNormalizer */ 

(function SByteNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.SByteNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.ByteNormalizer */ 

(function ByteNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.ByteNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.ShortNormalizer */ 

(function ShortNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.ShortNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.UShortNormalizer */ 

(function UShortNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.UShortNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.IntNormalizer */ 

(function IntNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.IntNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.UIntNormalizer */ 

(function UIntNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.UIntNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.LongNormalizer */ 

(function LongNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.LongNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.ULongNormalizer */ 

(function ULongNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.ULongNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.FloatNormalizer */ 

(function FloatNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.FloatNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.DoubleNormalizer */ 

(function DoubleNormalizer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Normalizer"), 
      Name: "Microsoft.SqlServer.Server.DoubleNormalizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeNormalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $.Object, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlProcedureAttribute */ 

(function SqlProcedureAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlProcedureAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_fName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class Microsoft.SqlServer.Server.SerializationHelperSql9 */ 

(function SerializationHelperSql9$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SerializationHelperSql9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFormat", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.Format"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNewSerializer", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.Serializer"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSerializer", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.Serializer"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUdtAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUdtMaxLength", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:true , Public:false}, "m_types2Serializers", $asm07.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.Serializer */ 

(function Serializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object])
    );

    $.Field({Static:false, Public:false}, "m_type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.NormalizedSerializer */ 

(function NormalizedSerializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Serializer"), 
      Name: "Microsoft.SqlServer.Server.NormalizedSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object])
    );

    $.Field({Static:false, Public:false}, "m_normalizer", $asm11.TypeRef("Microsoft.SqlServer.Server.BinaryOrderedUdtNormalizer"));

    $.Field({Static:false, Public:false}, "m_isFixedSize", $.Boolean);

    $.Field({Static:false, Public:false}, "m_maxSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.BinarySerializeSerializer */ 

(function BinarySerializeSerializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.Serializer"), 
      Name: "Microsoft.SqlServer.Server.BinarySerializeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.DummyStream */ 

(function DummyStream$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.SqlServer.Server.DummyStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DontDoIt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_size", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SqlTriggerAttribute */ 

(function SqlTriggerAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlTriggerAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Event", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Event", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_fName", $.String);

    $.Field({Static:false, Public:false}, "m_fTarget", $.String);

    $.Field({Static:false, Public:false}, "m_fEvent", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Target", $.String);

    $.Property({Static:false, Public:true }, "Event", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute */ 

(function SqlUserDefinedAggregateAttribute$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.Format"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.Format"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInvariantToDuplicates", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInvariantToNulls", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInvariantToOrder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullIfEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxByteSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInvariantToDuplicates", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInvariantToNulls", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInvariantToOrder", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullIfEmpty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxByteSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_MaxByteSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_fInvariantToDup", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fInvariantToNulls", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fInvariantToOrder", $.Boolean);

    $.Field({Static:false, Public:false}, "m_fNullIfEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "m_format", $asm11.TypeRef("Microsoft.SqlServer.Server.Format"));

    $.Field({Static:false, Public:false}, "m_fName", $.String);

    $.Constant({Static:true , Public:true }, "MaxByteSizeValue", $.Int32, 8000);

    $.Property({Static:false, Public:true }, "MaxByteSize", $.Int32);

    $.Property({Static:false, Public:true }, "IsInvariantToDuplicates", $.Boolean);

    $.Property({Static:false, Public:true }, "IsInvariantToNulls", $.Boolean);

    $.Property({Static:false, Public:true }, "IsInvariantToOrder", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNullIfEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "Format", $asm11.TypeRef("Microsoft.SqlServer.Server.Format"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* enum Microsoft.SqlServer.Server.Format */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.Format", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Native: 1, 
    UserDefined: 2, 
  }
);

/* class Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute */ 

(function SqlUserDefinedTypeAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.Format"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.Format"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByteOrdered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFixedLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxByteSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsByteOrdered", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFixedLength", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxByteSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationMethodName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_MaxByteSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_IsFixedLength", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IsByteOrdered", $.Boolean);

    $.Field({Static:false, Public:false}, "m_format", $asm11.TypeRef("Microsoft.SqlServer.Server.Format"));

    $.Field({Static:false, Public:false}, "m_fName", $.String);

    $.Constant({Static:true , Public:false}, "YukonMaxByteSizeValue", $.Int32, 8000);

    $.Field({Static:false, Public:false}, "m_ValidationMethodName", $.String);

    $.Property({Static:false, Public:true }, "MaxByteSize", $.Int32);

    $.Property({Static:false, Public:true }, "IsFixedLength", $.Boolean);

    $.Property({Static:false, Public:true }, "IsByteOrdered", $.Boolean);

    $.Property({Static:false, Public:true }, "Format", $asm11.TypeRef("Microsoft.SqlServer.Server.Format"));

    $.Property({Static:false, Public:true }, "ValidationMethodName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* enum Microsoft.SqlServer.Server.TriggerAction */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.TriggerAction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    Insert: 1, 
    Update: 2, 
    Delete: 3, 
    CreateTable: 21, 
    AlterTable: 22, 
    DropTable: 23, 
    CreateIndex: 24, 
    AlterIndex: 25, 
    DropIndex: 26, 
    CreateSecurityExpression: 31, 
    DropSecurityExpression: 33, 
    CreateSynonym: 34, 
    DropSynonym: 36, 
    CreateView: 41, 
    AlterView: 42, 
    DropView: 43, 
    CreateProcedure: 51, 
    AlterProcedure: 52, 
    DropProcedure: 53, 
    CreateFunction: 61, 
    AlterFunction: 62, 
    DropFunction: 63, 
    CreateTrigger: 71, 
    AlterTrigger: 72, 
    DropTrigger: 73, 
    CreateEventNotification: 74, 
    DropEventNotification: 76, 
    CreateType: 91, 
    DropType: 93, 
    CreateAssembly: 101, 
    AlterAssembly: 102, 
    DropAssembly: 103, 
    CreateUser: 131, 
    AlterUser: 132, 
    DropUser: 133, 
    CreateRole: 134, 
    AlterRole: 135, 
    DropRole: 136, 
    CreateAppRole: 137, 
    AlterAppRole: 138, 
    DropAppRole: 139, 
    CreateSchema: 141, 
    AlterSchema: 142, 
    DropSchema: 143, 
    CreateLogin: 144, 
    AlterLogin: 145, 
    DropLogin: 146, 
    CreateMsgType: 151, 
    DropMsgType: 153, 
    CreateContract: 154, 
    DropContract: 156, 
    CreateQueue: 157, 
    AlterQueue: 158, 
    DropQueue: 159, 
    CreateService: 161, 
    AlterService: 162, 
    DropService: 163, 
    CreateRoute: 164, 
    AlterRoute: 165, 
    DropRoute: 166, 
    GrantStatement: 167, 
    DenyStatement: 168, 
    RevokeStatement: 169, 
    GrantObject: 170, 
    DenyObject: 171, 
    RevokeObject: 172, 
    CreateBinding: 174, 
    AlterBinding: 175, 
    DropBinding: 176, 
    CreatePartitionFunction: 191, 
    AlterPartitionFunction: 192, 
    DropPartitionFunction: 193, 
    CreatePartitionScheme: 194, 
    AlterPartitionScheme: 195, 
    DropPartitionScheme: 196, 
  }
);

/* class Microsoft.SqlServer.Server.MemoryRecordBuffer */ 

(function MemoryRecordBuffer$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), 
      Name: "Microsoft.SqlServer.Server.MemoryRecordBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytesLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharsLength", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetVariantType", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytesLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCharsLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTimeOffset")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSingle", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetVariantMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlRecordBuffer")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.SqlServer.Server.SmiPropertySelector */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SmiPropertySelector", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DefaultFields: 0, 
    SortOrder: 1, 
    UniqueKey: 2, 
  }
);

/* class Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection */ 

(function SmiMetaDataPropertyCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWritable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiPropertySelector")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiPropertySelector"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "SelectorCount", $.Int32, 3);

    $.Field({Static:false, Public:false}, "_properties", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty")]));

    $.Field({Static:false, Public:false}, "_isReadOnly", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyInstance", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "__emptyDefaultFields", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiDefaultFieldsProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "__emptySortOrder", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiOrderProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "__emptyUniqueKey", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiUniqueKeyProperty"));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty"));

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "Values", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.SqlServer.Server.SmiMetaDataProperty */ 

(function SmiMetaDataProperty$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SmiMetaDataProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiUniqueKeyProperty */ 

(function SmiUniqueKeyProperty$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty"), 
      Name: "Microsoft.SqlServer.Server.SmiUniqueKeyProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCount", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_columns", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]));

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.SqlServer.Server.SmiOrderProperty */ 

(function SmiOrderProperty$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty"), 
      Name: "Microsoft.SqlServer.Server.SmiOrderProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCount", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_columns", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder")]));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder */ 

(function SmiColumnOrder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.SqlServer.Server.SmiOrderProperty+SmiColumnOrder", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "SortOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "Order", $asm11.TypeRef("System.Data.SqlClient.SortOrder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.SqlServer.Server.SmiDefaultFieldsProperty */ 

(function SmiDefaultFieldsProperty$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataProperty"), 
      Name: "Microsoft.SqlServer.Server.SmiDefaultFieldsProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCount", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_defaults", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]));

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.SqlServer.Server.SqlRecordBuffer */ 

(function SqlRecordBuffer$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.SqlServer.Server.SqlRecordBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertXmlStringToByteArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Boolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Byte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BytesLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CharsLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTimeOffset", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Double", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Guid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int16", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Single", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_String", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimeSpan", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VariantType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Boolean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Byte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BytesLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CharsLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DateTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DateTimeOffset", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Double", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Guid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int16", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int32", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int64", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Single", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlDecimal", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_String", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TimeSpan", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_VariantType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNull", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_isNull", $.Boolean);

    $.Field({Static:false, Public:false}, "_type", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlRecordBuffer+StorageType"));

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlRecordBuffer+Storage"));

    $.Field({Static:false, Public:false}, "_object", $.Object);

    $.Field({Static:false, Public:false}, "_metadata", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Field({Static:false, Public:false}, "_isMetaSet", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNull", $.Boolean);

    $.Property({Static:false, Public:false}, "Boolean", $.Boolean);

    $.Property({Static:false, Public:false}, "Byte", $.Byte);

    $.Property({Static:false, Public:false}, "DateTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "DateTimeOffset", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:false}, "Double", $.Double);

    $.Property({Static:false, Public:false}, "Guid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "Int16", $.Int16);

    $.Property({Static:false, Public:false}, "Int32", $.Int32);

    $.Property({Static:false, Public:false}, "Int64", $.Int64);

    $.Property({Static:false, Public:false}, "Single", $.Single);

    $.Property({Static:false, Public:false}, "String", $.String);

    $.Property({Static:false, Public:false}, "SqlDecimal", $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"));

    $.Property({Static:false, Public:false}, "TimeSpan", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "BytesLength", $.Int64);

    $.Property({Static:false, Public:false}, "CharsLength", $.Int64);

    $.Property({Static:false, Public:false}, "VariantType", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.SqlServer.Server.SqlRecordBuffer+StorageType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.SqlServer.Server.SqlRecordBuffer+StorageType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Boolean: 0, 
    Byte: 1, 
    ByteArray: 2, 
    CharArray: 3, 
    DateTime: 4, 
    DateTimeOffset: 5, 
    Double: 6, 
    Guid: 7, 
    Int16: 8, 
    Int32: 9, 
    Int64: 10, 
    Single: 11, 
    String: 12, 
    SqlDecimal: 13, 
    TimeSpan: 14, 
  }
);

/* struct Microsoft.SqlServer.Server.SqlRecordBuffer+Storage */ 

(function Storage$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.SqlServer.Server.SqlRecordBuffer+Storage", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "_boolean", $.Boolean);

    $.Field({Static:false, Public:false, Offset: 0}, "_byte", $.Byte);

    $.Field({Static:false, Public:false, Offset: 0}, "_dateTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false, Offset: 0}, "_dateTimeOffset", $asm07.TypeRef("System.DateTimeOffset"));

    $.Field({Static:false, Public:false, Offset: 0}, "_double", $.Double);

    $.Field({Static:false, Public:false, Offset: 0}, "_guid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 0}, "_int16", $.Int16);

    $.Field({Static:false, Public:false, Offset: 0}, "_int32", $.Int32);

    $.Field({Static:false, Public:false, Offset: 0}, "_int64", $.Int64);

    $.Field({Static:false, Public:false, Offset: 0}, "_single", $.Single);

    $.Field({Static:false, Public:false, Offset: 0}, "_timeSpan", $asm07.TypeRef("System.TimeSpan"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml");
/* class System.Xml.BaseTreeIterator */ 

(function BaseTreeIterator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xml.BaseTreeIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.DataSetMapper"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentNode", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Next", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NextRight", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextRightRowElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextRowElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "mapper", $asm11.TypeRef("System.Xml.DataSetMapper"));

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentNode", $asm2F.TypeRef("System.Xml.XmlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DataDocumentXPathNavigator */ 

(function DataDocumentXPathNavigator$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), 
      Name: "System.Xml.DataDocumentXPathNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDataDocument"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeOrder"), [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurNode", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XPathNodePointer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XmlDataDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IHasXmlNode.GetNode", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.IHasXmlNode"), "GetNode");

    $.Field({Static:false, Public:false}, "_curNode", $asm11.TypeRef("System.Xml.XPathNodePointer"));

    $.Field({Static:false, Public:false}, "_doc", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.Field({Static:false, Public:false}, "_temp", $asm11.TypeRef("System.Xml.XPathNodePointer"));

    $.Property({Static:false, Public:false}, "CurNode", $asm11.TypeRef("System.Xml.XPathNodePointer"));

    $.Property({Static:false, Public:false}, "Document", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm2F.TypeRef("System.Xml.IHasXmlNode")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DataPointer */ 

(function DataPointer$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xml.DataPointer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDataDocument"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPointer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "ColumnCount", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataRow"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Declaration", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNode", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowElement", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFoliated", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalNameEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextSibling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToOwnerElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NthColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $asm11.TypeRef("System.Data.DataRow"), $.Boolean, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RealFoliate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNoLongerUse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsInUse", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsInUse");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsOnColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsOnColumn");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsOnNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsOnNode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.OnFoliated", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "OnFoliated");

    $.Field({Static:false, Public:false}, "doc", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.Field({Static:false, Public:false}, "node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "fOnValue", $.Boolean);

    $.Field({Static:false, Public:false}, "bNeedFoliate", $.Boolean);

    $.Field({Static:false, Public:false}, "_isInUse", $.Boolean);

    $.Property({Static:false, Public:false}, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false}, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "Value", $.String);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:false}, "PublicId", $.String);

    $.Property({Static:false, Public:false}, "SystemId", $.String);

    $.Property({Static:false, Public:false}, "InternalSubset", $.String);

    $.Property({Static:false, Public:false}, "Declaration", $asm2F.TypeRef("System.Xml.XmlDeclaration"));

    $.Property({Static:false, Public:false}, "Encoding", $.String);

    $.Property({Static:false, Public:false}, "Standalone", $.String);

    $.Property({Static:false, Public:false}, "Version", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDataVirtualNode")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DataSetMapper */ 

(function DataSetMapper$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xml.DataSetMapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumnSchema", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTableSchema", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnSchemaForNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIdentity", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRegion", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlBoundElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowFromElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowFromElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableSchemaForElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableSchemaForElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMapped", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNextColumn", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.DataColumnCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNotMapped", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRegionRadical", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SearchMatchingTableSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SearchMatchingTableSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupMapping", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDataDocument"), $asm11.TypeRef("System.Data.DataSet")])
    );

    $.Field({Static:false, Public:false}, "tableSchemaMap", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "columnSchemaMap", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "doc", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Constant({Static:true , Public:false}, "strReservedXmlns", $.String, "http://www.w3.org/2000/xmlns/");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlDataVirtualNode */ 

JSIL.MakeInterface(
  "System.Xml.IXmlDataVirtualNode", false, [], function ($) {
    $.Method({}, "IsOnNode", new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")]));
    $.Method({}, "IsOnColumn", new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")]));
    $.Method({}, "IsInUse", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "OnFoliated", JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode")));
  }, []);

/* class System.Xml.BaseRegionIterator */ 

(function BaseRegionIterator$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.BaseTreeIterator"), 
      Name: "System.Xml.BaseRegionIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.DataSetMapper"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.RegionIterator */ 

(function RegionIterator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.BaseRegionIterator"), 
      Name: "System.Xml.RegionIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentNode", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInitialTextFromNodes", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$asm2F.TypeRef("System.Xml.XmlNode")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Next", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextInitialTextLikeNodes", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NextRight", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "rowElement", $asm11.TypeRef("System.Xml.XmlBoundElement"));

    $.Field({Static:false, Public:false}, "currentNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentNode", $asm2F.TypeRef("System.Xml.XmlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TreeIterator */ 

(function TreeIterator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.BaseTreeIterator"), 
      Name: "System.Xml.TreeIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentNode", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Next", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NextRight", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nodeTop", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "currentNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentNode", $asm2F.TypeRef("System.Xml.XmlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ElementState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ElementState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Defoliated: 1, 
    WeakFoliation: 2, 
    StrongFoliation: 3, 
    Foliating: 4, 
    Defoliating: 5, 
  }
);

/* class System.Xml.XmlBoundElement */ 

(function XmlBoundElement$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlElement"), 
      Name: "System.Xml.XmlBoundElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoFoliate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Foliate", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.ElementState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.ElementState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FirstChild", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildNodes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFoliated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastChild", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreviousSibling", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SafeFirstChild", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SafeNextSibling", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SafePreviousSibling", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAllChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementState", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.ElementState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Row", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteBoundElementContentTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DataPointer"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteBoundElementTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DataPointer"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRootBoundElementTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DataPointer"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DataPointer"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.Field({Static:false, Public:false}, "row", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "state", $asm11.TypeRef("System.Xml.ElementState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm2F.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FirstChild", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "SafeFirstChild", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "LastChild", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "SafePreviousSibling", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "SafeNextSibling", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildNodes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false}, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "IsFoliated", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementState", $asm11.TypeRef("System.Xml.ElementState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDataDocument */ 

(function XmlDataDocument$Members () {
  var $, $thisType;








































































































































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlDocument"), 
      Name: "System.Xml.XmlDataDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlImplementation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPointer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertLiveRows", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertNonLiveRows", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertPointerPresent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AttachBoundElementToDataRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBoundElement"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindForLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BindListeners", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BindSpecialListeners", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToDataSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm11.TypeRef("System.Xml.DataPointer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneTree", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm11.TypeRef("System.Xml.DataPointer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneTreeInternal", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm11.TypeRef("System.Xml.DataPointer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEntityReference", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlEntityReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefoliateRegion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemoteDocumentElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDisconnectedDataRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDocumentElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureFoliation", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Xml.ElementState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureNonRowDocumentElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsurePopulatedMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAssociatedParentColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.DataRelation"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixNestedChildren", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Foliate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Xml.ElementState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Foliate", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FoliateIfDataPointers", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceFoliation", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Xml.ElementState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutoFoliationState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.ElementState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreDataSetEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreXmlEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFoliationEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapper", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.DataSetMapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnInsertAfterLocation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Xml.XmlBoundElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementById", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElementFromRow", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedChildRelations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedParent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNestedParentRelation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRowFromElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowInsertBeforeLocation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextOnlyColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasPointers", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConnected", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFoliated", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFoliated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNotMapped", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRowLive", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSame", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.DataColumn"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSelfRelatedDataTable", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextLikeNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataSetFromTree", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadRows", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTreeFromDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedXSI_NilAttr", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnAddRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnClearCalled", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnColumnChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataColumnChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnColumnPropertyChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnColumnValueChanged", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Xml.XmlBoundElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnColumnValuesChanged", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataRowCreated", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataRowCreatedSpecial", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataSetPropertyChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataSetRelationsChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataSetTablesChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeleteRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeletingRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnFoliated", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNestedParentChange", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNewRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeInserted", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeInsertedInFragment", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeInsertedInTree", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeInserting", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeRemoved", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeRemovedFromFragment", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeRemovedFromTree", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNodeRemoving", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNonRowElementInsertedInFragment", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Xml.XmlBoundElement"), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNonRowElementInsertedInTree", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Xml.XmlBoundElement"), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRelationPropertyChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataRowChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataRowChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowElementInsertedInTree", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnTableColumnsChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnTablePropertyChanging", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUndeleteRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OrderTables", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteChild", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteInnerRegions", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteNonValueChildren", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveInitialTextNodes", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceInitialChildText", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeFirstChild", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeNextSibling", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafePreviousSibling", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutoFoliationState", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.ElementState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IgnoreDataSetEvents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IgnoreXmlEvents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFoliationEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNestedParentRegion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNestedParentRegion", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetNestedParentRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetRowValueFromXmlText", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetRowValueToNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronizeRowFromRowElement", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronizeRowFromRowElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronizeRowFromRowElementEx", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncRows", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlNode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncTree", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TablesAreOrdered", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnBindSpecialListeners", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateAllColumns", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Xml.XmlBoundElement")])
    );

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "mapper", $asm11.TypeRef("System.Xml.DataSetMapper"));

    $.Field({Static:false, Public:false}, "pointers", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "countAddPointer", $.Int32);

    $.Field({Static:false, Public:false}, "columnChangeList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "rollbackState", $asm11.TypeRef("System.Data.DataRowState"));

    $.Field({Static:false, Public:false}, "fBoundToDataSet", $.Boolean);

    $.Field({Static:false, Public:false}, "fBoundToDocument", $.Boolean);

    $.Field({Static:false, Public:false}, "fDataRowCreatedSpecial", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreXmlEvents", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreDataSetEvents", $.Boolean);

    $.Field({Static:false, Public:false}, "isFoliationEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "optimizeStorage", $.Boolean);

    $.Field({Static:false, Public:false}, "autoFoliationState", $asm11.TypeRef("System.Xml.ElementState"));

    $.Field({Static:false, Public:false}, "fAssociateDataRow", $.Boolean);

    $.Field({Static:false, Public:false}, "foliationLock", $.Object);

    $.Constant({Static:true , Public:false}, "XSI_NIL", $.String, "xsi:nil");

    $.Constant({Static:true , Public:false}, "XSI", $.String, "xsi");

    $.Field({Static:false, Public:false}, "bForceExpandEntity", $.Boolean);

    $.Field({Static:false, Public:false}, "attrXml", $asm2F.TypeRef("System.Xml.XmlAttribute"));

    $.Field({Static:false, Public:false}, "bLoadFromDataSet", $.Boolean);

    $.Field({Static:false, Public:false}, "bHasXSINIL", $.Boolean);

    $.Property({Static:false, Public:false}, "AutoFoliationState", $asm11.TypeRef("System.Xml.ElementState"));

    $.Property({Static:false, Public:true }, "DataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Property({Static:false, Public:false}, "IgnoreXmlEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "IgnoreDataSetEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFoliationEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "Mapper", $asm11.TypeRef("System.Xml.DataSetMapper"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["XmlDataDocument class will be removed in a future release."]; });

})();

/* class System.Xml.XmlDataImplementation */ 

(function XmlDataImplementation$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlImplementation"), 
      Name: "System.Xml.XmlDataImplementation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocument", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPathNodePointer */ 

(function XPathNodePointer$Members () {
  var $, $thisType;



























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xml.XPathNodePointer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.DataDocumentXPathNavigator"), $asm11.TypeRef("System.Xml.XmlDataDocument"), 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DataDocumentXPathNavigator"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.DataDocumentXPathNavigator"), $asm11.TypeRef("System.Xml.XmlDataDocument"), 
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean, $asm11.TypeRef("System.Xml.XmlBoundElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Xml.DataDocumentXPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnCount", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareNamespacePosition", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeOrder"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComparePosition", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeOrder"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertNodeType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XPath.XPathNodeType"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecideXPNodeTypeForTextNodes", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XPath.XPathNodeType"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateNS", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XmlDataDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Node", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlBoundElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParent", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRoot", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowElement", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFoliated", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNodeType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidChild", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidChild", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Xml.XmlBoundElement"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm2F.TypeRef("System.Xml.XmlAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextSibling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToPreviousSibling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NextColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RealFoliate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsInUse", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsInUse");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsOnColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsOnColumn");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.IsOnNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "IsOnNode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlDataVirtualNode.OnFoliated", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    )
      .Overrides($asm11.TypeRef("System.Xml.IXmlDataVirtualNode"), "OnFoliated");

    $.Field({Static:false, Public:false}, "_owner", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_doc", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.Field({Static:false, Public:false}, "_node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "_column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "_fOnValue", $.Boolean);

    $.Field({Static:false, Public:false}, "_parentOfNS", $asm11.TypeRef("System.Xml.XmlBoundElement"));

    $.Field({Static:true , Public:false}, "xmlNodeType_To_XpathNodeType_Map", $jsilcore.TypeRef("System.Array", [$.Int32]), function ($pi) {
        return JSIL.Array.New($asm07.System.Int32, 20);
      });

    $.Field({Static:true , Public:false}, "s_strReservedXmlns", $.String, "http://www.w3.org/2000/xmlns/");

    $.Field({Static:true , Public:false}, "s_strReservedXml", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Field({Static:true , Public:false}, "s_strXmlNS", $.String, "xmlns");

    $.Field({Static:false, Public:false}, "_bNeedFoliate", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:false}, "NodeType", $asm2F.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false}, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "Value", $.String);

    $.Property({Static:false, Public:false}, "InnerText", $.String);

    $.Property({Static:false, Public:false}, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:false}, "Node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "Document", $asm11.TypeRef("System.Xml.XmlDataDocument"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDataVirtualNode")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.AcceptRejectRule */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.AcceptRejectRule", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Cascade: 1, 
  }
);

/* enum System.Data.AggregateType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.AggregateType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Sum: 4, 
    Mean: 5, 
    Min: 6, 
    Max: 7, 
    First: 8, 
    Count: 9, 
    Var: 10, 
    StDev: 11, 
  }
);

/* class System.Data.InternalDataCollectionBase */ 

(function InternalDataCollectionBase$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.InternalDataCollectionBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NamesEqual", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:true , Public:false}, "RefreshEventArgs", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.TypedDataSetGenerator */ 

(function TypedDataSetGenerator$Members () {
  var $, $thisType;


















































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.TypedDataSetGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Assign", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AttributeDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AttributeDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [$.String, $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Base", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BinOperator", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeBinaryOperatorExpression"), [
          $asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeBinaryOperatorType"), 
          $asm0A.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Cast", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String, $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Cast", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeTypeReference"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Catch", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCatchClause"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeStatement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildPropertyName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildRelationFollowable", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateOnRowEventMethod", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypedDataSet", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypedRow", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypedRowEvent", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypedRowEventHandler", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDelegate"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypedTable", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DelegateCall", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EQ", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeBinaryOperatorExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Event", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberEvent"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Field", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberField"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberField"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixIdName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Generate", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm0A.TypeRef("System.CodeDom.Compiler.ICodeGenerator")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $asm11.TypeRef("System.Data.DataSet"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm0A.TypeRef("System.CodeDom.Compiler.ICodeGenerator")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateIdName", 
      new JSIL.MethodSignature($.String, [$.String, $asm0A.TypeRef("System.CodeDom.Compiler.ICodeGenerator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdNotEQ", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeBinaryOperatorExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "If", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [
          $asm0A.TypeRef("System.CodeDom.CodeExpression"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeStatement")]), 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeStatement")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "If", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeStatement")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "If", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeStatement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Indexer", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitLookupIdentifiers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "isEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Method", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeReference"), $.String, 
          $asm0A.TypeRef("System.CodeDom.MemberAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodCall", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [
          $asm0A.TypeRef("System.CodeDom.CodeExpression"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodCall", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodCall", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [
          $asm0A.TypeRef("System.CodeDom.CodeExpression"), $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm0A.TypeRef("System.CodeDom.MemberAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.MemberAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "New", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String, $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "New", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentPropertyName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Primitive", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Property", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$asm0A.TypeRef("System.CodeDom.CodeExpression"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.MemberAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm0A.TypeRef("System.CodeDom.MemberAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RelationFieldName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Return", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Return", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeStatement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RowBaseClassName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowClassName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowColumnPropertyName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowConcreteClassName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Stm", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Str", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TableClassName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TableColumnFieldName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TableColumnPropertyName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TableFieldName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TablePropertyName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesConnectedness", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "This", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Throw", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Try", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm0A.TypeRef("System.CodeDom.CodeStatement"), $asm0A.TypeRef("System.CodeDom.CodeCatchClause")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Type", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeReference"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Type", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeReference"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Type", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeReference"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeExpr", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeReferenceExpression"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeExpr", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeReferenceExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeOf", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Value", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeExpression"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Variable", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableDecl", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeStatement"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.Field({Static:false, Public:false}, "useExtendedNaming", $.Boolean);

    $.Field({Static:false, Public:false}, "codeGen", $asm0A.TypeRef("System.CodeDom.Compiler.ICodeGenerator"));

    $.Field({Static:false, Public:false}, "errorList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "conflictingTables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "lookupIdentifiers", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["TypedDataSetGenerator class will be removed in a future release. Please use System.Data.Design.TypedDataSetGenerator in System.Design.dll."]; });

})();

/* class System.Data.DataException */ 

(function DataException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Data.DataException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.StrongTypingException */ 

(function StrongTypingException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.StrongTypingException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.TypedDataSetGeneratorException */ 

(function TypedDataSetGeneratorException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.TypedDataSetGeneratorException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errorList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "KEY_ARRAYCOUNT", $.String);

    $.Field({Static:false, Public:false}, "KEY_ARRAYVALUES", $.String);

    $.Property({Static:false, Public:true }, "ErrorList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ColumnTypeConverter */ 

(function ColumnTypeConverter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Data.ColumnTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:true , Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "values", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.CommandBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.CommandBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    SingleResult: 1, 
    SchemaOnly: 2, 
    KeyInfo: 4, 
    SingleRow: 8, 
    SequentialAccess: 16, 
    CloseConnection: 32, 
  }
);

/* enum System.Data.CommandType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.CommandType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Text: 1, 
    StoredProcedure: 4, 
    TableDirect: 512, 
  }
);

/* enum System.Data.KeyRestrictionBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.KeyRestrictionBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AllowOnly: 0, 
    PreventUsage: 1, 
  }
);

/* enum System.Data.ConflictOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ConflictOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CompareAllSearchableValues: 1, 
    CompareRowVersion: 2, 
    OverwriteChanges: 3, 
  }
);

/* enum System.Data.ConnectionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ConnectionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Closed: 0, 
    Open: 1, 
    Connecting: 2, 
    Executing: 4, 
    Fetching: 8, 
    Broken: 16, 
  }
);

/* class System.Data.Constraint */ 

(function Constraint$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Constraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanBeRemovedFromCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ConstraintCollection"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanEnableConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckCanAddToCollection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConstraintCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckConstraint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckConstraint", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStateForProperty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContainsColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get__DataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConstraintName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstraintViolated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConstraintName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "inCollection", $.Boolean);

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "extendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConstraintName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ConstraintNameDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "SchemaName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "InCollection", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ConstraintTableDescr"]; });

    $.Property({Static:false, Public:true }, "ExtendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ExtendedPropertiesDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "_DataSet", $asm11.TypeRef("System.Data.DataSet"))
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.ConstraintConverter.__Type__]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["ConstraintName"]; });

})();

/* class System.Data.ConstraintCollection */ 

(function ConstraintCollection$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InternalDataCollectionBase"), 
      Name: "System.Data.ConstraintCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Constraint"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddForeignKeyConstraint", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ForeignKeyConstraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Constraint")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUniqueConstraint", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UniqueConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGroupSwitch", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Constraint")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Constraint")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareArrays", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Constraint")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConstraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindForeignKeyConstraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ForeignKeyConstraint"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindKeyConstraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.UniqueConstraint"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindKeyConstraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.UniqueConstraint"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishInitConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "defaultNameIndex", $.Int32);

    $.Field({Static:false, Public:false}, "onCollectionChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "delayLoadingConstraints", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Constraint")]));

    $.Field({Static:false, Public:false}, "fLoadForeignKeyConstraintsOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Constraint"));

    $.Property({Static:false, Public:false}, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Constraint"));

    $.Event({Static:false, Public:true }, "CollectionChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["CollectionChanged"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.ConstraintsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.ConstraintConverter */ 

(function ConstraintConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.ConstraintConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ConstraintEnumerator */ 

(function ConstraintEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ConstraintEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentObject", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetConstraint", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Constraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidCandidate", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.Field({Static:false, Public:false}, "tables", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "constraints", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "currentObject", $asm11.TypeRef("System.Data.Constraint"));

    $.Property({Static:false, Public:false}, "CurrentObject", $asm11.TypeRef("System.Data.Constraint"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ForeignKeyConstraintEnumerator */ 

(function ForeignKeyConstraintEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ConstraintEnumerator"), 
      Name: "System.Data.ForeignKeyConstraintEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetForeignKeyConstraint", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ForeignKeyConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidCandidate", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ChildForeignKeyConstraintEnumerator */ 

(function ChildForeignKeyConstraintEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ForeignKeyConstraintEnumerator"), 
      Name: "System.Data.ChildForeignKeyConstraintEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidCandidate", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ParentForeignKeyConstraintEnumerator */ 

(function ParentForeignKeyConstraintEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ForeignKeyConstraintEnumerator"), 
      Name: "System.Data.ParentForeignKeyConstraintEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidCandidate", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Constraint")])
    );

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataColumn */ 

(function DataColumn$Members () {
  var $, $thisType;































































































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Data.DataColumn", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String, $asm11.TypeRef("System.Data.MappingType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependentColumn", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "BindExpression", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckColumnConstraint", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMaxLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMaxLength", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNotAllowNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNullable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnique", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareValueTo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertObjectToXml", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyValueIntoStore", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindParentRelation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishInitInProgress", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeRecord", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowDBNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutoInc", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.AutoIncrementValue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoIncrement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutoIncrementCurrent", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoIncrementSeed", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoIncrementStep", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Caption", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ColumnMapping", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MappingType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Computed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataExpression", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateTimeMode", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSetDateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueIsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncodedColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IFormatProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImplementsIChangeTracking", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImplementsINullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImplementsIRevertibleChangeTracking", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImplementsIXMLSerializable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCloneable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCustomType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSqlType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsStringType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Locale", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ordinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SimpleType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortIndex", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Index"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Unique", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlDataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAggregateValue", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValueAsString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEmptyColumnStore", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDependentColumnList", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataExpression"), $asm11.TypeRef("System.Data.DataExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeRecord", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InsureStorage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalUnique", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAutoIncrementType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsColumnMappingValid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm11.TypeRef("System.Data.MappingType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInRelation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMaxLengthViolated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNotAllowDBNullViolated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValueCustomTypeInstance", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnSetDataSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RaisePropertyChanging", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependentColumn", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCaption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowDBNull", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoIncrement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutoIncrementCurrent", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoIncrementSeed", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoIncrementStep", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Caption", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ColumnMapping", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MappingType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ColumnName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DateTimeMode", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSetDateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expression", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxLength", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SimpleType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Unique", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlDataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMaxLengthSimpleType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOrdinal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalInternal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCaption", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateColumnType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.Field({Static:false, Public:false}, "allowNull", $.Boolean);

    $.Field({Static:false, Public:false}, "caption", $.String);

    $.Field({Static:false, Public:false}, "_columnName", $.String);

    $.Field({Static:false, Public:false}, "dataType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_storageType", $asm11.TypeRef("System.Data.Common.StorageType"));

    $.Field({Static:false, Public:false}, "defaultValue", $.Object);

    $.Field({Static:false, Public:false}, "_dateTimeMode", $asm11.TypeRef("System.Data.DataSetDateTime"));

    $.Field({Static:false, Public:false}, "expression", $asm11.TypeRef("System.Data.DataExpression"));

    $.Field({Static:false, Public:false}, "maxLength", $.Int32);

    $.Field({Static:false, Public:false}, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "sortIndex", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "unique", $.Boolean);

    $.Field({Static:false, Public:false}, "columnMapping", $asm11.TypeRef("System.Data.MappingType"));

    $.Field({Static:false, Public:false}, "_hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "errors", $.Int32);

    $.Field({Static:false, Public:false}, "isSqlType", $.Boolean);

    $.Field({Static:false, Public:false}, "implementsINullable", $.Boolean);

    $.Field({Static:false, Public:false}, "implementsIChangeTracking", $.Boolean);

    $.Field({Static:false, Public:false}, "implementsIRevertibleChangeTracking", $.Boolean);

    $.Field({Static:false, Public:false}, "implementsIXMLSerializable", $.Boolean);

    $.Field({Static:false, Public:false}, "defaultValueIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "dependentColumns", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "extendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"));

    $.Field({Static:false, Public:false}, "onPropertyChangingDelegate", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Field({Static:false, Public:false}, "_storage", $asm11.TypeRef("System.Data.Common.DataStorage"));

    $.Field({Static:false, Public:false}, "autoInc", $asm11.TypeRef("System.Data.AutoIncrementValue"));

    $.Field({Static:false, Public:false}, "_columnUri", $.String);

    $.Field({Static:false, Public:false}, "_columnPrefix", $.String);

    $.Field({Static:false, Public:false}, "encodedColumnName", $.String);

    $.Field({Static:false, Public:false}, "dttype", $.String);

    $.Field({Static:false, Public:false}, "simpleType", $asm11.TypeRef("System.Data.SimpleType"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "AllowDBNull", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnAllowNullDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "AutoIncrement", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnAutoIncrementDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:false}, "AutoIncrementCurrent", $.Object);

    $.Property({Static:false, Public:false}, "AutoInc", $asm11.TypeRef("System.Data.AutoIncrementValue"));

    $.Property({Static:false, Public:true }, "AutoIncrementSeed", $.Int64)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnAutoIncrementSeedDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "AutoIncrementStep", $.Int64)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [1]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnAutoIncrementStepDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Caption", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnCaptionDescr"]; });

    $.Property({Static:false, Public:true }, "ColumnName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnColumnNameDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "EncodedColumnName", $.String);

    $.Property({Static:false, Public:false}, "FormatProvider", $asm07.TypeRef("System.IFormatProvider"));

    $.Property({Static:false, Public:false}, "Locale", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "Prefix", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnPrefixDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "Computed", $.Boolean);

    $.Property({Static:false, Public:false}, "DataExpression", $asm11.TypeRef("System.Data.DataExpression"));

    $.Property({Static:false, Public:true }, "DataType", $asm07.TypeRef("System.Type"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.String.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnDataTypeDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.ColumnTypeConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "DateTimeMode", $asm11.TypeRef("System.Data.DataSetDateTime"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnDateTimeModeDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.DataSetDateTime.UnspecifiedLocal]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.DefaultValueTypeConverter.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnDefaultValueDescr"]; });

    $.Property({Static:false, Public:false}, "DefaultValueIsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Expression", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnExpressionDescr"]; });

    $.Property({Static:false, Public:true }, "ExtendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ExtendedPropertiesDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "HasData", $.Boolean);

    $.Property({Static:false, Public:false}, "ImplementsINullable", $.Boolean);

    $.Property({Static:false, Public:false}, "ImplementsIChangeTracking", $.Boolean);

    $.Property({Static:false, Public:false}, "ImplementsIRevertibleChangeTracking", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCloneable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsStringType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSqlType", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxLength", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMaxLengthDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [-1]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnNamespaceDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Ordinal", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnOrdinalDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "ReadOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnReadOnlyDescr"]; });

    $.Property({Static:false, Public:false}, "SortIndex", $asm11.TypeRef("System.Data.Index"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnDataTableDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Unique", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnUniqueDescr"]; });

    $.Property({Static:false, Public:false}, "XmlDataType", $.String);

    $.Property({Static:false, Public:false}, "SimpleType", $asm11.TypeRef("System.Data.SimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ColumnMapping", $asm11.TypeRef("System.Data.MappingType"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMappingDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.MappingType.Element]; });

    $.Property({Static:false, Public:false}, "IsCustomType", $.Boolean);

    $.Property({Static:false, Public:false}, "ImplementsIXMLSerializable", $.Boolean);

    $.Event({Static:false, Public:false}, "PropertyChanging", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignTimeVisibleAttribute"), function () { return [false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["ColumnName"]; });

})();

/* class System.Data.AutoIncrementValue */ 

(function AutoIncrementValue$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.AutoIncrementValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Auto", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Seed", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Step", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveAfter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Auto", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Current", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Seed", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Step", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrent", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrentAndIncrement", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "auto", $.Boolean);

    $.Property({Static:false, Public:false}, "Auto", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "Seed", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "Step", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "DataType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.AutoIncrementInt64 */ 

(function AutoIncrementInt64$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.AutoIncrementValue"), 
      Name: "System.Data.AutoIncrementInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BoundaryCheck", 
      new JSIL.MethodSignature($.Boolean, [$asm1E.TypeRef("System.Numerics.BigInteger")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Seed", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Step", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveAfter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Current", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Seed", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Step", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrent", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrentAndIncrement", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "current", $.Int64);

    $.Field({Static:false, Public:false}, "seed", $.Int64);

    $.Field({Static:false, Public:false}, "step", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "DataType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "Seed", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "Step", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.AutoIncrementBigInteger */ 

(function AutoIncrementBigInteger$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.AutoIncrementValue"), 
      Name: "System.Data.AutoIncrementBigInteger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BoundaryCheck", 
      new JSIL.MethodSignature($.Boolean, [$asm1E.TypeRef("System.Numerics.BigInteger")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Seed", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Step", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveAfter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Current", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Seed", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Step", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrent", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCurrentAndIncrement", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "current", $asm1E.TypeRef("System.Numerics.BigInteger"));

    $.Field({Static:false, Public:false}, "seed", $.Int64);

    $.Field({Static:false, Public:false}, "step", $asm1E.TypeRef("System.Numerics.BigInteger"));

    $.Property({Static:false, Public:false, Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "DataType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "Seed", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "Step", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataColumnChangeEventArgs */ 

(function DataColumnChangeEventArgs$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.DataColumnChangeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Column", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProposedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeColumnChangeEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProposedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_row", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "_column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "_proposedValue", $.Object);

    $.Property({Static:false, Public:true }, "Column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "ProposedValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.DataColumnChangeEventHandler */ 

JSIL.MakeDelegate("System.Data.DataColumnChangeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataColumnChangeEventArgs")]));

/* class System.Data.DataColumnCollection */ 

(function DataColumnCollection$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InternalDataCollectionBase"), 
      Name: "System.Data.DataColumnCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_ColumnPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAt", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumnsImplementingIChangeTrackingList", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayAdd", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGroupSwitch", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRegisterName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIChangeTracking", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureAdditionalCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishInitCollection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnsImplementingIChangeTracking", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnsImplementingIChangeTrackingCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnsImplementingIRevertibleChangeTrackingCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfCaseInsensitive", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnColumnPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterColumnName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_ColumnPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveColumnsImplementingIChangeTrackingList", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "defaultNameIndex", $.Int32);

    $.Field({Static:false, Public:false}, "delayedAddRangeColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "columnFromName", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false}, "onCollectionChangedDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onCollectionChangingDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onColumnPropertyChangedDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "fInClear", $.Boolean);

    $.Field({Static:false, Public:false}, "columnsImplementingIChangeTracking", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false}, "nColumnsImplementingIChangeTracking", $.Int32);

    $.Field({Static:false, Public:false}, "nColumnsImplementingIRevertibleChangeTracking", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ColumnsImplementingIChangeTracking", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "ColumnsImplementingIChangeTrackingCount", $.Int32);

    $.Property({Static:false, Public:false}, "ColumnsImplementingIRevertibleChangeTrackingCount", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.DataColumn"));

    $.Event({Static:false, Public:true }, "CollectionChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["collectionChangedEventDescr"]; });

    $.Event({Static:false, Public:false}, "CollectionChanging", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Event({Static:false, Public:false}, "ColumnPropertyChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["CollectionChanged"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.ColumnsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataColumnPropertyDescriptor */ 

(function DataColumnPropertyDescriptor$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.DataColumnPropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsBrowsable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm0A.TypeRef("System.ComponentModel.AttributeCollection"));

    $.Property({Static:false, Public:false}, "Column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsBrowsable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataError */ 

(function DataError$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataError", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnError", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnsInError", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColumnError", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "rowError", $.String);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "errorList", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataError+ColumnError")]));

    $.Constant({Static:true , Public:false}, "initialCapacity", $.Int32, 1);

    $.Property({Static:false, Public:false}, "Text", $.String);

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.DataError+ColumnError */ 

(function ColumnError$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.DataError+ColumnError", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "error", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ConstraintException */ 

(function ConstraintException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.ConstraintException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DeletedRowInaccessibleException */ 

(function DeletedRowInaccessibleException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.DeletedRowInaccessibleException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DuplicateNameException */ 

(function DuplicateNameException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.DuplicateNameException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.InRowChangingEventException */ 

(function InRowChangingEventException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.InRowChangingEventException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.InvalidConstraintException */ 

(function InvalidConstraintException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.InvalidConstraintException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.MissingPrimaryKeyException */ 

(function MissingPrimaryKeyException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.MissingPrimaryKeyException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.NoNullAllowedException */ 

(function NoNullAllowedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.NoNullAllowedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ReadOnlyException */ 

(function ReadOnlyException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.ReadOnlyException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.RowNotInTableException */ 

(function RowNotInTableException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.RowNotInTableException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.VersionNotFoundException */ 

(function VersionNotFoundException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.VersionNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ExceptionBuilder */ 

(function ExceptionBuilder$Members () {
  var $, $thisType;
































































































































































































































































































  JSIL.MakeStaticClass("System.Data.ExceptionBuilder", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "_Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Constraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ConstraintException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Data", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_DeletedRowInaccessible", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DeletedRowInaccessibleException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_DuplicateName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DuplicateNameException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IndexOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InRowChangingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.InRowChangingEventException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InvalidConstraint", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.InvalidConstraintException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InvalidEnumArgumentException", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.InvalidEnumArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InvalidEnumArgumentException", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.InvalidEnumArgumentException"), ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_MissingPrimaryKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.MissingPrimaryKeyException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_NoNullAllowed", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.NoNullAllowedException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_ReadOnly", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ReadOnlyException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_RowNotInTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RowNotInTableException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_VersionNotFound", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.VersionNotFoundException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddExternalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AddNewNotAllowNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AddPrimaryKeyConstraint", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AggregateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.AggregateType"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentContainsNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentContainsNullValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AttributeValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AutoIncrementAndDefaultValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AutoIncrementAndExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AutoIncrementCannotSetIfHasData", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AutoIncrementSeed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "BadObjectPropertyAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "BeginEditInRowChanging", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CancelEditInRowChanging", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddColumn1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddColumn2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddColumn3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddColumn4", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddDuplicate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddDuplicate2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotAddDuplicate3", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotBindTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotChangeCaseLocale", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotChangeCaseLocale", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotChangeNamespace", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotChangeSchemaSerializationMode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotClear", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotConvert", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotCreateDataReaderOnEmptyDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotDelete", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotDeserializeObjectType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotEdit", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotInstantiateAbstract", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotModifyCollection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotRemoteDataTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotRemoveChildKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotRemoveColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotRemoveConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotRemoveExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotRemovePrimaryKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotSerializeDataTableHierarchy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotSerializeDataTableWithEmptyName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotSetDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetDateTimeModeForNonDateTimeColumns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetMaxLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetMaxLength2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotSetRemotingFormat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetSimpleContent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetSimpleContentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotSetTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CannotSetToNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotUse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanNotUseDataViewManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CantAddConstraintToMultipleNestedTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CantChangeDataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CantChangeDateTimeMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataSetDateTime"), $asm11.TypeRef("System.Data.DataSetDateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CaseInsensitiveNameConflict", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CaseLocaleMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ChildTableMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CircularComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnNameRequired", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnNotInAnyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnNotInTheTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnNotInTheUnderlyingTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnsTypeMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnToSortIsOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnTypeConflict", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ColumnTypeNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintAddFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintForeignTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintNotInTheTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintParentValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintRemoveFailed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintViolation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstraintViolation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertFailed", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateChildView", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DatasetConflictingName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DataSetUnsupportedSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DataTableInferenceNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DataTableReaderArgumentIsEmpty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DataTableReaderSchemaIsInvalid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DatatypeNotDefined", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DefaultValueAndAutoIncrement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DefaultValueColumnDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DefaultValueDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeletedRowInaccessible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteInRowDeleting", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DiffgramMissingSQL", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DiffgramMissingTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateConstraintName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateConstraintRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateDeclaration", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateRelation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateTableName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DuplicateTableName2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EditInRowChanging", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementTypeNotFound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EmptyDataTableReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndEditInRowChanging", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "EnforceConstraint", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "EnumeratorModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionAndConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionAndReadOnly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionAndUnique", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionCircular", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionInConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FailedCascadeDelete", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FailedCascadeUpdate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FailedClearParentTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForeignKeyViolation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForeignRelation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "FoundEntity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetParentRowTableMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "HasToBeStringType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IComparableNotImplemented", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IndexKeyLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "InsertExternalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalRBTreeError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.RBTreeError")])
    );

    $.ExternalMethod({Static:true , Public:true }, "INullableUDTwithoutStaticNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidAttributeValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidCurrentRowInDataTableReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidDataColumnMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidDataTableReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidDateTimeMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataSetDateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDuplicateNamedSimpleTypeDelaration", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InValidNestedRelation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidOffsetLength", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidOrdinal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidParentNamespaceinNestedRelation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidPrefix", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidRemotingFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SerializationFormat")])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidRowBitPattern", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidRowState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidRowVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidSchemaSerializationMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidSelector", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidSortString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidStorageType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDataSetAttributeMissingInSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyColumnsIdentical", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyDuplicateColumns", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyLengthMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyLengthZero", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyNoColumns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeysToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyTableMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "KeyTooManyColumns", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LongerThanMaxLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:true }, "LoopInNestedRelations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MaxLengthViolationText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MergeFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MergeMissingDefinition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MismatchKeyLength", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingRefer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultipleParentRows", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultipleParents", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "MultipleTextOnlyColumns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NamespaceNameConflict", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NeededForForeignKeyConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.UniqueConstraint"), $asm11.TypeRef("System.Data.ForeignKeyConstraint")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegativeMinimumCapacity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NestedCircular", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NoConstraintName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NoCurrentData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NonUniqueValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NoOriginalData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NoProposedData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NoRelationName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NoTableName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NotAllowDBNullViolationText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotOpen", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NullDataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NullKeyValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NullRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NullValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParentOrChildColumnsDoNotHaveDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ParentRowNotInTheDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ParentTableMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "PolymorphismNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ProblematicChars", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "PropertyNotFound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RangeArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadOnlyAndExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RecordStateRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationAlreadyExists", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationAlreadyInOtherDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationAlreadyInTheDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationChildKeyMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationChildNameMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationDataSetMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationDataSetNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationDoesNotExist", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationForeignRow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationForeignTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationNestedReadOnly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationNotInTheDataSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationParentNameMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationTableKeyMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationTableNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RelationTableWasRemoved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RemoveExternalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RemoveParentRow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.ForeignKeyConstraint")])
    );

    $.ExternalMethod({Static:true , Public:true }, "RemovePrimaryKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:true }, "RowAlreadyDeleted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowAlreadyInOtherCollection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowAlreadyInTheCollection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowAlreadyRemoved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowEmpty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowInsertMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RowInsertOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "RowInsertTwice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RowNotInTheDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowNotInTheTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowOutOfRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RowOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "RowRemovedFromTheTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SelfnestedDatasetConflictingName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetAddedAndModifiedCalledOnnonUnchanged", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDataSetFailed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDataSetNameConflicting", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDataSetNameToEmpty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SetFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Object, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetIListObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SetParentRowTableMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetRowStateFilter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SetTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SimpleTypeNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "StorageSetFailed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableAlreadyInOtherDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableAlreadyInTheDataSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableCannotAddToSimpleContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableCantBeNestedInTwoTables", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TableForeignPrimaryKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableInConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.Constraint")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TableInRelation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableMissingPrimaryKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TableNotFound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TableNotInTheDataSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TableOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "TablesInDifferentSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowDataException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowMultipleTargetConverter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TooManyIsDataSetAtributeInSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionAsReturnValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionForCapture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionWithoutRethrow", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UDTImplementsIChangeTrackingButnotIRevertible", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UndefinedDatatype", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UniqueAndExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UniqueConstraintViolation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UniqueConstraintViolationText", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValueArrayLength", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.DataKey */ 

(function DataKey$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.DataKey", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsEqual", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnsReference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexDesc", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSortIndex", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Index"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSortIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Index"), [$asm11.TypeRef("System.Data.DataViewRowState")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.Constant({Static:true , Public:false}, "maxColumns", $.Int32, 32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "columns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "ColumnsReference", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "HasValue", $.Boolean);

    $.Property({Static:false, Public:false}, "Table", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataRelation */ 

(function DataRelation$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataRelation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:false}, "add_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNamespaceValidityForNestedRelations", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNestedRelations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStateForProperty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckMultipleNested", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChildColumns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildColumnsReference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChildKeyConstraint", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ForeignKeyConstraint"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChildTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Nested", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentColumns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentColumnsReference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentKeyConstraint", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UniqueConstraint"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChildRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [
          $asm11.TypeRef("System.Data.DataKey"), $asm11.TypeRef("System.Data.DataKey"), 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [
          $asm11.TypeRef("System.Data.DataKey"), $asm11.TypeRef("System.Data.DataKey"), 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [
          $asm11.TypeRef("System.Data.DataKey"), $asm11.TypeRef("System.Data.DataKey"), 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKeyNull", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnPropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RaisePropertyChanging", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckMultipleNested", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Nested", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RelationName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetChildKeyConstraint", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ForeignKeyConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParentKeyConstraint", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UniqueConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParentRowRecords", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateMultipleNestedRelations", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "extendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"));

    $.Field({Static:false, Public:false}, "relationName", $.String);

    $.Field({Static:false, Public:false}, "onPropertyChangingDelegate", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Field({Static:false, Public:false}, "childKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false}, "parentKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false}, "parentKeyConstraint", $asm11.TypeRef("System.Data.UniqueConstraint"));

    $.Field({Static:false, Public:false}, "childKeyConstraint", $asm11.TypeRef("System.Data.ForeignKeyConstraint"));

    $.Field({Static:false, Public:false}, "parentColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "childColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "parentTableName", $.String);

    $.Field({Static:false, Public:false}, "childTableName", $.String);

    $.Field({Static:false, Public:false}, "parentTableNamespace", $.String);

    $.Field({Static:false, Public:false}, "childTableNamespace", $.String);

    $.Field({Static:false, Public:false}, "nested", $.Boolean);

    $.Field({Static:false, Public:false}, "createConstraints", $.Boolean);

    $.Field({Static:false, Public:false}, "_checkMultipleNested", $.Boolean);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ChildColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataRelationChildColumnsDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ChildColumnsReference", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "ChildKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "ChildTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "DataSet", $asm11.TypeRef("System.Data.DataSet"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "ParentColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ChildColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataRelationParentColumnsDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ParentColumnsReference", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "ParentKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "RelationName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataRelationRelationNameDescr"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Nested", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataRelationNested"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ParentKeyConstraint", $asm11.TypeRef("System.Data.UniqueConstraint"));

    $.Property({Static:false, Public:true , Virtual:true }, "ChildKeyConstraint", $asm11.TypeRef("System.Data.ForeignKeyConstraint"));

    $.Property({Static:false, Public:true }, "ExtendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ExtendedPropertiesDescr"]; });

    $.Property({Static:false, Public:false}, "CheckMultipleNested", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Event({Static:false, Public:false}, "PropertyChanging", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.RelationshipConverter.__Type__]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataRelationEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["RelationName"]; });

})();

/* class System.Data.DataRelationCollection */ 

(function DataRelationCollection$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InternalDataCollectionBase"), 
      Name: "System.Data.DataRelationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "inTransition", $asm11.TypeRef("System.Data.DataRelation"));

    $.Field({Static:false, Public:false}, "defaultNameIndex", $.Int32);

    $.Field({Static:false, Public:false}, "onCollectionChangedDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onCollectionChangingDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.Event({Static:false, Public:true }, "CollectionChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["collectionChangedEventDescr"]; });

    $.Event({Static:false, Public:false}, "CollectionChanging", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["Table"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["CollectionChanged"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataRelationCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.DataRelationCollection+DataTableRelationCollection */ 

(function DataTableRelationCollection$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataRelationCollection"), 
      Name: "System.Data.DataRelationCollection+DataTableRelationCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_RelationPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCache", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDataSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRelationPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_RelationPropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCache", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "relations", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fParentCollection", $.Boolean);

    $.Field({Static:false, Public:false}, "onRelationPropertyChangedDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.Event({Static:false, Public:false}, "RelationPropertyChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataRelationCollection+DataSetRelationCollection */ 

(function DataSetRelationCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataRelationCollection"), 
      Name: "System.Data.DataRelationCollection+DataSetRelationCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishInitRelations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveCore", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "relations", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "delayLoadingRelations", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]));

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataRelation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataRelationPropertyDescriptor */ 

(function DataRelationPropertyDescriptor$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.DataRelationPropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Relation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "relation", $asm11.TypeRef("System.Data.DataRelation"));

    $.Property({Static:false, Public:false}, "Relation", $asm11.TypeRef("System.Data.DataRelation"));

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataRow */ 

(function DataRow$Members () {
  var $, $thisType;































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataRow", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AcceptChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginEdit", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "BeginEditInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "CancelEdit", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckColumn", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForLoops", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckInTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyValuesIntoStore", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EndEdit", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Element", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasPropertyChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastChangedColumn", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RBTreeNodeId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_rowID", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChildRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChildRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String, $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChildRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChildRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm11.TypeRef("System.Data.DataRelation"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnError", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnError", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnError", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnsInError", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentRecordNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultRowVersion", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowVersion"), [$asm11.TypeRef("System.Data.DataViewRowState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm11.TypeRef("System.Data.DataKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm11.TypeRef("System.Data.DataKey"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedParentCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedParentRow", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalRecordNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRow", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRow", 
      new JSIL.MethodSignature($.Type, [$.String, $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRow", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRow", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataRelation"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String, $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm11.TypeRef("System.Data.DataRelation"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProposedRecordNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecordFromVersion", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecordState", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataViewRowState"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasChanges", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasKeyChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasKeyChanged", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.DataKey"), $asm11.TypeRef("System.Data.DataRowVersion"), 
          $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HaveValuesChanged", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HaveValuesChanged", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $asm11.TypeRef("System.Data.DataRowVersion"), 
          $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RejectChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetLastChangedColumn", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RowErrorChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Element", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Xml.XmlBoundElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastChangedColumn", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RBTreeNodeId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RowError", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_rowID", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAdded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetColumnError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetColumnError", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetColumnError", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyValues", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataKey"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetModified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNestedParentRow", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNull", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParentRow", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParentRow", 
      new JSIL.MethodSignature(null, [$.Type, $asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParentRowToDBNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParentRowToDBNull", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyValueFromStorage", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_columns", $asm11.TypeRef("System.Data.DataColumnCollection"));

    $.Field({Static:false, Public:false}, "oldRecord", $.Int32);

    $.Field({Static:false, Public:false}, "newRecord", $.Int32);

    $.Field({Static:false, Public:false}, "tempRecord", $.Int32);

    $.Field({Static:false, Public:false}, "_rowID", $.Int64);

    $.Field({Static:false, Public:false}, "_action", $asm11.TypeRef("System.Data.DataRowAction"));

    $.Field({Static:false, Public:false}, "inChangingEvent", $.Boolean);

    $.Field({Static:false, Public:false}, "inDeletingEvent", $.Boolean);

    $.Field({Static:false, Public:false}, "inCascade", $.Boolean);

    $.Field({Static:false, Public:false}, "_lastChangedColumn", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "_countColumnChange", $.Int32);

    $.Field({Static:false, Public:false}, "error", $asm11.TypeRef("System.Data.DataError"));

    $.Field({Static:false, Public:false}, "_element", $.Object);

    $.Field({Static:false, Public:false}, "_rbTreeNodeId", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Element", $asm11.TypeRef("System.Xml.XmlBoundElement"));

    $.Property({Static:false, Public:false}, "LastChangedColumn", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "HasPropertyChanged", $.Boolean);

    $.Property({Static:false, Public:false}, "RBTreeNodeId", $.Int32);

    $.Property({Static:false, Public:true }, "RowError", $.String);

    $.Property({Static:false, Public:false}, "rowID", $.Int64);

    $.Property({Static:false, Public:true }, "RowState", $asm11.TypeRef("System.Data.DataRowState"));

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "ItemArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataRowBuilder */ 

(function DataRowBuilder$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataRowBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_record", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.DataRowAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DataRowAction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Nothing: 0, 
    Delete: 1, 
    Change: 2, 
    Rollback: 4, 
    Commit: 8, 
    Add: 16, 
    ChangeOriginal: 32, 
    ChangeCurrentAndOriginal: 64, 
  }
);

/* class System.Data.DataRowChangeEventArgs */ 

(function DataRowChangeEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.DataRowChangeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowAction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.Field({Static:false, Public:false}, "row", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "action", $asm11.TypeRef("System.Data.DataRowAction"));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "Action", $asm11.TypeRef("System.Data.DataRowAction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.DataRowChangeEventHandler */ 

JSIL.MakeDelegate("System.Data.DataRowChangeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataRowChangeEventArgs")]));

/* class System.Data.DataRowCollection */ 

(function DataRowCollection$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InternalDataCollectionBase"), 
      Name: "System.Data.DataRowCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(0, "values", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "AddWithColumnEvents", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(0, "values", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ArrayAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayInsert", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DiffInsertAt", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertAt", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "list", $asm11.TypeRef("System.Data.DataRowCollection+DataRowTree"));

    $.Field({Static:false, Public:false}, "nullInList", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataRow"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.RBTree`1 */ 

(function RBTree$b1$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.RBTree`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.TreeAccessMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocPage", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RBTree`1+TreePage", [$.GenericParameter("K")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "color", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RBTree`1+NodeColor", [$.GenericParameter("K")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareNode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K"), $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareSateliteTreeNode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K"), $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeIndexByNode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeIndexWithSatelliteByNode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeNodeByIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeNodeByIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("K")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecreaseSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteByIndex", 
      new JSIL.MethodSignature($.GenericParameter("K"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeNode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FreePage", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.RBTree`1+TreePage", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDuplicates", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("K"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexByKey", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndexByNode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexByNodePath", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.RBTree`1+NodePath", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexOfPageWithFreeSlot", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIntValueFromBitMap", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewNode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeByIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RBTree`1+NodePath", [$.GenericParameter("K")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeByKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RBTree`1+NodePath", [$.GenericParameter("K")]), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitTree", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertAt", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.GenericParameter("K"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Key", 
      new JSIL.MethodSignature($.GenericParameter("K"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Left", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "LeftRotate", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkPageFree", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.RBTree`1+TreePage", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkPageFull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.RBTree`1+TreePage", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Minimum", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Next", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Parent", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "RBDelete", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RBDeleteFixup", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RBDeleteX", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RBInsert", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecomputeSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Right", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RightRotate", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Search", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SearchSubTree", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.RBTree`1+NodeColor", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKey", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLeft", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNext", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRight", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSubTreeSize", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubTreeSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Successor", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Successor", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateNodeKey", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySize", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Constant({Static:true , Public:false}, "DefaultPageSize", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "NIL", $.Int32, 0);

    $.Field({Static:false, Public:false}, "_pageTable", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.RBTree`1+TreePage", [$.GenericParameter("K")])]));

    $.Field({Static:false, Public:false}, "_pageTableMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_inUsePageCount", $.Int32);

    $.Field({Static:false, Public:false}, "nextFreePageLine", $.Int32);

    $.Field({Static:false, Public:true }, "root", $.Int32);

    $.Field({Static:false, Public:false}, "_version", $.Int32);

    $.Field({Static:false, Public:false}, "_inUseNodeCount", $.Int32);

    $.Field({Static:false, Public:false}, "_inUseSatelliteTreeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_accessMethod", $asm11.TypeRef("System.Data.TreeAccessMethod"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "HasDuplicates", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("K"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.RBTree`1+NodeColor */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.RBTree`1+NodeColor", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    red: 0, 
    black: 1, 
  }
);

/* struct System.Data.RBTree`1+Node */ 

(function Node$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.RBTree`1+Node", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "selfId", $.Int32);

    $.Field({Static:false, Public:false}, "leftId", $.Int32);

    $.Field({Static:false, Public:false}, "rightId", $.Int32);

    $.Field({Static:false, Public:false}, "parentId", $.Int32);

    $.Field({Static:false, Public:false}, "nextId", $.Int32);

    $.Field({Static:false, Public:false}, "subTreeSize", $.Int32);

    $.Field({Static:false, Public:false}, "keyOfNode", $.GenericParameter("K"));

    $.Field({Static:false, Public:false}, "nodeColor", $asm11.TypeRef("System.Data.RBTree`1+NodeColor", [$.GenericParameter("K")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.RBTree`1+NodePath */ 

(function NodePath$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.RBTree`1+NodePath", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "NodeID", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "MainTreeNodeID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.RBTree`1+TreePage */ 

(function TreePage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.RBTree`1+TreePage", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocSlot", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.RBTree`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InUseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PageId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InUseCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PageId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:true }, "slotLineSize", $.Int32, 32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Slots", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.RBTree`1+Node", [$.GenericParameter("K")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SlotMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_inUseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_pageId", $.Int32);

    $.Field({Static:false, Public:false}, "_nextFreeSlotLine", $.Int32);

    $.Property({Static:false, Public:false}, "InUseCount", $.Int32);

    $.Property({Static:false, Public:false}, "PageId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.RBTree`1+RBTreeEnumerator */ 

(function RBTreeEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.RBTree`1+RBTreeEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.RBTree`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.RBTree`1", [$.GenericParameter("K")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("K"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "tree", $asm11.TypeRef("System.Data.RBTree`1", [$.GenericParameter("K")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "version", $.Int32);

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "mainTreeNodeId", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("K"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("K"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("K")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataRowCollection+DataRowTree */ 

(function DataRowTree$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.RBTree`1", [$asm11.TypeRef("System.Data.DataRow")]), 
      Name: "System.Data.DataRowCollection+DataRowTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareNode", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareSateliteTreeNode", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.DataRowCreatedEventHandler */ 

JSIL.MakeDelegate("System.Data.DataRowCreatedEventHandler", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataRow")]));

/* delegate System.Data.DataSetClearEventhandler */ 

JSIL.MakeDelegate("System.Data.DataSetClearEventhandler", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataTable")]));

/* enum System.Data.DataRowState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DataRowState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Detached: 1, 
    Unchanged: 2, 
    Added: 4, 
    Deleted: 8, 
    Modified: 16, 
  }
);

/* enum System.Data.DataRowVersion */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DataRowVersion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Original: 256, 
    Current: 512, 
    Proposed: 1024, 
    Default: 1536, 
  }
);

/* class System.Data.DataRowView */ 

(function DataRowView$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataRowView", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataView"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_PropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginEdit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CancelEdit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateChildView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$asm11.TypeRef("System.Data.DataRelation"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateChildView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateChildView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateChildView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndEdit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataView", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataView"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNew", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowVersionDefault", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasRecord", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RaisePropertyChangedEvent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_PropertyChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColumnValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetAttributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetAttributes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetClassName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetClassName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetComponentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetComponentName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetConverter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEditor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEditor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetPropertyOwner");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IDataErrorInfo.get_Error", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IDataErrorInfo"), "get_Error");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IDataErrorInfo.get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IDataErrorInfo"), "get_Item");

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataView", $asm11.TypeRef("System.Data.DataView"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_row", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "delayBeginEdit", $.Boolean);

    $.Field({Static:true , Public:false}, "zeroPropertyDescriptorCollection", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.Field({Static:false, Public:false}, "onPropertyChanged", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Property({Static:false, Public:true }, "DataView", $asm11.TypeRef("System.Data.DataView"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IDataErrorInfo.Item", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IDataErrorInfo.Error", $.String);

    $.Property({Static:false, Public:true }, "RowVersion", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Property({Static:false, Public:false}, "RowVersionDefault", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "IsNew", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEdit", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "PropertyChanged", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), 
      /* 1 */ $asm0A.TypeRef("System.ComponentModel.IEditableObject"), 
      /* 2 */ $asm0A.TypeRef("System.ComponentModel.IDataErrorInfo"), 
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.INotifyPropertyChanged")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.SerializationFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SerializationFormat", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Xml: 0, 
    Binary: 1, 
  }
);

/* class System.Data.DataSet */ 

(function DataSet$Members () {
  var $, $thisType;











































































































































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Data.DataSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AcceptChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "add_ClearFunctionCalled", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSetClearEventhandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_DataRowCreated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowCreatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_MergeFailed", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MergeFailedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDataReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTableReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTableReader"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")])])
    )
      .Parameter(0, "dataTables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "DeserializeDataSet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm11.TypeRef("System.Data.SerializationFormat"), $asm11.TypeRef("System.Data.SchemaSerializationMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeDataSetData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm11.TypeRef("System.Data.SerializationFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeDataSetProperties", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeDataSetSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm11.TypeRef("System.Data.SerializationFormat"), $asm11.TypeRef("System.Data.SchemaSerializationMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeRelations", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetermineSchemaSerializationMode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SchemaSerializationMode"), [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetermineSchemaSerializationMode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SchemaSerializationMode"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EstimatedXmlStringSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FailedEnableConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CaseSensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultViewManager", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnforceConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FBoundToDocument", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Locale", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MainTableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Relations", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemotingFormat", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SerializationFormat"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaSerializationMode", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SchemaSerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Site", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ISite"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tables", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTableCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChanges", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChanges", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDataSetSchema", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParentRelations", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRelationCollection"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemotingDiffGram", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchemaSerializable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSerializationData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXmlSchema", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlSchemaForRemoting", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasChanges", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "HasChanges", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferSchema", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.XmlReadMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferXmlSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextReader"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferXmlSchema", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDerivedDataSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBinarySerialized", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.LoadOption"), 
          $asm11.TypeRef("System.Data.FillErrorEventHandler"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")])
        ])
    )
      .Parameter(3, "tables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.LoadOption"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")])
        ])
    )
      .Parameter(2, "tables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.LoadOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "tables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "MarkModifiedRows", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataSet+TableChanges")]), $asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkRelatedRowsAsModified", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataSet+TableChanges")]), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnClearFunctionCalled", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDataRowCreated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnMergeFailed", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MergeFailedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRemovedTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveRelation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRemoveRelationHack", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PublishLegacyWSDL", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseMergeFailed", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.String, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaisePropertyChanging", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXDRSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm11.TypeRef("System.Data.XmlReadMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm11.TypeRef("System.Data.XmlReadMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Data.XmlReadMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.TextReader"), $asm11.TypeRef("System.Data.XmlReadMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$.String, $asm11.TypeRef("System.Data.XmlReadMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlDiffgram", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadXmlSerializable", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXSDSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RejectChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_ClearFunctionCalled", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSetClearEventhandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_DataRowCreated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowCreatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_MergeFailed", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MergeFailedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetRelations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetTables", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreEnforceConstraints", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDataSet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm11.TypeRef("System.Data.SerializationFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDataSetProperties", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeRelations", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CaseSensitive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataSetName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnforceConstraints", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FBoundToDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Locale", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MainTableName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemotingFormat", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SerializationFormat"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SchemaSerializationMode", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SchemaSerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Site", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ISite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLocaleValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Globalization.CultureInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeLocale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShouldSerializeRelations", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShouldSerializeTables", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.get_ContainsListCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IListSource"), "get_ContainsListCollection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.GetList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IListSource"), "GetList");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:false}, "TopLevelTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "TopLevelTables", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCaseConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateLocaleConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SchemaFormat"), 
          $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Data.SchemaFormat"), 
          $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.TextWriter"), $asm11.TypeRef("System.Data.SchemaFormat"), 
          $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm11.TypeRef("System.Data.SchemaFormat"), 
          $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])
        ])
    );

    $.Field({Static:false, Public:false}, "defaultViewManager", $asm11.TypeRef("System.Data.DataViewManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "tableCollection", $asm11.TypeRef("System.Data.DataTableCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "relationCollection", $asm11.TypeRef("System.Data.DataRelationCollection"));

    $.Field({Static:false, Public:false}, "extendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"));

    $.Field({Static:false, Public:false}, "dataSetName", $.String);

    $.Field({Static:false, Public:false}, "_datasetPrefix", $.String);

    $.Field({Static:false, Public:false}, "namespaceURI", $.String);

    $.Field({Static:false, Public:false}, "enforceConstraints", $.Boolean);

    $.Constant({Static:true , Public:false}, "KEY_XMLSCHEMA", $.String, "XmlSchema");

    $.Constant({Static:true , Public:false}, "KEY_XMLDIFFGRAM", $.String, "XmlDiffGram");

    $.Field({Static:false, Public:false}, "_caseSensitive", $.Boolean);

    $.Field({Static:false, Public:false}, "_culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "_cultureUserSet", $.Boolean);

    $.Field({Static:false, Public:false}, "fInReadXml", $.Boolean);

    $.Field({Static:false, Public:false}, "fInLoadDiffgram", $.Boolean);

    $.Field({Static:false, Public:false}, "fTopLevelTable", $.Boolean);

    $.Field({Static:false, Public:false}, "fInitInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "fEnableCascading", $.Boolean);

    $.Field({Static:false, Public:false}, "fIsSchemaLoading", $.Boolean);

    $.Field({Static:false, Public:false}, "fBoundToDocument", $.Boolean);

    $.Field({Static:false, Public:false}, "onPropertyChangingDelegate", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onMergeFailed", $asm11.TypeRef("System.Data.MergeFailedEventHandler"));

    $.Field({Static:false, Public:false}, "onDataRowCreated", $asm11.TypeRef("System.Data.DataRowCreatedEventHandler"));

    $.Field({Static:false, Public:false}, "onClearFunctionCalled", $asm11.TypeRef("System.Data.DataSetClearEventhandler"));

    $.Field({Static:false, Public:false}, "onInitialized", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroTables", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Data.DataTable, 0);
      });

    $.Field({Static:false, Public:false}, "mainTableName", $.String);

    $.Field({Static:false, Public:false}, "_remotingFormat", $asm11.TypeRef("System.Data.SerializationFormat"));

    $.Field({Static:false, Public:false}, "_defaultViewManagerLock", $.Object);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "schemaTypeForWSDL", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), null);

    $.Field({Static:false, Public:false}, "UseDataSetSchemaOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "UdtIsWrapped", $.Boolean);

    $.Property({Static:false, Public:true }, "RemotingFormat", $asm11.TypeRef("System.Data.SerializationFormat"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.SerializationFormat.Xml]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaSerializationMode", $asm11.TypeRef("System.Data.SchemaSerializationMode"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CaseSensitive", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetCaseSensitiveDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.ContainsListCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultViewManager", $asm11.TypeRef("System.Data.DataViewManager"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetDefaultViewDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "EnforceConstraints", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetEnforceConstraintsDescr"]; });

    $.Property({Static:false, Public:true }, "DataSetName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetDataSetNameDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetNamespaceDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Prefix", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetPrefixDescr"]; });

    $.Property({Static:false, Public:true }, "ExtendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ExtendedPropertiesDescr"]; });

    $.Property({Static:false, Public:true }, "HasErrors", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetHasErrorsDescr"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsInitialized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Locale", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetLocaleDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Site", $asm0A.TypeRef("System.ComponentModel.ISite"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Relations", $asm11.TypeRef("System.Data.DataRelationCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetRelationsDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Tables", $asm11.TypeRef("System.Data.DataTableCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetTablesDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.Property({Static:false, Public:false}, "FBoundToDocument", $.Boolean);

    $.Property({Static:false, Public:false}, "MainTableName", $.String);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Event({Static:false, Public:false}, "PropertyChanging", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Event({Static:false, Public:true }, "MergeFailed", $asm11.TypeRef("System.Data.MergeFailedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Action"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetMergeFailedDescr"]; });

    $.Event({Static:false, Public:false}, "DataRowCreated", $asm11.TypeRef("System.Data.DataRowCreatedEventHandler"));

    $.Event({Static:false, Public:false}, "ClearFunctionCalled", $asm11.TypeRef("System.Data.DataSetClearEventhandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "Initialized", $asm07.TypeRef("System.EventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetInitializedDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Action"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.IListSource"), 
      /* 4 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), 
      /* 5 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitializeNotification"), 
      /* 6 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitialize"), 
      /* 7 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetDescr"]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["DataSet"]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetDataSetSchema"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["DataSetName"]; });

})();

/* struct System.Data.DataSet+TableChanges */ 

(function TableChanges$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.DataSet+TableChanges", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasChanges", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasChanges", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "_rowChanges", $asm07.TypeRef("System.Collections.BitArray"));

    $.Field({Static:false, Public:false}, "_hasChanges", $.Int32);

    $.Property({Static:false, Public:false}, "HasChanges", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataSetSchemaImporterExtension */ 

(function DataSetSchemaImporterExtension$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), 
      Name: "System.Data.DataSetSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataSetElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypedDataSet", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm0A.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDataSet", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.Field({Static:false, Public:false}, "importedTypes", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.DataSetDateTime */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DataSetDateTime", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Local: 1, 
    Unspecified: 2, 
    UnspecifiedLocal: 3, 
    Utc: 4, 
  }
);

/* class System.Data.DataSysDescriptionAttribute */ 

(function DataSysDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Data.DataSysDescriptionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", false]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", false]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Data.DataTable */ 

(function DataTable$Members () {
  var $, $thisType;



























































































































































































































































































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Data.DataTable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AcceptChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ColumnChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ColumnChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "add_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowDeleted", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowDeleting", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_TableCleared", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_TableClearing", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_TableNewRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableNewRowEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependentColumn", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddForeignKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRecords", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUniqueKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUniqueKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginLoadData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheNestedParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CascadeAll", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCascadingNamespaceConflict", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForClosureOnExpressions", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForClosureOnExpressionTables", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNamespaceValidityForNestedParentRelations", 
      new JSIL.MethodSignature(null, [$.String, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNamespaceValidityForNestedRelations", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNotModifying", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPrimaryKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHierarchy", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm11.TypeRef("System.Data.DataSet"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneTo", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm11.TypeRef("System.Data.DataSet"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CommitRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $asm07.TypeRef("System.Globalization.CompareInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compute", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToRowError", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToRowState", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowState"), [$asm07.TypeRef("System.Collections.BitArray"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyRow", 
      new JSIL.MethodSignature(null, [$.Type, $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDataReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTableReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEmptyRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRelationList", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataRelation")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTableList", 
      new JSIL.MethodSignature(null, [$.Type, $asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeConstraints", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeDataTable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Boolean, $asm11.TypeRef("System.Data.SerializationFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeExpressionColumns", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeTableData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeTableSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoRaiseNamespaceChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EndLoadData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateDependentExpressions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateDependentExpressions", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")]), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowVersion"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataRow")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateExpressions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateExpressions", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataRow")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateExpressions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindByIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Data.Index"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindByPrimaryKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindByPrimaryKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMergeTarget", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataKey"), 
          $asm11.TypeRef("System.Data.Index")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNestedParentRelations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Data.DataKey"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Data.DataKey"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatSortString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeRecord", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AreIndexEventsSuspended", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CaseSensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildRelations", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Columns", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumnCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompareInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CompareInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConstraintCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultView", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataView"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DisplayExpressionInternal", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementColumnCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncodedTableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnforceConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IFormatProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTypedDataTable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LiveIndexes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Index")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Locale", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxOccurs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergingData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumCapacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinOccurs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedColumnChangeEvents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NestedParentRelations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NestedParentsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentRelations", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrimaryKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordCapacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemotingFormat", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SerializationFormat"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowDiffId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rows", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaLoading", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SelfNested", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Site", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ISite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SuspendEnforceConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UKColumnPositionForInference", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlText", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChanges", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChanges", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDataTableSchema", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetErrors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Index"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Index"), [
          $.String, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Index"), [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInheritedNamespace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetListeners", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataViewListener")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyDescriptorCollection", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowAndColumnErrors", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRowType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSpecialHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementalCloneTo", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertRecordToIndexes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertRow", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertRow", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int64, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmptyXml", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceInherited", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSuffix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.LoadOption")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.LoadOption"), 
          $asm11.TypeRef("System.Data.FillErrorEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadDataRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadDataRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm11.TypeRef("System.Data.LoadOption")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm11.TypeRef("System.Data.LoadOption"), 
          $asm11.TypeRef("System.Data.Index")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow"), 
          $.Boolean, $asm11.TypeRef("System.Data.Index")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewEmptyRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NewIndexDesc", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), [$asm11.TypeRef("System.Data.DataKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRecordFromArray", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "NewRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRowArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRowCreated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NewRowFromBuilder", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm11.TypeRef("System.Data.DataRowBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewUninitializedRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "NewUninitializedRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnColumnChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnColumnChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveColumn", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRemoveColumnInternal", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowChanged", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowChangeEventArgs"), [
          $asm11.TypeRef("System.Data.DataRowChangeEventArgs"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowChanging", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowChangeEventArgs"), [
          $asm11.TypeRef("System.Data.DataRowChangeEventArgs"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowDeleted", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowDeleting", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTableCleared", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTableClearing", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnTableNewRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableNewRowEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSortString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaisePropertyChanging", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseRowChanged", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowChangeEventArgs"), [
          $asm11.TypeRef("System.Data.DataRowChangeEventArgs"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseRowChanging", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowChangeEventArgs"), [
          $asm11.TypeRef("System.Data.DataRowChangeEventArgs"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseRowChanging", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowChangeEventArgs"), [
          $asm11.TypeRef("System.Data.DataRowChangeEventArgs"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowAction"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXDRSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlReadMode"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm11.TypeRef("System.Data.XmlReadMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlDiffgram", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXmlSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadXmlSerializable", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXSDSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordChanged", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordChanged", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordStateChanged", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordStateChanged", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.DataViewRowState"), $.Int32, 
          $asm11.TypeRef("System.Data.DataViewRowState"), $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "RejectChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ColumnChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ColumnChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_PropertyChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowChanging", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowDeleted", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowDeleting", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_TableCleared", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_TableClearing", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableClearEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_TableNewRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableNewRowEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependentColumn", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveRecordFromIndexes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveRow", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCaseSensitive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetColumns", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetIndexes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetInternalIndexes", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetPrimaryKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreConstraint", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreIndexEvents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreShadowIndexes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Select", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Select", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Select", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Select", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeConstraints", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDataTable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Boolean, $asm11.TypeRef("System.Data.SerializationFormat")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeExpressionColumns", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeTableData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeTableSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CaseSensitive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayExpression", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementColumnCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EnforceConstraints", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Locale", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MaxOccurs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MergingData", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinimumCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MinOccurs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrimaryKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemotingFormat", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SerializationFormat"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Site", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ISite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SuspendEnforceConstraints", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TableName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UKColumnPositionForInference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlText", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCaseSensitiveValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataRowWithLoadOption", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int32, 
          $asm11.TypeRef("System.Data.LoadOption"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyValues", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataKey"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLocaleValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMergeRecords", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.DataRowAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNewRecord", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int32, 
          $asm11.TypeRef("System.Data.DataRowAction"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNewRecordWorker", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $.Int32, 
          $asm11.TypeRef("System.Data.DataRowAction"), $.Boolean, 
          $.Boolean, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOldRecord", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetShadowIndexes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ShadowIndexCopy", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCaseSensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeLocale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializePrimaryKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SilentlySetValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataRowVersion"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SuspendIndexEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.get_ContainsListCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IListSource"), "get_ContainsListCollection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.GetList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IListSource"), "GetList");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePropertyDescriptorCollectionCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatingAdd", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatingCurrent", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Data.XmlWriteMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.TextWriter"), $asm11.TypeRef("System.Data.XmlWriteMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm11.TypeRef("System.Data.XmlWriteMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.XmlWriteMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.XmlWriteMode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlSchema", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "defaultView", $asm11.TypeRef("System.Data.DataView"));

    $.Field({Static:false, Public:false}, "nextRowID", $.Int64);

    $.Field({Static:false, Public:false, ReadOnly:true }, "rowCollection", $asm11.TypeRef("System.Data.DataRowCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "columnCollection", $asm11.TypeRef("System.Data.DataColumnCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "constraintCollection", $asm11.TypeRef("System.Data.ConstraintCollection"));

    $.Field({Static:false, Public:false}, "elementColumnCount", $.Int32);

    $.Field({Static:false, Public:false}, "parentRelationsCollection", $asm11.TypeRef("System.Data.DataRelationCollection"));

    $.Field({Static:false, Public:false}, "childRelationsCollection", $asm11.TypeRef("System.Data.DataRelationCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "recordManager", $asm11.TypeRef("System.Data.RecordManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "indexes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Index")]));

    $.Field({Static:false, Public:false}, "shadowIndexes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Index")]));

    $.Field({Static:false, Public:false}, "shadowCount", $.Int32);

    $.Field({Static:false, Public:false}, "extendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"));

    $.Field({Static:false, Public:false}, "tableName", $.String);

    $.Field({Static:false, Public:false}, "tableNamespace", $.String);

    $.Field({Static:false, Public:false}, "tablePrefix", $.String);

    $.Field({Static:false, Public:false}, "displayExpression", $asm11.TypeRef("System.Data.DataExpression"));

    $.Field({Static:false, Public:false}, "fNestedInDataset", $.Boolean);

    $.Field({Static:false, Public:false}, "_culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "_cultureUserSet", $.Boolean);

    $.Field({Static:false, Public:false}, "_compareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:false, Public:false}, "_compareFlags", $asm07.TypeRef("System.Globalization.CompareOptions"));

    $.Field({Static:false, Public:false}, "_formatProvider", $asm07.TypeRef("System.IFormatProvider"));

    $.Field({Static:false, Public:false}, "_hashCodeProvider", $asm07.TypeRef("System.StringComparer"));

    $.Field({Static:false, Public:false}, "_caseSensitive", $.Boolean);

    $.Field({Static:false, Public:false}, "_caseSensitiveUserSet", $.Boolean);

    $.Field({Static:false, Public:false}, "encodedTableName", $.String);

    $.Field({Static:false, Public:false}, "xmlText", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "_colUnique", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "textOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "minOccurs", $asm07.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "maxOccurs", $asm07.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "repeatableElement", $.Boolean);

    $.Field({Static:false, Public:false}, "typeName", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroIntegers", $jsilcore.TypeRef("System.Array", [$.Int32]), function ($pi) {
        return JSIL.Array.New($asm07.System.Int32, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Data.DataColumn, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroRows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Data.DataRow, 0);
      });

    $.Field({Static:false, Public:false}, "primaryKey", $asm11.TypeRef("System.Data.UniqueConstraint"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroIndexField", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Data.IndexField, 0);
      });

    $.Field({Static:false, Public:false}, "_primaryIndex", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]));

    $.Field({Static:false, Public:false}, "delayedSetPrimaryKey", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false}, "loadIndex", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "loadIndexwithOriginalAdded", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "loadIndexwithCurrentDeleted", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "_suspendIndexEvents", $.Int32);

    $.Field({Static:false, Public:false}, "savedEnforceConstraints", $.Boolean);

    $.Field({Static:false, Public:false}, "inDataLoad", $.Boolean);

    $.Field({Static:false, Public:false}, "initialLoad", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaLoading", $.Boolean);

    $.Field({Static:false, Public:false}, "enforceConstraints", $.Boolean);

    $.Field({Static:false, Public:false}, "_suspendEnforceConstraints", $.Boolean);

    $.Field({Static:false, Public:false}, "fInitInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "inLoad", $.Boolean);

    $.Field({Static:false, Public:false}, "fInLoadDiffgram", $.Boolean);

    $.Field({Static:false, Public:false}, "_isTypedDataTable", $.Byte);

    $.Field({Static:false, Public:false}, "EmptyDataRowArray", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Field({Static:false, Public:false}, "propertyDescriptorCollectionCache", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyArrayDataRelation", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Data.DataRelation, 0);
      });

    $.Field({Static:false, Public:false}, "_nestedParentRelations", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]));

    $.Field({Static:false, Public:false}, "dependentColumns", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false}, "mergingData", $.Boolean);

    $.Field({Static:false, Public:false}, "onRowChangedDelegate", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onRowChangingDelegate", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onRowDeletingDelegate", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onRowDeletedDelegate", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onColumnChangedDelegate", $asm11.TypeRef("System.Data.DataColumnChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onColumnChangingDelegate", $asm11.TypeRef("System.Data.DataColumnChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onTableClearingDelegate", $asm11.TypeRef("System.Data.DataTableClearEventHandler"));

    $.Field({Static:false, Public:false}, "onTableClearedDelegate", $asm11.TypeRef("System.Data.DataTableClearEventHandler"));

    $.Field({Static:false, Public:false}, "onTableNewRowDelegate", $asm11.TypeRef("System.Data.DataTableNewRowEventHandler"));

    $.Field({Static:false, Public:false}, "onPropertyChangingDelegate", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onInitialized", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "rowBuilder", $asm11.TypeRef("System.Data.DataRowBuilder"));

    $.Constant({Static:true , Public:false}, "KEY_XMLSCHEMA", $.String, "XmlSchema");

    $.Constant({Static:true , Public:false}, "KEY_XMLDIFFGRAM", $.String, "XmlDiffGram");

    $.Constant({Static:true , Public:false}, "KEY_NAME", $.String, "TableName");

    $.Field({Static:false, Public:false, ReadOnly:true }, "delayedViews", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataView")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataViewListeners", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataViewListener")]));

    $.Field({Static:false, Public:false}, "rowDiffId", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "indexesLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "ukColumnPositionForInference", $.Int32);

    $.Field({Static:false, Public:false}, "_remotingFormat", $asm11.TypeRef("System.Data.SerializationFormat"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "CaseSensitive", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableCaseSensitiveDescr"]; });

    $.Property({Static:false, Public:false}, "AreIndexEventsSuspended", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInitialized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "IsTypedDataTable", $.Boolean);

    $.Property({Static:false, Public:false}, "SelfNested", $.Boolean);

    $.Property({Static:false, Public:false}, "LiveIndexes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Index")]))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "RemotingFormat", $asm11.TypeRef("System.Data.SerializationFormat"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.SerializationFormat.Xml]; });

    $.Property({Static:false, Public:false}, "UKColumnPositionForInference", $.Int32);

    $.Property({Static:false, Public:true }, "ChildRelations", $asm11.TypeRef("System.Data.DataRelationCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableChildRelationsDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Columns", $asm11.TypeRef("System.Data.DataColumnCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableColumnsDescr"]; });

    $.Property({Static:false, Public:false}, "CompareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Property({Static:false, Public:true }, "Constraints", $asm11.TypeRef("System.Data.ConstraintCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableConstraintsDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "DataSet", $asm11.TypeRef("System.Data.DataSet"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableDataSetDescr"]; });

    $.Property({Static:false, Public:true }, "DefaultView", $asm11.TypeRef("System.Data.DataView"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableDefaultViewDescr"]; });

    $.Property({Static:false, Public:true }, "DisplayExpression", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableDisplayExpressionDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "DisplayExpressionInternal", $.String);

    $.Property({Static:false, Public:false}, "EnforceConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "SuspendEnforceConstraints", $.Boolean);

    $.Property({Static:false, Public:true }, "ExtendedProperties", $asm11.TypeRef("System.Data.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ExtendedPropertiesDescr"]; });

    $.Property({Static:false, Public:false}, "FormatProvider", $asm07.TypeRef("System.IFormatProvider"));

    $.Property({Static:false, Public:true }, "HasErrors", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableHasErrorsDescr"]; });

    $.Property({Static:false, Public:true }, "Locale", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableLocaleDescr"]; });

    $.Property({Static:false, Public:true }, "MinimumCapacity", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMinimumCapacityDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [50]; });

    $.Property({Static:false, Public:false}, "RecordCapacity", $.Int32);

    $.Property({Static:false, Public:false}, "ElementColumnCount", $.Int32);

    $.Property({Static:false, Public:true }, "ParentRelations", $asm11.TypeRef("System.Data.DataRelationCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableParentRelationsDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "MergingData", $.Boolean);

    $.Property({Static:false, Public:false}, "NestedParentRelations", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRelation")]));

    $.Property({Static:false, Public:false}, "SchemaLoading", $.Boolean);

    $.Property({Static:false, Public:false}, "NestedParentsCount", $.Int32);

    $.Property({Static:false, Public:true }, "PrimaryKey", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.PrimaryKeyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTablePrimaryKeyDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.PrimaryKeyTypeConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "Rows", $asm11.TypeRef("System.Data.DataRowCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowsDescr"]; });

    $.Property({Static:false, Public:true }, "TableName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableTableNameDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "EncodedTableName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableNamespaceDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Prefix", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTablePrefixDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "XmlText", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "MaxOccurs", $asm07.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:false}, "MinOccurs", $asm07.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true , Virtual:true }, "Site", $asm0A.TypeRef("System.ComponentModel.ISite"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IListSource.ContainsListCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "NeedColumnChangeEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeName", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "RowDiffId", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Event({Static:false, Public:true }, "ColumnChanging", $asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableColumnChangingDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Event({Static:false, Public:true }, "ColumnChanged", $asm11.TypeRef("System.Data.DataColumnChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableColumnChangedDescr"]; });

    $.Event({Static:false, Public:true , Virtual:true }, "Initialized", $asm07.TypeRef("System.EventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Action"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetInitializedDescr"]; });

    $.Event({Static:false, Public:false}, "PropertyChanging", $asm0A.TypeRef("System.ComponentModel.PropertyChangedEventHandler"));

    $.Event({Static:false, Public:true }, "RowChanged", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowChangedDescr"]; });

    $.Event({Static:false, Public:true }, "RowChanging", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowChangingDescr"]; });

    $.Event({Static:false, Public:true }, "RowDeleting", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowDeletingDescr"]; });

    $.Event({Static:false, Public:true }, "RowDeleted", $asm11.TypeRef("System.Data.DataRowChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowDeletedDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Event({Static:false, Public:true }, "TableClearing", $asm11.TypeRef("System.Data.DataTableClearEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowsClearingDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Event({Static:false, Public:true }, "TableCleared", $asm11.TypeRef("System.Data.DataTableClearEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowsClearedDescr"]; });

    $.Event({Static:false, Public:true }, "TableNewRow", $asm11.TypeRef("System.Data.DataTableNewRowEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableRowsNewRowDescr"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.IListSource"), 
      /* 4 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitializeNotification"), 
      /* 5 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitialize"), 
      /* 6 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 7 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetDataTableSchema"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignTimeVisibleAttribute"), function () { return [false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["TableName"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RowChanging"]; });

})();

/* struct System.Data.DataTable+RowDiffIdUsageSection */ 

(function RowDiffIdUsageSection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.DataTable+RowDiffIdUsageSection", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.Field({Static:false, Public:false}, "_targetTable", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.DataTable+DSRowDiffIdUsageSection */ 

(function DSRowDiffIdUsageSection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.DataTable+DSRowDiffIdUsageSection", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.Field({Static:false, Public:false}, "_targetDS", $asm11.TypeRef("System.Data.DataSet"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataTableClearEventArgs */ 

(function DataTableClearEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.DataTableClearEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "TableName", $.String);

    $.Property({Static:false, Public:true }, "TableNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.DataTableClearEventHandler */ 

JSIL.MakeDelegate("System.Data.DataTableClearEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataTableClearEventArgs")]));

/* class System.Data.DataTableCollection */ 

(function DataTableCollection$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InternalDataCollectionBase"), 
      Name: "System.Data.DataTableCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGroupSwitch", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRemove", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishInitCollection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_List", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableSmart", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_CollectionChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_CollectionChanging", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceFromInference", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "defaultNameIndex", $.Int32);

    $.Field({Static:false, Public:false}, "delayedAddRangeTables", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]));

    $.Field({Static:false, Public:false}, "onCollectionChangedDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:false, Public:false}, "onCollectionChangingDelegate", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "List", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataTable"));

    $.Event({Static:false, Public:true }, "CollectionChanged", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["collectionChangedEventDescr"]; });

    $.Event({Static:false, Public:true }, "CollectionChanging", $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["CollectionChanged"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.TablesCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.DataTableNewRowEventArgs */ 

(function DataTableNewRowEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.DataTableNewRowEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.DataTableNewRowEventHandler */ 

JSIL.MakeDelegate("System.Data.DataTableNewRowEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.DataTableNewRowEventArgs")]));

/* class System.Data.DataTablePropertyDescriptor */ 

(function DataTablePropertyDescriptor$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.DataTablePropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.Common");
/* class System.Data.Common.DbDataReader */ 

(function DbDataReader$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DbDataReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDbDataReader", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValue", 
      new JSIL.MethodSignature("!!0", [$.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFieldValueAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValueAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTextReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.TextReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDBNullAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNullAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "NextResultAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResultAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataRecord.GetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$.Int32])
    )
      .Overrides($asm11.TypeRef("System.Data.IDataRecord"), "GetData");

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "VisibleFieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IDataReader"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm11.TypeRef("System.Data.IDataRecord"), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataTableReader */ 

(function DataTableReader$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataReader"), 
      Name: "System.Data.DataTableReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DataChanged", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableCleared", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentDataTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSchemaChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderIsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaTableFromDataTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSchemaChanged", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReaderIsInvalid", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateOpen", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateRow", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateState", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "tables", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]));

    $.Field({Static:false, Public:false}, "isOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "tableCounter", $.Int32);

    $.Field({Static:false, Public:false}, "rowCounter", $.Int32);

    $.Field({Static:false, Public:false}, "currentDataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "currentDataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "hasRows", $.Boolean);

    $.Field({Static:false, Public:false}, "reachEORows", $.Boolean);

    $.Field({Static:false, Public:false}, "currentRowRemoved", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaIsChanged", $.Boolean);

    $.Field({Static:false, Public:false}, "started", $.Boolean);

    $.Field({Static:false, Public:false}, "readerIsInvalid", $.Boolean);

    $.Field({Static:false, Public:false}, "listener", $asm11.TypeRef("System.Data.DataTableReaderListener"));

    $.Field({Static:false, Public:false}, "tableCleared", $.Boolean);

    $.Property({Static:false, Public:false}, "ReaderIsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSchemaChanged", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentDataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.DataTableReaderListener */ 

(function DataTableReaderListener$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataTableReaderListener", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTableReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanUp", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DataChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataRowChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableCleared", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.DataTableClearEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubscribeEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UnSubscribeEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdataTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.Field({Static:false, Public:false}, "currentDataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "isSubscribed", $.Boolean);

    $.Field({Static:false, Public:false}, "readerWeak", $asm07.TypeRef("System.WeakReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataTableTypeConverter */ 

(function DataTableTypeConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ReferenceConverter"), 
      Name: "System.Data.DataTableTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataView */ 

(function DataView$Members () {
  var $, $thisType;





































































































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Data.DataView", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.String, 
          $.String, $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]), 
          $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]), $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNew", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowView"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSort", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildRelationCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ColumnCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnCollectionChangedInternal", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRowView")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSortString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $asm0A.TypeRef("System.ComponentModel.ListSortDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Delete", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindByKey", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindByKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRecords", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Range"), [$asm11.TypeRef("System.Data.Index+ComparisonBySelector`2", ["!!0", "!!1"]), "!!0"], ["TKey", "TRow"])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRowView")]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRowView")]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindRowsByKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRowView")]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishAddNew", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowDelete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowNew", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplyDefaultSort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CountFromIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataViewManager", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowView"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RowFilter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowPredicate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowStateFilter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sort", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortComparison", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataRowViewFromRange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRowView")]), [$asm11.TypeRef("System.Data.Range")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFilter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IFilter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFindIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Index"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowView"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowView"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSortDescriptions", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ListSortDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSortProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IndexListChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexListChangedInternal", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRowView")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfDataRowView", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRowView")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MaintainDataView", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.ListChangedType"), $asm11.TypeRef("System.Data.DataRow"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentRelationCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_Initialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetRowViewCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RowExist", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowDelete", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowEdit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowNew", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplyDefaultSort", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RowFilter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RowPredicate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RowStateFilter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sort", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SortComparison", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Table", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataViewManager", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetIndex", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIndex2", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AddIndex", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "AddIndex");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AddNew", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "AddNew");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.ApplySort", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $asm0A.TypeRef("System.ComponentModel.ListSortDirection")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "ApplySort");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.Find", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $.Object])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "Find");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowEdit");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowNew", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowNew");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowRemove", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowRemove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_IsSorted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_IsSorted");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SortDirection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ListSortDirection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SortDirection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SortProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SortProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsChangeNotification", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsChangeNotification");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsSearching", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsSearching");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsSorting", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsSorting");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.RemoveIndex", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "RemoveIndex");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.RemoveSort", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "RemoveSort");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.ApplySort", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListSortDescriptionCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "ApplySort");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.get_Filter", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "get_Filter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.get_SortDescriptions", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ListSortDescriptionCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "get_SortDescriptions");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "get_SupportsAdvancedSorting");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.get_SupportsFiltering", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "get_SupportsFiltering");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.RemoveFilter", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "RemoveFilter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.set_Filter", 
      JSIL.MethodSignature.Action($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingListView"), "set_Filter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypedList.GetItemProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypedList"), "GetItemProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypedList.GetListName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypedList"), "GetListName");

    $.ExternalMethod({Static:false, Public:true }, "ToTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.Boolean, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "columnNames", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "ToTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "columnNames", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "UpdateIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UpdateIndex", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateIndex", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "dataViewManager", $asm11.TypeRef("System.Data.DataViewManager"));

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "locked", $.Boolean);

    $.Field({Static:false, Public:false}, "index", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "findIndexes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.Index")]));

    $.Field({Static:false, Public:false}, "sort", $.String);

    $.Field({Static:false, Public:false}, "_comparison", $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Field({Static:false, Public:false}, "rowFilter", $asm11.TypeRef("System.Data.IFilter"));

    $.Field({Static:false, Public:false}, "recordStates", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Field({Static:false, Public:false}, "shouldOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "open", $.Boolean);

    $.Field({Static:false, Public:false}, "allowNew", $.Boolean);

    $.Field({Static:false, Public:false}, "allowEdit", $.Boolean);

    $.Field({Static:false, Public:false}, "allowDelete", $.Boolean);

    $.Field({Static:false, Public:false}, "applyDefaultSort", $.Boolean);

    $.Field({Static:false, Public:false}, "addNewRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "addNewMoved", $asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"));

    $.Field({Static:false, Public:false}, "onListChanged", $asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onInitialized", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:true , Public:false}, "ResetEventArgs", $asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"));

    $.Field({Static:false, Public:false}, "delayedTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "delayedRowFilter", $.String);

    $.Field({Static:false, Public:false}, "delayedSort", $.String);

    $.Field({Static:false, Public:false}, "delayedRecordStates", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Field({Static:false, Public:false}, "fInitInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "fEndInitInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "rowViewCache", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowView")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "rowViewBuffer", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowView")]));

    $.Field({Static:false, Public:false}, "dvListener", $asm11.TypeRef("System.Data.DataViewListener"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "AllowDelete", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewAllowDeleteDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "ApplyDefaultSort", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewApplyDefaultSortDescr"]; });

    $.Property({Static:false, Public:true }, "AllowEdit", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewAllowEditDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "AllowNew", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewAllowNewDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewCountDescr"]; });

    $.Property({Static:false, Public:false}, "CountFromIndex", $.Int32);

    $.Property({Static:false, Public:true }, "DataViewManager", $asm11.TypeRef("System.Data.DataViewManager"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewDataViewManagerDescr"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsInitialized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "IsOpen", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewIsOpenDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RowFilter", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewRowFilterDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "RowPredicate", $asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Property({Static:false, Public:true }, "RowStateFilter", $asm11.TypeRef("System.Data.DataViewRowState"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.DataViewRowState.CurrentRows]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewRowStateFilterDescr"]; });

    $.Property({Static:false, Public:true }, "Sort", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewSortDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "SortComparison", $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.DataTableTypeConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewTableDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.DataRowView"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowNew", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowEdit", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowRemove", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsChangeNotification", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsSearching", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsSorting", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.IsSorted", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SortProperty", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SortDirection", $asm0A.TypeRef("System.ComponentModel.ListSortDirection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.Filter", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.SortDescriptions", $asm0A.TypeRef("System.ComponentModel.ListSortDescriptionCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.SupportsAdvancedSorting", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingListView.SupportsFiltering", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Event({Static:false, Public:true , Virtual:true }, "ListChanged", $asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewListChangedDescr"]; });

    $.Event({Static:false, Public:true , Virtual:true }, "Initialized", $asm07.TypeRef("System.EventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Action"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataSetInitializedDescr"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.IBindingListView"), 
      /* 4 */ $asm0A.TypeRef("System.ComponentModel.IBindingList"), 
      /* 5 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 6 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 7 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 8 */ $asm0A.TypeRef("System.ComponentModel.ITypedList"), 
      /* 9 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitializeNotification"), 
      /* 10 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitialize")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["Table"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.DataViewDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataSourceEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["PositionChanged"]; });

})();

/* class System.Data.DataView+DataRowReferenceComparer */ 

(function DataRowReferenceComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataView+DataRowReferenceComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm11.TypeRef("System.Data.DataRow")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataView+RowPredicateFilter */ 

(function RowPredicateFilter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataView+RowPredicateFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IFilter.Invoke", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    )
      .Overrides($asm11.TypeRef("System.Data.IFilter"), "Invoke");

    $.Field({Static:false, Public:false, ReadOnly:true }, "PredicateFilter", $asm07.TypeRef("System.Predicate`1", [$asm11.TypeRef("System.Data.DataRow")]));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IFilter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataViewListener */ 

(function DataViewListener$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataViewListener", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataView"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildRelationCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanUp", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MaintainDataView", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.ListChangedType"), $asm11.TypeRef("System.Data.DataRow"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentRelationCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterListChangedEvent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Index"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterListener", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterMetaDataEvents", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterListChangedEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterMetaDataEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterMetaDataEvents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dvWeak", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_index", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataViewManager */ 

(function DataViewManager$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Data.DataViewManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDataView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataViewSettingCollectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataViewSettings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewSettingCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RelationCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataViewSettingCollectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AddIndex", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "AddIndex");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AddNew", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "AddNew");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.ApplySort", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $asm0A.TypeRef("System.ComponentModel.ListSortDirection")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "ApplySort");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.Find", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $.Object])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "Find");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowEdit");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowNew", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowNew");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_AllowRemove", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_AllowRemove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_IsSorted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_IsSorted");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SortDirection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ListSortDirection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SortDirection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SortProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SortProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsChangeNotification", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsChangeNotification");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsSearching", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsSearching");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.get_SupportsSorting", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "get_SupportsSorting");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.RemoveIndex", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "RemoveIndex");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.RemoveSort", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.IBindingList"), "RemoveSort");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypedList.GetItemProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypedList"), "GetItemProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypedList.GetListName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypedList"), "GetListName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TableCollectionChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CollectionChangeEventArgs")])
    );

    $.Field({Static:false, Public:false}, "dataViewSettingsCollection", $asm11.TypeRef("System.Data.DataViewSettingCollection"));

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "item", $asm11.TypeRef("System.Data.DataViewManagerListItemTypeDescriptor"));

    $.Field({Static:false, Public:false}, "locked", $.Boolean);

    $.Field({Static:false, Public:false}, "nViews", $.Int32);

    $.Field({Static:false, Public:false}, "onListChanged", $asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"));

    $.Field({Static:true , Public:false}, "NotSupported", $asm07.TypeRef("System.NotSupportedException"));

    $.Property({Static:false, Public:true }, "DataSet", $asm11.TypeRef("System.Data.DataSet"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewManagerDataSetDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true }, "DataViewSettings", $asm11.TypeRef("System.Data.DataViewSettingCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataViewManagerTableSettingsDescr"]; });

    $.Property({Static:false, Public:true }, "DataViewSettingCollectionString", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowNew", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowEdit", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.AllowRemove", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsChangeNotification", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsSearching", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SupportsSorting", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.IsSorted", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SortProperty", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.IBindingList.SortDirection", $asm0A.TypeRef("System.ComponentModel.ListSortDirection"));

    $.Event({Static:false, Public:true , Virtual:true }, "ListChanged", $asm0A.TypeRef("System.ComponentModel.ListChangedEventHandler"));

    $.ImplementInterfaces(
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.IBindingList"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 6 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 7 */ $asm0A.TypeRef("System.ComponentModel.ITypedList")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.DataViewManagerDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.DataViewManagerListItemTypeDescriptor */ 

(function DataViewManagerListItemTypeDescriptor$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataViewManagerListItemTypeDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataView", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataView"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetAttributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetAttributes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetClassName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetClassName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetComponentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetComponentName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetConverter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEditor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEditor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetPropertyOwner");

    $.Field({Static:false, Public:false}, "dataViewManager", $asm11.TypeRef("System.Data.DataViewManager"));

    $.Field({Static:false, Public:false}, "propsCollection", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.DataViewRowState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DataViewRowState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Unchanged: 2, 
    Added: 4, 
    Deleted: 8, 
    ModifiedCurrent: 16, 
    CurrentRows: 22, 
    ModifiedOriginal: 32, 
    OriginalRows: 42, 
  }
);

/* class System.Data.DataViewSetting */ 

(function DataViewSetting$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataViewSetting", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplyDefaultSort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataViewManager", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowFilter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowStateFilter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sort", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplyDefaultSort", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RowFilter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RowStateFilter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sort", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataViewManager", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.Field({Static:false, Public:false}, "dataViewManager", $asm11.TypeRef("System.Data.DataViewManager"));

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "sort", $.String);

    $.Field({Static:false, Public:false}, "rowFilter", $.String);

    $.Field({Static:false, Public:false}, "rowStateFilter", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Field({Static:false, Public:false}, "applyDefaultSort", $.Boolean);

    $.Property({Static:false, Public:true }, "ApplyDefaultSort", $.Boolean);

    $.Property({Static:false, Public:true }, "DataViewManager", $asm11.TypeRef("System.Data.DataViewManager"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "RowFilter", $.String);

    $.Property({Static:false, Public:true }, "RowStateFilter", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Property({Static:false, Public:true }, "Sort", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.ExpandableObjectConverter.__Type__]; });

})();

/* class System.Data.DataViewSettingCollection */ 

(function DataViewSettingCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataViewSettingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataViewSetting")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataViewSetting"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataViewSetting"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataViewSetting"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataViewSetting")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.DataViewSetting")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataViewManager", $asm11.TypeRef("System.Data.DataViewManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "list", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataViewSetting"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataViewSetting"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm11.TypeRef("System.Data.DataViewSetting"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataViewSettingsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.DataViewSettingCollection+DataViewSettingsEnumerator */ 

(function DataViewSettingsEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataViewSettingCollection+DataViewSettingsEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dataViewSettings", $asm11.TypeRef("System.Data.DataViewSettingCollection"));

    $.Field({Static:false, Public:false}, "tableEnumerator", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DBConcurrencyException */ 

(function DBConcurrencyException$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Data.DBConcurrencyException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToRows", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToRows", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Row", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.Field({Static:false, Public:false}, "_dataRows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "RowCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.DbType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.DbType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AnsiString: 0, 
    Binary: 1, 
    Byte: 2, 
    Boolean: 3, 
    Currency: 4, 
    Date: 5, 
    DateTime: 6, 
    Decimal: 7, 
    Double: 8, 
    Guid: 9, 
    Int16: 10, 
    Int32: 11, 
    Int64: 12, 
    Object: 13, 
    SByte: 14, 
    Single: 15, 
    String: 16, 
    Time: 17, 
    UInt16: 18, 
    UInt32: 19, 
    UInt64: 20, 
    VarNumeric: 21, 
    AnsiStringFixedLength: 22, 
    StringFixedLength: 23, 
    Xml: 25, 
    DateTime2: 26, 
    DateTimeOffset: 27, 
  }
);

/* class System.Data.DefaultValueTypeConverter */ 

(function DefaultValueTypeConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.StringConverter"), 
      Name: "System.Data.DefaultValueTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.Field({Static:true , Public:false}, "nullString", $.String, "<null>");

    $.Field({Static:true , Public:false}, "dbNullString", $.String, "<DBNull>");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.FillErrorEventArgs */ 

(function FillErrorEventArgs$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.FillErrorEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Continue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Continue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Errors", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.Field({Static:false, Public:false}, "continueFlag", $.Boolean);

    $.Field({Static:false, Public:false}, "dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "errors", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "Continue", $.Boolean);

    $.Property({Static:false, Public:true }, "DataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Errors", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Values", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.FillErrorEventHandler */ 

JSIL.MakeDelegate("System.Data.FillErrorEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.FillErrorEventArgs")]));

/* enum System.Data.Aggregate */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Aggregate", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Sum: 30, 
    Avg: 31, 
    Min: 32, 
    Max: 33, 
    Count: 34, 
    StDev: 35, 
    Var: 37, 
  }
);

/* class System.Data.ExpressionNode */ 

(function ExpressionNode$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ExpressionNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IFormatProvider"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsSqlColumn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloat", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumericSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSigned", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSignedSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsignedSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "_table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:false}, "FormatProvider", $asm07.TypeRef("System.IFormatProvider"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsSqlColumn", $.Boolean);

    $.Property({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.AggregateNode */ 

(function AggregateNode$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.AggregateNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.FunctionId"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.FunctionId"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.FunctionId"), 
          $.String, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRelation"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm11.TypeRef("System.Data.AggregateType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "aggregate", $asm11.TypeRef("System.Data.Aggregate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "local", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "relationName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "columnName", $.String);

    $.Field({Static:false, Public:false}, "childTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "relation", $asm11.TypeRef("System.Data.DataRelation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.BinaryNode */ 

(function BinaryNode$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.BinaryNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Int32, 
          $asm11.TypeRef("System.Data.ExpressionNode"), $asm11.TypeRef("System.Data.ExpressionNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BinaryCompare", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $asm11.TypeRef("System.Data.Common.StorageType"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BinaryCompare", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $asm11.TypeRef("System.Data.Common.StorageType"), $.Int32, 
          $asm07.TypeRef("System.Globalization.CompareInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Eval", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.ExpressionNode"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowVersion"), $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvalBinaryOp", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $asm11.TypeRef("System.Data.ExpressionNode"), 
          $asm11.TypeRef("System.Data.ExpressionNode"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowVersion"), $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrecedence", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.BinaryNode+DataTypePrecedence"), [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrecedenceType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.StorageType"), [$asm11.TypeRef("System.Data.BinaryNode+DataTypePrecedence")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMixed", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMixedSql", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResultSqlType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.StorageType"), [
          $asm11.TypeRef("System.Data.Common.StorageType"), $asm11.TypeRef("System.Data.Common.StorageType"), 
          $.Boolean, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResultType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.StorageType"), [
          $asm11.TypeRef("System.Data.Common.StorageType"), $asm11.TypeRef("System.Data.Common.StorageType"), 
          $.Boolean, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTypeMismatchError", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SqlResultType", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "op", $.Int32);

    $.Field({Static:false, Public:false}, "left", $asm11.TypeRef("System.Data.ExpressionNode"));

    $.Field({Static:false, Public:false}, "right", $asm11.TypeRef("System.Data.ExpressionNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.BinaryNode+DataTypePrecedence */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.BinaryNode+DataTypePrecedence", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SqlBinary: -10, 
    SqlBytes: -9, 
    Char: -8, 
    SqlChars: -7, 
    SqlXml: -6, 
    String: -5, 
    SqlString: -4, 
    SqlGuid: -3, 
    Boolean: -2, 
    SqlBoolean: -1, 
    Error: 0, 
    SByte: 1, 
    SqlByte: 2, 
    Byte: 3, 
    Int16: 4, 
    SqlInt16: 5, 
    UInt16: 6, 
    Int32: 7, 
    SqlInt32: 8, 
    UInt32: 9, 
    Int64: 10, 
    SqlInt64: 11, 
    UInt64: 12, 
    SqlMoney: 13, 
    Decimal: 14, 
    SqlDecimal: 15, 
    Single: 16, 
    SqlSingle: 17, 
    Double: 18, 
    SqlDouble: 19, 
    TimeSpan: 20, 
    DateTime: 23, 
    DateTimeOffset: 24, 
    SqlDateTime: 25, 
  }
);

/* class System.Data.LikeNode */ 

(function LikeNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.BinaryNode"), 
      Name: "System.Data.LikeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Int32, 
          $asm11.TypeRef("System.Data.ExpressionNode"), $asm11.TypeRef("System.Data.ExpressionNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzePattern", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.Constant({Static:true , Public:false}, "match_left", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "match_right", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "match_middle", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "match_exact", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "match_all", $.Int32, 5);

    $.Field({Static:false, Public:false}, "kind", $.Int32);

    $.Field({Static:false, Public:false}, "pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ConstNode */ 

(function ConstNode$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.ConstNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.ValueType"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.ValueType"), 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SmallestDecimal", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SmallestNumeric", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "val", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataExpression */ 

(function DataExpression$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.DataExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.String, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Expression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpressionNode", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependency", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTableAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnknown", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "originalExpression", $.String);

    $.Field({Static:false, Public:false}, "parsed", $.Boolean);

    $.Field({Static:false, Public:false}, "bound", $.Boolean);

    $.Field({Static:false, Public:false}, "expr", $asm11.TypeRef("System.Data.ExpressionNode"));

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_storageType", $asm11.TypeRef("System.Data.Common.StorageType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "dependency", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "Expression", $.String);

    $.Property({Static:false, Public:false}, "ExpressionNode", $asm11.TypeRef("System.Data.ExpressionNode"));

    $.Property({Static:false, Public:false}, "HasValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IFilter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.ValueType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ValueType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Null: 0, 
    Bool: 1, 
    Numeric: 2, 
    Str: 3, 
    Float: 4, 
    Decimal: 5, 
    Object: 6, 
    Date: 7, 
  }
);

/* enum System.Data.Nodes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Nodes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Noop: 0, 
    Unop: 1, 
    UnopSpec: 2, 
    Binop: 3, 
    BinopSpec: 4, 
    Zop: 5, 
    Call: 6, 
    Const: 7, 
    Name: 8, 
    Paren: 9, 
    Conv: 10, 
  }
);

/* class System.Data.ExpressionParser */ 

(function ExpressionParser$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ExpressionParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildExpression", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckToken", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Tokens"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAlpha", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAlphaNumeric", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadExpression", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "NodePeek", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NodePop", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NodePush", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAggregateArgument", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ExpressionNode"), [$asm11.TypeRef("System.Data.FunctionId")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Scan", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Tokens"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanBinaryConstant", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNumeric", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanReserved", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanString", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanToken", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Tokens"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanWhite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartScan", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Empty", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "Scalar", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Expr", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "reservedwords", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.ExpressionParser+ReservedWords")]));

    $.Field({Static:false, Public:false}, "Escape", $.Char);

    $.Field({Static:false, Public:false}, "DecimalSeparator", $.Char);

    $.Field({Static:false, Public:false}, "ListSeparator", $.Char);

    $.Field({Static:false, Public:false}, "ExponentL", $.Char);

    $.Field({Static:false, Public:false}, "ExponentU", $.Char);

    $.Field({Static:false, Public:false}, "text", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "pos", $.Int32);

    $.Field({Static:false, Public:false}, "start", $.Int32);

    $.Field({Static:false, Public:false}, "token", $asm11.TypeRef("System.Data.Tokens"));

    $.Field({Static:false, Public:false}, "op", $.Int32);

    $.Field({Static:false, Public:false}, "ops", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OperatorInfo")]));

    $.Field({Static:false, Public:false}, "topOperator", $.Int32);

    $.Field({Static:false, Public:false}, "topNode", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_table", $asm11.TypeRef("System.Data.DataTable"));

    $.Constant({Static:true , Public:false}, "MaxPredicates", $.Int32, 100);

    $.Field({Static:false, Public:false}, "NodeStack", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.ExpressionNode")]));

    $.Field({Static:false, Public:false}, "prevOperand", $.Int32);

    $.Field({Static:false, Public:false}, "expression", $asm11.TypeRef("System.Data.ExpressionNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.ExpressionParser+ReservedWords */ 

(function ReservedWords$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.ExpressionParser+ReservedWords", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Tokens"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "word", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "token", $asm11.TypeRef("System.Data.Tokens"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "op", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Tokens */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Tokens", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Name: 1, 
    Numeric: 2, 
    Decimal: 3, 
    Float: 4, 
    BinaryConst: 5, 
    StringConst: 6, 
    Date: 7, 
    ListSeparator: 8, 
    LeftParen: 9, 
    RightParen: 10, 
    ZeroOp: 11, 
    UnaryOp: 12, 
    BinaryOp: 13, 
    Child: 14, 
    Parent: 15, 
    Dot: 16, 
    Unknown: 17, 
    EOS: 18, 
  }
);

/* class System.Data.OperatorInfo */ 

(function OperatorInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OperatorInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Nodes"), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Data.Nodes"));

    $.Field({Static:false, Public:false}, "op", $.Int32);

    $.Field({Static:false, Public:false}, "priority", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.InvalidExpressionException */ 

(function InvalidExpressionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataException"), 
      Name: "System.Data.InvalidExpressionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.EvaluateException */ 

(function EvaluateException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InvalidExpressionException"), 
      Name: "System.Data.EvaluateException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SyntaxErrorException */ 

(function SyntaxErrorException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.InvalidExpressionException"), 
      Name: "System.Data.SyntaxErrorException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ExprException */ 

(function ExprException$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ExprException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "_Eval", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.EvaluateException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Eval", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.EvaluateException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Expr", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.InvalidExpressionException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Overflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.OverflowException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Syntax", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SyntaxErrorException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AggregateArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AggregateUnbound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AmbiguousBinop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArgumentTypeInteger", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindFailure", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.EvaluateException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ComputeNotAggregate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DatatypeConvertion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DatavalueConvertion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EvalNoContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionTooComplex", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExpressionUnbound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilterConvertion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FunctionArgumentCount", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FunctionArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidHoursArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidIsSyntax", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidMinutesArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidNameBracketing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidTimeZoneRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InvalidType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvokeArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InWithoutList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "InWithoutParentheses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "LookupArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "MismatchKindandTimeSpan", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingOperand", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.OperatorInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingOperandBefore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MissingRightParen", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NonConstantArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "NYI", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Overflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SyntaxError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TooManyRightParentheses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeMismatchInBinop", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnboundName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UndefinedFunction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnknownToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnknownToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.Tokens"), $asm11.TypeRef("System.Data.Tokens"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnresolvedRelation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnsupportedDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnsupportedOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.FunctionNode */ 

(function FunctionNode$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.FunctionNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArgument", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Check", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvalFunction", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.FunctionId"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Aggregate", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.FunctionId"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm11.TypeRef("System.Data.ExpressionNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "info", $.Int32);

    $.Field({Static:false, Public:false}, "argumentCount", $.Int32);

    $.Constant({Static:true , Public:false}, "initialCapacity", $.Int32, 1);

    $.Field({Static:false, Public:false}, "$arguments", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.ExpressionNode")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "funcs", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Function")]));

    $.Property({Static:false, Public:false}, "Aggregate", $asm11.TypeRef("System.Data.FunctionId"));

    $.Property({Static:false, Public:false}, "IsAggregate", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.FunctionId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.FunctionId", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    none: -1, 
    Ascii: 0, 
    Char: 1, 
    Charindex: 2, 
    Difference: 3, 
    Len: 4, 
    Lower: 5, 
    LTrim: 6, 
    Patindex: 7, 
    Replicate: 8, 
    Reverse: 9, 
    Right: 10, 
    RTrim: 11, 
    Soundex: 12, 
    Space: 13, 
    Str: 14, 
    Stuff: 15, 
    Substring: 16, 
    Upper: 17, 
    IsNull: 18, 
    Iif: 19, 
    Convert: 20, 
    cInt: 21, 
    cBool: 22, 
    cDate: 23, 
    cDbl: 24, 
    cStr: 25, 
    Abs: 26, 
    Acos: 27, 
    In: 28, 
    Trim: 29, 
    Sum: 30, 
    Avg: 31, 
    Min: 32, 
    Max: 33, 
    Count: 34, 
    StDev: 35, 
    Var: 37, 
    DateTimeOffset: 38, 
  }
);

/* class System.Data.Function */ 

(function Function$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Function", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.FunctionId"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Int32, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "id", $asm11.TypeRef("System.Data.FunctionId"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "result", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsValidateArguments", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsVariantArgumentList", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "argumentCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "FunctionName", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Data.IFilter */ 

JSIL.MakeInterface(
  "System.Data.IFilter", false, [], function ($) {
    $.Method({}, "Invoke", new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")]));
  }, []);

/* class System.Data.LookupNode */ 

(function LookupNode$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.LookupNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "relationName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "columnName", $.String);

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false}, "relation", $asm11.TypeRef("System.Data.DataRelation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.NameNode */ 

(function NameNode$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.NameNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsSqlColumn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseName", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "open", $.Char);

    $.Field({Static:false, Public:false}, "close", $.Char);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "found", $.Boolean);

    $.Field({Static:false, Public:false}, "type", $.Boolean);

    $.Field({Static:false, Public:false}, "column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsSqlColumn", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Operators */ 

(function Operators$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Operators", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetical", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLogical", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRelational", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Priority", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Constant({Static:true , Public:false}, "Noop", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "Negative", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "UnaryPlus", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "Not", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "BetweenAnd", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "In", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "Between", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "EqualTo", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "GreaterThen", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "LessThen", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "GreaterOrEqual", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "LessOrEqual", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "NotEqual", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "Is", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "Like", $.Int32, 14);

    $.Constant({Static:true , Public:false}, "Plus", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "Minus", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "Multiply", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "Divide", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "Modulo", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "BitwiseAnd", $.Int32, 22);

    $.Constant({Static:true , Public:false}, "BitwiseOr", $.Int32, 23);

    $.Constant({Static:true , Public:false}, "BitwiseXor", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "BitwiseNot", $.Int32, 25);

    $.Constant({Static:true , Public:false}, "And", $.Int32, 26);

    $.Constant({Static:true , Public:false}, "Or", $.Int32, 27);

    $.Constant({Static:true , Public:false}, "Proc", $.Int32, 28);

    $.Constant({Static:true , Public:false}, "Iff", $.Int32, 29);

    $.Constant({Static:true , Public:false}, "Qual", $.Int32, 30);

    $.Constant({Static:true , Public:false}, "Dot", $.Int32, 31);

    $.Constant({Static:true , Public:false}, "Null", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "True", $.Int32, 33);

    $.Constant({Static:true , Public:false}, "False", $.Int32, 34);

    $.Constant({Static:true , Public:false}, "Date", $.Int32, 35);

    $.Constant({Static:true , Public:false}, "GenUniqueId", $.Int32, 36);

    $.Constant({Static:true , Public:false}, "GenGUID", $.Int32, 37);

    $.Constant({Static:true , Public:false}, "GUID", $.Int32, 38);

    $.Constant({Static:true , Public:false}, "IsNot", $.Int32, 39);

    $.Constant({Static:true , Public:false}, "priStart", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "priSubstr", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "priParen", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "priLow", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "priImp", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "priEqv", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "priXor", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "priOr", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "priAnd", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "priNot", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "priIs", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "priBetweenInLike", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "priBetweenAnd", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "priRelOp", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "priConcat", $.Int32, 14);

    $.Constant({Static:true , Public:false}, "priContains", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "priPlusMinus", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "priMod", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "priIDiv", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "priMulDiv", $.Int32, 19);

    $.Constant({Static:true , Public:false}, "priNeg", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "priExp", $.Int32, 21);

    $.Constant({Static:true , Public:false}, "priProc", $.Int32, 22);

    $.Constant({Static:true , Public:false}, "priDot", $.Int32, 23);

    $.Constant({Static:true , Public:false}, "priMax", $.Int32, 24);

    $.Field({Static:true , Public:false, ReadOnly:true }, "priority", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Looks", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.UnaryNode */ 

(function UnaryNode$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.UnaryNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Int32, 
          $asm11.TypeRef("System.Data.ExpressionNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvalUnaryOp", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "op", $.Int32);

    $.Field({Static:false, Public:false}, "right", $asm11.TypeRef("System.Data.ExpressionNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ZeroOpNode */ 

(function ZeroOpNode$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ExpressionNode"), 
      Name: "System.Data.ZeroOpNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Bind", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Eval", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasLocalAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsTableConstant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Optimize", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ExpressionNode"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "op", $.Int32);

    $.Constant({Static:true , Public:false}, "zop_True", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "zop_False", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "zop_Null", $.Int32, -1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ForeignKeyConstraint */ 

(function ForeignKeyConstraint$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Constraint"), 
      Name: "System.Data.ForeignKeyConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.AcceptRejectRule"), $asm11.TypeRef("System.Data.Rule"), 
          $asm11.TypeRef("System.Data.Rule")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.AcceptRejectRule"), 
          $asm11.TypeRef("System.Data.Rule"), $asm11.TypeRef("System.Data.Rule")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanBeRemovedFromCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ConstraintCollection"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanEnableConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CascadeCommit", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CascadeDelete", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CascadeRollback", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CascadeUpdate", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckCanAddToCollection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConstraintCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCanClearParentTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCanRemoveParentRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCascade", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckConstraint", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContainsColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindParentRelation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AcceptRejectRule", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.AcceptRejectRule"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Columns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeleteRule", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Rule"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedColumns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RelatedColumnsReference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdateRule", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Rule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstraintViolated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKeyNull", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "NonVirtualCheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AcceptRejectRule", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.AcceptRejectRule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DeleteRule", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Rule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdateRule", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Rule"))
    );

    $.Constant({Static:true , Public:false}, "Rule_Default", $asm11.TypeRef("System.Data.Rule"), 1);

    $.Constant({Static:true , Public:false}, "AcceptRejectRule_Default", $asm11.TypeRef("System.Data.AcceptRejectRule"), 0);

    $.Field({Static:false, Public:false}, "deleteRule", $asm11.TypeRef("System.Data.Rule"));

    $.Field({Static:false, Public:false}, "updateRule", $asm11.TypeRef("System.Data.Rule"));

    $.Field({Static:false, Public:false}, "acceptRejectRule", $asm11.TypeRef("System.Data.AcceptRejectRule"));

    $.Field({Static:false, Public:false}, "childKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false}, "parentKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false}, "constraintName", $.String);

    $.Field({Static:false, Public:false}, "parentColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "childColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "parentTableName", $.String);

    $.Field({Static:false, Public:false}, "parentTableNamespace", $.String);

    $.Property({Static:false, Public:false}, "ChildKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "Columns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyConstraintChildColumnsDescr"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ConstraintTableDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:false}, "ParentColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ChildColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "AcceptRejectRule", $asm11.TypeRef("System.Data.AcceptRejectRule"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyConstraintAcceptRejectRuleDescr"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.AcceptRejectRule.None]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DeleteRule", $asm11.TypeRef("System.Data.Rule"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyConstraintDeleteRuleDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.Rule.Cascade]; });

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyConstraintParentColumnsDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "RelatedColumnsReference", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:false}, "ParentKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedTable", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyRelatedTableDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateRule", $asm11.TypeRef("System.Data.Rule"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.Rule.Cascade]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ForeignKeyConstraintUpdateRuleDescr"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["ConstraintName"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.ForeignKeyConstraintEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* interface System.Data.IColumnMapping */ 

JSIL.MakeInterface(
  "System.Data.IColumnMapping", true, [], function ($) {
    $.Method({}, "get_DataSetColumn", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_DataSetColumn", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_SourceColumn", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SourceColumn", JSIL.MethodSignature.Action($.String));
    $.Property({}, "DataSetColumn");
    $.Property({}, "SourceColumn");
  }, []);

/* interface System.Data.IColumnMappingCollection */ 

JSIL.MakeInterface(
  "System.Data.IColumnMappingCollection", true, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "Add", new JSIL.MethodSignature($asm11.TypeRef("System.Data.IColumnMapping"), [$.String, $.String]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "GetByDataSetColumn", new JSIL.MethodSignature($asm11.TypeRef("System.Data.IColumnMapping"), [$.String]));
    $.Method({}, "IndexOf", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "RemoveAt", JSIL.MethodSignature.Action($.String));
    $.Property({}, "Item");
  }, [$asm07.TypeRef("System.Collections.IList"), $asm07.TypeRef("System.Collections.ICollection"), $asm07.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* interface System.Data.IDataAdapter */ 

JSIL.MakeInterface(
  "System.Data.IDataAdapter", true, [], function ($) {
    $.Method({}, "get_MissingMappingAction", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingMappingAction")));
    $.Method({}, "set_MissingMappingAction", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MissingMappingAction")));
    $.Method({}, "get_MissingSchemaAction", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingSchemaAction")));
    $.Method({}, "set_MissingSchemaAction", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MissingSchemaAction")));
    $.Method({}, "get_TableMappings", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ITableMappingCollection")));
    $.Method({}, "FillSchema", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType")]));
    $.Method({}, "Fill", new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")]));
    $.Method({}, "GetFillParameters", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IDataParameter")])));
    $.Method({}, "Update", new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")]));
    $.Property({}, "MissingMappingAction");
    $.Property({}, "MissingSchemaAction");
    $.Property({}, "TableMappings");
  }, []);

/* interface System.Data.IDataParameter */ 

JSIL.MakeInterface(
  "System.Data.IDataParameter", true, [], function ($) {
    $.Method({}, "get_DbType", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType")));
    $.Method({}, "set_DbType", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType")));
    $.Method({}, "get_Direction", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection")));
    $.Method({}, "set_Direction", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection")));
    $.Method({}, "get_IsNullable", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_ParameterName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ParameterName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_SourceColumn", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SourceColumn", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_SourceVersion", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion")));
    $.Method({}, "set_SourceVersion", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion")));
    $.Method({}, "get_Value", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Value", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "DbType");
    $.Property({}, "Direction");
    $.Property({}, "IsNullable");
    $.Property({}, "ParameterName");
    $.Property({}, "SourceColumn");
    $.Property({}, "SourceVersion");
    $.Property({}, "Value");
  }, []);

/* interface System.Data.IDataParameterCollection */ 

JSIL.MakeInterface(
  "System.Data.IDataParameterCollection", true, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IndexOf", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "RemoveAt", JSIL.MethodSignature.Action($.String));
    $.Property({}, "Item");
  }, [$asm07.TypeRef("System.Collections.IList"), $asm07.TypeRef("System.Collections.ICollection"), $asm07.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* interface System.Data.IDataReader */ 

JSIL.MakeInterface(
  "System.Data.IDataReader", true, [], function ($) {
    $.Method({}, "get_Depth", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_IsClosed", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_RecordsAffected", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Close", JSIL.MethodSignature.Void);
    $.Method({}, "GetSchemaTable", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable")));
    $.Method({}, "NextResult", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Read", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "Depth");
    $.Property({}, "IsClosed");
    $.Property({}, "RecordsAffected");
  }, [$asm07.TypeRef("System.IDisposable"), $asm11.TypeRef("System.Data.IDataRecord")]);

/* interface System.Data.IDataRecord */ 

JSIL.MakeInterface(
  "System.Data.IDataRecord", true, [], function ($) {
    $.Method({}, "get_FieldCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.Int32]));
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "GetName", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetDataTypeName", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetFieldType", new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32]));
    $.Method({}, "GetValue", new JSIL.MethodSignature($.Object, [$.Int32]));
    $.Method({}, "GetValues", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])]));
    $.Method({}, "GetOrdinal", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "GetBoolean", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "GetByte", new JSIL.MethodSignature($.Byte, [$.Int32]));
    $.Method({}, "GetBytes", new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetChar", new JSIL.MethodSignature($.Char, [$.Int32]));
    $.Method({}, "GetChars", new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetGuid", new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32]));
    $.Method({}, "GetInt16", new JSIL.MethodSignature($.Int16, [$.Int32]));
    $.Method({}, "GetInt32", new JSIL.MethodSignature($.Int32, [$.Int32]));
    $.Method({}, "GetInt64", new JSIL.MethodSignature($.Int64, [$.Int32]));
    $.Method({}, "GetFloat", new JSIL.MethodSignature($.Single, [$.Int32]));
    $.Method({}, "GetDouble", new JSIL.MethodSignature($.Double, [$.Int32]));
    $.Method({}, "GetString", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetDecimal", new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32]));
    $.Method({}, "GetDateTime", new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32]));
    $.Method({}, "GetData", new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$.Int32]));
    $.Method({}, "IsDBNull", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Property({}, "FieldCount");
    $.Property({}, "Item");
    $.Property({}, "Item");
  }, [])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* interface System.Data.IDbCommand */ 

JSIL.MakeInterface(
  "System.Data.IDbCommand", true, [], function ($) {
    $.Method({}, "get_Connection", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbConnection")));
    $.Method({}, "set_Connection", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbConnection")));
    $.Method({}, "get_Transaction", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbTransaction")));
    $.Method({}, "set_Transaction", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbTransaction")));
    $.Method({}, "get_CommandText", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_CommandText", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_CommandTimeout", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_CommandTimeout", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_CommandType", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType")));
    $.Method({}, "set_CommandType", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType")));
    $.Method({}, "get_Parameters", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDataParameterCollection")));
    $.Method({}, "Prepare", JSIL.MethodSignature.Void);
    $.Method({}, "get_UpdatedRowSource", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource")));
    $.Method({}, "set_UpdatedRowSource", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource")));
    $.Method({}, "Cancel", JSIL.MethodSignature.Void);
    $.Method({}, "CreateParameter", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbDataParameter")));
    $.Method({}, "ExecuteNonQuery", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "ExecuteReader", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDataReader")));
    $.Method({}, "ExecuteReader", new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")]));
    $.Method({}, "ExecuteScalar", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "Connection");
    $.Property({}, "Transaction");
    $.Property({}, "CommandText");
    $.Property({}, "CommandTimeout");
    $.Property({}, "CommandType");
    $.Property({}, "Parameters");
    $.Property({}, "UpdatedRowSource");
  }, [$asm07.TypeRef("System.IDisposable")]);

/* interface System.Data.IDbConnection */ 

JSIL.MakeInterface(
  "System.Data.IDbConnection", true, [], function ($) {
    $.Method({}, "get_ConnectionString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ConnectionString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ConnectionTimeout", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Database", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_State", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState")));
    $.Method({}, "BeginTransaction", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbTransaction")));
    $.Method({}, "BeginTransaction", new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")]));
    $.Method({}, "Close", JSIL.MethodSignature.Void);
    $.Method({}, "ChangeDatabase", JSIL.MethodSignature.Action($.String));
    $.Method({}, "CreateCommand", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "Open", JSIL.MethodSignature.Void);
    $.Property({}, "ConnectionString");
    $.Property({}, "ConnectionTimeout");
    $.Property({}, "Database");
    $.Property({}, "State");
  }, [$asm07.TypeRef("System.IDisposable")]);

/* interface System.Data.IDbDataAdapter */ 

JSIL.MakeInterface(
  "System.Data.IDbDataAdapter", true, [], function ($) {
    $.Method({}, "get_SelectCommand", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "set_SelectCommand", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "get_InsertCommand", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "set_InsertCommand", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "get_UpdateCommand", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "set_UpdateCommand", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "get_DeleteCommand", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand")));
    $.Method({}, "set_DeleteCommand", JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand")));
    $.Property({}, "SelectCommand");
    $.Property({}, "InsertCommand");
    $.Property({}, "UpdateCommand");
    $.Property({}, "DeleteCommand");
  }, [$asm11.TypeRef("System.Data.IDataAdapter")]);

/* interface System.Data.IDbDataParameter */ 

JSIL.MakeInterface(
  "System.Data.IDbDataParameter", true, [], function ($) {
    $.Method({}, "get_Precision", JSIL.MethodSignature.Return($.Byte));
    $.Method({}, "set_Precision", JSIL.MethodSignature.Action($.Byte));
    $.Method({}, "get_Scale", JSIL.MethodSignature.Return($.Byte));
    $.Method({}, "set_Scale", JSIL.MethodSignature.Action($.Byte));
    $.Method({}, "get_Size", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_Size", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "Precision");
    $.Property({}, "Scale");
    $.Property({}, "Size");
  }, [$asm11.TypeRef("System.Data.IDataParameter")]);

/* interface System.Data.IDbTransaction */ 

JSIL.MakeInterface(
  "System.Data.IDbTransaction", true, [], function ($) {
    $.Method({}, "get_Connection", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbConnection")));
    $.Method({}, "get_IsolationLevel", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel")));
    $.Method({}, "Commit", JSIL.MethodSignature.Void);
    $.Method({}, "Rollback", JSIL.MethodSignature.Void);
    $.Property({}, "Connection");
    $.Property({}, "IsolationLevel");
  }, [$asm07.TypeRef("System.IDisposable")]);

/* enum System.Data.IsolationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.IsolationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    Chaos: 16, 
    ReadUncommitted: 256, 
    ReadCommitted: 4096, 
    RepeatableRead: 65536, 
    Serializable: 1048576, 
    Snapshot: 16777216, 
  }
);

/* interface System.Data.ITableMapping */ 

JSIL.MakeInterface(
  "System.Data.ITableMapping", true, [], function ($) {
    $.Method({}, "get_ColumnMappings", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IColumnMappingCollection")));
    $.Method({}, "get_DataSetTable", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_DataSetTable", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_SourceTable", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SourceTable", JSIL.MethodSignature.Action($.String));
    $.Property({}, "ColumnMappings");
    $.Property({}, "DataSetTable");
    $.Property({}, "SourceTable");
  }, []);

/* interface System.Data.ITableMappingCollection */ 

JSIL.MakeInterface(
  "System.Data.ITableMappingCollection", true, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "Add", new JSIL.MethodSignature($asm11.TypeRef("System.Data.ITableMapping"), [$.String, $.String]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "GetByDataSetTable", new JSIL.MethodSignature($asm11.TypeRef("System.Data.ITableMapping"), [$.String]));
    $.Method({}, "IndexOf", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "RemoveAt", JSIL.MethodSignature.Action($.String));
    $.Property({}, "Item");
  }, [$asm07.TypeRef("System.Collections.IList"), $asm07.TypeRef("System.Collections.ICollection"), $asm07.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* enum System.Data.LoadOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.LoadOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    OverwriteChanges: 1, 
    PreserveChanges: 2, 
    Upsert: 3, 
  }
);

/* enum System.Data.MappingType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.MappingType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Element: 1, 
    Attribute: 2, 
    SimpleContent: 3, 
    Hidden: 4, 
  }
);

/* class System.Data.MergeFailedEventArgs */ 

(function MergeFailedEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.MergeFailedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conflict", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.Field({Static:false, Public:false}, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "conflict", $.String);

    $.Property({Static:false, Public:true }, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:true }, "Conflict", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.MergeFailedEventHandler */ 

JSIL.MakeDelegate("System.Data.MergeFailedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.MergeFailedEventArgs")]));

/* class System.Data.Merger */ 

(function Merger$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Merger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Boolean, 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSrcKey", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataKey"), [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeConstraints", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeConstraints", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeDataSet", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeExtendedProperties", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.PropertyCollection"), $asm11.TypeRef("System.Data.PropertyCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeRelation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRelation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeRows", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeTable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeTableData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "preserveChanges", $.Boolean);

    $.Field({Static:false, Public:false}, "missingSchemaAction", $asm11.TypeRef("System.Data.MissingSchemaAction"));

    $.Field({Static:false, Public:false}, "isStandAlonetable", $.Boolean);

    $.Field({Static:false, Public:false}, "_IgnoreNSforTableLookup", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.MissingMappingAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.MissingMappingAction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Passthrough: 1, 
    Ignore: 2, 
    Error: 3, 
  }
);

/* enum System.Data.MissingSchemaAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.MissingSchemaAction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 1, 
    Ignore: 2, 
    Error: 3, 
    AddWithKey: 4, 
  }
);

/* enum System.Data.PropertyAttributes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.PropertyAttributes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    NotSupported: 0, 
    Required: 1, 
    Optional: 2, 
    Read: 512, 
    Write: 1024, 
  }
);

/* class System.Data.OperationAbortedException */ 

(function OperationAbortedException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Data.OperationAbortedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Aborted", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.ParameterDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ParameterDirection", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Input: 1, 
    Output: 2, 
    InputOutput: 3, 
    ReturnValue: 6, 
  }
);

/* class System.Data.PrimaryKeyTypeConverter */ 

(function PrimaryKeyTypeConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ReferenceConverter"), 
      Name: "System.Data.PrimaryKeyTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.PropertyCollection */ 

(function PropertyCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Hashtable"), 
      Name: "System.Data.PropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Range */ 

(function Range$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Range", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Max", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Min", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "min", $.Int32);

    $.Field({Static:false, Public:false}, "max", $.Int32);

    $.Field({Static:false, Public:false}, "isNotNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Max", $.Int32);

    $.Property({Static:false, Public:true }, "Min", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.RBTreeError */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.RBTreeError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    InvalidPageSize: 1, 
    PagePositionInSlotInUse: 3, 
    NoFreeSlots: 4, 
    InvalidStateinInsert: 5, 
    InvalidNextSizeInDelete: 7, 
    InvalidStateinDelete: 8, 
    InvalidNodeSizeinDelete: 9, 
    InvalidStateinEndDelete: 10, 
    CannotRotateInvalidsuccessorNodeinDelete: 11, 
    IndexOutOFRangeinGetNodeByIndex: 13, 
    RBDeleteFixup: 14, 
    UnsupportedAccessMethod1: 15, 
    UnsupportedAccessMethod2: 16, 
    UnsupportedAccessMethodInNonNillRootSubtree: 17, 
    AttachedNodeWithZerorbTreeNodeId: 18, 
    CompareNodeInDataRowTree: 19, 
    CompareSateliteTreeNodeInDataRowTree: 20, 
    NestedSatelliteTreeEnumerator: 21, 
  }
);

/* enum System.Data.TreeAccessMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.TreeAccessMethod", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KEY_SEARCH_AND_INDEX: 1, 
    INDEX_ONLY: 2, 
  }
);

/* class System.Data.RecordManager */ 

(function RecordManager$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.RecordManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyRecord", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataTable"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeRecord", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastFreeRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinimumCapacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordCapacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowRecordCapacity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportRecord", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewCapacity", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewRecordBase", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizedMinimumCapacity", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MinimumCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RecordCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyValues", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.DataKey"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRowCache", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyRecord", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "VerifyRecord", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.DataRow")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "lastFreeRecord", $.Int32);

    $.Field({Static:false, Public:false}, "minimumCapacity", $.Int32);

    $.Field({Static:false, Public:false}, "recordCapacity", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "freeRecordList", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "rows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Property({Static:false, Public:false}, "LastFreeRecord", $.Int32);

    $.Property({Static:false, Public:false}, "MinimumCapacity", $.Int32);

    $.Property({Static:false, Public:false}, "RecordCapacity", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.DataRow"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.StatementCompletedEventArgs */ 

(function StatementCompletedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.StatementCompletedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_recordCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecordCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.StatementCompletedEventHandler */ 

JSIL.MakeDelegate("System.Data.StatementCompletedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.StatementCompletedEventArgs")]));

/* class System.Data.RelatedView */ 

(function RelatedView$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.DataView"), 
      Name: "System.Data.RelatedView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRowView"), $asm11.TypeRef("System.Data.DataKey"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNew", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowView"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataView")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFilter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IFilter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParentValues", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetIndex", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "parentKey", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.DataKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "childKey", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "parentRowView", $asm11.TypeRef("System.Data.DataRowView"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "filterValues", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.ImplementInterfaces(
      /* 11 */ $asm11.TypeRef("System.Data.IFilter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.RelationshipConverter */ 

(function RelationshipConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.RelationshipConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Rule */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Rule", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Cascade: 1, 
    SetNull: 2, 
    SetDefault: 3, 
  }
);

/* enum System.Data.SchemaSerializationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SchemaSerializationMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    IncludeSchema: 1, 
    ExcludeSchema: 2, 
  }
);

/* enum System.Data.SchemaType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SchemaType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Source: 1, 
    Mapped: 2, 
  }
);

/* class System.Data.Select */ 

(function Select$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Select", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.String, 
          $.String, $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcceptRecord", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzeExpression", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.BinaryNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildLinearExpression", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareClosestCandidateIndexDesc", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareRecords", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSortIndexDesc", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Eval", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.BinaryNode"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindClosestCandidateIndex", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFirstMatchingRecord", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLastMatchingRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSortIndex", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBinaryFilteredRecords", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Range"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLinearFilteredRecords", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm11.TypeRef("System.Data.Range")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLinearFilteredRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$asm11.TypeRef("System.Data.Range")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRows", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitCandidateColumns", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOperatorIn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ExpressionNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSupportedOperator", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectRows", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IndexFields", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]));

    $.Field({Static:false, Public:false}, "recordStates", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Field({Static:false, Public:false}, "rowFilter", $asm11.TypeRef("System.Data.DataExpression"));

    $.Field({Static:false, Public:false}, "expression", $asm11.TypeRef("System.Data.ExpressionNode"));

    $.Field({Static:false, Public:false}, "index", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "records", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "recordCount", $.Int32);

    $.Field({Static:false, Public:false}, "linearExpression", $asm11.TypeRef("System.Data.ExpressionNode"));

    $.Field({Static:false, Public:false}, "candidatesForBinarySearch", $.Boolean);

    $.Field({Static:false, Public:false}, "candidateColumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Select+ColumnInfo")]));

    $.Field({Static:false, Public:false}, "nCandidates", $.Int32);

    $.Field({Static:false, Public:false}, "matchedCandidates", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Select+ColumnInfo */ 

(function ColumnInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Select+ColumnInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "flag", $.Boolean);

    $.Field({Static:false, Public:true }, "equalsOperator", $.Boolean);

    $.Field({Static:false, Public:true }, "expr", $asm11.TypeRef("System.Data.BinaryNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.IndexField */ 

(function IndexField$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.IndexField", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "IsDescending", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Index */ 

(function Index$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Index", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), 
          $asm11.TypeRef("System.Data.DataViewRowState"), $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]), 
          $asm11.TypeRef("System.Data.DataViewRowState"), $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), 
          $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]), $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcceptRecord", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcceptRecord", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm11.TypeRef("System.Data.IFilter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyChangeAction", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckUnique", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareDataRows", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareDuplicateRecords", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareRecords", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareRecordToKey", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsReference", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", ["!!0"]), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteRecord", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteRecord", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteRecordFromIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Equal", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.IFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeByKey", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeByKeyRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeByKeys", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRecordByKey", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRecordByKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRecords", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Range"), [$asm11.TypeRef("System.Data.Index+ComparisonBySelector`2", ["!!0", "!!1"]), "!!0"], ["TKey", "TRow"])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRecords", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Range"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindRecords", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Range"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FireResetEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DoListChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDuplicates", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRemoteAggregate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSharable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordStates", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataViewRowState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowFilter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IFilter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]), [$asm11.TypeRef("System.Data.DataColumnCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChangeAction", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataViewRowState"), $asm11.TypeRef("System.Data.DataViewRowState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.RBTree`1+RBTreeEnumerator", [$.Int32]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRangeFromNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Range"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReplaceAction", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataViewRowState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$asm11.TypeRef("System.Data.Range")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUniqueKeyValues", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUniqueKeyValues", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Object])]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.List`1", ["!!0"]), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitRecords", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IFilter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertRecordToIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKeyInIndex", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKeyInIndex", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKeyRecordInIndex", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListChangedAdd", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ListChangedRemove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataViewListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MaintainDataView", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.ListChangedType"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.ListChangedType"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.ComponentModel.ListChangedType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RecordChanged", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "RecordChanged", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "RecordStateChanged", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "RecordStateChanged", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.DataViewRowState"), 
          $asm11.TypeRef("System.Data.DataViewRowState"), $.Int32, 
          $asm11.TypeRef("System.Data.DataViewRowState"), $asm11.TypeRef("System.Data.DataViewRowState")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "DoNotReplaceCompareRecord", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ReplaceNewRecordForCompare", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ReplaceOldRecordForCompare", $.Int32, 2);

    $.Field({Static:false, Public:false, ReadOnly:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IndexFields", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IndexField")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm07.TypeRef("System.Comparison`1", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "recordStates", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Field({Static:false, Public:false}, "rowFilter", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "records", $asm11.TypeRef("System.Data.Index+IndexTree"));

    $.Field({Static:false, Public:false}, "recordCount", $.Int32);

    $.Field({Static:false, Public:false}, "refCount", $.Int32);

    $.Field({Static:false, Public:false}, "_listeners", $asm11.TypeRef("System.Data.Listeners`1", [$asm11.TypeRef("System.Data.DataViewListener")]));

    $.Field({Static:false, Public:false}, "suspendEvents", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroObjects", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "isSharable", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasRemoteAggregate", $.Boolean);

    $.Constant({Static:true , Public:false}, "MaskBits", $.Int32, 2147483647);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "HasRemoteAggregate", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "RecordStates", $asm11.TypeRef("System.Data.DataViewRowState"));

    $.Property({Static:false, Public:true }, "RowFilter", $asm11.TypeRef("System.Data.IFilter"));

    $.Property({Static:false, Public:true }, "HasDuplicates", $.Boolean);

    $.Property({Static:false, Public:true }, "RecordCount", $.Int32);

    $.Property({Static:false, Public:true }, "IsSharable", $.Boolean);

    $.Property({Static:false, Public:true }, "RefCount", $.Int32);

    $.Property({Static:false, Public:false}, "DoListChanged", $.Boolean);

    $.Property({Static:false, Public:false}, "Table", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Index+IndexTree */ 

(function IndexTree$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.RBTree`1", [$asm07.TypeRef("System.Int32")]), 
      Name: "System.Data.Index+IndexTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Index"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareNode", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareSateliteTreeNode", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $asm11.TypeRef("System.Data.Index"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.Index+ComparisonBySelector`2 */ 

JSIL.MakeDelegate("System.Data.Index+ComparisonBySelector`2", false, ["TKey", "TRow"], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [new JSIL.GenericParameter("TKey", "System.Data.Index+ComparisonBySelector`2"), new JSIL.GenericParameter("TRow", "System.Data.Index+ComparisonBySelector`2")]));

/* class System.Data.Index+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Index+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__23_0", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataViewListener")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOnListChanged$gb__88_0", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataViewListener"), $asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"), 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__23_0", $asm11.TypeRef("System.Data.Listeners`1+Func`2", [
          $asm11.TypeRef("System.Data.DataViewListener"), $asm11.TypeRef("System.Data.DataViewListener"), 
          $.Boolean
        ]));

    $.Field({Static:true , Public:true }, "$l$g9__88_0", $asm11.TypeRef("System.Data.Listeners`1+Action`4", [
          $asm11.TypeRef("System.Data.DataViewListener"), $asm11.TypeRef("System.Data.DataViewListener"), 
          $asm0A.TypeRef("System.ComponentModel.ListChangedEventArgs"), $.Boolean, 
          $.Boolean
        ]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.Index+<>c__DisplayClass89_0 */ 

(function $l$gc__DisplayClass89_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Index+<>c__DisplayClass89_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lMaintainDataView$gb__0", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataViewListener"), $asm0A.TypeRef("System.ComponentModel.ListChangedType"), 
          $asm11.TypeRef("System.Data.DataRow"), $.Boolean
        ])
    );

    $.Field({Static:false, Public:true }, "changedType", $asm0A.TypeRef("System.ComponentModel.ListChangedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.Listeners`1 */ 

(function Listeners$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Listeners`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElem"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Listeners`1+Func`2", [
            $.GenericParameter("TElem"), $.GenericParameter("TElem"), 
            $.Boolean
          ])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasListeners", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Notify", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", $asm11.TypeRef("System.Data.Listeners`1+Action`4", [
              $.GenericParameter("TElem"), $.GenericParameter("TElem"), 
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["T1", "T2", "T3"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNullListeners", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "listeners", $asm07.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TElem")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "filter", $asm11.TypeRef("System.Data.Listeners`1+Func`2", [
          $.GenericParameter("TElem"), $.GenericParameter("TElem"), 
          $.Boolean
        ]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_listenerReaderCount", $.Int32);

    $.Property({Static:false, Public:false}, "HasListeners", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.Listeners`1+Action`4 */ 

JSIL.MakeDelegate("System.Data.Listeners`1+Action`4", false, [
    "TElem", "T1", "T2", "T3", 
    "T4"
  ], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Data.Listeners`1+Action`4"), new JSIL.GenericParameter("T2", "System.Data.Listeners`1+Action`4"), 
      new JSIL.GenericParameter("T3", "System.Data.Listeners`1+Action`4"), new JSIL.GenericParameter("T4", "System.Data.Listeners`1+Action`4")
    ]));

/* delegate System.Data.Listeners`1+Func`2 */ 

JSIL.MakeDelegate("System.Data.Listeners`1+Func`2", false, ["TElem", "T1", "TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Data.Listeners`1+Func`2"), [new JSIL.GenericParameter("T1", "System.Data.Listeners`1+Func`2")]));

/* class System.Data.SimpleType */ 

(function SimpleType$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SimpleType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanHaveMaxLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToAnnonymousSimpleType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateByteArrayType", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEnumeratedType", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLimitedStringType", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSimpleType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseSimpleType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SimpleTypeQualifiedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlBaseType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasConflictingDefinition", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPlainString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTypeValues", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QualifiedName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MaxLength", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false}, "ToNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "baseType", $.String);

    $.Field({Static:false, Public:false}, "baseSimpleType", $.Type);

    $.Field({Static:false, Public:false}, "xmlBaseType", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:false, Public:false}, "minLength", $.Int32);

    $.Field({Static:false, Public:false}, "maxLength", $.Int32);

    $.Field({Static:false, Public:false}, "pattern", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "maxExclusive", $.String);

    $.Field({Static:false, Public:false}, "maxInclusive", $.String);

    $.Field({Static:false, Public:false}, "minExclusive", $.String);

    $.Field({Static:false, Public:false}, "minInclusive", $.String);

    $.Field({Static:false, Public:false}, "enumeration", $.String);

    $.Property({Static:false, Public:false}, "BaseType", $.String);

    $.Property({Static:false, Public:false}, "XmlBaseType", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "MaxLength", $.Int32);

    $.Property({Static:false, Public:false}, "BaseSimpleType", $.Type);

    $.Property({Static:false, Public:true }, "SimpleTypeQualifiedName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.LocalDBAPI */ 

(function LocalDBAPI$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.Data.LocalDBAPI", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AssertLocalDBPermissions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLocalDBException", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLocalDBInstance", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DemandLocalDBPermissions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LocalDBCreateInstance", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.LocalDBAPI+LocalDBCreateInstanceDelegate"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LocalDBFormatMessage", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.LocalDBAPI+LocalDBFormatMessageDelegate"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UserInstanceDLLHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalDbInstanceNameFromServerName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalDBMessage", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReleaseDLLHandles", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "const_localDbPrefix", $.String, "(localdb)\\");

    $.Constant({Static:true , Public:false}, "const_partialTrustFlagKey", $.String, "ALLOW_LOCALDB_IN_PARTIAL_TRUST");

    $.Field({Static:true , Public:false}, "_fullTrust", $asm07.TypeRef("System.Security.PermissionSet"), null);

    $.Field({Static:true , Public:false}, "_partialTrustFlagChecked", $.Boolean, false);

    $.Field({Static:true , Public:false}, "_partialTrustAllowed", $.Boolean, false);

    $.Field({Static:true , Public:false}, "s_userInstanceDLLHandle", $.IntPtr);

    $.Field({Static:true , Public:false}, "s_dllLock", $.Object);

    $.Field({Static:true , Public:false}, "s_localDBCreateInstance", $asm11.TypeRef("System.Data.LocalDBAPI+LocalDBCreateInstanceDelegate"), null);

    $.Field({Static:true , Public:false}, "s_localDBFormatMessage", $asm11.TypeRef("System.Data.LocalDBAPI+LocalDBFormatMessageDelegate"), null);

    $.Constant({Static:true , Public:false}, "const_LOCALDB_TRUNCATE_ERR_MESSAGE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "const_ErrorMessageBufferSize", $.Int32, 1024);

    $.Field({Static:true , Public:false}, "s_configLock", $.Object);

    $.Field({Static:true , Public:false}, "s_configurableInstances", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.LocalDBAPI+InstanceInfo")]), null);


    function LocalDBAPI__cctor () {
      $thisType.s_userInstanceDLLHandle = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LocalDBAPI__cctor
    );

    $.Property({Static:true , Public:false}, "UserInstanceDLLHandle", $.IntPtr);

    $.Property({Static:true , Public:false}, "LocalDBCreateInstance", $asm11.TypeRef("System.Data.LocalDBAPI+LocalDBCreateInstanceDelegate"));

    $.Property({Static:true , Public:false}, "LocalDBFormatMessage", $asm11.TypeRef("System.Data.LocalDBAPI+LocalDBFormatMessageDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.LocalDBAPI+LocalDBCreateInstanceDelegate */ 

JSIL.MakeDelegate("System.Data.LocalDBAPI+LocalDBCreateInstanceDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.UInt32")
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }, null

    ]
  }
);

/* delegate System.Data.LocalDBAPI+LocalDBFormatMessageDelegate */ 

JSIL.MakeDelegate("System.Data.LocalDBAPI+LocalDBFormatMessageDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.UInt32"), 
      $asm07.TypeRef("System.UInt32"), $asm07.TypeRef("System.Text.StringBuilder"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.UInt32")])
    ]));

/* class System.Data.LocalDBAPI+InstanceInfo */ 

(function InstanceInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.LocalDBAPI+InstanceInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "version", $.String);

    $.Field({Static:false, Public:false}, "created", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.LocalDBInstanceElement */ 

(function LocalDBInstanceElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Data.LocalDBInstanceElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["version"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.LocalDBInstancesCollection */ 

(function LocalDBInstancesCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Data.LocalDBInstancesCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_comparer", $asm11.TypeRef("System.Data.LocalDBInstancesCollection+TrimOrdinalIgnoreCaseStringComparer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.LocalDBInstancesCollection+TrimOrdinalIgnoreCaseStringComparer */ 

(function TrimOrdinalIgnoreCaseStringComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.LocalDBInstancesCollection+TrimOrdinalIgnoreCaseStringComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.LocalDBConfigurationSection */ 

(function LocalDBConfigurationSection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Data.LocalDBConfigurationSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalDbInstances", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.LocalDBInstancesCollection"))
    );

    $.Property({Static:false, Public:true }, "LocalDbInstances", $asm11.TypeRef("System.Data.LocalDBInstancesCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["localdbinstances"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlDbType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlDbType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BigInt: 0, 
    Binary: 1, 
    Bit: 2, 
    Char: 3, 
    DateTime: 4, 
    Decimal: 5, 
    Float: 6, 
    Image: 7, 
    Int: 8, 
    Money: 9, 
    NChar: 10, 
    NText: 11, 
    NVarChar: 12, 
    Real: 13, 
    UniqueIdentifier: 14, 
    SmallDateTime: 15, 
    SmallInt: 16, 
    SmallMoney: 17, 
    Text: 18, 
    Timestamp: 19, 
    TinyInt: 20, 
    VarBinary: 21, 
    VarChar: 22, 
    Variant: 23, 
    Xml: 25, 
    Udt: 29, 
    Structured: 30, 
    Date: 31, 
    Time: 32, 
    DateTime2: 33, 
    DateTimeOffset: 34, 
  }
);

/* class System.Data.StateChangeEventArgs */ 

(function StateChangeEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.StateChangeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.ConnectionState"), $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.Field({Static:false, Public:false}, "originalState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Field({Static:false, Public:false}, "currentState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Property({Static:false, Public:true }, "CurrentState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Property({Static:false, Public:true }, "OriginalState", $asm11.TypeRef("System.Data.ConnectionState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.StateChangeEventHandler */ 

JSIL.MakeDelegate("System.Data.StateChangeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.StateChangeEventArgs")]));

/* enum System.Data.StatementType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.StatementType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Select: 0, 
    Insert: 1, 
    Update: 2, 
    Delete: 3, 
    Batch: 4, 
  }
);

/* class System.Data.UniqueConstraint */ 

(function UniqueConstraint$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Constraint"), 
      Name: "System.Data.UniqueConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertConstraintAndKeyIndexes", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanBeRemovedFromCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ConstraintCollection"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanEnableConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckCanAddToCollection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConstraintCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckConstraint", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataRowAction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Constraint"), [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstraintIndexClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstraintIndexInitialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContainsColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Columns", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnsReference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstraintIndex", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Index"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrimaryKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConstraintViolated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NonVirtualCheckState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "key", $asm11.TypeRef("System.Data.DataKey"));

    $.Field({Static:false, Public:false}, "_constraintIndex", $asm11.TypeRef("System.Data.Index"));

    $.Field({Static:false, Public:false}, "bPrimaryKey", $.Boolean);

    $.Field({Static:false, Public:false}, "constraintName", $.String);

    $.Field({Static:false, Public:false}, "columnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ConstraintIndex", $asm11.TypeRef("System.Data.Index"));

    $.Property({Static:false, Public:true , Virtual:true }, "Columns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["KeyConstraintColumnsDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ColumnsReference", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Property({Static:false, Public:true }, "IsPrimaryKey", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["KeyConstraintIsPrimaryKeyDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "InCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "Key", $asm11.TypeRef("System.Data.DataKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "Table", $asm11.TypeRef("System.Data.DataTable"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["ConstraintTableDescr"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["ConstraintName"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.UniqueConstraintEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* enum System.Data.UpdateRowSource */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.UpdateRowSource", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    OutputParameters: 1, 
    FirstReturnedRecord: 2, 
    Both: 3, 
  }
);

/* enum System.Data.UpdateStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.UpdateStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Continue: 0, 
    ErrorsOccurred: 1, 
    SkipCurrentRow: 2, 
    SkipAllRemainingRows: 3, 
  }
);

/* class System.Data.XMLSchema */ 

(function XMLSchema$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XMLSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FEqualIdentity", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenUniqueColumnName", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConverter", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperties", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlAttributeCollection")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XDRSchema */ 

(function XDRSchema$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.XMLSchema"), 
      Name: "System.Data.XDRSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindNameType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XDRSchema+NameType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTypeNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstanceName", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMinMax", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMinMax", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleColumn", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleTypeNode", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateSimpleTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextOnlyContent", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXDRField", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_schemaUri", $.String);

    $.Field({Static:false, Public:false}, "_schemaRoot", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "_ds", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:true , Public:false}, "colonArray", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "mapNameTypeXdr", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.XDRSchema+NameType")]));

    $.Field({Static:true , Public:false}, "enumerationNameType", $asm11.TypeRef("System.Data.XDRSchema+NameType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XDRSchema+NameType */ 

(function NameType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XDRSchema+NameType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "type", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlDataLoader */ 

(function XmlDataLoader$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlDataLoader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $.Boolean, 
          $asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $.Boolean, 
          $asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachRows", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CountNonNSAttributes", 
      new JSIL.MethodSignature($.Int32, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FColumnElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FExcludedNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FIgnoreNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FIgnoreNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FromInference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInitialTextFromNodes", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$asm2F.TypeRef("System.Xml.XmlNode")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowFromElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextOnlyColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueForTextOnlyColums", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitNameTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextLikeNode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextOnly", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadColumn", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadData", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadData", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadRowData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadRows", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTopMostRow", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Boolean])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadTopMostTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessXsdSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FromInference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRowValueFromXmlText", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "nodeToSchemaMap", $asm11.TypeRef("System.Data.XmlToDatasetMap"));

    $.Field({Static:false, Public:false}, "nodeToRowMap", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "childRowsStack", $asm07.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "htableExcludedNS", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "fIsXdr", $.Boolean);

    $.Field({Static:false, Public:false}, "isDiffgram", $.Boolean);

    $.Field({Static:false, Public:false}, "topMostRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "topMostNode", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "ignoreSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "isTableLevel", $.Boolean);

    $.Field({Static:false, Public:false}, "fromInference", $.Boolean);

    $.Field({Static:false, Public:false}, "dataReader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "XSD_XMLNS_NS", $.Object);

    $.Field({Static:false, Public:false}, "XDR_SCHEMA", $.Object);

    $.Field({Static:false, Public:false}, "XDRNS", $.Object);

    $.Field({Static:false, Public:false}, "SQL_SYNC", $.Object);

    $.Field({Static:false, Public:false}, "UPDGNS", $.Object);

    $.Field({Static:false, Public:false}, "XSD_SCHEMA", $.Object);

    $.Field({Static:false, Public:false}, "XSDNS", $.Object);

    $.Field({Static:false, Public:false}, "DFFNS", $.Object);

    $.Field({Static:false, Public:false}, "MSDNS", $.Object);

    $.Field({Static:false, Public:false}, "DIFFID", $.Object);

    $.Field({Static:false, Public:false}, "HASCHANGES", $.Object);

    $.Field({Static:false, Public:false}, "ROWORDER", $.Object);

    $.Property({Static:false, Public:false}, "FromInference", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XMLDiffLoader */ 

(function XMLDiffLoader$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XMLDiffLoader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTablesHierarchy", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDiffGram", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDiffGram", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessDiffs", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessDiffs", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessErrors", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessErrors", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadOldRowData", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.DataTable")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm2F.TypeRef("System.Xml.XmlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhitespaces", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.Field({Static:false, Public:false}, "tables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "dataTable", $asm11.TypeRef("System.Data.DataTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Keywords */ 

(function Keywords$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Keywords", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "DFF", $.String, "diffgr");

    $.Constant({Static:true , Public:false}, "DFFNS", $.String, "urn:schemas-microsoft-com:xml-diffgram-v1");

    $.Constant({Static:true , Public:false}, "DIFFGRAM", $.String, "diffgram");

    $.Constant({Static:true , Public:false}, "DIFFID", $.String, "id");

    $.Constant({Static:true , Public:false}, "DIFFPID", $.String, "parentId");

    $.Constant({Static:true , Public:false}, "HASCHANGES", $.String, "hasChanges");

    $.Constant({Static:true , Public:false}, "HASERRORS", $.String, "hasErrors");

    $.Constant({Static:true , Public:false}, "ROWORDER", $.String, "rowOrder");

    $.Constant({Static:true , Public:false}, "MSD_ERRORS", $.String, "errors");

    $.Constant({Static:true , Public:false}, "CHANGES", $.String, "changes");

    $.Constant({Static:true , Public:false}, "MODIFIED", $.String, "modified");

    $.Constant({Static:true , Public:false}, "INSERTED", $.String, "inserted");

    $.Constant({Static:true , Public:false}, "MSD", $.String, "msdata");

    $.Constant({Static:true , Public:false}, "MSDNS", $.String, "urn:schemas-microsoft-com:xml-msdata");

    $.Constant({Static:true , Public:false}, "MSD_ACCEPTREJECTRULE", $.String, "AcceptRejectRule");

    $.Constant({Static:true , Public:false}, "MSD_ALLOWDBNULL", $.String, "AllowDBNull");

    $.Constant({Static:true , Public:false}, "MSD_CHILD", $.String, "child");

    $.Constant({Static:true , Public:false}, "MSD_CHILDKEY", $.String, "childkey");

    $.Constant({Static:true , Public:false}, "MSD_CHILDTABLENS", $.String, "ChildTableNamespace");

    $.Constant({Static:true , Public:false}, "MSD_COLUMNNAME", $.String, "ColumnName");

    $.Constant({Static:true , Public:false}, "MSD_CONSTRAINTNAME", $.String, "ConstraintName");

    $.Constant({Static:true , Public:false}, "MSD_CONSTRAINTONLY", $.String, "ConstraintOnly");

    $.Constant({Static:true , Public:false}, "MSD_CASESENSITIVE", $.String, "CaseSensitive");

    $.Constant({Static:true , Public:false}, "MSD_DATASETNAME", $.String, "DataSetName");

    $.Constant({Static:true , Public:false}, "MSD_DATASETNAMESPACE", $.String, "DataSetNamespace");

    $.Constant({Static:true , Public:false}, "MSD_DATATYPE", $.String, "DataType");

    $.Constant({Static:true , Public:false}, "MSD_DEFAULTVALUE", $.String, "DefaultValue");

    $.Constant({Static:true , Public:false}, "MSD_DELETERULE", $.String, "DeleteRule");

    $.Constant({Static:true , Public:false}, "MSD_ERROR", $.String, "Error");

    $.Constant({Static:true , Public:false}, "MSD_ISDATASET", $.String, "IsDataSet");

    $.Constant({Static:true , Public:false}, "MSD_ISNESTED", $.String, "IsNested");

    $.Constant({Static:true , Public:false}, "MSD_LOCALE", $.String, "Locale");

    $.Constant({Static:true , Public:false}, "MSD_USECURRENTLOCALE", $.String, "UseCurrentLocale");

    $.Constant({Static:true , Public:false}, "MSD_ORDINAL", $.String, "Ordinal");

    $.Constant({Static:true , Public:false}, "MSD_PARENT", $.String, "parent");

    $.Constant({Static:true , Public:false}, "MSD_PARENTKEY", $.String, "parentkey");

    $.Constant({Static:true , Public:false}, "MSD_PRIMARYKEY", $.String, "PrimaryKey");

    $.Constant({Static:true , Public:false}, "MSD_RELATION", $.String, "Relationship");

    $.Constant({Static:true , Public:false}, "MSD_RELATIONNAME", $.String, "RelationName");

    $.Constant({Static:true , Public:false}, "MSD_UPDATERULE", $.String, "UpdateRule");

    $.Constant({Static:true , Public:false}, "MSD_KEYFIELDSEP", $.Char, " ");

    $.Constant({Static:true , Public:false}, "MSD_KEYFIELDOLDSEP", $.Char, "+");

    $.Constant({Static:true , Public:false}, "MSD_REL_PREFIX", $.String, "rel_");

    $.Constant({Static:true , Public:false}, "MSD_FK_PREFIX", $.String, "fk_");

    $.Constant({Static:true , Public:false}, "MSD_MAINDATATABLE", $.String, "MainDataTable");

    $.Constant({Static:true , Public:false}, "MSD_TABLENS", $.String, "TableNamespace");

    $.Constant({Static:true , Public:false}, "MSD_PARENTTABLENS", $.String, "ParentTableNamespace");

    $.Constant({Static:true , Public:false}, "MSD_INSTANCETYPE", $.String, "InstanceType");

    $.Constant({Static:true , Public:false}, "MSD_EXCLUDESCHEMA", $.String, "ExcludeSchema");

    $.Constant({Static:true , Public:false}, "MSD_INCLUDESCHEMA", $.String, "IncludeSchema");

    $.Constant({Static:true , Public:false}, "MSD_FRAGMENTCOUNT", $.String, "schemafragmentcount");

    $.Constant({Static:true , Public:false}, "MSD_SCHEMASERIALIZATIONMODE", $.String, "SchemaSerializationMode");

    $.Constant({Static:true , Public:false}, "DTNS", $.String, "urn:schemas-microsoft-com:datatypes");

    $.Constant({Static:true , Public:false}, "DT_TYPE", $.String, "type");

    $.Constant({Static:true , Public:false}, "DT_VALUES", $.String, "values");

    $.Constant({Static:true , Public:false}, "XDRNS", $.String, "urn:schemas-microsoft-com:xml-data");

    $.Constant({Static:true , Public:false}, "XDR_ATTRIBUTE", $.String, "attribute");

    $.Constant({Static:true , Public:false}, "XDR_ATTRIBUTETYPE", $.String, "AttributeType");

    $.Constant({Static:true , Public:false}, "XDR_DATATYPE", $.String, "datatype");

    $.Constant({Static:true , Public:false}, "XDR_DESCRIPTION", $.String, "description");

    $.Constant({Static:true , Public:false}, "XDR_ELEMENT", $.String, "element");

    $.Constant({Static:true , Public:false}, "XDR_ELEMENTTYPE", $.String, "ElementType");

    $.Constant({Static:true , Public:false}, "XDR_GROUP", $.String, "group");

    $.Constant({Static:true , Public:false}, "XDR_SCHEMA", $.String, "Schema");

    $.Constant({Static:true , Public:false}, "XSDNS", $.String, "http://www.w3.org/2001/XMLSchema");

    $.Constant({Static:true , Public:false}, "XSD_NS_START", $.String, "http://www.w3.org/");

    $.Constant({Static:true , Public:false}, "XSD_XMLNS_NS", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:false}, "XSD_PREFIX", $.String, "xs");

    $.Constant({Static:true , Public:false}, "XSD_PREFIXCOLON", $.String, "xs:");

    $.Constant({Static:true , Public:false}, "XSD_ANNOTATION", $.String, "annotation");

    $.Constant({Static:true , Public:false}, "XSD_APPINFO", $.String, "appinfo");

    $.Constant({Static:true , Public:false}, "XSD_ATTRIBUTE", $.String, "attribute");

    $.Constant({Static:true , Public:false}, "XSD_SIMPLETYPE", $.String, "simpleType");

    $.Constant({Static:true , Public:false}, "XSD_ELEMENT", $.String, "element");

    $.Constant({Static:true , Public:false}, "XSD_COMPLEXTYPE", $.String, "complexType");

    $.Constant({Static:true , Public:false}, "XSD_SCHEMA", $.String, "schema");

    $.Constant({Static:true , Public:false}, "XSD_PATTERN", $.String, "pattern");

    $.Constant({Static:true , Public:false}, "XSD_LENGTH", $.String, "length");

    $.Constant({Static:true , Public:false}, "XSD_MAXLENGTH", $.String, "maxLength");

    $.Constant({Static:true , Public:false}, "XSD_MINLENGTH", $.String, "minLength");

    $.Constant({Static:true , Public:false}, "XSD_ENUMERATION", $.String, "enumeration");

    $.Constant({Static:true , Public:false}, "XSD_MININCLUSIVE", $.String, "minInclusive");

    $.Constant({Static:true , Public:false}, "XSD_MINEXCLUSIVE", $.String, "minExclusive");

    $.Constant({Static:true , Public:false}, "XSD_MAXINCLUSIVE", $.String, "maxInclusive");

    $.Constant({Static:true , Public:false}, "XSD_MAXEXCLUSIVE", $.String, "maxExclusive");

    $.Constant({Static:true , Public:false}, "XSD_NAMESPACE", $.String, "namespace");

    $.Constant({Static:true , Public:false}, "XSD_NILLABLE", $.String, "nillable");

    $.Constant({Static:true , Public:false}, "XSD_IMPORT", $.String, "import");

    $.Constant({Static:true , Public:false}, "XSD_SELECTOR", $.String, "selector");

    $.Constant({Static:true , Public:false}, "XSD_FIELD", $.String, "field");

    $.Constant({Static:true , Public:false}, "XSD_UNIQUE", $.String, "unique");

    $.Constant({Static:true , Public:false}, "XSD_KEY", $.String, "key");

    $.Constant({Static:true , Public:false}, "XSD_KEYREF", $.String, "keyref");

    $.Constant({Static:true , Public:false}, "XSD_DATATYPE", $.String, "datatype");

    $.Constant({Static:true , Public:false}, "XSD_ALL", $.String, "all");

    $.Constant({Static:true , Public:false}, "XSD_SEQUENCE", $.String, "sequence");

    $.Constant({Static:true , Public:false}, "XSD_ENCODING", $.String, "encoding");

    $.Constant({Static:true , Public:false}, "XSD_EXTENSION", $.String, "extension");

    $.Constant({Static:true , Public:false}, "XSD_SIMPLECONTENT", $.String, "simpleContent");

    $.Constant({Static:true , Public:false}, "XSD_XPATH", $.String, "xpath");

    $.Constant({Static:true , Public:false}, "XSD_ATTRIBUTEFORMDEFAULT", $.String, "attributeFormDefault");

    $.Constant({Static:true , Public:false}, "XSD_ELEMENTFORMDEFAULT", $.String, "elementFormDefault");

    $.Constant({Static:true , Public:false}, "XSD_SCHEMALOCATION", $.String, "schemaLocation");

    $.Constant({Static:true , Public:false}, "XSD_CHOICE", $.String, "choice");

    $.Constant({Static:true , Public:false}, "XSD_RESTRICTION", $.String, "restriction");

    $.Constant({Static:true , Public:false}, "XSD_ANYTYPE", $.String, "anyType");

    $.Constant({Static:true , Public:false}, "XSINS", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Constant({Static:true , Public:false}, "XSI_NIL", $.String, "nil");

    $.Constant({Static:true , Public:false}, "XSI", $.String, "xsi");

    $.Constant({Static:true , Public:false}, "XML_XMLNS", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "UPDGNS", $.String, "urn:schemas-microsoft-com:xml-updategram");

    $.Constant({Static:true , Public:false}, "UPDG", $.String, "updg");

    $.Constant({Static:true , Public:false}, "SQL_SYNC", $.String, "sync");

    $.Constant({Static:true , Public:false}, "SQL_BEFORE", $.String, "before");

    $.Constant({Static:true , Public:false}, "SQL_AFTER", $.String, "after");

    $.Constant({Static:true , Public:false}, "SQL_ID", $.String, "id");

    $.Constant({Static:true , Public:false}, "SQL_UNCHANGED", $.String, "unchanged");

    $.Constant({Static:true , Public:false}, "ATTRIBUTE", $.String, "attribute");

    $.Constant({Static:true , Public:false}, "CONTENT", $.String, "content");

    $.Constant({Static:true , Public:false}, "DEFAULT", $.String, "default");

    $.Constant({Static:true , Public:false}, "XSDID", $.String, "id");

    $.Constant({Static:true , Public:false}, "MINOCCURS", $.String, "minOccurs");

    $.Constant({Static:true , Public:false}, "MAXOCCURS", $.String, "maxOccurs");

    $.Constant({Static:true , Public:false}, "MODEL", $.String, "model");

    $.Constant({Static:true , Public:false}, "NAME", $.String, "name");

    $.Constant({Static:true , Public:false}, "NULLABLE", $.String, "nullable");

    $.Constant({Static:true , Public:false}, "ORDER", $.String, "order");

    $.Constant({Static:true , Public:false}, "REQUIRED", $.String, "required");

    $.Constant({Static:true , Public:false}, "REF", $.String, "ref");

    $.Constant({Static:true , Public:false}, "BASE", $.String, "base");

    $.Constant({Static:true , Public:false}, "TARGETNAMESPACE", $.String, "targetNamespace");

    $.Constant({Static:true , Public:false}, "TYPE", $.String, "type");

    $.Constant({Static:true , Public:false}, "XMLNS", $.String, "xmlns");

    $.Constant({Static:true , Public:false}, "XMLNS_XSD", $.String, "xmlns:xs");

    $.Constant({Static:true , Public:false}, "XMLNS_XSI", $.String, "xmlns:xsi");

    $.Constant({Static:true , Public:false}, "XMLNS_MSDATA", $.String, "xmlns:msdata");

    $.Constant({Static:true , Public:false}, "XMLNS_MSPROP", $.String, "xmlns:msprop");

    $.Constant({Static:true , Public:false}, "XMLNS_MSTNS", $.String, "xmlns:mstns");

    $.Constant({Static:true , Public:false}, "MSTNS_PREFIX", $.String, "mstns:");

    $.Constant({Static:true , Public:false}, "SPACE", $.String, "space");

    $.Constant({Static:true , Public:false}, "PRESERVE", $.String, "preserve");

    $.Constant({Static:true , Public:false}, "VALUE", $.String, "value");

    $.Constant({Static:true , Public:false}, "REFER", $.String, "refer");

    $.Constant({Static:true , Public:false}, "USE", $.String, "use");

    $.Constant({Static:true , Public:false}, "PROHIBITED", $.String, "prohibited");

    $.Constant({Static:true , Public:false}, "POSITIVEINFINITY", $.String, "INF");

    $.Constant({Static:true , Public:false}, "NEGATIVEINFINITY", $.String, "-INF");

    $.Constant({Static:true , Public:false}, "QUALIFIED", $.String, "qualified");

    $.Constant({Static:true , Public:false}, "UNQUALIFIED", $.String, "unqualified");

    $.Constant({Static:true , Public:false}, "APP", $.String, "app");

    $.Constant({Static:true , Public:false}, "CLOSED", $.String, "closed");

    $.Constant({Static:true , Public:false}, "CURRENT", $.String, "Current");

    $.Constant({Static:true , Public:false}, "DOCUMENTELEMENT", $.String, "DocumentElement");

    $.Constant({Static:true , Public:false}, "FALSE", $.String, "false");

    $.Constant({Static:true , Public:false}, "FIXED", $.String, "fixed");

    $.Constant({Static:true , Public:false}, "FORM", $.String, "form");

    $.Constant({Static:true , Public:false}, "ENCODING", $.String, "encoding");

    $.Constant({Static:true , Public:false}, "ELEMENTONLY", $.String, "elementOnly");

    $.Constant({Static:true , Public:false}, "ELTONLY", $.String, "eltOnly");

    $.Constant({Static:true , Public:false}, "EMPTY", $.String, "empty");

    $.Constant({Static:true , Public:false}, "MANY", $.String, "many");

    $.Constant({Static:true , Public:false}, "MIXED", $.String, "mixed");

    $.Constant({Static:true , Public:false}, "NO", $.String, "no");

    $.Constant({Static:true , Public:false}, "NOTATION", $.String, "notation");

    $.Constant({Static:true , Public:false}, "OCCURS", $.String, "occurs");

    $.Constant({Static:true , Public:false}, "ONE_OR_MORE", $.String, "oneormore");

    $.Constant({Static:true , Public:false}, "ONE", $.String, "one");

    $.Constant({Static:true , Public:false}, "ONE_DIGIT", $.String, "1");

    $.Constant({Static:true , Public:false}, "ONCE", $.String, "once");

    $.Constant({Static:true , Public:false}, "OPTIONAL", $.String, "optional");

    $.Constant({Static:true , Public:false}, "OPEN", $.String, "open");

    $.Constant({Static:true , Public:false}, "ORIGINAL", $.String, "Original");

    $.Constant({Static:true , Public:false}, "RANGE", $.String, "range");

    $.Constant({Static:true , Public:false}, "SEQ", $.String, "seq");

    $.Constant({Static:true , Public:false}, "STAR", $.String, "*");

    $.Constant({Static:true , Public:false}, "TRUE", $.String, "true");

    $.Constant({Static:true , Public:false}, "TEXTONLY", $.String, "textOnly");

    $.Constant({Static:true , Public:false}, "VERSION", $.String, "version");

    $.Constant({Static:true , Public:false}, "XML", $.String, "xml");

    $.Constant({Static:true , Public:false}, "X_SCHEMA", $.String, "x-schema");

    $.Constant({Static:true , Public:false}, "YES", $.String, "yes");

    $.Constant({Static:true , Public:false}, "ZERO_DIGIT", $.String, "0");

    $.Constant({Static:true , Public:false}, "ZERO_OR_MORE", $.String, "unbounded");

    $.Constant({Static:true , Public:false}, "USEDATASETSCHEMAONLY", $.String, "UseDataSetSchemaOnly");

    $.Constant({Static:true , Public:false}, "UDTCOLUMNVALUEWRAPPED", $.String, "UDTColumnValueWrapped");

    $.Constant({Static:true , Public:false}, "TYPEINSTANCE", $.String, "Type");

    $.Constant({Static:true , Public:false}, "MSPROPNS", $.String, "urn:schemas-microsoft-com:xml-msprop");

    $.Constant({Static:true , Public:false}, "WS_DATASETFULLQNAME", $.String, "system.data.dataset");

    $.Constant({Static:true , Public:false}, "WS_VERSION", $.String, "WSDL_VERSION");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.XmlReadMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.XmlReadMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    ReadSchema: 1, 
    IgnoreSchema: 2, 
    InferSchema: 3, 
    DiffGram: 4, 
    Fragment: 5, 
    InferTypedSchema: 6, 
  }
);

/* enum System.Data.SchemaFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SchemaFormat", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Public: 1, 
    Remoting: 2, 
    WebService: 3, 
    RemotingSkipSchema: 4, 
    WebServiceSkipSchema: 5, 
  }
);

/* class System.Data.XmlTreeGen */ 

(function XmlTreeGen$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlTreeGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SchemaFormat"))
    );

    $.ExternalMethod({Static:true , Public:false}, "_PropsNotEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.PropertyCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumnProperties", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddExtendedProperties", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.PropertyCollection"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddExtendedProperties", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.PropertyCollection"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXdoProperties", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm2F.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXdoProperty", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $.Object, 
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendChildWithoutRef", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRelation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.UniqueConstraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ForeignKeyConstraint")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ForeignKeyConstraint"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRelations", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTablesHierarchy", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateToplevelTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FillDataSetElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm11.TypeRef("System.Data.DataSet"), 
          $asm11.TypeRef("System.Data.DataTable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSimpleType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTargetNamespace", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTypeNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstraintNames", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstraintNames", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstraintNames", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleColumn", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm11.TypeRef("System.Data.DataColumn"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleColumnType", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleRelation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm11.TypeRef("System.Data.DataRelation"), $asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleTable", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleTable", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasMixedColumns", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HaveExtendedProperties", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAutoGenerated", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm2F.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.Boolean, 
          $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaTree", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaTree", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMSDataAttribute", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPath", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupAutoGenerated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupAutoGenerated", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupAutoGenerated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateAcceptRejectRule", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.AcceptRejectRule")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateRule", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.Rule")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateColumnMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSchemaRoot", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlDataTypeName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "ConstraintNames", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namespaces", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "autogenerated", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "prefixes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_ds", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_tables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_relations", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_dc", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "_sRoot", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "prefixCount", $.Int32);

    $.Field({Static:false, Public:false}, "schFormat", $asm11.TypeRef("System.Data.SchemaFormat"));

    $.Field({Static:false, Public:false}, "filePath", $.String);

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.Field({Static:false, Public:false}, "fileExt", $.String);

    $.Field({Static:false, Public:false}, "dsElement", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "constraintSeparator", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "targetConverter", $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Type"), $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.NewDiffgramGen */ 

(function NewDiffgramGen$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.NewDiffgramGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTableHierarchy", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoAssignments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmptyData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateColumn", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTableErrors", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "QualifiedName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.Field({Static:false, Public:false}, "_doc", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "_ds", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_dt", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_xmlw", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "fBefore", $.Boolean);

    $.Field({Static:false, Public:false}, "fErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "rowsOrder", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_tables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_writeHierarchy", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlDataTreeWriter */ 

(function XmlDataTreeWriter$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlDataTreeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTablesHierarchy", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateToplevelTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedChildRelations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PreserveSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "RowHasErrors", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveDiffgramData", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XmlDataRowWriter", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataRow"), $.String])
    );

    $.Field({Static:false, Public:false}, "_xmlw", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "_ds", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_dt", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_dTables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "topLevelTables", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]));

    $.Field({Static:false, Public:false}, "fFromTable", $.Boolean);

    $.Field({Static:false, Public:false}, "isDiffgram", $.Boolean);

    $.Field({Static:false, Public:false}, "rowsOrder", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_writeHierarchy", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataTextWriter */ 

(function DataTextWriter$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Data.DataTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWriter", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlWriter"), [$asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_xmltextWriter", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "BaseStream", $asm07.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm2F.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.DataTextReader */ 

(function DataTextReader$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Data.DataTextReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_xmlreader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm2F.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm2F.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ConstraintTable */ 

(function ConstraintTable$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ConstraintTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")])
    );

    $.Field({Static:false, Public:true }, "table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:true }, "constraint", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XSDSchema */ 

(function XSDSchema$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.XMLSchema"), 
      Name: "System.Data.XSDSchema", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTablesToList", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataTable")]), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectElementsAnnotations", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectElementsAnnotations", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DatasetElementCount", 
      new JSIL.MethodSignature($.Int32, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDatasetElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindField", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.DataTable"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindNameType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XSDSchema+NameType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTypeNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FromInference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBooleanAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstanceName", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMsdataAttribute", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceFromPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParticle", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParticleItems", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringAttribute", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableName", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableNamespace", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAttributeColumn", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAttributeGroup", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAttributes", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleColumnExpression", 
      new JSIL.MethodSignature(null, [$.Object, $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleComplexType", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleConstraint", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDataSet", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleElementColumn", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleKeyref", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Schema.XmlSchemaKeyref"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleParticle", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleRefTableProperties", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleRelation", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleRelations", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleSimpleContentColumn", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.DataTable"), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleSimpleTypeSimpleContentColumn", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $asm11.TypeRef("System.Data.DataTable"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateSimpleTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDatasetParticle", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTable", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXsdType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadSchema", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "QualifiedName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FromInference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetExtProperties", 
      new JSIL.MethodSignature(null, [$.Object, $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetExtProperties", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.XmlAttributeCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperties", 
      new JSIL.MethodSignature(null, [$.Object, $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateAcceptRejectRule", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.AcceptRejectRule"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateRule", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Rule"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdtoClr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.Field({Static:false, Public:false}, "_schemaSet", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "dsElement", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Field({Static:false, Public:false}, "_ds", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "ColumnExpressions", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "ConstraintNodes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "RefTables", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "complexTypes", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "annotations", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "elements", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elementsTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "attributeGroups", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "schemaTypes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "expressions", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "tableDictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.DataTable")])]));

    $.Field({Static:false, Public:false}, "udSimpleTypes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "existingSimpleTypeMap", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "fromInference", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "mapNameTypeXsd", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.XSDSchema+NameType")]));

    $.Property({Static:false, Public:false}, "FromInference", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XSDSchema+NameType */ 

(function NameType$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XSDSchema+NameType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String);

    $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlIgnoreNamespaceReader */ 

(function XmlIgnoreNamespaceReader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlNodeReader"), 
      Name: "System.Data.XmlIgnoreNamespaceReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "namespacesToIgnore", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlToDatasetMap */ 

(function XmlToDatasetMap$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlToDatasetMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumnSchema", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm2F.TypeRef("System.Xml.XmlNameTable"), 
          $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdHashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumnSchema", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdHashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTableSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlToDatasetMap+TableSchemaInfo"), [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTableSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.XmlToDatasetMap+TableSchemaInfo"), [$asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildIdentityMap", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataSet"), $asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildIdentityMap", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildIdentityMap", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildIdentityMap", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNameTable"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnSchema", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnSchema", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.DataTable"), $asm2F.TypeRef("System.Xml.XmlReader"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemaForNode", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSelfAndDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTableForNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleSpecialColumn", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm2F.TypeRef("System.Xml.XmlNameTable"), 
          $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdHashtable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMappedColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn")])
    );

    $.Field({Static:false, Public:false}, "tableSchemaMap", $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdHashtable"));

    $.Field({Static:false, Public:false}, "lastTableSchemaInfo", $asm11.TypeRef("System.Data.XmlToDatasetMap+TableSchemaInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlToDatasetMap+XmlNodeIdentety */ 

(function XmlNodeIdentety$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlToDatasetMap+XmlNodeIdentety", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true }, "LocalName", $.String);

    $.Field({Static:false, Public:true }, "NamespaceURI", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.XmlToDatasetMap+XmlNodeIdHashtable */ 

(function XmlNodeIdHashtable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Hashtable"), 
      Name: "System.Data.XmlToDatasetMap+XmlNodeIdHashtable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Field({Static:false, Public:false}, "id", $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdentety"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.XmlToDatasetMap+TableSchemaInfo */ 

(function TableSchemaInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.XmlToDatasetMap+TableSchemaInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.Field({Static:false, Public:true }, "TableSchema", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:true }, "ColumnsSchemaMap", $asm11.TypeRef("System.Data.XmlToDatasetMap+XmlNodeIdHashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.XmlWriteMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.XmlWriteMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    WriteSchema: 0, 
    IgnoreSchema: 1, 
    DiffGram: 2, 
  }
);

/* class System.Data.SqlEventSource */ 

(function SqlEventSource$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Tracing.EventSource"), 
      Name: "System.Data.SqlEventSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecute", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [1]; });

    $.ExternalMethod({Static:false, Public:true }, "EndExecute", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [2]; });

    $.Constant({Static:true , Public:false}, "EventSourceName", $.String, "Microsoft-AdoNet-SystemData");

    $.Constant({Static:true , Public:false}, "BeginExecuteEventId", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "EndExecuteEventId", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Log", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.Tracing.EventSourceAttribute"));

})();

/* class System.Data.SqlEventSource+Keywords */ 

(function Keywords$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.SqlEventSource+Keywords", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "SqlClient", $asm07.TypeRef("System.Diagnostics.Tracing.EventKeywords"), 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlEventSource+Tasks */ 

(function Tasks$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.SqlEventSource+Tasks", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ExecuteCommand", $asm07.TypeRef("System.Diagnostics.Tracing.EventTask"), 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Data.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Data.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Data.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Data.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ADP_Ascending", $.String, "ADP_Ascending");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIndexInt32", $.String, "ADP_CollectionIndexInt32");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIndexString", $.String, "ADP_CollectionIndexString");

    $.Constant({Static:true , Public:false}, "ADP_CollectionInvalidType", $.String, "ADP_CollectionInvalidType");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIsNotParent", $.String, "ADP_CollectionIsNotParent");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIsParent", $.String, "ADP_CollectionIsParent");

    $.Constant({Static:true , Public:false}, "ADP_CollectionNullValue", $.String, "ADP_CollectionNullValue");

    $.Constant({Static:true , Public:false}, "ADP_CollectionRemoveInvalidObject", $.String, "ADP_CollectionRemoveInvalidObject");

    $.Constant({Static:true , Public:false}, "ADP_CollectionUniqueValue", $.String, "ADP_CollectionUniqueValue");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionAlreadyOpen", $.String, "ADP_ConnectionAlreadyOpen");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Closed", $.String, "ADP_ConnectionStateMsg_Closed");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Connecting", $.String, "ADP_ConnectionStateMsg_Connecting");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Open", $.String, "ADP_ConnectionStateMsg_Open");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_OpenExecuting", $.String, "ADP_ConnectionStateMsg_OpenExecuting");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_OpenFetching", $.String, "ADP_ConnectionStateMsg_OpenFetching");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg", $.String, "ADP_ConnectionStateMsg");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStringSyntax", $.String, "ADP_ConnectionStringSyntax");

    $.Constant({Static:true , Public:false}, "ADP_DataReaderClosed", $.String, "ADP_DataReaderClosed");

    $.Constant({Static:true , Public:false}, "ADP_DelegatedTransactionPresent", $.String, "ADP_DelegatedTransactionPresent");

    $.Constant({Static:true , Public:false}, "ADP_Descending", $.String, "ADP_Descending");

    $.Constant({Static:true , Public:false}, "ADP_EmptyString", $.String, "ADP_EmptyString");

    $.Constant({Static:true , Public:false}, "ADP_InternalConnectionError", $.String, "ADP_InternalConnectionError");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataDirectory", $.String, "ADP_InvalidDataDirectory");

    $.Constant({Static:true , Public:false}, "ADP_InvalidEnumerationValue", $.String, "ADP_InvalidEnumerationValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidKey", $.String, "ADP_InvalidKey");

    $.Constant({Static:true , Public:false}, "ADP_InvalidOffsetValue", $.String, "ADP_InvalidOffsetValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidValue", $.String, "ADP_InvalidValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidXMLBadVersion", $.String, "ADP_InvalidXMLBadVersion");

    $.Constant({Static:true , Public:false}, "ADP_NoConnectionString", $.String, "ADP_NoConnectionString");

    $.Constant({Static:true , Public:false}, "ADP_NonCLSException", $.String, "ADP_NonCLSException");

    $.Constant({Static:true , Public:false}, "ADP_NotAPermissionElement", $.String, "ADP_NotAPermissionElement");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionPropertySet", $.String, "ADP_OpenConnectionPropertySet");

    $.Constant({Static:true , Public:false}, "ADP_PendingAsyncOperation", $.String, "ADP_PendingAsyncOperation");

    $.Constant({Static:true , Public:false}, "ADP_PermissionTypeMismatch", $.String, "ADP_PermissionTypeMismatch");

    $.Constant({Static:true , Public:false}, "ADP_PooledOpenTimeout", $.String, "ADP_PooledOpenTimeout");

    $.Constant({Static:true , Public:false}, "ADP_NonPooledOpenTimeout", $.String, "ADP_NonPooledOpenTimeout");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfSecureAndClearCredential", $.String, "ADP_InvalidMixedUsageOfSecureAndClearCredential");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity", $.String, "ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection", $.String, "ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword", $.String, "ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity", $.String, "ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfAccessTokenAndContextConnection", $.String, "ADP_InvalidMixedUsageOfAccessTokenAndContextConnection");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfAccessTokenAndCredential", $.String, "ADP_InvalidMixedUsageOfAccessTokenAndCredential");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfCredentialAndAccessToken", $.String, "ADP_InvalidMixedUsageOfCredentialAndAccessToken");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMixedUsageOfAccessTokenAndAuthentication", $.String, "ADP_InvalidMixedUsageOfAccessTokenAndAuthentication");

    $.Constant({Static:true , Public:false}, "ADP_MustBeReadOnly", $.String, "ADP_MustBeReadOnly");

    $.Constant({Static:true , Public:false}, "DataCategory_Data", $.String, "DataCategory_Data");

    $.Constant({Static:true , Public:false}, "DataCategory_StateChange", $.String, "DataCategory_StateChange");

    $.Constant({Static:true , Public:false}, "DataCategory_Update", $.String, "DataCategory_Update");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandTimeout", $.String, "DbCommand_CommandTimeout");

    $.Constant({Static:true , Public:false}, "DbConnection_State", $.String, "DbConnection_State");

    $.Constant({Static:true , Public:false}, "DbConnection_StateChange", $.String, "DbConnection_StateChange");

    $.Constant({Static:true , Public:false}, "DbParameter_DbType", $.String, "DbParameter_DbType");

    $.Constant({Static:true , Public:false}, "DbParameter_Direction", $.String, "DbParameter_Direction");

    $.Constant({Static:true , Public:false}, "DbParameter_IsNullable", $.String, "DbParameter_IsNullable");

    $.Constant({Static:true , Public:false}, "DbParameter_Offset", $.String, "DbParameter_Offset");

    $.Constant({Static:true , Public:false}, "DbParameter_ParameterName", $.String, "DbParameter_ParameterName");

    $.Constant({Static:true , Public:false}, "DbParameter_Size", $.String, "DbParameter_Size");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceColumn", $.String, "DbParameter_SourceColumn");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceVersion", $.String, "DbParameter_SourceVersion");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceColumnNullMapping", $.String, "DbParameter_SourceColumnNullMapping");

    $.Constant({Static:true , Public:false}, "DbParameter_Value", $.String, "DbParameter_Value");

    $.Constant({Static:true , Public:false}, "MDF_QueryFailed", $.String, "MDF_QueryFailed");

    $.Constant({Static:true , Public:false}, "MDF_TooManyRestrictions", $.String, "MDF_TooManyRestrictions");

    $.Constant({Static:true , Public:false}, "MDF_InvalidRestrictionValue", $.String, "MDF_InvalidRestrictionValue");

    $.Constant({Static:true , Public:false}, "MDF_UndefinedCollection", $.String, "MDF_UndefinedCollection");

    $.Constant({Static:true , Public:false}, "MDF_UndefinedPopulationMechanism", $.String, "MDF_UndefinedPopulationMechanism");

    $.Constant({Static:true , Public:false}, "MDF_UnsupportedVersion", $.String, "MDF_UnsupportedVersion");

    $.Constant({Static:true , Public:false}, "MDF_MissingDataSourceInformationColumn", $.String, "MDF_MissingDataSourceInformationColumn");

    $.Constant({Static:true , Public:false}, "MDF_IncorrectNumberOfDataSourceInformationRows", $.String, "MDF_IncorrectNumberOfDataSourceInformationRows");

    $.Constant({Static:true , Public:false}, "MDF_MissingRestrictionColumn", $.String, "MDF_MissingRestrictionColumn");

    $.Constant({Static:true , Public:false}, "MDF_MissingRestrictionRow", $.String, "MDF_MissingRestrictionRow");

    $.Constant({Static:true , Public:false}, "MDF_NoColumns", $.String, "MDF_NoColumns");

    $.Constant({Static:true , Public:false}, "MDF_UnableToBuildCollection", $.String, "MDF_UnableToBuildCollection");

    $.Constant({Static:true , Public:false}, "MDF_AmbigousCollectionName", $.String, "MDF_AmbigousCollectionName");

    $.Constant({Static:true , Public:false}, "MDF_CollectionNameISNotUnique", $.String, "MDF_CollectionNameISNotUnique");

    $.Constant({Static:true , Public:false}, "MDF_DataTableDoesNotExist", $.String, "MDF_DataTableDoesNotExist");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXml", $.String, "MDF_InvalidXml");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXmlMissingColumn", $.String, "MDF_InvalidXmlMissingColumn");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXmlInvalidValue", $.String, "MDF_InvalidXmlInvalidValue");

    $.Constant({Static:true , Public:false}, "DataCategory_Action", $.String, "DataCategory_Action");

    $.Constant({Static:true , Public:false}, "DataCategory_Behavior", $.String, "DataCategory_Behavior");

    $.Constant({Static:true , Public:false}, "DataCategory_Fill", $.String, "DataCategory_Fill");

    $.Constant({Static:true , Public:false}, "DataCategory_InfoMessage", $.String, "DataCategory_InfoMessage");

    $.Constant({Static:true , Public:false}, "DataCategory_Mapping", $.String, "DataCategory_Mapping");

    $.Constant({Static:true , Public:false}, "DataCategory_StatementCompleted", $.String, "DataCategory_StatementCompleted");

    $.Constant({Static:true , Public:false}, "DataCategory_Udt", $.String, "DataCategory_Udt");

    $.Constant({Static:true , Public:false}, "DataCategory_Notification", $.String, "DataCategory_Notification");

    $.Constant({Static:true , Public:false}, "DataCategory_Schema", $.String, "DataCategory_Schema");

    $.Constant({Static:true , Public:false}, "DataCategory_Xml", $.String, "DataCategory_Xml");

    $.Constant({Static:true , Public:false}, "DataCategory_Advanced", $.String, "DataCategory_Advanced");

    $.Constant({Static:true , Public:false}, "DataCategory_Context", $.String, "DataCategory_Context");

    $.Constant({Static:true , Public:false}, "DataCategory_Initialization", $.String, "DataCategory_Initialization");

    $.Constant({Static:true , Public:false}, "DataCategory_Pooling", $.String, "DataCategory_Pooling");

    $.Constant({Static:true , Public:false}, "DataCategory_NamedConnectionString", $.String, "DataCategory_NamedConnectionString");

    $.Constant({Static:true , Public:false}, "DataCategory_Security", $.String, "DataCategory_Security");

    $.Constant({Static:true , Public:false}, "DataCategory_Source", $.String, "DataCategory_Source");

    $.Constant({Static:true , Public:false}, "DataCategory_Replication", $.String, "DataCategory_Replication");

    $.Constant({Static:true , Public:false}, "DataCategory_ConnectionResilency", $.String, "DataCategory_ConnectionResilency");

    $.Constant({Static:true , Public:false}, "ExtendedPropertiesDescr", $.String, "ExtendedPropertiesDescr");

    $.Constant({Static:true , Public:false}, "DataSetCaseSensitiveDescr", $.String, "DataSetCaseSensitiveDescr");

    $.Constant({Static:true , Public:false}, "DataSetDataSetNameDescr", $.String, "DataSetDataSetNameDescr");

    $.Constant({Static:true , Public:false}, "DataSetDefaultViewDescr", $.String, "DataSetDefaultViewDescr");

    $.Constant({Static:true , Public:false}, "DataSetEnforceConstraintsDescr", $.String, "DataSetEnforceConstraintsDescr");

    $.Constant({Static:true , Public:false}, "DataSetHasErrorsDescr", $.String, "DataSetHasErrorsDescr");

    $.Constant({Static:true , Public:false}, "DataSetLocaleDescr", $.String, "DataSetLocaleDescr");

    $.Constant({Static:true , Public:false}, "DataSetNamespaceDescr", $.String, "DataSetNamespaceDescr");

    $.Constant({Static:true , Public:false}, "DataSetPrefixDescr", $.String, "DataSetPrefixDescr");

    $.Constant({Static:true , Public:false}, "DataSetRelationsDescr", $.String, "DataSetRelationsDescr");

    $.Constant({Static:true , Public:false}, "DataSetTablesDescr", $.String, "DataSetTablesDescr");

    $.Constant({Static:true , Public:false}, "DataSetMergeFailedDescr", $.String, "DataSetMergeFailedDescr");

    $.Constant({Static:true , Public:false}, "DataSetInitializedDescr", $.String, "DataSetInitializedDescr");

    $.Constant({Static:true , Public:false}, "DataSetDescr", $.String, "DataSetDescr");

    $.Constant({Static:true , Public:false}, "DataTableCaseSensitiveDescr", $.String, "DataTableCaseSensitiveDescr");

    $.Constant({Static:true , Public:false}, "DataTableChildRelationsDescr", $.String, "DataTableChildRelationsDescr");

    $.Constant({Static:true , Public:false}, "DataTableColumnsDescr", $.String, "DataTableColumnsDescr");

    $.Constant({Static:true , Public:false}, "DataTableConstraintsDescr", $.String, "DataTableConstraintsDescr");

    $.Constant({Static:true , Public:false}, "DataTableDataSetDescr", $.String, "DataTableDataSetDescr");

    $.Constant({Static:true , Public:false}, "DataTableDefaultViewDescr", $.String, "DataTableDefaultViewDescr");

    $.Constant({Static:true , Public:false}, "DataTableDisplayExpressionDescr", $.String, "DataTableDisplayExpressionDescr");

    $.Constant({Static:true , Public:false}, "DataTableHasErrorsDescr", $.String, "DataTableHasErrorsDescr");

    $.Constant({Static:true , Public:false}, "DataTableLocaleDescr", $.String, "DataTableLocaleDescr");

    $.Constant({Static:true , Public:false}, "DataTableMinimumCapacityDescr", $.String, "DataTableMinimumCapacityDescr");

    $.Constant({Static:true , Public:false}, "DataTableNamespaceDescr", $.String, "DataTableNamespaceDescr");

    $.Constant({Static:true , Public:false}, "DataTablePrefixDescr", $.String, "DataTablePrefixDescr");

    $.Constant({Static:true , Public:false}, "DataTableParentRelationsDescr", $.String, "DataTableParentRelationsDescr");

    $.Constant({Static:true , Public:false}, "DataTablePrimaryKeyDescr", $.String, "DataTablePrimaryKeyDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowsDescr", $.String, "DataTableRowsDescr");

    $.Constant({Static:true , Public:false}, "DataTableTableNameDescr", $.String, "DataTableTableNameDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowChangedDescr", $.String, "DataTableRowChangedDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowChangingDescr", $.String, "DataTableRowChangingDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowDeletedDescr", $.String, "DataTableRowDeletedDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowDeletingDescr", $.String, "DataTableRowDeletingDescr");

    $.Constant({Static:true , Public:false}, "DataTableColumnChangingDescr", $.String, "DataTableColumnChangingDescr");

    $.Constant({Static:true , Public:false}, "DataTableColumnChangedDescr", $.String, "DataTableColumnChangedDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowsClearingDescr", $.String, "DataTableRowsClearingDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowsClearedDescr", $.String, "DataTableRowsClearedDescr");

    $.Constant({Static:true , Public:false}, "DataTableRowsNewRowDescr", $.String, "DataTableRowsNewRowDescr");

    $.Constant({Static:true , Public:false}, "DataRelationRelationNameDescr", $.String, "DataRelationRelationNameDescr");

    $.Constant({Static:true , Public:false}, "DataRelationChildColumnsDescr", $.String, "DataRelationChildColumnsDescr");

    $.Constant({Static:true , Public:false}, "DataRelationParentColumnsDescr", $.String, "DataRelationParentColumnsDescr");

    $.Constant({Static:true , Public:false}, "DataRelationNested", $.String, "DataRelationNested");

    $.Constant({Static:true , Public:false}, "ForeignKeyConstraintDeleteRuleDescr", $.String, "ForeignKeyConstraintDeleteRuleDescr");

    $.Constant({Static:true , Public:false}, "ForeignKeyConstraintUpdateRuleDescr", $.String, "ForeignKeyConstraintUpdateRuleDescr");

    $.Constant({Static:true , Public:false}, "ForeignKeyConstraintAcceptRejectRuleDescr", $.String, "ForeignKeyConstraintAcceptRejectRuleDescr");

    $.Constant({Static:true , Public:false}, "ForeignKeyConstraintChildColumnsDescr", $.String, "ForeignKeyConstraintChildColumnsDescr");

    $.Constant({Static:true , Public:false}, "ForeignKeyConstraintParentColumnsDescr", $.String, "ForeignKeyConstraintParentColumnsDescr");

    $.Constant({Static:true , Public:false}, "ForeignKeyRelatedTableDescr", $.String, "ForeignKeyRelatedTableDescr");

    $.Constant({Static:true , Public:false}, "KeyConstraintColumnsDescr", $.String, "KeyConstraintColumnsDescr");

    $.Constant({Static:true , Public:false}, "KeyConstraintIsPrimaryKeyDescr", $.String, "KeyConstraintIsPrimaryKeyDescr");

    $.Constant({Static:true , Public:false}, "ConstraintNameDescr", $.String, "ConstraintNameDescr");

    $.Constant({Static:true , Public:false}, "ConstraintTableDescr", $.String, "ConstraintTableDescr");

    $.Constant({Static:true , Public:false}, "DataColumnAllowNullDescr", $.String, "DataColumnAllowNullDescr");

    $.Constant({Static:true , Public:false}, "DataColumnAutoIncrementDescr", $.String, "DataColumnAutoIncrementDescr");

    $.Constant({Static:true , Public:false}, "DataColumnAutoIncrementSeedDescr", $.String, "DataColumnAutoIncrementSeedDescr");

    $.Constant({Static:true , Public:false}, "DataColumnAutoIncrementStepDescr", $.String, "DataColumnAutoIncrementStepDescr");

    $.Constant({Static:true , Public:false}, "DataColumnCaptionDescr", $.String, "DataColumnCaptionDescr");

    $.Constant({Static:true , Public:false}, "DataColumnColumnNameDescr", $.String, "DataColumnColumnNameDescr");

    $.Constant({Static:true , Public:false}, "DataColumnDataTableDescr", $.String, "DataColumnDataTableDescr");

    $.Constant({Static:true , Public:false}, "DataColumnDataTypeDescr", $.String, "DataColumnDataTypeDescr");

    $.Constant({Static:true , Public:false}, "DataColumnDefaultValueDescr", $.String, "DataColumnDefaultValueDescr");

    $.Constant({Static:true , Public:false}, "DataColumnExpressionDescr", $.String, "DataColumnExpressionDescr");

    $.Constant({Static:true , Public:false}, "DataColumnMappingDescr", $.String, "DataColumnMappingDescr");

    $.Constant({Static:true , Public:false}, "DataColumnNamespaceDescr", $.String, "DataColumnNamespaceDescr");

    $.Constant({Static:true , Public:false}, "DataColumnPrefixDescr", $.String, "DataColumnPrefixDescr");

    $.Constant({Static:true , Public:false}, "DataColumnOrdinalDescr", $.String, "DataColumnOrdinalDescr");

    $.Constant({Static:true , Public:false}, "DataColumnReadOnlyDescr", $.String, "DataColumnReadOnlyDescr");

    $.Constant({Static:true , Public:false}, "DataColumnUniqueDescr", $.String, "DataColumnUniqueDescr");

    $.Constant({Static:true , Public:false}, "DataColumnMaxLengthDescr", $.String, "DataColumnMaxLengthDescr");

    $.Constant({Static:true , Public:false}, "DataColumnDateTimeModeDescr", $.String, "DataColumnDateTimeModeDescr");

    $.Constant({Static:true , Public:false}, "DataViewAllowDeleteDescr", $.String, "DataViewAllowDeleteDescr");

    $.Constant({Static:true , Public:false}, "DataViewAllowEditDescr", $.String, "DataViewAllowEditDescr");

    $.Constant({Static:true , Public:false}, "DataViewAllowNewDescr", $.String, "DataViewAllowNewDescr");

    $.Constant({Static:true , Public:false}, "DataViewCountDescr", $.String, "DataViewCountDescr");

    $.Constant({Static:true , Public:false}, "DataViewDataViewManagerDescr", $.String, "DataViewDataViewManagerDescr");

    $.Constant({Static:true , Public:false}, "DataViewIsOpenDescr", $.String, "DataViewIsOpenDescr");

    $.Constant({Static:true , Public:false}, "DataViewRowFilterDescr", $.String, "DataViewRowFilterDescr");

    $.Constant({Static:true , Public:false}, "DataViewRowStateFilterDescr", $.String, "DataViewRowStateFilterDescr");

    $.Constant({Static:true , Public:false}, "DataViewSortDescr", $.String, "DataViewSortDescr");

    $.Constant({Static:true , Public:false}, "DataViewApplyDefaultSortDescr", $.String, "DataViewApplyDefaultSortDescr");

    $.Constant({Static:true , Public:false}, "DataViewTableDescr", $.String, "DataViewTableDescr");

    $.Constant({Static:true , Public:false}, "DataViewListChangedDescr", $.String, "DataViewListChangedDescr");

    $.Constant({Static:true , Public:false}, "DataViewManagerDataSetDescr", $.String, "DataViewManagerDataSetDescr");

    $.Constant({Static:true , Public:false}, "DataViewManagerTableSettingsDescr", $.String, "DataViewManagerTableSettingsDescr");

    $.Constant({Static:true , Public:false}, "Xml_SimpleTypeNotSupported", $.String, "Xml_SimpleTypeNotSupported");

    $.Constant({Static:true , Public:false}, "Xml_MissingAttribute", $.String, "Xml_MissingAttribute");

    $.Constant({Static:true , Public:false}, "Xml_ValueOutOfRange", $.String, "Xml_ValueOutOfRange");

    $.Constant({Static:true , Public:false}, "Xml_AttributeValues", $.String, "Xml_AttributeValues");

    $.Constant({Static:true , Public:false}, "Xml_ElementTypeNotFound", $.String, "Xml_ElementTypeNotFound");

    $.Constant({Static:true , Public:false}, "Xml_RelationParentNameMissing", $.String, "Xml_RelationParentNameMissing");

    $.Constant({Static:true , Public:false}, "Xml_RelationChildNameMissing", $.String, "Xml_RelationChildNameMissing");

    $.Constant({Static:true , Public:false}, "Xml_RelationTableKeyMissing", $.String, "Xml_RelationTableKeyMissing");

    $.Constant({Static:true , Public:false}, "Xml_RelationChildKeyMissing", $.String, "Xml_RelationChildKeyMissing");

    $.Constant({Static:true , Public:false}, "Xml_UndefinedDatatype", $.String, "Xml_UndefinedDatatype");

    $.Constant({Static:true , Public:false}, "Xml_DatatypeNotDefined", $.String, "Xml_DatatypeNotDefined");

    $.Constant({Static:true , Public:false}, "Xml_InvalidField", $.String, "Xml_InvalidField");

    $.Constant({Static:true , Public:false}, "Xml_InvalidSelector", $.String, "Xml_InvalidSelector");

    $.Constant({Static:true , Public:false}, "Xml_InvalidKey", $.String, "Xml_InvalidKey");

    $.Constant({Static:true , Public:false}, "Xml_DuplicateConstraint", $.String, "Xml_DuplicateConstraint");

    $.Constant({Static:true , Public:false}, "Xml_CannotConvert", $.String, "Xml_CannotConvert");

    $.Constant({Static:true , Public:false}, "Xml_MissingRefer", $.String, "Xml_MissingRefer");

    $.Constant({Static:true , Public:false}, "Xml_MismatchKeyLength", $.String, "Xml_MismatchKeyLength");

    $.Constant({Static:true , Public:false}, "Xml_CircularComplexType", $.String, "Xml_CircularComplexType");

    $.Constant({Static:true , Public:false}, "Xml_CannotInstantiateAbstract", $.String, "Xml_CannotInstantiateAbstract");

    $.Constant({Static:true , Public:false}, "Xml_MultipleTargetConverterError", $.String, "Xml_MultipleTargetConverterError");

    $.Constant({Static:true , Public:false}, "Xml_MultipleTargetConverterEmpty", $.String, "Xml_MultipleTargetConverterEmpty");

    $.Constant({Static:true , Public:false}, "Xml_MergeDuplicateDeclaration", $.String, "Xml_MergeDuplicateDeclaration");

    $.Constant({Static:true , Public:false}, "Xml_MissingTable", $.String, "Xml_MissingTable");

    $.Constant({Static:true , Public:false}, "Xml_MissingSQL", $.String, "Xml_MissingSQL");

    $.Constant({Static:true , Public:false}, "Xml_ColumnConflict", $.String, "Xml_ColumnConflict");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPrefix", $.String, "Xml_InvalidPrefix");

    $.Constant({Static:true , Public:false}, "Xml_NestedCircular", $.String, "Xml_NestedCircular");

    $.Constant({Static:true , Public:false}, "Xml_FoundEntity", $.String, "Xml_FoundEntity");

    $.Constant({Static:true , Public:false}, "Xml_PolymorphismNotSupported", $.String, "Xml_PolymorphismNotSupported");

    $.Constant({Static:true , Public:false}, "Xml_CanNotDeserializeObjectType", $.String, "Xml_CanNotDeserializeObjectType");

    $.Constant({Static:true , Public:false}, "Xml_DataTableInferenceNotSupported", $.String, "Xml_DataTableInferenceNotSupported");

    $.Constant({Static:true , Public:false}, "Xml_MultipleParentRows", $.String, "Xml_MultipleParentRows");

    $.Constant({Static:true , Public:false}, "Xml_IsDataSetAttributeMissingInSchema", $.String, "Xml_IsDataSetAttributeMissingInSchema");

    $.Constant({Static:true , Public:false}, "Xml_TooManyIsDataSetAtributeInSchema", $.String, "Xml_TooManyIsDataSetAtributeInSchema");

    $.Constant({Static:true , Public:false}, "Xml_DynamicWithoutXmlSerializable", $.String, "Xml_DynamicWithoutXmlSerializable");

    $.Constant({Static:true , Public:false}, "Expr_NYI", $.String, "Expr_NYI");

    $.Constant({Static:true , Public:false}, "Expr_MissingOperand", $.String, "Expr_MissingOperand");

    $.Constant({Static:true , Public:false}, "Expr_TypeMismatch", $.String, "Expr_TypeMismatch");

    $.Constant({Static:true , Public:false}, "Expr_ExpressionTooComplex", $.String, "Expr_ExpressionTooComplex");

    $.Constant({Static:true , Public:false}, "Expr_UnboundName", $.String, "Expr_UnboundName");

    $.Constant({Static:true , Public:false}, "Expr_InvalidString", $.String, "Expr_InvalidString");

    $.Constant({Static:true , Public:false}, "Expr_UndefinedFunction", $.String, "Expr_UndefinedFunction");

    $.Constant({Static:true , Public:false}, "Expr_Syntax", $.String, "Expr_Syntax");

    $.Constant({Static:true , Public:false}, "Expr_FunctionArgumentCount", $.String, "Expr_FunctionArgumentCount");

    $.Constant({Static:true , Public:false}, "Expr_MissingRightParen", $.String, "Expr_MissingRightParen");

    $.Constant({Static:true , Public:false}, "Expr_UnknownToken", $.String, "Expr_UnknownToken");

    $.Constant({Static:true , Public:false}, "Expr_UnknownToken1", $.String, "Expr_UnknownToken1");

    $.Constant({Static:true , Public:false}, "Expr_DatatypeConvertion", $.String, "Expr_DatatypeConvertion");

    $.Constant({Static:true , Public:false}, "Expr_DatavalueConvertion", $.String, "Expr_DatavalueConvertion");

    $.Constant({Static:true , Public:false}, "Expr_InvalidName", $.String, "Expr_InvalidName");

    $.Constant({Static:true , Public:false}, "Expr_InvalidDate", $.String, "Expr_InvalidDate");

    $.Constant({Static:true , Public:false}, "Expr_NonConstantArgument", $.String, "Expr_NonConstantArgument");

    $.Constant({Static:true , Public:false}, "Expr_InvalidPattern", $.String, "Expr_InvalidPattern");

    $.Constant({Static:true , Public:false}, "Expr_InWithoutParentheses", $.String, "Expr_InWithoutParentheses");

    $.Constant({Static:true , Public:false}, "Expr_ArgumentType", $.String, "Expr_ArgumentType");

    $.Constant({Static:true , Public:false}, "Expr_ArgumentTypeInteger", $.String, "Expr_ArgumentTypeInteger");

    $.Constant({Static:true , Public:false}, "Expr_TypeMismatchInBinop", $.String, "Expr_TypeMismatchInBinop");

    $.Constant({Static:true , Public:false}, "Expr_AmbiguousBinop", $.String, "Expr_AmbiguousBinop");

    $.Constant({Static:true , Public:false}, "Expr_InWithoutList", $.String, "Expr_InWithoutList");

    $.Constant({Static:true , Public:false}, "Expr_UnsupportedOperator", $.String, "Expr_UnsupportedOperator");

    $.Constant({Static:true , Public:false}, "Expr_InvalidNameBracketing", $.String, "Expr_InvalidNameBracketing");

    $.Constant({Static:true , Public:false}, "Expr_MissingOperandBefore", $.String, "Expr_MissingOperandBefore");

    $.Constant({Static:true , Public:false}, "Expr_TooManyRightParentheses", $.String, "Expr_TooManyRightParentheses");

    $.Constant({Static:true , Public:false}, "Expr_UnresolvedRelation", $.String, "Expr_UnresolvedRelation");

    $.Constant({Static:true , Public:false}, "Expr_AggregateArgument", $.String, "Expr_AggregateArgument");

    $.Constant({Static:true , Public:false}, "Expr_AggregateUnbound", $.String, "Expr_AggregateUnbound");

    $.Constant({Static:true , Public:false}, "Expr_EvalNoContext", $.String, "Expr_EvalNoContext");

    $.Constant({Static:true , Public:false}, "Expr_ExpressionUnbound", $.String, "Expr_ExpressionUnbound");

    $.Constant({Static:true , Public:false}, "Expr_ComputeNotAggregate", $.String, "Expr_ComputeNotAggregate");

    $.Constant({Static:true , Public:false}, "Expr_FilterConvertion", $.String, "Expr_FilterConvertion");

    $.Constant({Static:true , Public:false}, "Expr_InvalidType", $.String, "Expr_InvalidType");

    $.Constant({Static:true , Public:false}, "Expr_LookupArgument", $.String, "Expr_LookupArgument");

    $.Constant({Static:true , Public:false}, "Expr_InvokeArgument", $.String, "Expr_InvokeArgument");

    $.Constant({Static:true , Public:false}, "Expr_ArgumentOutofRange", $.String, "Expr_ArgumentOutofRange");

    $.Constant({Static:true , Public:false}, "Expr_IsSyntax", $.String, "Expr_IsSyntax");

    $.Constant({Static:true , Public:false}, "Expr_Overflow", $.String, "Expr_Overflow");

    $.Constant({Static:true , Public:false}, "Expr_DivideByZero", $.String, "Expr_DivideByZero");

    $.Constant({Static:true , Public:false}, "Expr_BindFailure", $.String, "Expr_BindFailure");

    $.Constant({Static:true , Public:false}, "Expr_InvalidHoursArgument", $.String, "Expr_InvalidHoursArgument");

    $.Constant({Static:true , Public:false}, "Expr_InvalidMinutesArgument", $.String, "Expr_InvalidMinutesArgument");

    $.Constant({Static:true , Public:false}, "Expr_InvalidTimeZoneRange", $.String, "Expr_InvalidTimeZoneRange");

    $.Constant({Static:true , Public:false}, "Expr_MismatchKindandTimeSpan", $.String, "Expr_MismatchKindandTimeSpan");

    $.Constant({Static:true , Public:false}, "Expr_UnsupportedType", $.String, "Expr_UnsupportedType");

    $.Constant({Static:true , Public:false}, "Data_EnforceConstraints", $.String, "Data_EnforceConstraints");

    $.Constant({Static:true , Public:false}, "Data_CannotModifyCollection", $.String, "Data_CannotModifyCollection");

    $.Constant({Static:true , Public:false}, "Data_CaseInsensitiveNameConflict", $.String, "Data_CaseInsensitiveNameConflict");

    $.Constant({Static:true , Public:false}, "Data_NamespaceNameConflict", $.String, "Data_NamespaceNameConflict");

    $.Constant({Static:true , Public:false}, "Data_InvalidOffsetLength", $.String, "Data_InvalidOffsetLength");

    $.Constant({Static:true , Public:false}, "Data_ArgumentOutOfRange", $.String, "Data_ArgumentOutOfRange");

    $.Constant({Static:true , Public:false}, "Data_ArgumentNull", $.String, "Data_ArgumentNull");

    $.Constant({Static:true , Public:false}, "Data_ArgumentContainsNull", $.String, "Data_ArgumentContainsNull");

    $.Constant({Static:true , Public:false}, "DataColumns_OutOfRange", $.String, "DataColumns_OutOfRange");

    $.Constant({Static:true , Public:false}, "DataColumns_Add1", $.String, "DataColumns_Add1");

    $.Constant({Static:true , Public:false}, "DataColumns_Add2", $.String, "DataColumns_Add2");

    $.Constant({Static:true , Public:false}, "DataColumns_Add3", $.String, "DataColumns_Add3");

    $.Constant({Static:true , Public:false}, "DataColumns_Add4", $.String, "DataColumns_Add4");

    $.Constant({Static:true , Public:false}, "DataColumns_AddDuplicate", $.String, "DataColumns_AddDuplicate");

    $.Constant({Static:true , Public:false}, "DataColumns_AddDuplicate2", $.String, "DataColumns_AddDuplicate2");

    $.Constant({Static:true , Public:false}, "DataColumns_AddDuplicate3", $.String, "DataColumns_AddDuplicate3");

    $.Constant({Static:true , Public:false}, "DataColumns_Remove", $.String, "DataColumns_Remove");

    $.Constant({Static:true , Public:false}, "DataColumns_RemovePrimaryKey", $.String, "DataColumns_RemovePrimaryKey");

    $.Constant({Static:true , Public:false}, "DataColumns_RemoveChildKey", $.String, "DataColumns_RemoveChildKey");

    $.Constant({Static:true , Public:false}, "DataColumns_RemoveConstraint", $.String, "DataColumns_RemoveConstraint");

    $.Constant({Static:true , Public:false}, "DataColumns_RemoveExpression", $.String, "DataColumns_RemoveExpression");

    $.Constant({Static:true , Public:false}, "DataColumn_AutoIncrementAndExpression", $.String, "DataColumn_AutoIncrementAndExpression");

    $.Constant({Static:true , Public:false}, "DataColumn_AutoIncrementAndDefaultValue", $.String, "DataColumn_AutoIncrementAndDefaultValue");

    $.Constant({Static:true , Public:false}, "DataColumn_DefaultValueAndAutoIncrement", $.String, "DataColumn_DefaultValueAndAutoIncrement");

    $.Constant({Static:true , Public:false}, "DataColumn_AutoIncrementSeed", $.String, "DataColumn_AutoIncrementSeed");

    $.Constant({Static:true , Public:false}, "DataColumn_NameRequired", $.String, "DataColumn_NameRequired");

    $.Constant({Static:true , Public:false}, "DataColumn_ChangeDataType", $.String, "DataColumn_ChangeDataType");

    $.Constant({Static:true , Public:false}, "DataColumn_NullDataType", $.String, "DataColumn_NullDataType");

    $.Constant({Static:true , Public:false}, "DataColumn_DefaultValueDataType", $.String, "DataColumn_DefaultValueDataType");

    $.Constant({Static:true , Public:false}, "DataColumn_DefaultValueDataType1", $.String, "DataColumn_DefaultValueDataType1");

    $.Constant({Static:true , Public:false}, "DataColumn_DefaultValueColumnDataType", $.String, "DataColumn_DefaultValueColumnDataType");

    $.Constant({Static:true , Public:false}, "DataColumn_ReadOnlyAndExpression", $.String, "DataColumn_ReadOnlyAndExpression");

    $.Constant({Static:true , Public:false}, "DataColumn_UniqueAndExpression", $.String, "DataColumn_UniqueAndExpression");

    $.Constant({Static:true , Public:false}, "DataColumn_ExpressionAndUnique", $.String, "DataColumn_ExpressionAndUnique");

    $.Constant({Static:true , Public:false}, "DataColumn_ExpressionAndReadOnly", $.String, "DataColumn_ExpressionAndReadOnly");

    $.Constant({Static:true , Public:false}, "DataColumn_ExpressionAndConstraint", $.String, "DataColumn_ExpressionAndConstraint");

    $.Constant({Static:true , Public:false}, "DataColumn_ExpressionInConstraint", $.String, "DataColumn_ExpressionInConstraint");

    $.Constant({Static:true , Public:false}, "DataColumn_ExpressionCircular", $.String, "DataColumn_ExpressionCircular");

    $.Constant({Static:true , Public:false}, "DataColumn_NullKeyValues", $.String, "DataColumn_NullKeyValues");

    $.Constant({Static:true , Public:false}, "DataColumn_NullValues", $.String, "DataColumn_NullValues");

    $.Constant({Static:true , Public:false}, "DataColumn_ReadOnly", $.String, "DataColumn_ReadOnly");

    $.Constant({Static:true , Public:false}, "DataColumn_NonUniqueValues", $.String, "DataColumn_NonUniqueValues");

    $.Constant({Static:true , Public:false}, "DataColumn_NotInTheTable", $.String, "DataColumn_NotInTheTable");

    $.Constant({Static:true , Public:false}, "DataColumn_NotInAnyTable", $.String, "DataColumn_NotInAnyTable");

    $.Constant({Static:true , Public:false}, "DataColumn_SetFailed", $.String, "DataColumn_SetFailed");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSetToNull", $.String, "DataColumn_CannotSetToNull");

    $.Constant({Static:true , Public:false}, "DataColumn_LongerThanMaxLength", $.String, "DataColumn_LongerThanMaxLength");

    $.Constant({Static:true , Public:false}, "DataColumn_HasToBeStringType", $.String, "DataColumn_HasToBeStringType");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSetMaxLength", $.String, "DataColumn_CannotSetMaxLength");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSetMaxLength2", $.String, "DataColumn_CannotSetMaxLength2");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSimpleContentType", $.String, "DataColumn_CannotSimpleContentType");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSimpleContent", $.String, "DataColumn_CannotSimpleContent");

    $.Constant({Static:true , Public:false}, "DataColumn_ExceedMaxLength", $.String, "DataColumn_ExceedMaxLength");

    $.Constant({Static:true , Public:false}, "DataColumn_NotAllowDBNull", $.String, "DataColumn_NotAllowDBNull");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotChangeNamespace", $.String, "DataColumn_CannotChangeNamespace");

    $.Constant({Static:true , Public:false}, "DataColumn_AutoIncrementCannotSetIfHasData", $.String, "DataColumn_AutoIncrementCannotSetIfHasData");

    $.Constant({Static:true , Public:false}, "DataColumn_NotInTheUnderlyingTable", $.String, "DataColumn_NotInTheUnderlyingTable");

    $.Constant({Static:true , Public:false}, "DataColumn_InvalidDataColumnMapping", $.String, "DataColumn_InvalidDataColumnMapping");

    $.Constant({Static:true , Public:false}, "DataColumn_CannotSetDateTimeModeForNonDateTimeColumns", $.String, "DataColumn_CannotSetDateTimeModeForNonDateTimeColumns");

    $.Constant({Static:true , Public:false}, "DataColumn_InvalidDateTimeMode", $.String, "DataColumn_InvalidDateTimeMode");

    $.Constant({Static:true , Public:false}, "DataColumn_DateTimeMode", $.String, "DataColumn_DateTimeMode");

    $.Constant({Static:true , Public:false}, "DataColumn_INullableUDTwithoutStaticNull", $.String, "DataColumn_INullableUDTwithoutStaticNull");

    $.Constant({Static:true , Public:false}, "DataColumn_UDTImplementsIChangeTrackingButnotIRevertible", $.String, "DataColumn_UDTImplementsIChangeTrackingButnotIRevertible");

    $.Constant({Static:true , Public:false}, "DataColumn_SetAddedAndModifiedCalledOnNonUnchanged", $.String, "DataColumn_SetAddedAndModifiedCalledOnNonUnchanged");

    $.Constant({Static:true , Public:false}, "DataColumn_OrdinalExceedMaximun", $.String, "DataColumn_OrdinalExceedMaximun");

    $.Constant({Static:true , Public:false}, "DataColumn_NullableTypesNotSupported", $.String, "DataColumn_NullableTypesNotSupported");

    $.Constant({Static:true , Public:false}, "DataConstraint_NoName", $.String, "DataConstraint_NoName");

    $.Constant({Static:true , Public:false}, "DataConstraint_Violation", $.String, "DataConstraint_Violation");

    $.Constant({Static:true , Public:false}, "DataConstraint_ViolationValue", $.String, "DataConstraint_ViolationValue");

    $.Constant({Static:true , Public:false}, "DataConstraint_NotInTheTable", $.String, "DataConstraint_NotInTheTable");

    $.Constant({Static:true , Public:false}, "DataConstraint_OutOfRange", $.String, "DataConstraint_OutOfRange");

    $.Constant({Static:true , Public:false}, "DataConstraint_Duplicate", $.String, "DataConstraint_Duplicate");

    $.Constant({Static:true , Public:false}, "DataConstraint_DuplicateName", $.String, "DataConstraint_DuplicateName");

    $.Constant({Static:true , Public:false}, "DataConstraint_UniqueViolation", $.String, "DataConstraint_UniqueViolation");

    $.Constant({Static:true , Public:false}, "DataConstraint_ForeignTable", $.String, "DataConstraint_ForeignTable");

    $.Constant({Static:true , Public:false}, "DataConstraint_ParentValues", $.String, "DataConstraint_ParentValues");

    $.Constant({Static:true , Public:false}, "DataConstraint_AddFailed", $.String, "DataConstraint_AddFailed");

    $.Constant({Static:true , Public:false}, "DataConstraint_RemoveFailed", $.String, "DataConstraint_RemoveFailed");

    $.Constant({Static:true , Public:false}, "DataConstraint_NeededForForeignKeyConstraint", $.String, "DataConstraint_NeededForForeignKeyConstraint");

    $.Constant({Static:true , Public:false}, "DataConstraint_CascadeDelete", $.String, "DataConstraint_CascadeDelete");

    $.Constant({Static:true , Public:false}, "DataConstraint_CascadeUpdate", $.String, "DataConstraint_CascadeUpdate");

    $.Constant({Static:true , Public:false}, "DataConstraint_ClearParentTable", $.String, "DataConstraint_ClearParentTable");

    $.Constant({Static:true , Public:false}, "DataConstraint_ForeignKeyViolation", $.String, "DataConstraint_ForeignKeyViolation");

    $.Constant({Static:true , Public:false}, "DataConstraint_BadObjectPropertyAccess", $.String, "DataConstraint_BadObjectPropertyAccess");

    $.Constant({Static:true , Public:false}, "DataConstraint_RemoveParentRow", $.String, "DataConstraint_RemoveParentRow");

    $.Constant({Static:true , Public:false}, "DataConstraint_AddPrimaryKeyConstraint", $.String, "DataConstraint_AddPrimaryKeyConstraint");

    $.Constant({Static:true , Public:false}, "DataConstraint_CantAddConstraintToMultipleNestedTable", $.String, "DataConstraint_CantAddConstraintToMultipleNestedTable");

    $.Constant({Static:true , Public:false}, "DataKey_TableMismatch", $.String, "DataKey_TableMismatch");

    $.Constant({Static:true , Public:false}, "DataKey_NoColumns", $.String, "DataKey_NoColumns");

    $.Constant({Static:true , Public:false}, "DataKey_TooManyColumns", $.String, "DataKey_TooManyColumns");

    $.Constant({Static:true , Public:false}, "DataKey_DuplicateColumns", $.String, "DataKey_DuplicateColumns");

    $.Constant({Static:true , Public:false}, "DataKey_RemovePrimaryKey", $.String, "DataKey_RemovePrimaryKey");

    $.Constant({Static:true , Public:false}, "DataKey_RemovePrimaryKey1", $.String, "DataKey_RemovePrimaryKey1");

    $.Constant({Static:true , Public:false}, "DataRelation_ColumnsTypeMismatch", $.String, "DataRelation_ColumnsTypeMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_KeyColumnsIdentical", $.String, "DataRelation_KeyColumnsIdentical");

    $.Constant({Static:true , Public:false}, "DataRelation_KeyLengthMismatch", $.String, "DataRelation_KeyLengthMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_KeyZeroLength", $.String, "DataRelation_KeyZeroLength");

    $.Constant({Static:true , Public:false}, "DataRelation_ForeignRow", $.String, "DataRelation_ForeignRow");

    $.Constant({Static:true , Public:false}, "DataRelation_NoName", $.String, "DataRelation_NoName");

    $.Constant({Static:true , Public:false}, "DataRelation_ForeignTable", $.String, "DataRelation_ForeignTable");

    $.Constant({Static:true , Public:false}, "DataRelation_ForeignDataSet", $.String, "DataRelation_ForeignDataSet");

    $.Constant({Static:true , Public:false}, "DataRelation_GetParentRowTableMismatch", $.String, "DataRelation_GetParentRowTableMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_SetParentRowTableMismatch", $.String, "DataRelation_SetParentRowTableMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_DataSetMismatch", $.String, "DataRelation_DataSetMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_TablesInDifferentSets", $.String, "DataRelation_TablesInDifferentSets");

    $.Constant({Static:true , Public:false}, "DataRelation_AlreadyExists", $.String, "DataRelation_AlreadyExists");

    $.Constant({Static:true , Public:false}, "DataRelation_DoesNotExist", $.String, "DataRelation_DoesNotExist");

    $.Constant({Static:true , Public:false}, "DataRelation_AlreadyInOtherDataSet", $.String, "DataRelation_AlreadyInOtherDataSet");

    $.Constant({Static:true , Public:false}, "DataRelation_AlreadyInTheDataSet", $.String, "DataRelation_AlreadyInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataRelation_DuplicateName", $.String, "DataRelation_DuplicateName");

    $.Constant({Static:true , Public:false}, "DataRelation_NotInTheDataSet", $.String, "DataRelation_NotInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataRelation_OutOfRange", $.String, "DataRelation_OutOfRange");

    $.Constant({Static:true , Public:false}, "DataRelation_TableNull", $.String, "DataRelation_TableNull");

    $.Constant({Static:true , Public:false}, "DataRelation_TableWasRemoved", $.String, "DataRelation_TableWasRemoved");

    $.Constant({Static:true , Public:false}, "DataRelation_ChildTableMismatch", $.String, "DataRelation_ChildTableMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_ParentTableMismatch", $.String, "DataRelation_ParentTableMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_RelationNestedReadOnly", $.String, "DataRelation_RelationNestedReadOnly");

    $.Constant({Static:true , Public:false}, "DataRelation_TableCantBeNestedInTwoTables", $.String, "DataRelation_TableCantBeNestedInTwoTables");

    $.Constant({Static:true , Public:false}, "DataRelation_LoopInNestedRelations", $.String, "DataRelation_LoopInNestedRelations");

    $.Constant({Static:true , Public:false}, "DataRelation_CaseLocaleMismatch", $.String, "DataRelation_CaseLocaleMismatch");

    $.Constant({Static:true , Public:false}, "DataRelation_ParentOrChildColumnsDoNotHaveDataSet", $.String, "DataRelation_ParentOrChildColumnsDoNotHaveDataSet");

    $.Constant({Static:true , Public:false}, "DataRelation_InValidNestedRelation", $.String, "DataRelation_InValidNestedRelation");

    $.Constant({Static:true , Public:false}, "DataRelation_InValidNamespaceInNestedRelation", $.String, "DataRelation_InValidNamespaceInNestedRelation");

    $.Constant({Static:true , Public:false}, "DataRow_NotInTheDataSet", $.String, "DataRow_NotInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataRow_NotInTheTable", $.String, "DataRow_NotInTheTable");

    $.Constant({Static:true , Public:false}, "DataRow_ParentRowNotInTheDataSet", $.String, "DataRow_ParentRowNotInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataRow_EditInRowChanging", $.String, "DataRow_EditInRowChanging");

    $.Constant({Static:true , Public:false}, "DataRow_EndEditInRowChanging", $.String, "DataRow_EndEditInRowChanging");

    $.Constant({Static:true , Public:false}, "DataRow_BeginEditInRowChanging", $.String, "DataRow_BeginEditInRowChanging");

    $.Constant({Static:true , Public:false}, "DataRow_CancelEditInRowChanging", $.String, "DataRow_CancelEditInRowChanging");

    $.Constant({Static:true , Public:false}, "DataRow_DeleteInRowDeleting", $.String, "DataRow_DeleteInRowDeleting");

    $.Constant({Static:true , Public:false}, "DataRow_ValuesArrayLength", $.String, "DataRow_ValuesArrayLength");

    $.Constant({Static:true , Public:false}, "DataRow_NoCurrentData", $.String, "DataRow_NoCurrentData");

    $.Constant({Static:true , Public:false}, "DataRow_NoOriginalData", $.String, "DataRow_NoOriginalData");

    $.Constant({Static:true , Public:false}, "DataRow_NoProposedData", $.String, "DataRow_NoProposedData");

    $.Constant({Static:true , Public:false}, "DataRow_RemovedFromTheTable", $.String, "DataRow_RemovedFromTheTable");

    $.Constant({Static:true , Public:false}, "DataRow_DeletedRowInaccessible", $.String, "DataRow_DeletedRowInaccessible");

    $.Constant({Static:true , Public:false}, "DataRow_InvalidVersion", $.String, "DataRow_InvalidVersion");

    $.Constant({Static:true , Public:false}, "DataRow_OutOfRange", $.String, "DataRow_OutOfRange");

    $.Constant({Static:true , Public:false}, "DataRow_RowInsertOutOfRange", $.String, "DataRow_RowInsertOutOfRange");

    $.Constant({Static:true , Public:false}, "DataRow_RowInsertTwice", $.String, "DataRow_RowInsertTwice");

    $.Constant({Static:true , Public:false}, "DataRow_RowInsertMissing", $.String, "DataRow_RowInsertMissing");

    $.Constant({Static:true , Public:false}, "DataRow_RowOutOfRange", $.String, "DataRow_RowOutOfRange");

    $.Constant({Static:true , Public:false}, "DataRow_AlreadyInOtherCollection", $.String, "DataRow_AlreadyInOtherCollection");

    $.Constant({Static:true , Public:false}, "DataRow_AlreadyInTheCollection", $.String, "DataRow_AlreadyInTheCollection");

    $.Constant({Static:true , Public:false}, "DataRow_AlreadyDeleted", $.String, "DataRow_AlreadyDeleted");

    $.Constant({Static:true , Public:false}, "DataRow_Empty", $.String, "DataRow_Empty");

    $.Constant({Static:true , Public:false}, "DataRow_AlreadyRemoved", $.String, "DataRow_AlreadyRemoved");

    $.Constant({Static:true , Public:false}, "DataRow_MultipleParents", $.String, "DataRow_MultipleParents");

    $.Constant({Static:true , Public:false}, "DataRow_InvalidRowBitPattern", $.String, "DataRow_InvalidRowBitPattern");

    $.Constant({Static:true , Public:false}, "DataSet_SetNameToEmpty", $.String, "DataSet_SetNameToEmpty");

    $.Constant({Static:true , Public:false}, "DataSet_SetDataSetNameConflicting", $.String, "DataSet_SetDataSetNameConflicting");

    $.Constant({Static:true , Public:false}, "DataSet_UnsupportedSchema", $.String, "DataSet_UnsupportedSchema");

    $.Constant({Static:true , Public:false}, "DataSet_CannotChangeCaseLocale", $.String, "DataSet_CannotChangeCaseLocale");

    $.Constant({Static:true , Public:false}, "DataSet_CannotChangeSchemaSerializationMode", $.String, "DataSet_CannotChangeSchemaSerializationMode");

    $.Constant({Static:true , Public:false}, "DataTable_ForeignPrimaryKey", $.String, "DataTable_ForeignPrimaryKey");

    $.Constant({Static:true , Public:false}, "DataTable_CannotAddToSimpleContent", $.String, "DataTable_CannotAddToSimpleContent");

    $.Constant({Static:true , Public:false}, "DataTable_NoName", $.String, "DataTable_NoName");

    $.Constant({Static:true , Public:false}, "DataTable_MultipleSimpleContentColumns", $.String, "DataTable_MultipleSimpleContentColumns");

    $.Constant({Static:true , Public:false}, "DataTable_MissingPrimaryKey", $.String, "DataTable_MissingPrimaryKey");

    $.Constant({Static:true , Public:false}, "DataTable_InvalidSortString", $.String, "DataTable_InvalidSortString");

    $.Constant({Static:true , Public:false}, "DataTable_CanNotSerializeDataTableHierarchy", $.String, "DataTable_CanNotSerializeDataTableHierarchy");

    $.Constant({Static:true , Public:false}, "DataTable_CanNotRemoteDataTable", $.String, "DataTable_CanNotRemoteDataTable");

    $.Constant({Static:true , Public:false}, "DataTable_CanNotSetRemotingFormat", $.String, "DataTable_CanNotSetRemotingFormat");

    $.Constant({Static:true , Public:false}, "DataTable_CanNotSerializeDataTableWithEmptyName", $.String, "DataTable_CanNotSerializeDataTableWithEmptyName");

    $.Constant({Static:true , Public:false}, "DataTable_DuplicateName", $.String, "DataTable_DuplicateName");

    $.Constant({Static:true , Public:false}, "DataTable_DuplicateName2", $.String, "DataTable_DuplicateName2");

    $.Constant({Static:true , Public:false}, "DataTable_SelfnestedDatasetConflictingName", $.String, "DataTable_SelfnestedDatasetConflictingName");

    $.Constant({Static:true , Public:false}, "DataTable_DatasetConflictingName", $.String, "DataTable_DatasetConflictingName");

    $.Constant({Static:true , Public:false}, "DataTable_AlreadyInOtherDataSet", $.String, "DataTable_AlreadyInOtherDataSet");

    $.Constant({Static:true , Public:false}, "DataTable_AlreadyInTheDataSet", $.String, "DataTable_AlreadyInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataTable_NotInTheDataSet", $.String, "DataTable_NotInTheDataSet");

    $.Constant({Static:true , Public:false}, "DataTable_OutOfRange", $.String, "DataTable_OutOfRange");

    $.Constant({Static:true , Public:false}, "DataTable_InRelation", $.String, "DataTable_InRelation");

    $.Constant({Static:true , Public:false}, "DataTable_InConstraint", $.String, "DataTable_InConstraint");

    $.Constant({Static:true , Public:false}, "DataTable_TableNotFound", $.String, "DataTable_TableNotFound");

    $.Constant({Static:true , Public:false}, "DataMerge_MissingDefinition", $.String, "DataMerge_MissingDefinition");

    $.Constant({Static:true , Public:false}, "DataMerge_MissingConstraint", $.String, "DataMerge_MissingConstraint");

    $.Constant({Static:true , Public:false}, "DataMerge_DataTypeMismatch", $.String, "DataMerge_DataTypeMismatch");

    $.Constant({Static:true , Public:false}, "DataMerge_PrimaryKeyMismatch", $.String, "DataMerge_PrimaryKeyMismatch");

    $.Constant({Static:true , Public:false}, "DataMerge_PrimaryKeyColumnsMismatch", $.String, "DataMerge_PrimaryKeyColumnsMismatch");

    $.Constant({Static:true , Public:false}, "DataMerge_ReltionKeyColumnsMismatch", $.String, "DataMerge_ReltionKeyColumnsMismatch");

    $.Constant({Static:true , Public:false}, "DataMerge_MissingColumnDefinition", $.String, "DataMerge_MissingColumnDefinition");

    $.Constant({Static:true , Public:false}, "DataMerge_MissingPrimaryKeyColumnInSource", $.String, "DataMerge_MissingPrimaryKeyColumnInSource");

    $.Constant({Static:true , Public:false}, "DataIndex_RecordStateRange", $.String, "DataIndex_RecordStateRange");

    $.Constant({Static:true , Public:false}, "DataIndex_FindWithoutSortOrder", $.String, "DataIndex_FindWithoutSortOrder");

    $.Constant({Static:true , Public:false}, "DataIndex_KeyLength", $.String, "DataIndex_KeyLength");

    $.Constant({Static:true , Public:false}, "DataStorage_AggregateException", $.String, "DataStorage_AggregateException");

    $.Constant({Static:true , Public:false}, "DataStorage_InvalidStorageType", $.String, "DataStorage_InvalidStorageType");

    $.Constant({Static:true , Public:false}, "DataStorage_ProblematicChars", $.String, "DataStorage_ProblematicChars");

    $.Constant({Static:true , Public:false}, "DataStorage_SetInvalidDataType", $.String, "DataStorage_SetInvalidDataType");

    $.Constant({Static:true , Public:false}, "DataStorage_IComparableNotDefined", $.String, "DataStorage_IComparableNotDefined");

    $.Constant({Static:true , Public:false}, "DataView_SetFailed", $.String, "DataView_SetFailed");

    $.Constant({Static:true , Public:false}, "DataView_SetDataSetFailed", $.String, "DataView_SetDataSetFailed");

    $.Constant({Static:true , Public:false}, "DataView_SetRowStateFilter", $.String, "DataView_SetRowStateFilter");

    $.Constant({Static:true , Public:false}, "DataView_SetTable", $.String, "DataView_SetTable");

    $.Constant({Static:true , Public:false}, "DataView_CanNotSetDataSet", $.String, "DataView_CanNotSetDataSet");

    $.Constant({Static:true , Public:false}, "DataView_CanNotUseDataViewManager", $.String, "DataView_CanNotUseDataViewManager");

    $.Constant({Static:true , Public:false}, "DataView_CanNotSetTable", $.String, "DataView_CanNotSetTable");

    $.Constant({Static:true , Public:false}, "DataView_CanNotUse", $.String, "DataView_CanNotUse");

    $.Constant({Static:true , Public:false}, "DataView_CanNotBindTable", $.String, "DataView_CanNotBindTable");

    $.Constant({Static:true , Public:false}, "DataView_SetIListObject", $.String, "DataView_SetIListObject");

    $.Constant({Static:true , Public:false}, "DataView_AddNewNotAllowNull", $.String, "DataView_AddNewNotAllowNull");

    $.Constant({Static:true , Public:false}, "DataView_NotOpen", $.String, "DataView_NotOpen");

    $.Constant({Static:true , Public:false}, "DataView_CreateChildView", $.String, "DataView_CreateChildView");

    $.Constant({Static:true , Public:false}, "DataView_CanNotDelete", $.String, "DataView_CanNotDelete");

    $.Constant({Static:true , Public:false}, "DataView_CanNotEdit", $.String, "DataView_CanNotEdit");

    $.Constant({Static:true , Public:false}, "DataView_GetElementIndex", $.String, "DataView_GetElementIndex");

    $.Constant({Static:true , Public:false}, "DataView_AddExternalObject", $.String, "DataView_AddExternalObject");

    $.Constant({Static:true , Public:false}, "DataView_CanNotClear", $.String, "DataView_CanNotClear");

    $.Constant({Static:true , Public:false}, "DataView_InsertExternalObject", $.String, "DataView_InsertExternalObject");

    $.Constant({Static:true , Public:false}, "DataView_RemoveExternalObject", $.String, "DataView_RemoveExternalObject");

    $.Constant({Static:true , Public:false}, "DataROWView_PropertyNotFound", $.String, "DataROWView_PropertyNotFound");

    $.Constant({Static:true , Public:false}, "Range_Argument", $.String, "Range_Argument");

    $.Constant({Static:true , Public:false}, "Range_NullRange", $.String, "Range_NullRange");

    $.Constant({Static:true , Public:false}, "RecordManager_MinimumCapacity", $.String, "RecordManager_MinimumCapacity");

    $.Constant({Static:true , Public:false}, "CodeGen_InvalidIdentifier", $.String, "CodeGen_InvalidIdentifier");

    $.Constant({Static:true , Public:false}, "CodeGen_DuplicateTableName", $.String, "CodeGen_DuplicateTableName");

    $.Constant({Static:true , Public:false}, "CodeGen_TypeCantBeNull", $.String, "CodeGen_TypeCantBeNull");

    $.Constant({Static:true , Public:false}, "CodeGen_NoCtor0", $.String, "CodeGen_NoCtor0");

    $.Constant({Static:true , Public:false}, "CodeGen_NoCtor1", $.String, "CodeGen_NoCtor1");

    $.Constant({Static:true , Public:false}, "SqlConvert_ConvertFailed", $.String, "SqlConvert_ConvertFailed");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultDataException", $.String, "DataSet_DefaultDataException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultConstraintException", $.String, "DataSet_DefaultConstraintException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultDeletedRowInaccessibleException", $.String, "DataSet_DefaultDeletedRowInaccessibleException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultDuplicateNameException", $.String, "DataSet_DefaultDuplicateNameException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultInRowChangingEventException", $.String, "DataSet_DefaultInRowChangingEventException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultInvalidConstraintException", $.String, "DataSet_DefaultInvalidConstraintException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultMissingPrimaryKeyException", $.String, "DataSet_DefaultMissingPrimaryKeyException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultNoNullAllowedException", $.String, "DataSet_DefaultNoNullAllowedException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultReadOnlyException", $.String, "DataSet_DefaultReadOnlyException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultRowNotInTableException", $.String, "DataSet_DefaultRowNotInTableException");

    $.Constant({Static:true , Public:false}, "DataSet_DefaultVersionNotFoundException", $.String, "DataSet_DefaultVersionNotFoundException");

    $.Constant({Static:true , Public:false}, "Load_ReadOnlyDataModified", $.String, "Load_ReadOnlyDataModified");

    $.Constant({Static:true , Public:false}, "DataTableReader_InvalidDataTableReader", $.String, "DataTableReader_InvalidDataTableReader");

    $.Constant({Static:true , Public:false}, "DataTableReader_SchemaInvalidDataTableReader", $.String, "DataTableReader_SchemaInvalidDataTableReader");

    $.Constant({Static:true , Public:false}, "DataTableReader_CannotCreateDataReaderOnEmptyDataSet", $.String, "DataTableReader_CannotCreateDataReaderOnEmptyDataSet");

    $.Constant({Static:true , Public:false}, "DataTableReader_DataTableReaderArgumentIsEmpty", $.String, "DataTableReader_DataTableReaderArgumentIsEmpty");

    $.Constant({Static:true , Public:false}, "DataTableReader_ArgumentContainsNullValue", $.String, "DataTableReader_ArgumentContainsNullValue");

    $.Constant({Static:true , Public:false}, "DataTableReader_InvalidRowInDataTableReader", $.String, "DataTableReader_InvalidRowInDataTableReader");

    $.Constant({Static:true , Public:false}, "DataTableReader_DataTableCleared", $.String, "DataTableReader_DataTableCleared");

    $.Constant({Static:true , Public:false}, "RbTree_InvalidState", $.String, "RbTree_InvalidState");

    $.Constant({Static:true , Public:false}, "RbTree_EnumerationBroken", $.String, "RbTree_EnumerationBroken");

    $.Constant({Static:true , Public:false}, "NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration", $.String, "NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration");

    $.Constant({Static:true , Public:false}, "DataDom_Foliation", $.String, "DataDom_Foliation");

    $.Constant({Static:true , Public:false}, "DataDom_TableNameChange", $.String, "DataDom_TableNameChange");

    $.Constant({Static:true , Public:false}, "DataDom_TableNamespaceChange", $.String, "DataDom_TableNamespaceChange");

    $.Constant({Static:true , Public:false}, "DataDom_ColumnNameChange", $.String, "DataDom_ColumnNameChange");

    $.Constant({Static:true , Public:false}, "DataDom_ColumnNamespaceChange", $.String, "DataDom_ColumnNamespaceChange");

    $.Constant({Static:true , Public:false}, "DataDom_ColumnMappingChange", $.String, "DataDom_ColumnMappingChange");

    $.Constant({Static:true , Public:false}, "DataDom_TableColumnsChange", $.String, "DataDom_TableColumnsChange");

    $.Constant({Static:true , Public:false}, "DataDom_DataSetTablesChange", $.String, "DataDom_DataSetTablesChange");

    $.Constant({Static:true , Public:false}, "DataDom_DataSetNestedRelationsChange", $.String, "DataDom_DataSetNestedRelationsChange");

    $.Constant({Static:true , Public:false}, "DataDom_DataSetNull", $.String, "DataDom_DataSetNull");

    $.Constant({Static:true , Public:false}, "DataDom_DataSetNameChange", $.String, "DataDom_DataSetNameChange");

    $.Constant({Static:true , Public:false}, "DataDom_CloneNode", $.String, "DataDom_CloneNode");

    $.Constant({Static:true , Public:false}, "DataDom_MultipleLoad", $.String, "DataDom_MultipleLoad");

    $.Constant({Static:true , Public:false}, "DataDom_MultipleDataSet", $.String, "DataDom_MultipleDataSet");

    $.Constant({Static:true , Public:false}, "DataDom_EnforceConstraintsShouldBeOff", $.String, "DataDom_EnforceConstraintsShouldBeOff");

    $.Constant({Static:true , Public:false}, "DataDom_NotSupport_GetElementById", $.String, "DataDom_NotSupport_GetElementById");

    $.Constant({Static:true , Public:false}, "DataDom_NotSupport_EntRef", $.String, "DataDom_NotSupport_EntRef");

    $.Constant({Static:true , Public:false}, "DataDom_NotSupport_Clear", $.String, "DataDom_NotSupport_Clear");

    $.Constant({Static:true , Public:false}, "StrongTyping_CannotRemoveColumn", $.String, "StrongTyping_CannotRemoveColumn");

    $.Constant({Static:true , Public:false}, "StrongTyping_CananotRemoveRelation", $.String, "StrongTyping_CananotRemoveRelation");

    $.Constant({Static:true , Public:false}, "propertyChangedEventDescr", $.String, "propertyChangedEventDescr");

    $.Constant({Static:true , Public:false}, "collectionChangedEventDescr", $.String, "collectionChangedEventDescr");

    $.Constant({Static:true , Public:false}, "StrongTyping_CananotAccessDBNull", $.String, "StrongTyping_CananotAccessDBNull");

    $.Constant({Static:true , Public:false}, "ADP_PropertyNotSupported", $.String, "ADP_PropertyNotSupported");

    $.Constant({Static:true , Public:false}, "ConfigProviderNotFound", $.String, "ConfigProviderNotFound");

    $.Constant({Static:true , Public:false}, "ConfigProviderInvalid", $.String, "ConfigProviderInvalid");

    $.Constant({Static:true , Public:false}, "ConfigProviderNotInstalled", $.String, "ConfigProviderNotInstalled");

    $.Constant({Static:true , Public:false}, "ConfigProviderMissing", $.String, "ConfigProviderMissing");

    $.Constant({Static:true , Public:false}, "ConfigBaseElementsOnly", $.String, "ConfigBaseElementsOnly");

    $.Constant({Static:true , Public:false}, "ConfigBaseNoChildNodes", $.String, "ConfigBaseNoChildNodes");

    $.Constant({Static:true , Public:false}, "ConfigUnrecognizedAttributes", $.String, "ConfigUnrecognizedAttributes");

    $.Constant({Static:true , Public:false}, "ConfigUnrecognizedElement", $.String, "ConfigUnrecognizedElement");

    $.Constant({Static:true , Public:false}, "ConfigSectionsUnique", $.String, "ConfigSectionsUnique");

    $.Constant({Static:true , Public:false}, "ConfigRequiredAttributeMissing", $.String, "ConfigRequiredAttributeMissing");

    $.Constant({Static:true , Public:false}, "ConfigRequiredAttributeEmpty", $.String, "ConfigRequiredAttributeEmpty");

    $.Constant({Static:true , Public:false}, "ADP_EmptyArray", $.String, "ADP_EmptyArray");

    $.Constant({Static:true , Public:false}, "ADP_SingleValuedProperty", $.String, "ADP_SingleValuedProperty");

    $.Constant({Static:true , Public:false}, "ADP_DoubleValuedProperty", $.String, "ADP_DoubleValuedProperty");

    $.Constant({Static:true , Public:false}, "ADP_InvalidPrefixSuffix", $.String, "ADP_InvalidPrefixSuffix");

    $.Constant({Static:true , Public:false}, "ADP_InvalidArgumentLength", $.String, "ADP_InvalidArgumentLength");

    $.Constant({Static:true , Public:false}, "SQL_WrongType", $.String, "SQL_WrongType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidConnectionOptionValue", $.String, "ADP_InvalidConnectionOptionValue");

    $.Constant({Static:true , Public:false}, "ADP_MissingConnectionOptionValue", $.String, "ADP_MissingConnectionOptionValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidConnectionOptionValueLength", $.String, "ADP_InvalidConnectionOptionValueLength");

    $.Constant({Static:true , Public:false}, "ADP_KeywordNotSupported", $.String, "ADP_KeywordNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_UdlFileError", $.String, "ADP_UdlFileError");

    $.Constant({Static:true , Public:false}, "ADP_InvalidUDL", $.String, "ADP_InvalidUDL");

    $.Constant({Static:true , Public:false}, "ADP_InternalProviderError", $.String, "ADP_InternalProviderError");

    $.Constant({Static:true , Public:false}, "ADP_NoQuoteChange", $.String, "ADP_NoQuoteChange");

    $.Constant({Static:true , Public:false}, "ADP_MissingSourceCommand", $.String, "ADP_MissingSourceCommand");

    $.Constant({Static:true , Public:false}, "ADP_MissingSourceCommandConnection", $.String, "ADP_MissingSourceCommandConnection");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMultipartName", $.String, "ADP_InvalidMultipartName");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMultipartNameQuoteUsage", $.String, "ADP_InvalidMultipartNameQuoteUsage");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMultipartNameToManyParts", $.String, "ADP_InvalidMultipartNameToManyParts");

    $.Constant({Static:true , Public:false}, "SQL_BulkCopyDestinationTableName", $.String, "SQL_BulkCopyDestinationTableName");

    $.Constant({Static:true , Public:false}, "SQL_TDSParserTableName", $.String, "SQL_TDSParserTableName");

    $.Constant({Static:true , Public:false}, "SQL_UDTTypeName", $.String, "SQL_UDTTypeName");

    $.Constant({Static:true , Public:false}, "SQL_TypeName", $.String, "SQL_TypeName");

    $.Constant({Static:true , Public:false}, "SQL_SqlCommandCommandText", $.String, "SQL_SqlCommandCommandText");

    $.Constant({Static:true , Public:false}, "ODBC_ODBCCommandText", $.String, "ODBC_ODBCCommandText");

    $.Constant({Static:true , Public:false}, "OLEDB_OLEDBCommandText", $.String, "OLEDB_OLEDBCommandText");

    $.Constant({Static:true , Public:false}, "SQLMSF_FailoverPartnerNotSupported", $.String, "SQLMSF_FailoverPartnerNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_ColumnSchemaExpression", $.String, "ADP_ColumnSchemaExpression");

    $.Constant({Static:true , Public:false}, "ADP_ColumnSchemaMismatch", $.String, "ADP_ColumnSchemaMismatch");

    $.Constant({Static:true , Public:false}, "ADP_ColumnSchemaMissing1", $.String, "ADP_ColumnSchemaMissing1");

    $.Constant({Static:true , Public:false}, "ADP_ColumnSchemaMissing2", $.String, "ADP_ColumnSchemaMissing2");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSourceColumn", $.String, "ADP_InvalidSourceColumn");

    $.Constant({Static:true , Public:false}, "ADP_MissingColumnMapping", $.String, "ADP_MissingColumnMapping");

    $.Constant({Static:true , Public:false}, "ADP_NotSupportedEnumerationValue", $.String, "ADP_NotSupportedEnumerationValue");

    $.Constant({Static:true , Public:false}, "ODBC_NotSupportedEnumerationValue", $.String, "ODBC_NotSupportedEnumerationValue");

    $.Constant({Static:true , Public:false}, "OLEDB_NotSupportedEnumerationValue", $.String, "OLEDB_NotSupportedEnumerationValue");

    $.Constant({Static:true , Public:false}, "SQL_NotSupportedEnumerationValue", $.String, "SQL_NotSupportedEnumerationValue");

    $.Constant({Static:true , Public:false}, "ADP_ComputerNameEx", $.String, "ADP_ComputerNameEx");

    $.Constant({Static:true , Public:false}, "ADP_MissingTableSchema", $.String, "ADP_MissingTableSchema");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSourceTable", $.String, "ADP_InvalidSourceTable");

    $.Constant({Static:true , Public:false}, "ADP_MissingTableMapping", $.String, "ADP_MissingTableMapping");

    $.Constant({Static:true , Public:false}, "ADP_CommandTextRequired", $.String, "ADP_CommandTextRequired");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired", $.String, "ADP_ConnectionRequired");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired", $.String, "ADP_OpenConnectionRequired");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Fill", $.String, "ADP_ConnectionRequired_Fill");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_FillPage", $.String, "ADP_ConnectionRequired_FillPage");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_FillSchema", $.String, "ADP_ConnectionRequired_FillSchema");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Insert", $.String, "ADP_ConnectionRequired_Insert");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Update", $.String, "ADP_ConnectionRequired_Update");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Delete", $.String, "ADP_ConnectionRequired_Delete");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Batch", $.String, "ADP_ConnectionRequired_Batch");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired_Clone", $.String, "ADP_ConnectionRequired_Clone");

    $.Constant({Static:true , Public:false}, "ADP_ConnecitonRequired_UpdateRows", $.String, "ADP_ConnecitonRequired_UpdateRows");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired_Insert", $.String, "ADP_OpenConnectionRequired_Insert");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired_Update", $.String, "ADP_OpenConnectionRequired_Update");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired_Delete", $.String, "ADP_OpenConnectionRequired_Delete");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired_Clone", $.String, "ADP_OpenConnectionRequired_Clone");

    $.Constant({Static:true , Public:false}, "ADP_NoStoredProcedureExists", $.String, "ADP_NoStoredProcedureExists");

    $.Constant({Static:true , Public:false}, "ADP_TransactionCompleted", $.String, "ADP_TransactionCompleted");

    $.Constant({Static:true , Public:false}, "ADP_TransactionConnectionMismatch", $.String, "ADP_TransactionConnectionMismatch");

    $.Constant({Static:true , Public:false}, "ADP_TransactionCompletedButNotDisposed", $.String, "ADP_TransactionCompletedButNotDisposed");

    $.Constant({Static:true , Public:false}, "ADP_TransactionRequired", $.String, "ADP_TransactionRequired");

    $.Constant({Static:true , Public:false}, "ADP_OpenResultSetExists", $.String, "ADP_OpenResultSetExists");

    $.Constant({Static:true , Public:false}, "ADP_OpenReaderExists", $.String, "ADP_OpenReaderExists");

    $.Constant({Static:true , Public:false}, "ADP_DeriveParametersNotSupported", $.String, "ADP_DeriveParametersNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_CalledTwice", $.String, "ADP_CalledTwice");

    $.Constant({Static:true , Public:false}, "ADP_IncorrectAsyncResult", $.String, "ADP_IncorrectAsyncResult");

    $.Constant({Static:true , Public:false}, "ADP_MissingSelectCommand", $.String, "ADP_MissingSelectCommand");

    $.Constant({Static:true , Public:false}, "ADP_UnwantedStatementType", $.String, "ADP_UnwantedStatementType");

    $.Constant({Static:true , Public:false}, "ADP_FillSchemaRequiresSourceTableName", $.String, "ADP_FillSchemaRequiresSourceTableName");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMaxRecords", $.String, "ADP_InvalidMaxRecords");

    $.Constant({Static:true , Public:false}, "ADP_InvalidStartRecord", $.String, "ADP_InvalidStartRecord");

    $.Constant({Static:true , Public:false}, "ADP_FillRequiresSourceTableName", $.String, "ADP_FillRequiresSourceTableName");

    $.Constant({Static:true , Public:false}, "ADP_FillChapterAutoIncrement", $.String, "ADP_FillChapterAutoIncrement");

    $.Constant({Static:true , Public:false}, "ADP_MissingDataReaderFieldType", $.String, "ADP_MissingDataReaderFieldType");

    $.Constant({Static:true , Public:false}, "ADP_OnlyOneTableForStartRecordOrMaxRecords", $.String, "ADP_OnlyOneTableForStartRecordOrMaxRecords");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresSourceTable", $.String, "ADP_UpdateRequiresSourceTable");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresSourceTableName", $.String, "ADP_UpdateRequiresSourceTableName");

    $.Constant({Static:true , Public:false}, "ADP_MissingTableMappingDestination", $.String, "ADP_MissingTableMappingDestination");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresCommandClone", $.String, "ADP_UpdateRequiresCommandClone");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresCommandSelect", $.String, "ADP_UpdateRequiresCommandSelect");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresCommandInsert", $.String, "ADP_UpdateRequiresCommandInsert");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresCommandUpdate", $.String, "ADP_UpdateRequiresCommandUpdate");

    $.Constant({Static:true , Public:false}, "ADP_UpdateRequiresCommandDelete", $.String, "ADP_UpdateRequiresCommandDelete");

    $.Constant({Static:true , Public:false}, "ADP_UpdateMismatchRowTable", $.String, "ADP_UpdateMismatchRowTable");

    $.Constant({Static:true , Public:false}, "ADP_RowUpdatedErrors", $.String, "ADP_RowUpdatedErrors");

    $.Constant({Static:true , Public:false}, "ADP_RowUpdatingErrors", $.String, "ADP_RowUpdatingErrors");

    $.Constant({Static:true , Public:false}, "ADP_ResultsNotAllowedDuringBatch", $.String, "ADP_ResultsNotAllowedDuringBatch");

    $.Constant({Static:true , Public:false}, "ADP_UpdateConcurrencyViolation_Update", $.String, "ADP_UpdateConcurrencyViolation_Update");

    $.Constant({Static:true , Public:false}, "ADP_UpdateConcurrencyViolation_Delete", $.String, "ADP_UpdateConcurrencyViolation_Delete");

    $.Constant({Static:true , Public:false}, "ADP_UpdateConcurrencyViolation_Batch", $.String, "ADP_UpdateConcurrencyViolation_Batch");

    $.Constant({Static:true , Public:false}, "ADP_InvalidCommandTimeout", $.String, "ADP_InvalidCommandTimeout");

    $.Constant({Static:true , Public:false}, "ADP_UninitializedParameterSize", $.String, "ADP_UninitializedParameterSize");

    $.Constant({Static:true , Public:false}, "ADP_PrepareParameterType", $.String, "ADP_PrepareParameterType");

    $.Constant({Static:true , Public:false}, "ADP_PrepareParameterSize", $.String, "ADP_PrepareParameterSize");

    $.Constant({Static:true , Public:false}, "ADP_PrepareParameterScale", $.String, "ADP_PrepareParameterScale");

    $.Constant({Static:true , Public:false}, "ADP_MismatchedAsyncResult", $.String, "ADP_MismatchedAsyncResult");

    $.Constant({Static:true , Public:false}, "ADP_ClosedConnectionError", $.String, "ADP_ClosedConnectionError");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionIsDisabled", $.String, "ADP_ConnectionIsDisabled");

    $.Constant({Static:true , Public:false}, "ADP_LocalTransactionPresent", $.String, "ADP_LocalTransactionPresent");

    $.Constant({Static:true , Public:false}, "ADP_TransactionPresent", $.String, "ADP_TransactionPresent");

    $.Constant({Static:true , Public:false}, "ADP_EmptyDatabaseName", $.String, "ADP_EmptyDatabaseName");

    $.Constant({Static:true , Public:false}, "ADP_DatabaseNameTooLong", $.String, "ADP_DatabaseNameTooLong");

    $.Constant({Static:true , Public:false}, "ADP_InvalidConnectTimeoutValue", $.String, "ADP_InvalidConnectTimeoutValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSourceBufferIndex", $.String, "ADP_InvalidSourceBufferIndex");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDestinationBufferIndex", $.String, "ADP_InvalidDestinationBufferIndex");

    $.Constant({Static:true , Public:false}, "ADP_DataReaderNoData", $.String, "ADP_DataReaderNoData");

    $.Constant({Static:true , Public:false}, "ADP_NumericToDecimalOverflow", $.String, "ADP_NumericToDecimalOverflow");

    $.Constant({Static:true , Public:false}, "ADP_StreamClosed", $.String, "ADP_StreamClosed");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSeekOrigin", $.String, "ADP_InvalidSeekOrigin");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLJoinUnsupported", $.String, "ADP_DynamicSQLJoinUnsupported");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNoTableInfo", $.String, "ADP_DynamicSQLNoTableInfo");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNoKeyInfoDelete", $.String, "ADP_DynamicSQLNoKeyInfoDelete");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNoKeyInfoUpdate", $.String, "ADP_DynamicSQLNoKeyInfoUpdate");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNoKeyInfoRowVersionDelete", $.String, "ADP_DynamicSQLNoKeyInfoRowVersionDelete");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNoKeyInfoRowVersionUpdate", $.String, "ADP_DynamicSQLNoKeyInfoRowVersionUpdate");

    $.Constant({Static:true , Public:false}, "ADP_DynamicSQLNestedQuote", $.String, "ADP_DynamicSQLNestedQuote");

    $.Constant({Static:true , Public:false}, "ADP_NonSequentialColumnAccess", $.String, "ADP_NonSequentialColumnAccess");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDateTimeDigits", $.String, "ADP_InvalidDateTimeDigits");

    $.Constant({Static:true , Public:false}, "ADP_InvalidFormatValue", $.String, "ADP_InvalidFormatValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMaximumScale", $.String, "ADP_InvalidMaximumScale");

    $.Constant({Static:true , Public:false}, "ADP_LiteralValueIsInvalid", $.String, "ADP_LiteralValueIsInvalid");

    $.Constant({Static:true , Public:false}, "ADP_EvenLengthLiteralValue", $.String, "ADP_EvenLengthLiteralValue");

    $.Constant({Static:true , Public:false}, "ADP_HexDigitLiteralValue", $.String, "ADP_HexDigitLiteralValue");

    $.Constant({Static:true , Public:false}, "ADP_QuotePrefixNotSet", $.String, "ADP_QuotePrefixNotSet");

    $.Constant({Static:true , Public:false}, "ADP_UnableToCreateBooleanLiteral", $.String, "ADP_UnableToCreateBooleanLiteral");

    $.Constant({Static:true , Public:false}, "ADP_UnsupportedNativeDataTypeOleDb", $.String, "ADP_UnsupportedNativeDataTypeOleDb");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataType", $.String, "ADP_InvalidDataType");

    $.Constant({Static:true , Public:false}, "ADP_UnknownDataType", $.String, "ADP_UnknownDataType");

    $.Constant({Static:true , Public:false}, "ADP_UnknownDataTypeCode", $.String, "ADP_UnknownDataTypeCode");

    $.Constant({Static:true , Public:false}, "ADP_DbTypeNotSupported", $.String, "ADP_DbTypeNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_VersionDoesNotSupportDataType", $.String, "ADP_VersionDoesNotSupportDataType");

    $.Constant({Static:true , Public:false}, "ADP_ParameterValueOutOfRange", $.String, "ADP_ParameterValueOutOfRange");

    $.Constant({Static:true , Public:false}, "ADP_BadParameterName", $.String, "ADP_BadParameterName");

    $.Constant({Static:true , Public:false}, "ADP_MultipleReturnValue", $.String, "ADP_MultipleReturnValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSizeValue", $.String, "ADP_InvalidSizeValue");

    $.Constant({Static:true , Public:false}, "ADP_NegativeParameter", $.String, "ADP_NegativeParameter");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMetaDataValue", $.String, "ADP_InvalidMetaDataValue");

    $.Constant({Static:true , Public:false}, "ADP_NotRowType", $.String, "ADP_NotRowType");

    $.Constant({Static:true , Public:false}, "ADP_ParameterConversionFailed", $.String, "ADP_ParameterConversionFailed");

    $.Constant({Static:true , Public:false}, "ADP_ParallelTransactionsNotSupported", $.String, "ADP_ParallelTransactionsNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_TransactionZombied", $.String, "ADP_TransactionZombied");

    $.Constant({Static:true , Public:false}, "ADP_DbRecordReadOnly", $.String, "ADP_DbRecordReadOnly");

    $.Constant({Static:true , Public:false}, "ADP_DbDataUpdatableRecordReadOnly", $.String, "ADP_DbDataUpdatableRecordReadOnly");

    $.Constant({Static:true , Public:false}, "ADP_InvalidImplicitConversion", $.String, "ADP_InvalidImplicitConversion");

    $.Constant({Static:true , Public:false}, "ADP_InvalidBufferSizeOrIndex", $.String, "ADP_InvalidBufferSizeOrIndex");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataLength", $.String, "ADP_InvalidDataLength");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataLength2", $.String, "ADP_InvalidDataLength2");

    $.Constant({Static:true , Public:false}, "ADP_NonSeqByteAccess", $.String, "ADP_NonSeqByteAccess");

    $.Constant({Static:true , Public:false}, "ADP_OffsetOutOfRangeException", $.String, "ADP_OffsetOutOfRangeException");

    $.Constant({Static:true , Public:false}, "ODBC_GetSchemaRestrictionRequired", $.String, "ODBC_GetSchemaRestrictionRequired");

    $.Constant({Static:true , Public:false}, "ADP_InvalidArgumentValue", $.String, "ADP_InvalidArgumentValue");

    $.Constant({Static:true , Public:false}, "ADP_OdbcNoTypesFromProvider", $.String, "ADP_OdbcNoTypesFromProvider");

    $.Constant({Static:true , Public:false}, "ADP_NullDataTable", $.String, "ADP_NullDataTable");

    $.Constant({Static:true , Public:false}, "ADP_NullDataSet", $.String, "ADP_NullDataSet");

    $.Constant({Static:true , Public:false}, "OdbcConnection_ConnectionStringTooLong", $.String, "OdbcConnection_ConnectionStringTooLong");

    $.Constant({Static:true , Public:false}, "Odbc_GetTypeMapping_UnknownType", $.String, "Odbc_GetTypeMapping_UnknownType");

    $.Constant({Static:true , Public:false}, "Odbc_UnknownSQLType", $.String, "Odbc_UnknownSQLType");

    $.Constant({Static:true , Public:false}, "Odbc_UnknownURTType", $.String, "Odbc_UnknownURTType");

    $.Constant({Static:true , Public:false}, "Odbc_NegativeArgument", $.String, "Odbc_NegativeArgument");

    $.Constant({Static:true , Public:false}, "Odbc_CantSetPropertyOnOpenConnection", $.String, "Odbc_CantSetPropertyOnOpenConnection");

    $.Constant({Static:true , Public:false}, "Odbc_NoMappingForSqlTransactionLevel", $.String, "Odbc_NoMappingForSqlTransactionLevel");

    $.Constant({Static:true , Public:false}, "Odbc_CantEnableConnectionpooling", $.String, "Odbc_CantEnableConnectionpooling");

    $.Constant({Static:true , Public:false}, "Odbc_CantAllocateEnvironmentHandle", $.String, "Odbc_CantAllocateEnvironmentHandle");

    $.Constant({Static:true , Public:false}, "Odbc_FailedToGetDescriptorHandle", $.String, "Odbc_FailedToGetDescriptorHandle");

    $.Constant({Static:true , Public:false}, "Odbc_NotInTransaction", $.String, "Odbc_NotInTransaction");

    $.Constant({Static:true , Public:false}, "Odbc_UnknownOdbcType", $.String, "Odbc_UnknownOdbcType");

    $.Constant({Static:true , Public:false}, "Odbc_NullData", $.String, "Odbc_NullData");

    $.Constant({Static:true , Public:false}, "Odbc_ExceptionMessage", $.String, "Odbc_ExceptionMessage");

    $.Constant({Static:true , Public:false}, "Odbc_ExceptionNoInfoMsg", $.String, "Odbc_ExceptionNoInfoMsg");

    $.Constant({Static:true , Public:false}, "Odbc_ConnectionClosed", $.String, "Odbc_ConnectionClosed");

    $.Constant({Static:true , Public:false}, "Odbc_OpenConnectionNoOwner", $.String, "Odbc_OpenConnectionNoOwner");

    $.Constant({Static:true , Public:false}, "Odbc_MDACWrongVersion", $.String, "Odbc_MDACWrongVersion");

    $.Constant({Static:true , Public:false}, "OleDb_MDACWrongVersion", $.String, "OleDb_MDACWrongVersion");

    $.Constant({Static:true , Public:false}, "OleDb_SchemaRowsetsNotSupported", $.String, "OleDb_SchemaRowsetsNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_NoErrorInformation2", $.String, "OleDb_NoErrorInformation2");

    $.Constant({Static:true , Public:false}, "OleDb_NoErrorInformation", $.String, "OleDb_NoErrorInformation");

    $.Constant({Static:true , Public:false}, "OleDb_MDACNotAvailable", $.String, "OleDb_MDACNotAvailable");

    $.Constant({Static:true , Public:false}, "OleDb_MSDASQLNotSupported", $.String, "OleDb_MSDASQLNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_PossiblePromptNotUserInteractive", $.String, "OleDb_PossiblePromptNotUserInteractive");

    $.Constant({Static:true , Public:false}, "OleDb_ProviderUnavailable", $.String, "OleDb_ProviderUnavailable");

    $.Constant({Static:true , Public:false}, "OleDb_CommandTextNotSupported", $.String, "OleDb_CommandTextNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_TransactionsNotSupported", $.String, "OleDb_TransactionsNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_ConnectionStringSyntax", $.String, "OleDb_ConnectionStringSyntax");

    $.Constant({Static:true , Public:false}, "OleDb_AsynchronousNotSupported", $.String, "OleDb_AsynchronousNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_NoProviderSpecified", $.String, "OleDb_NoProviderSpecified");

    $.Constant({Static:true , Public:false}, "OleDb_InvalidProviderSpecified", $.String, "OleDb_InvalidProviderSpecified");

    $.Constant({Static:true , Public:false}, "OleDb_InvalidRestrictionsDbInfoKeywords", $.String, "OleDb_InvalidRestrictionsDbInfoKeywords");

    $.Constant({Static:true , Public:false}, "OleDb_InvalidRestrictionsDbInfoLiteral", $.String, "OleDb_InvalidRestrictionsDbInfoLiteral");

    $.Constant({Static:true , Public:false}, "OleDb_InvalidRestrictionsSchemaGuids", $.String, "OleDb_InvalidRestrictionsSchemaGuids");

    $.Constant({Static:true , Public:false}, "OleDb_NotSupportedSchemaTable", $.String, "OleDb_NotSupportedSchemaTable");

    $.Constant({Static:true , Public:false}, "OleDb_ConfigWrongNumberOfValues", $.String, "OleDb_ConfigWrongNumberOfValues");

    $.Constant({Static:true , Public:false}, "OleDb_ConfigUnableToLoadXmlMetaDataFile", $.String, "OleDb_ConfigUnableToLoadXmlMetaDataFile");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterBadAccessor", $.String, "OleDb_CommandParameterBadAccessor");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterCantConvertValue", $.String, "OleDb_CommandParameterCantConvertValue");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterSignMismatch", $.String, "OleDb_CommandParameterSignMismatch");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterDataOverflow", $.String, "OleDb_CommandParameterDataOverflow");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterUnavailable", $.String, "OleDb_CommandParameterUnavailable");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterDefault", $.String, "OleDb_CommandParameterDefault");

    $.Constant({Static:true , Public:false}, "OleDb_CommandParameterError", $.String, "OleDb_CommandParameterError");

    $.Constant({Static:true , Public:false}, "OleDb_BadStatus_ParamAcc", $.String, "OleDb_BadStatus_ParamAcc");

    $.Constant({Static:true , Public:false}, "OleDb_UninitializedParameters", $.String, "OleDb_UninitializedParameters");

    $.Constant({Static:true , Public:false}, "OleDb_NoProviderSupportForParameters", $.String, "OleDb_NoProviderSupportForParameters");

    $.Constant({Static:true , Public:false}, "OleDb_NoProviderSupportForSProcResetParameters", $.String, "OleDb_NoProviderSupportForSProcResetParameters");

    $.Constant({Static:true , Public:false}, "OleDb_CanNotDetermineDecimalSeparator", $.String, "OleDb_CanNotDetermineDecimalSeparator");

    $.Constant({Static:true , Public:false}, "OleDb_Fill_NotADODB", $.String, "OleDb_Fill_NotADODB");

    $.Constant({Static:true , Public:false}, "OleDb_Fill_EmptyRecordSet", $.String, "OleDb_Fill_EmptyRecordSet");

    $.Constant({Static:true , Public:false}, "OleDb_Fill_EmptyRecord", $.String, "OleDb_Fill_EmptyRecord");

    $.Constant({Static:true , Public:false}, "OleDb_ISourcesRowsetNotSupported", $.String, "OleDb_ISourcesRowsetNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_IDBInfoNotSupported", $.String, "OleDb_IDBInfoNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyNotSupported", $.String, "OleDb_PropertyNotSupported");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyBadValue", $.String, "OleDb_PropertyBadValue");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyBadOption", $.String, "OleDb_PropertyBadOption");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyBadColumn", $.String, "OleDb_PropertyBadColumn");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyNotAllSettable", $.String, "OleDb_PropertyNotAllSettable");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyNotSettable", $.String, "OleDb_PropertyNotSettable");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyNotSet", $.String, "OleDb_PropertyNotSet");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyConflicting", $.String, "OleDb_PropertyConflicting");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyNotAvailable", $.String, "OleDb_PropertyNotAvailable");

    $.Constant({Static:true , Public:false}, "OleDb_PropertyStatusUnknown", $.String, "OleDb_PropertyStatusUnknown");

    $.Constant({Static:true , Public:false}, "OleDb_BadAccessor", $.String, "OleDb_BadAccessor");

    $.Constant({Static:true , Public:false}, "OleDb_BadStatusRowAccessor", $.String, "OleDb_BadStatusRowAccessor");

    $.Constant({Static:true , Public:false}, "OleDb_CantConvertValue", $.String, "OleDb_CantConvertValue");

    $.Constant({Static:true , Public:false}, "OleDb_CantCreate", $.String, "OleDb_CantCreate");

    $.Constant({Static:true , Public:false}, "OleDb_DataOverflow", $.String, "OleDb_DataOverflow");

    $.Constant({Static:true , Public:false}, "OleDb_GVtUnknown", $.String, "OleDb_GVtUnknown");

    $.Constant({Static:true , Public:false}, "OleDb_SignMismatch", $.String, "OleDb_SignMismatch");

    $.Constant({Static:true , Public:false}, "OleDb_SVtUnknown", $.String, "OleDb_SVtUnknown");

    $.Constant({Static:true , Public:false}, "OleDb_Unavailable", $.String, "OleDb_Unavailable");

    $.Constant({Static:true , Public:false}, "OleDb_UnexpectedStatusValue", $.String, "OleDb_UnexpectedStatusValue");

    $.Constant({Static:true , Public:false}, "OleDb_ThreadApartmentState", $.String, "OleDb_ThreadApartmentState");

    $.Constant({Static:true , Public:false}, "OleDb_NoErrorMessage", $.String, "OleDb_NoErrorMessage");

    $.Constant({Static:true , Public:false}, "OleDb_FailedGetDescription", $.String, "OleDb_FailedGetDescription");

    $.Constant({Static:true , Public:false}, "OleDb_FailedGetSource", $.String, "OleDb_FailedGetSource");

    $.Constant({Static:true , Public:false}, "OleDb_DBBindingGetVector", $.String, "OleDb_DBBindingGetVector");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMinMaxPoolSizeValues", $.String, "ADP_InvalidMinMaxPoolSizeValues");

    $.Constant({Static:true , Public:false}, "ADP_ObsoleteKeyword", $.String, "ADP_ObsoleteKeyword");

    $.Constant({Static:true , Public:false}, "SQL_CannotGetDTCAddress", $.String, "SQL_CannotGetDTCAddress");

    $.Constant({Static:true , Public:false}, "SQL_InvalidOptionLength", $.String, "SQL_InvalidOptionLength");

    $.Constant({Static:true , Public:false}, "SQL_InvalidPacketSizeValue", $.String, "SQL_InvalidPacketSizeValue");

    $.Constant({Static:true , Public:false}, "SQL_NullEmptyTransactionName", $.String, "SQL_NullEmptyTransactionName");

    $.Constant({Static:true , Public:false}, "SQL_SnapshotNotSupported", $.String, "SQL_SnapshotNotSupported");

    $.Constant({Static:true , Public:false}, "SQL_UserInstanceFailoverNotCompatible", $.String, "SQL_UserInstanceFailoverNotCompatible");

    $.Constant({Static:true , Public:false}, "SQL_AuthenticationAndIntegratedSecurity", $.String, "SQL_AuthenticationAndIntegratedSecurity");

    $.Constant({Static:true , Public:false}, "SQL_IntegratedWithUserIDAndPassword", $.String, "SQL_IntegratedWithUserIDAndPassword");

    $.Constant({Static:true , Public:false}, "SQL_SettingIntegratedWithCredential", $.String, "SQL_SettingIntegratedWithCredential");

    $.Constant({Static:true , Public:false}, "SQL_SettingCredentialWithIntegrated", $.String, "SQL_SettingCredentialWithIntegrated");

    $.Constant({Static:true , Public:false}, "SQL_EncryptionNotSupportedByClient", $.String, "SQL_EncryptionNotSupportedByClient");

    $.Constant({Static:true , Public:false}, "SQL_EncryptionNotSupportedByServer", $.String, "SQL_EncryptionNotSupportedByServer");

    $.Constant({Static:true , Public:false}, "SQL_InvalidSQLServerVersionUnknown", $.String, "SQL_InvalidSQLServerVersionUnknown");

    $.Constant({Static:true , Public:false}, "SQL_CannotModifyPropertyAsyncOperationInProgress", $.String, "SQL_CannotModifyPropertyAsyncOperationInProgress");

    $.Constant({Static:true , Public:false}, "SQL_AsyncConnectionRequired", $.String, "SQL_AsyncConnectionRequired");

    $.Constant({Static:true , Public:false}, "SQL_FatalTimeout", $.String, "SQL_FatalTimeout");

    $.Constant({Static:true , Public:false}, "SQL_InstanceFailure", $.String, "SQL_InstanceFailure");

    $.Constant({Static:true , Public:false}, "SQL_CredentialsNotProvided", $.String, "SQL_CredentialsNotProvided");

    $.Constant({Static:true , Public:false}, "SQL_ChangePasswordArgumentMissing", $.String, "SQL_ChangePasswordArgumentMissing");

    $.Constant({Static:true , Public:false}, "SQL_ChangePasswordConflictsWithSSPI", $.String, "SQL_ChangePasswordConflictsWithSSPI");

    $.Constant({Static:true , Public:false}, "SQL_ChangePasswordUseOfUnallowedKey", $.String, "SQL_ChangePasswordUseOfUnallowedKey");

    $.Constant({Static:true , Public:false}, "SQL_UnknownSysTxIsolationLevel", $.String, "SQL_UnknownSysTxIsolationLevel");

    $.Constant({Static:true , Public:false}, "SQL_InvalidPartnerConfiguration", $.String, "SQL_InvalidPartnerConfiguration");

    $.Constant({Static:true , Public:false}, "SQL_MarsUnsupportedOnConnection", $.String, "SQL_MarsUnsupportedOnConnection");

    $.Constant({Static:true , Public:false}, "SQL_ADALFailure", $.String, "SQL_ADALFailure");

    $.Constant({Static:true , Public:false}, "SQL_ADALInnerException", $.String, "SQL_ADALInnerException");

    $.Constant({Static:true , Public:false}, "SQL_ChangePasswordRequiresYukon", $.String, "SQL_ChangePasswordRequiresYukon");

    $.Constant({Static:true , Public:false}, "SQL_NonLocalSSEInstance", $.String, "SQL_NonLocalSSEInstance");

    $.Constant({Static:true , Public:false}, "SQL_AsyncOperationCompleted", $.String, "SQL_AsyncOperationCompleted");

    $.Constant({Static:true , Public:false}, "SQL_PendingBeginXXXExists", $.String, "SQL_PendingBeginXXXExists");

    $.Constant({Static:true , Public:false}, "SQL_NonXmlResult", $.String, "SQL_NonXmlResult");

    $.Constant({Static:true , Public:false}, "SQL_NotificationsRequireYukon", $.String, "SQL_NotificationsRequireYukon");

    $.Constant({Static:true , Public:false}, "SQL_InvalidUdt3PartNameFormat", $.String, "SQL_InvalidUdt3PartNameFormat");

    $.Constant({Static:true , Public:false}, "SQL_InvalidParameterTypeNameFormat", $.String, "SQL_InvalidParameterTypeNameFormat");

    $.Constant({Static:true , Public:false}, "SQL_InvalidParameterNameLength", $.String, "SQL_InvalidParameterNameLength");

    $.Constant({Static:true , Public:false}, "SQL_PrecisionValueOutOfRange", $.String, "SQL_PrecisionValueOutOfRange");

    $.Constant({Static:true , Public:false}, "SQL_ScaleValueOutOfRange", $.String, "SQL_ScaleValueOutOfRange");

    $.Constant({Static:true , Public:false}, "SQL_TimeScaleValueOutOfRange", $.String, "SQL_TimeScaleValueOutOfRange");

    $.Constant({Static:true , Public:false}, "SQL_ParameterInvalidVariant", $.String, "SQL_ParameterInvalidVariant");

    $.Constant({Static:true , Public:false}, "SQL_ParameterTypeNameRequired", $.String, "SQL_ParameterTypeNameRequired");

    $.Constant({Static:true , Public:false}, "SQL_ADALInitializeError", $.String, "SQL_ADALInitializeError");

    $.Constant({Static:true , Public:false}, "SQL_InvalidInternalPacketSize", $.String, "SQL_InvalidInternalPacketSize");

    $.Constant({Static:true , Public:false}, "SQL_InvalidTDSVersion", $.String, "SQL_InvalidTDSVersion");

    $.Constant({Static:true , Public:false}, "SQL_InvalidTDSPacketSize", $.String, "SQL_InvalidTDSPacketSize");

    $.Constant({Static:true , Public:false}, "SQL_ParsingError", $.String, "SQL_ParsingError");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorWithState", $.String, "SQL_ParsingErrorWithState");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorValue", $.String, "SQL_ParsingErrorValue");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorOffset", $.String, "SQL_ParsingErrorOffset");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorFeatureId", $.String, "SQL_ParsingErrorFeatureId");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorToken", $.String, "SQL_ParsingErrorToken");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorLength", $.String, "SQL_ParsingErrorLength");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorStatus", $.String, "SQL_ParsingErrorStatus");

    $.Constant({Static:true , Public:false}, "SQL_ParsingErrorAuthLibraryType", $.String, "SQL_ParsingErrorAuthLibraryType");

    $.Constant({Static:true , Public:false}, "SQL_ConnectionLockedForBcpEvent", $.String, "SQL_ConnectionLockedForBcpEvent");

    $.Constant({Static:true , Public:false}, "SQL_SNIPacketAllocationFailure", $.String, "SQL_SNIPacketAllocationFailure");

    $.Constant({Static:true , Public:false}, "SQL_SmallDateTimeOverflow", $.String, "SQL_SmallDateTimeOverflow");

    $.Constant({Static:true , Public:false}, "SQL_TimeOverflow", $.String, "SQL_TimeOverflow");

    $.Constant({Static:true , Public:false}, "SQL_MoneyOverflow", $.String, "SQL_MoneyOverflow");

    $.Constant({Static:true , Public:false}, "SQL_CultureIdError", $.String, "SQL_CultureIdError");

    $.Constant({Static:true , Public:false}, "SQL_OperationCancelled", $.String, "SQL_OperationCancelled");

    $.Constant({Static:true , Public:false}, "SQL_SevereError", $.String, "SQL_SevereError");

    $.Constant({Static:true , Public:false}, "SQL_SSPIGenerateError", $.String, "SQL_SSPIGenerateError");

    $.Constant({Static:true , Public:false}, "SQL_InvalidSSPIPacketSize", $.String, "SQL_InvalidSSPIPacketSize");

    $.Constant({Static:true , Public:false}, "SQL_SSPIInitializeError", $.String, "SQL_SSPIInitializeError");

    $.Constant({Static:true , Public:false}, "SQL_Timeout", $.String, "SQL_Timeout");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_PreLogin_Begin", $.String, "SQL_Timeout_PreLogin_Begin");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_PreLogin_InitializeConnection", $.String, "SQL_Timeout_PreLogin_InitializeConnection");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_PreLogin_SendHandshake", $.String, "SQL_Timeout_PreLogin_SendHandshake");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_PreLogin_ConsumeHandshake", $.String, "SQL_Timeout_PreLogin_ConsumeHandshake");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_Login_Begin", $.String, "SQL_Timeout_Login_Begin");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_Login_ProcessConnectionAuth", $.String, "SQL_Timeout_Login_ProcessConnectionAuth");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_PostLogin", $.String, "SQL_Timeout_PostLogin");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_FailoverInfo", $.String, "SQL_Timeout_FailoverInfo");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_RoutingDestinationInfo", $.String, "SQL_Timeout_RoutingDestinationInfo");

    $.Constant({Static:true , Public:false}, "SQL_Duration_PreLogin_Begin", $.String, "SQL_Duration_PreLogin_Begin");

    $.Constant({Static:true , Public:false}, "SQL_Duration_PreLoginHandshake", $.String, "SQL_Duration_PreLoginHandshake");

    $.Constant({Static:true , Public:false}, "SQL_Duration_Login_Begin", $.String, "SQL_Duration_Login_Begin");

    $.Constant({Static:true , Public:false}, "SQL_Duration_Login_ProcessConnectionAuth", $.String, "SQL_Duration_Login_ProcessConnectionAuth");

    $.Constant({Static:true , Public:false}, "SQL_Duration_PostLogin", $.String, "SQL_Duration_PostLogin");

    $.Constant({Static:true , Public:false}, "SQL_UserInstanceFailure", $.String, "SQL_UserInstanceFailure");

    $.Constant({Static:true , Public:false}, "SQL_ExceedsMaxDataLength", $.String, "SQL_ExceedsMaxDataLength");

    $.Constant({Static:true , Public:false}, "SQL_InvalidRead", $.String, "SQL_InvalidRead");

    $.Constant({Static:true , Public:false}, "SQL_NonBlobColumn", $.String, "SQL_NonBlobColumn");

    $.Constant({Static:true , Public:false}, "SQL_NonCharColumn", $.String, "SQL_NonCharColumn");

    $.Constant({Static:true , Public:false}, "SQL_StreamNotSupportOnColumnType", $.String, "SQL_StreamNotSupportOnColumnType");

    $.Constant({Static:true , Public:false}, "SQL_TextReaderNotSupportOnColumnType", $.String, "SQL_TextReaderNotSupportOnColumnType");

    $.Constant({Static:true , Public:false}, "SQL_XmlReaderNotSupportOnColumnType", $.String, "SQL_XmlReaderNotSupportOnColumnType");

    $.Constant({Static:true , Public:false}, "SQL_InvalidBufferSizeOrIndex", $.String, "SQL_InvalidBufferSizeOrIndex");

    $.Constant({Static:true , Public:false}, "SQL_InvalidDataLength", $.String, "SQL_InvalidDataLength");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetClosed", $.String, "SQL_SqlResultSetClosed");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetClosed2", $.String, "SQL_SqlResultSetClosed2");

    $.Constant({Static:true , Public:false}, "SQL_SqlRecordReadOnly", $.String, "SQL_SqlRecordReadOnly");

    $.Constant({Static:true , Public:false}, "SQL_SqlRecordReadOnly2", $.String, "SQL_SqlRecordReadOnly2");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetRowDeleted", $.String, "SQL_SqlResultSetRowDeleted");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetRowDeleted2", $.String, "SQL_SqlResultSetRowDeleted2");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetCommandNotInSameConnection", $.String, "SQL_SqlResultSetCommandNotInSameConnection");

    $.Constant({Static:true , Public:false}, "SQL_SqlResultSetNoAcceptableCursor", $.String, "SQL_SqlResultSetNoAcceptableCursor");

    $.Constant({Static:true , Public:false}, "SQL_SqlUpdatableRecordReadOnly", $.String, "SQL_SqlUpdatableRecordReadOnly");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadMappingInaccessible", $.String, "SQL_BulkLoadMappingInaccessible");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadMappingsNamesOrOrdinalsOnly", $.String, "SQL_BulkLoadMappingsNamesOrOrdinalsOnly");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadCannotConvertValue", $.String, "SQL_BulkLoadCannotConvertValue");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadNonMatchingColumnMapping", $.String, "SQL_BulkLoadNonMatchingColumnMapping");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadNonMatchingColumnName", $.String, "SQL_BulkLoadNonMatchingColumnName");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadStringTooLong", $.String, "SQL_BulkLoadStringTooLong");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadInvalidTimeout", $.String, "SQL_BulkLoadInvalidTimeout");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadInvalidVariantValue", $.String, "SQL_BulkLoadInvalidVariantValue");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadExistingTransaction", $.String, "SQL_BulkLoadExistingTransaction");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadNoCollation", $.String, "SQL_BulkLoadNoCollation");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadConflictingTransactionOption", $.String, "SQL_BulkLoadConflictingTransactionOption");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadInvalidOperationInsideEvent", $.String, "SQL_BulkLoadInvalidOperationInsideEvent");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadMissingDestinationTable", $.String, "SQL_BulkLoadMissingDestinationTable");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadInvalidDestinationTable", $.String, "SQL_BulkLoadInvalidDestinationTable");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadNotAllowDBNull", $.String, "SQL_BulkLoadNotAllowDBNull");

    $.Constant({Static:true , Public:false}, "Sql_BulkLoadLcidMismatch", $.String, "Sql_BulkLoadLcidMismatch");

    $.Constant({Static:true , Public:false}, "SQL_BulkLoadPendingOperation", $.String, "SQL_BulkLoadPendingOperation");

    $.Constant({Static:true , Public:false}, "SQL_ConnectionDoomed", $.String, "SQL_ConnectionDoomed");

    $.Constant({Static:true , Public:false}, "SQL_OpenResultCountExceeded", $.String, "SQL_OpenResultCountExceeded");

    $.Constant({Static:true , Public:false}, "GT_Disabled", $.String, "GT_Disabled");

    $.Constant({Static:true , Public:false}, "GT_UnsupportedSysTxVersion", $.String, "GT_UnsupportedSysTxVersion");

    $.Constant({Static:true , Public:false}, "SQL_BatchedUpdatesNotAvailableOnContextConnection", $.String, "SQL_BatchedUpdatesNotAvailableOnContextConnection");

    $.Constant({Static:true , Public:false}, "SQL_ContextAllowsLimitedKeywords", $.String, "SQL_ContextAllowsLimitedKeywords");

    $.Constant({Static:true , Public:false}, "SQL_ContextAllowsOnlyTypeSystem2005", $.String, "SQL_ContextAllowsOnlyTypeSystem2005");

    $.Constant({Static:true , Public:false}, "SQL_ContextConnectionIsInUse", $.String, "SQL_ContextConnectionIsInUse");

    $.Constant({Static:true , Public:false}, "SQL_ContextUnavailableOutOfProc", $.String, "SQL_ContextUnavailableOutOfProc");

    $.Constant({Static:true , Public:false}, "SQL_ContextUnavailableWhileInProc", $.String, "SQL_ContextUnavailableWhileInProc");

    $.Constant({Static:true , Public:false}, "SQL_NestedTransactionScopesNotSupported", $.String, "SQL_NestedTransactionScopesNotSupported");

    $.Constant({Static:true , Public:false}, "SQL_NotAvailableOnContextConnection", $.String, "SQL_NotAvailableOnContextConnection");

    $.Constant({Static:true , Public:false}, "SQL_NotificationsNotAvailableOnContextConnection", $.String, "SQL_NotificationsNotAvailableOnContextConnection");

    $.Constant({Static:true , Public:false}, "SQL_UnexpectedSmiEvent", $.String, "SQL_UnexpectedSmiEvent");

    $.Constant({Static:true , Public:false}, "SQL_UserInstanceNotAvailableInProc", $.String, "SQL_UserInstanceNotAvailableInProc");

    $.Constant({Static:true , Public:false}, "SQL_ArgumentLengthMismatch", $.String, "SQL_ArgumentLengthMismatch");

    $.Constant({Static:true , Public:false}, "SQL_InvalidSqlDbTypeWithOneAllowedType", $.String, "SQL_InvalidSqlDbTypeWithOneAllowedType");

    $.Constant({Static:true , Public:false}, "SQL_PipeErrorRequiresSendEnd", $.String, "SQL_PipeErrorRequiresSendEnd");

    $.Constant({Static:true , Public:false}, "SQL_TooManyValues", $.String, "SQL_TooManyValues");

    $.Constant({Static:true , Public:false}, "SQL_StreamWriteNotSupported", $.String, "SQL_StreamWriteNotSupported");

    $.Constant({Static:true , Public:false}, "SQL_StreamReadNotSupported", $.String, "SQL_StreamReadNotSupported");

    $.Constant({Static:true , Public:false}, "SQL_StreamSeekNotSupported", $.String, "SQL_StreamSeekNotSupported");

    $.Constant({Static:true , Public:false}, "SQL_ExClientConnectionId", $.String, "SQL_ExClientConnectionId");

    $.Constant({Static:true , Public:false}, "SQL_ExErrorNumberStateClass", $.String, "SQL_ExErrorNumberStateClass");

    $.Constant({Static:true , Public:false}, "SQL_ExOriginalClientConnectionId", $.String, "SQL_ExOriginalClientConnectionId");

    $.Constant({Static:true , Public:false}, "SQL_ExRoutingDestination", $.String, "SQL_ExRoutingDestination");

    $.Constant({Static:true , Public:false}, "SqlMisc_NullString", $.String, "SqlMisc_NullString");

    $.Constant({Static:true , Public:false}, "SqlMisc_MessageString", $.String, "SqlMisc_MessageString");

    $.Constant({Static:true , Public:false}, "SqlMisc_ArithOverflowMessage", $.String, "SqlMisc_ArithOverflowMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_DivideByZeroMessage", $.String, "SqlMisc_DivideByZeroMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_NullValueMessage", $.String, "SqlMisc_NullValueMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_TruncationMessage", $.String, "SqlMisc_TruncationMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_DateTimeOverflowMessage", $.String, "SqlMisc_DateTimeOverflowMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_ConcatDiffCollationMessage", $.String, "SqlMisc_ConcatDiffCollationMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_CompareDiffCollationMessage", $.String, "SqlMisc_CompareDiffCollationMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidFlagMessage", $.String, "SqlMisc_InvalidFlagMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_NumeToDecOverflowMessage", $.String, "SqlMisc_NumeToDecOverflowMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_ConversionOverflowMessage", $.String, "SqlMisc_ConversionOverflowMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidDateTimeMessage", $.String, "SqlMisc_InvalidDateTimeMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_TimeZoneSpecifiedMessage", $.String, "SqlMisc_TimeZoneSpecifiedMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidArraySizeMessage", $.String, "SqlMisc_InvalidArraySizeMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidPrecScaleMessage", $.String, "SqlMisc_InvalidPrecScaleMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_FormatMessage", $.String, "SqlMisc_FormatMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_SqlTypeMessage", $.String, "SqlMisc_SqlTypeMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_LenTooLargeMessage", $.String, "SqlMisc_LenTooLargeMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_StreamErrorMessage", $.String, "SqlMisc_StreamErrorMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_StreamClosedMessage", $.String, "SqlMisc_StreamClosedMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_NoBufferMessage", $.String, "SqlMisc_NoBufferMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_SetNonZeroLenOnNullMessage", $.String, "SqlMisc_SetNonZeroLenOnNullMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_BufferInsufficientMessage", $.String, "SqlMisc_BufferInsufficientMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_WriteNonZeroOffsetOnNullMessage", $.String, "SqlMisc_WriteNonZeroOffsetOnNullMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_WriteOffsetLargerThanLenMessage", $.String, "SqlMisc_WriteOffsetLargerThanLenMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_TruncationMaxDataMessage", $.String, "SqlMisc_TruncationMaxDataMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidFirstDayMessage", $.String, "SqlMisc_InvalidFirstDayMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_NotFilledMessage", $.String, "SqlMisc_NotFilledMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_AlreadyFilledMessage", $.String, "SqlMisc_AlreadyFilledMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_ClosedXmlReaderMessage", $.String, "SqlMisc_ClosedXmlReaderMessage");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidOpStreamClosed", $.String, "SqlMisc_InvalidOpStreamClosed");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidOpStreamNonWritable", $.String, "SqlMisc_InvalidOpStreamNonWritable");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidOpStreamNonReadable", $.String, "SqlMisc_InvalidOpStreamNonReadable");

    $.Constant({Static:true , Public:false}, "SqlMisc_InvalidOpStreamNonSeekable", $.String, "SqlMisc_InvalidOpStreamNonSeekable");

    $.Constant({Static:true , Public:false}, "SqlMisc_SubclassMustOverride", $.String, "SqlMisc_SubclassMustOverride");

    $.Constant({Static:true , Public:false}, "Sql_CanotCreateNormalizer", $.String, "Sql_CanotCreateNormalizer");

    $.Constant({Static:true , Public:false}, "Sql_InternalError", $.String, "Sql_InternalError");

    $.Constant({Static:true , Public:false}, "Sql_NullCommandText", $.String, "Sql_NullCommandText");

    $.Constant({Static:true , Public:false}, "Sql_MismatchedMetaDataDirectionArrayLengths", $.String, "Sql_MismatchedMetaDataDirectionArrayLengths");

    $.Constant({Static:true , Public:false}, "ADP_AdapterMappingExceptionMessage", $.String, "ADP_AdapterMappingExceptionMessage");

    $.Constant({Static:true , Public:false}, "ADP_DataAdapterExceptionMessage", $.String, "ADP_DataAdapterExceptionMessage");

    $.Constant({Static:true , Public:false}, "ADP_DBConcurrencyExceptionMessage", $.String, "ADP_DBConcurrencyExceptionMessage");

    $.Constant({Static:true , Public:false}, "ADP_OperationAborted", $.String, "ADP_OperationAborted");

    $.Constant({Static:true , Public:false}, "ADP_OperationAbortedExceptionMessage", $.String, "ADP_OperationAbortedExceptionMessage");

    $.Constant({Static:true , Public:false}, "DataAdapter_AcceptChangesDuringFill", $.String, "DataAdapter_AcceptChangesDuringFill");

    $.Constant({Static:true , Public:false}, "DataAdapter_AcceptChangesDuringUpdate", $.String, "DataAdapter_AcceptChangesDuringUpdate");

    $.Constant({Static:true , Public:false}, "DataAdapter_ContinueUpdateOnError", $.String, "DataAdapter_ContinueUpdateOnError");

    $.Constant({Static:true , Public:false}, "DataAdapter_FillLoadOption", $.String, "DataAdapter_FillLoadOption");

    $.Constant({Static:true , Public:false}, "DataAdapter_MissingMappingAction", $.String, "DataAdapter_MissingMappingAction");

    $.Constant({Static:true , Public:false}, "DataAdapter_MissingSchemaAction", $.String, "DataAdapter_MissingSchemaAction");

    $.Constant({Static:true , Public:false}, "DataAdapter_TableMappings", $.String, "DataAdapter_TableMappings");

    $.Constant({Static:true , Public:false}, "DataAdapter_FillError", $.String, "DataAdapter_FillError");

    $.Constant({Static:true , Public:false}, "DataAdapter_ReturnProviderSpecificTypes", $.String, "DataAdapter_ReturnProviderSpecificTypes");

    $.Constant({Static:true , Public:false}, "DataColumnMapping_DataSetColumn", $.String, "DataColumnMapping_DataSetColumn");

    $.Constant({Static:true , Public:false}, "DataColumnMapping_SourceColumn", $.String, "DataColumnMapping_SourceColumn");

    $.Constant({Static:true , Public:false}, "DataColumnMappings_Count", $.String, "DataColumnMappings_Count");

    $.Constant({Static:true , Public:false}, "DataColumnMappings_Item", $.String, "DataColumnMappings_Item");

    $.Constant({Static:true , Public:false}, "DataTableMapping_ColumnMappings", $.String, "DataTableMapping_ColumnMappings");

    $.Constant({Static:true , Public:false}, "DataTableMapping_DataSetTable", $.String, "DataTableMapping_DataSetTable");

    $.Constant({Static:true , Public:false}, "DataTableMapping_SourceTable", $.String, "DataTableMapping_SourceTable");

    $.Constant({Static:true , Public:false}, "DataTableMappings_Count", $.String, "DataTableMappings_Count");

    $.Constant({Static:true , Public:false}, "DataTableMappings_Item", $.String, "DataTableMappings_Item");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_DeleteCommand", $.String, "DbDataAdapter_DeleteCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_InsertCommand", $.String, "DbDataAdapter_InsertCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_SelectCommand", $.String, "DbDataAdapter_SelectCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_UpdateCommand", $.String, "DbDataAdapter_UpdateCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_RowUpdated", $.String, "DbDataAdapter_RowUpdated");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_RowUpdating", $.String, "DbDataAdapter_RowUpdating");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_UpdateBatchSize", $.String, "DbDataAdapter_UpdateBatchSize");

    $.Constant({Static:true , Public:false}, "DbTable_Connection", $.String, "DbTable_Connection");

    $.Constant({Static:true , Public:false}, "DbTable_DeleteCommand", $.String, "DbTable_DeleteCommand");

    $.Constant({Static:true , Public:false}, "DbTable_InsertCommand", $.String, "DbTable_InsertCommand");

    $.Constant({Static:true , Public:false}, "DbTable_SelectCommand", $.String, "DbTable_SelectCommand");

    $.Constant({Static:true , Public:false}, "DbTable_UpdateCommand", $.String, "DbTable_UpdateCommand");

    $.Constant({Static:true , Public:false}, "DbTable_ReturnProviderSpecificTypes", $.String, "DbTable_ReturnProviderSpecificTypes");

    $.Constant({Static:true , Public:false}, "DbTable_TableMapping", $.String, "DbTable_TableMapping");

    $.Constant({Static:true , Public:false}, "DbTable_ConflictDetection", $.String, "DbTable_ConflictDetection");

    $.Constant({Static:true , Public:false}, "DbTable_UpdateBatchSize", $.String, "DbTable_UpdateBatchSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectionString", $.String, "DbConnectionString_ConnectionString");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Driver", $.String, "DbConnectionString_Driver");

    $.Constant({Static:true , Public:false}, "DbConnectionString_DSN", $.String, "DbConnectionString_DSN");

    $.Constant({Static:true , Public:false}, "DbConnectionString_AdoNetPooler", $.String, "DbConnectionString_AdoNetPooler");

    $.Constant({Static:true , Public:false}, "DbConnectionString_FileName", $.String, "DbConnectionString_FileName");

    $.Constant({Static:true , Public:false}, "DbConnectionString_OleDbServices", $.String, "DbConnectionString_OleDbServices");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Provider", $.String, "DbConnectionString_Provider");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ApplicationName", $.String, "DbConnectionString_ApplicationName");

    $.Constant({Static:true , Public:false}, "DbConnectionString_AsynchronousProcessing", $.String, "DbConnectionString_AsynchronousProcessing");

    $.Constant({Static:true , Public:false}, "DbConnectionString_AttachDBFilename", $.String, "DbConnectionString_AttachDBFilename");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectTimeout", $.String, "DbConnectionString_ConnectTimeout");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectionReset", $.String, "DbConnectionString_ConnectionReset");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ContextConnection", $.String, "DbConnectionString_ContextConnection");

    $.Constant({Static:true , Public:false}, "DbConnectionString_CurrentLanguage", $.String, "DbConnectionString_CurrentLanguage");

    $.Constant({Static:true , Public:false}, "DbConnectionString_DataSource", $.String, "DbConnectionString_DataSource");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Encrypt", $.String, "DbConnectionString_Encrypt");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Enlist", $.String, "DbConnectionString_Enlist");

    $.Constant({Static:true , Public:false}, "DbConnectionString_InitialCatalog", $.String, "DbConnectionString_InitialCatalog");

    $.Constant({Static:true , Public:false}, "DbConnectionString_FailoverPartner", $.String, "DbConnectionString_FailoverPartner");

    $.Constant({Static:true , Public:false}, "DbConnectionString_IntegratedSecurity", $.String, "DbConnectionString_IntegratedSecurity");

    $.Constant({Static:true , Public:false}, "DbConnectionString_LoadBalanceTimeout", $.String, "DbConnectionString_LoadBalanceTimeout");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MaxPoolSize", $.String, "DbConnectionString_MaxPoolSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MinPoolSize", $.String, "DbConnectionString_MinPoolSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MultipleActiveResultSets", $.String, "DbConnectionString_MultipleActiveResultSets");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MultiSubnetFailover", $.String, "DbConnectionString_MultiSubnetFailover");

    $.Constant({Static:true , Public:false}, "DbConnectionString_TransparentNetworkIPResolution", $.String, "DbConnectionString_TransparentNetworkIPResolution");

    $.Constant({Static:true , Public:false}, "DbConnectionString_NetworkLibrary", $.String, "DbConnectionString_NetworkLibrary");

    $.Constant({Static:true , Public:false}, "DbConnectionString_PacketSize", $.String, "DbConnectionString_PacketSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Password", $.String, "DbConnectionString_Password");

    $.Constant({Static:true , Public:false}, "DbConnectionString_PersistSecurityInfo", $.String, "DbConnectionString_PersistSecurityInfo");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Pooling", $.String, "DbConnectionString_Pooling");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Replication", $.String, "DbConnectionString_Replication");

    $.Constant({Static:true , Public:false}, "DbConnectionString_TransactionBinding", $.String, "DbConnectionString_TransactionBinding");

    $.Constant({Static:true , Public:false}, "DbConnectionString_TrustServerCertificate", $.String, "DbConnectionString_TrustServerCertificate");

    $.Constant({Static:true , Public:false}, "DbConnectionString_TypeSystemVersion", $.String, "DbConnectionString_TypeSystemVersion");

    $.Constant({Static:true , Public:false}, "DbConnectionString_UserID", $.String, "DbConnectionString_UserID");

    $.Constant({Static:true , Public:false}, "DbConnectionString_UserInstance", $.String, "DbConnectionString_UserInstance");

    $.Constant({Static:true , Public:false}, "DbConnectionString_WorkstationID", $.String, "DbConnectionString_WorkstationID");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ApplicationIntent", $.String, "DbConnectionString_ApplicationIntent");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectRetryCount", $.String, "DbConnectionString_ConnectRetryCount");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectRetryInterval", $.String, "DbConnectionString_ConnectRetryInterval");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Authentication", $.String, "DbConnectionString_Authentication");

    $.Constant({Static:true , Public:false}, "OdbcConnection_ConnectionString", $.String, "OdbcConnection_ConnectionString");

    $.Constant({Static:true , Public:false}, "OdbcConnection_ConnectionTimeout", $.String, "OdbcConnection_ConnectionTimeout");

    $.Constant({Static:true , Public:false}, "OdbcConnection_Database", $.String, "OdbcConnection_Database");

    $.Constant({Static:true , Public:false}, "OdbcConnection_DataSource", $.String, "OdbcConnection_DataSource");

    $.Constant({Static:true , Public:false}, "OdbcConnection_Driver", $.String, "OdbcConnection_Driver");

    $.Constant({Static:true , Public:false}, "OdbcConnection_ServerVersion", $.String, "OdbcConnection_ServerVersion");

    $.Constant({Static:true , Public:false}, "OleDbConnection_ConnectionString", $.String, "OleDbConnection_ConnectionString");

    $.Constant({Static:true , Public:false}, "OleDbConnection_ConnectionTimeout", $.String, "OleDbConnection_ConnectionTimeout");

    $.Constant({Static:true , Public:false}, "OleDbConnection_Database", $.String, "OleDbConnection_Database");

    $.Constant({Static:true , Public:false}, "OleDbConnection_DataSource", $.String, "OleDbConnection_DataSource");

    $.Constant({Static:true , Public:false}, "OleDbConnection_Provider", $.String, "OleDbConnection_Provider");

    $.Constant({Static:true , Public:false}, "OleDbConnection_ServerVersion", $.String, "OleDbConnection_ServerVersion");

    $.Constant({Static:true , Public:false}, "SqlConnection_AccessToken", $.String, "SqlConnection_AccessToken");

    $.Constant({Static:true , Public:false}, "SqlConnection_Asynchronous", $.String, "SqlConnection_Asynchronous");

    $.Constant({Static:true , Public:false}, "SqlConnection_Replication", $.String, "SqlConnection_Replication");

    $.Constant({Static:true , Public:false}, "SqlConnection_ConnectionString", $.String, "SqlConnection_ConnectionString");

    $.Constant({Static:true , Public:false}, "SqlConnection_ConnectionTimeout", $.String, "SqlConnection_ConnectionTimeout");

    $.Constant({Static:true , Public:false}, "SqlConnection_Database", $.String, "SqlConnection_Database");

    $.Constant({Static:true , Public:false}, "SqlConnection_DataSource", $.String, "SqlConnection_DataSource");

    $.Constant({Static:true , Public:false}, "SqlConnection_PacketSize", $.String, "SqlConnection_PacketSize");

    $.Constant({Static:true , Public:false}, "SqlConnection_ServerVersion", $.String, "SqlConnection_ServerVersion");

    $.Constant({Static:true , Public:false}, "SqlConnection_WorkstationId", $.String, "SqlConnection_WorkstationId");

    $.Constant({Static:true , Public:false}, "SqlConnection_StatisticsEnabled", $.String, "SqlConnection_StatisticsEnabled");

    $.Constant({Static:true , Public:false}, "SqlConnection_CustomColumnEncryptionKeyStoreProviders", $.String, "SqlConnection_CustomColumnEncryptionKeyStoreProviders");

    $.Constant({Static:true , Public:false}, "SqlConnection_ClientConnectionId", $.String, "SqlConnection_ClientConnectionId");

    $.Constant({Static:true , Public:false}, "SqlConnection_Credential", $.String, "SqlConnection_Credential");

    $.Constant({Static:true , Public:false}, "DbConnection_InfoMessage", $.String, "DbConnection_InfoMessage");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandText", $.String, "DbCommand_CommandText");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandType", $.String, "DbCommand_CommandType");

    $.Constant({Static:true , Public:false}, "DbCommand_Connection", $.String, "DbCommand_Connection");

    $.Constant({Static:true , Public:false}, "DbCommand_Parameters", $.String, "DbCommand_Parameters");

    $.Constant({Static:true , Public:false}, "DbCommand_Transaction", $.String, "DbCommand_Transaction");

    $.Constant({Static:true , Public:false}, "DbCommand_UpdatedRowSource", $.String, "DbCommand_UpdatedRowSource");

    $.Constant({Static:true , Public:false}, "DbCommand_StatementCompleted", $.String, "DbCommand_StatementCompleted");

    $.Constant({Static:true , Public:false}, "SqlCommand_Notification", $.String, "SqlCommand_Notification");

    $.Constant({Static:true , Public:false}, "SqlCommand_NotificationAutoEnlist", $.String, "SqlCommand_NotificationAutoEnlist");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_ConflictOption", $.String, "DbCommandBuilder_ConflictOption");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_CatalogLocation", $.String, "DbCommandBuilder_CatalogLocation");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_CatalogSeparator", $.String, "DbCommandBuilder_CatalogSeparator");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_SchemaSeparator", $.String, "DbCommandBuilder_SchemaSeparator");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_QuotePrefix", $.String, "DbCommandBuilder_QuotePrefix");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_QuoteSuffix", $.String, "DbCommandBuilder_QuoteSuffix");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_DataAdapter", $.String, "DbCommandBuilder_DataAdapter");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_SchemaLocation", $.String, "DbCommandBuilder_SchemaLocation");

    $.Constant({Static:true , Public:false}, "DbCommandBuilder_SetAllValues", $.String, "DbCommandBuilder_SetAllValues");

    $.Constant({Static:true , Public:false}, "OdbcCommandBuilder_DataAdapter", $.String, "OdbcCommandBuilder_DataAdapter");

    $.Constant({Static:true , Public:false}, "OdbcCommandBuilder_QuotePrefix", $.String, "OdbcCommandBuilder_QuotePrefix");

    $.Constant({Static:true , Public:false}, "OdbcCommandBuilder_QuoteSuffix", $.String, "OdbcCommandBuilder_QuoteSuffix");

    $.Constant({Static:true , Public:false}, "OleDbCommandBuilder_DataAdapter", $.String, "OleDbCommandBuilder_DataAdapter");

    $.Constant({Static:true , Public:false}, "OleDbCommandBuilder_DecimalSeparator", $.String, "OleDbCommandBuilder_DecimalSeparator");

    $.Constant({Static:true , Public:false}, "OleDbCommandBuilder_QuotePrefix", $.String, "OleDbCommandBuilder_QuotePrefix");

    $.Constant({Static:true , Public:false}, "OleDbCommandBuilder_QuoteSuffix", $.String, "OleDbCommandBuilder_QuoteSuffix");

    $.Constant({Static:true , Public:false}, "SqlCommandBuilder_DataAdapter", $.String, "SqlCommandBuilder_DataAdapter");

    $.Constant({Static:true , Public:false}, "SqlCommandBuilder_DecimalSeparator", $.String, "SqlCommandBuilder_DecimalSeparator");

    $.Constant({Static:true , Public:false}, "SqlCommandBuilder_QuotePrefix", $.String, "SqlCommandBuilder_QuotePrefix");

    $.Constant({Static:true , Public:false}, "SqlCommandBuilder_QuoteSuffix", $.String, "SqlCommandBuilder_QuoteSuffix");

    $.Constant({Static:true , Public:false}, "DbDataParameter_Precision", $.String, "DbDataParameter_Precision");

    $.Constant({Static:true , Public:false}, "DbDataParameter_Scale", $.String, "DbDataParameter_Scale");

    $.Constant({Static:true , Public:false}, "OdbcParameter_OdbcType", $.String, "OdbcParameter_OdbcType");

    $.Constant({Static:true , Public:false}, "OleDbParameter_OleDbType", $.String, "OleDbParameter_OleDbType");

    $.Constant({Static:true , Public:false}, "SqlParameter_ParameterName", $.String, "SqlParameter_ParameterName");

    $.Constant({Static:true , Public:false}, "SqlParameter_SqlDbType", $.String, "SqlParameter_SqlDbType");

    $.Constant({Static:true , Public:false}, "SqlParameter_TypeName", $.String, "SqlParameter_TypeName");

    $.Constant({Static:true , Public:false}, "SqlParameter_Offset", $.String, "SqlParameter_Offset");

    $.Constant({Static:true , Public:false}, "SqlParameter_XmlSchemaCollectionDatabase", $.String, "SqlParameter_XmlSchemaCollectionDatabase");

    $.Constant({Static:true , Public:false}, "SqlParameter_XmlSchemaCollectionOwningSchema", $.String, "SqlParameter_XmlSchemaCollectionOwningSchema");

    $.Constant({Static:true , Public:false}, "SqlParameter_XmlSchemaCollectionName", $.String, "SqlParameter_XmlSchemaCollectionName");

    $.Constant({Static:true , Public:false}, "SqlParameter_UnsupportedTVPOutputParameter", $.String, "SqlParameter_UnsupportedTVPOutputParameter");

    $.Constant({Static:true , Public:false}, "SqlParameter_DBNullNotSupportedForTVP", $.String, "SqlParameter_DBNullNotSupportedForTVP");

    $.Constant({Static:true , Public:false}, "SqlParameter_InvalidTableDerivedPrecisionForTvp", $.String, "SqlParameter_InvalidTableDerivedPrecisionForTvp");

    $.Constant({Static:true , Public:false}, "SqlParameter_UnexpectedTypeNameForNonStruct", $.String, "SqlParameter_UnexpectedTypeNameForNonStruct");

    $.Constant({Static:true , Public:false}, "MetaType_SingleValuedStructNotSupported", $.String, "MetaType_SingleValuedStructNotSupported");

    $.Constant({Static:true , Public:false}, "NullSchemaTableDataTypeNotSupported", $.String, "NullSchemaTableDataTypeNotSupported");

    $.Constant({Static:true , Public:false}, "InvalidSchemaTableOrdinals", $.String, "InvalidSchemaTableOrdinals");

    $.Constant({Static:true , Public:false}, "SQL_EnumeratedRecordMetaDataChanged", $.String, "SQL_EnumeratedRecordMetaDataChanged");

    $.Constant({Static:true , Public:false}, "SQL_EnumeratedRecordFieldCountChanged", $.String, "SQL_EnumeratedRecordFieldCountChanged");

    $.Constant({Static:true , Public:false}, "SQLUDT_MaxByteSizeValue", $.String, "SQLUDT_MaxByteSizeValue");

    $.Constant({Static:true , Public:false}, "SQLUDT_Unexpected", $.String, "SQLUDT_Unexpected");

    $.Constant({Static:true , Public:false}, "SQLUDT_InvalidDbId", $.String, "SQLUDT_InvalidDbId");

    $.Constant({Static:true , Public:false}, "SQLUDT_CantLoadAssembly", $.String, "SQLUDT_CantLoadAssembly");

    $.Constant({Static:true , Public:false}, "SQLUDT_InvalidUdtTypeName", $.String, "SQLUDT_InvalidUdtTypeName");

    $.Constant({Static:true , Public:false}, "SQLUDT_UnexpectedUdtTypeName", $.String, "SQLUDT_UnexpectedUdtTypeName");

    $.Constant({Static:true , Public:false}, "SQLUDT_InvalidSqlType", $.String, "SQLUDT_InvalidSqlType");

    $.Constant({Static:true , Public:false}, "SQLUDT_InWhereClause", $.String, "SQLUDT_InWhereClause");

    $.Constant({Static:true , Public:false}, "SqlUdt_InvalidUdtMessage", $.String, "SqlUdt_InvalidUdtMessage");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_MultipleSerFormats", $.String, "SqlUdtReason_MultipleSerFormats");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_CannotSupportNative", $.String, "SqlUdtReason_CannotSupportNative");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_CannotSupportUserDefined", $.String, "SqlUdtReason_CannotSupportUserDefined");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NotSerializable", $.String, "SqlUdtReason_NotSerializable");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NoPublicConstructors", $.String, "SqlUdtReason_NoPublicConstructors");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NotNullable", $.String, "SqlUdtReason_NotNullable");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NoPublicConstructor", $.String, "SqlUdtReason_NoPublicConstructor");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NoUdtAttribute", $.String, "SqlUdtReason_NoUdtAttribute");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_MaplessNotYetSupported", $.String, "SqlUdtReason_MaplessNotYetSupported");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_ParseMethodMissing", $.String, "SqlUdtReason_ParseMethodMissing");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_ToStringMethodMissing", $.String, "SqlUdtReason_ToStringMethodMissing");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NullPropertyMissing", $.String, "SqlUdtReason_NullPropertyMissing");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NativeFormatNoFieldSupport", $.String, "SqlUdtReason_NativeFormatNoFieldSupport");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_TypeNotPublic", $.String, "SqlUdtReason_TypeNotPublic");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NativeUdtNotSequentialLayout", $.String, "SqlUdtReason_NativeUdtNotSequentialLayout");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NativeUdtMaxByteSize", $.String, "SqlUdtReason_NativeUdtMaxByteSize");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NonSerializableField", $.String, "SqlUdtReason_NonSerializableField");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_NativeFormatExplictLayoutNotAllowed", $.String, "SqlUdtReason_NativeFormatExplictLayoutNotAllowed");

    $.Constant({Static:true , Public:false}, "SqlUdtReason_MultivaluedAssemblyId", $.String, "SqlUdtReason_MultivaluedAssemblyId");

    $.Constant({Static:true , Public:false}, "SQLTVP_TableTypeCanOnlyBeParameter", $.String, "SQLTVP_TableTypeCanOnlyBeParameter");

    $.Constant({Static:true , Public:false}, "SqlFileStream_InvalidPath", $.String, "SqlFileStream_InvalidPath");

    $.Constant({Static:true , Public:false}, "SqlFileStream_InvalidParameter", $.String, "SqlFileStream_InvalidParameter");

    $.Constant({Static:true , Public:false}, "SqlFileStream_FileAlreadyInTransaction", $.String, "SqlFileStream_FileAlreadyInTransaction");

    $.Constant({Static:true , Public:false}, "SqlFileStream_PathNotValidDiskResource", $.String, "SqlFileStream_PathNotValidDiskResource");

    $.Constant({Static:true , Public:false}, "SqlDelegatedTransaction_PromotionFailed", $.String, "SqlDelegatedTransaction_PromotionFailed");

    $.Constant({Static:true , Public:false}, "SqlDependency_SqlDependency", $.String, "SqlDependency_SqlDependency");

    $.Constant({Static:true , Public:false}, "SqlDependency_HasChanges", $.String, "SqlDependency_HasChanges");

    $.Constant({Static:true , Public:false}, "SqlDependency_Id", $.String, "SqlDependency_Id");

    $.Constant({Static:true , Public:false}, "SqlDependency_OnChange", $.String, "SqlDependency_OnChange");

    $.Constant({Static:true , Public:false}, "SqlDependency_AddCommandDependency", $.String, "SqlDependency_AddCommandDependency");

    $.Constant({Static:true , Public:false}, "SqlDependency_Duplicate", $.String, "SqlDependency_Duplicate");

    $.Constant({Static:true , Public:false}, "SQLNotify_AlreadyHasCommand", $.String, "SQLNotify_AlreadyHasCommand");

    $.Constant({Static:true , Public:false}, "SqlNotify_SqlDepCannotBeCreatedInProc", $.String, "SqlNotify_SqlDepCannotBeCreatedInProc");

    $.Constant({Static:true , Public:false}, "SqlDependency_DatabaseBrokerDisabled", $.String, "SqlDependency_DatabaseBrokerDisabled");

    $.Constant({Static:true , Public:false}, "SqlDependency_DefaultOptionsButNoStart", $.String, "SqlDependency_DefaultOptionsButNoStart");

    $.Constant({Static:true , Public:false}, "SqlDependency_EventNoDuplicate", $.String, "SqlDependency_EventNoDuplicate");

    $.Constant({Static:true , Public:false}, "SqlDependency_DuplicateStart", $.String, "SqlDependency_DuplicateStart");

    $.Constant({Static:true , Public:false}, "SqlDependency_IdMismatch", $.String, "SqlDependency_IdMismatch");

    $.Constant({Static:true , Public:false}, "SqlDependency_NoMatchingServerStart", $.String, "SqlDependency_NoMatchingServerStart");

    $.Constant({Static:true , Public:false}, "SqlDependency_NoMatchingServerDatabaseStart", $.String, "SqlDependency_NoMatchingServerDatabaseStart");

    $.Constant({Static:true , Public:false}, "SqlDependency_InvalidTimeout", $.String, "SqlDependency_InvalidTimeout");

    $.Constant({Static:true , Public:false}, "SQLNotify_ErrorFormat", $.String, "SQLNotify_ErrorFormat");

    $.Constant({Static:true , Public:false}, "SqlMetaData_NoMetadata", $.String, "SqlMetaData_NoMetadata");

    $.Constant({Static:true , Public:false}, "SqlMetaData_InvalidSqlDbTypeForConstructorFormat", $.String, "SqlMetaData_InvalidSqlDbTypeForConstructorFormat");

    $.Constant({Static:true , Public:false}, "SqlMetaData_NameTooLong", $.String, "SqlMetaData_NameTooLong");

    $.Constant({Static:true , Public:false}, "SqlMetaData_SpecifyBothSortOrderAndOrdinal", $.String, "SqlMetaData_SpecifyBothSortOrderAndOrdinal");

    $.Constant({Static:true , Public:false}, "SqlProvider_InvalidDataColumnType", $.String, "SqlProvider_InvalidDataColumnType");

    $.Constant({Static:true , Public:false}, "SqlProvider_InvalidDataColumnMaxLength", $.String, "SqlProvider_InvalidDataColumnMaxLength");

    $.Constant({Static:true , Public:false}, "SqlProvider_NotEnoughColumnsInStructuredType", $.String, "SqlProvider_NotEnoughColumnsInStructuredType");

    $.Constant({Static:true , Public:false}, "SqlProvider_DuplicateSortOrdinal", $.String, "SqlProvider_DuplicateSortOrdinal");

    $.Constant({Static:true , Public:false}, "SqlProvider_MissingSortOrdinal", $.String, "SqlProvider_MissingSortOrdinal");

    $.Constant({Static:true , Public:false}, "SqlProvider_SortOrdinalGreaterThanFieldCount", $.String, "SqlProvider_SortOrdinalGreaterThanFieldCount");

    $.Constant({Static:true , Public:false}, "IEnumerableOfSqlDataRecordHasNoRows", $.String, "IEnumerableOfSqlDataRecordHasNoRows");

    $.Constant({Static:true , Public:false}, "SqlPipe_CommandHookedUpToNonContextConnection", $.String, "SqlPipe_CommandHookedUpToNonContextConnection");

    $.Constant({Static:true , Public:false}, "SqlPipe_MessageTooLong", $.String, "SqlPipe_MessageTooLong");

    $.Constant({Static:true , Public:false}, "SqlPipe_IsBusy", $.String, "SqlPipe_IsBusy");

    $.Constant({Static:true , Public:false}, "SqlPipe_AlreadyHasAnOpenResultSet", $.String, "SqlPipe_AlreadyHasAnOpenResultSet");

    $.Constant({Static:true , Public:false}, "SqlPipe_DoesNotHaveAnOpenResultSet", $.String, "SqlPipe_DoesNotHaveAnOpenResultSet");

    $.Constant({Static:true , Public:false}, "SNI_PN0", $.String, "SNI_PN0");

    $.Constant({Static:true , Public:false}, "SNI_PN1", $.String, "SNI_PN1");

    $.Constant({Static:true , Public:false}, "SNI_PN2", $.String, "SNI_PN2");

    $.Constant({Static:true , Public:false}, "SNI_PN3", $.String, "SNI_PN3");

    $.Constant({Static:true , Public:false}, "SNI_PN4", $.String, "SNI_PN4");

    $.Constant({Static:true , Public:false}, "SNI_PN5", $.String, "SNI_PN5");

    $.Constant({Static:true , Public:false}, "SNI_PN6", $.String, "SNI_PN6");

    $.Constant({Static:true , Public:false}, "SNI_PN7", $.String, "SNI_PN7");

    $.Constant({Static:true , Public:false}, "SNI_PN8", $.String, "SNI_PN8");

    $.Constant({Static:true , Public:false}, "SNI_PN9", $.String, "SNI_PN9");

    $.Constant({Static:true , Public:false}, "SNI_PN10", $.String, "SNI_PN10");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_1", $.String, "SNI_ERROR_1");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_2", $.String, "SNI_ERROR_2");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_3", $.String, "SNI_ERROR_3");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_4", $.String, "SNI_ERROR_4");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_5", $.String, "SNI_ERROR_5");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_6", $.String, "SNI_ERROR_6");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_7", $.String, "SNI_ERROR_7");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_8", $.String, "SNI_ERROR_8");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_9", $.String, "SNI_ERROR_9");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_10", $.String, "SNI_ERROR_10");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_11", $.String, "SNI_ERROR_11");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_12", $.String, "SNI_ERROR_12");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_13", $.String, "SNI_ERROR_13");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_14", $.String, "SNI_ERROR_14");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_15", $.String, "SNI_ERROR_15");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_16", $.String, "SNI_ERROR_16");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_17", $.String, "SNI_ERROR_17");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_18", $.String, "SNI_ERROR_18");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_19", $.String, "SNI_ERROR_19");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_20", $.String, "SNI_ERROR_20");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_21", $.String, "SNI_ERROR_21");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_22", $.String, "SNI_ERROR_22");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_23", $.String, "SNI_ERROR_23");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_24", $.String, "SNI_ERROR_24");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_25", $.String, "SNI_ERROR_25");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_26", $.String, "SNI_ERROR_26");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_27", $.String, "SNI_ERROR_27");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_28", $.String, "SNI_ERROR_28");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_29", $.String, "SNI_ERROR_29");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_30", $.String, "SNI_ERROR_30");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_31", $.String, "SNI_ERROR_31");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_32", $.String, "SNI_ERROR_32");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_33", $.String, "SNI_ERROR_33");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_34", $.String, "SNI_ERROR_34");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_35", $.String, "SNI_ERROR_35");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_36", $.String, "SNI_ERROR_36");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_37", $.String, "SNI_ERROR_37");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_38", $.String, "SNI_ERROR_38");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_39", $.String, "SNI_ERROR_39");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_40", $.String, "SNI_ERROR_40");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_41", $.String, "SNI_ERROR_41");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_42", $.String, "SNI_ERROR_42");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_43", $.String, "SNI_ERROR_43");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_44", $.String, "SNI_ERROR_44");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_47", $.String, "SNI_ERROR_47");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_48", $.String, "SNI_ERROR_48");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_49", $.String, "SNI_ERROR_49");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_50", $.String, "SNI_ERROR_50");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_51", $.String, "SNI_ERROR_51");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_52", $.String, "SNI_ERROR_52");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_53", $.String, "SNI_ERROR_53");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_54", $.String, "SNI_ERROR_54");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_55", $.String, "SNI_ERROR_55");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_56", $.String, "SNI_ERROR_56");

    $.Constant({Static:true , Public:false}, "SNI_ERROR_57", $.String, "SNI_ERROR_57");

    $.Constant({Static:true , Public:false}, "Snix_Connect", $.String, "Snix_Connect");

    $.Constant({Static:true , Public:false}, "Snix_PreLoginBeforeSuccessfullWrite", $.String, "Snix_PreLoginBeforeSuccessfullWrite");

    $.Constant({Static:true , Public:false}, "Snix_PreLogin", $.String, "Snix_PreLogin");

    $.Constant({Static:true , Public:false}, "Snix_LoginSspi", $.String, "Snix_LoginSspi");

    $.Constant({Static:true , Public:false}, "Snix_Login", $.String, "Snix_Login");

    $.Constant({Static:true , Public:false}, "Snix_EnableMars", $.String, "Snix_EnableMars");

    $.Constant({Static:true , Public:false}, "Snix_AutoEnlist", $.String, "Snix_AutoEnlist");

    $.Constant({Static:true , Public:false}, "Snix_GetMarsSession", $.String, "Snix_GetMarsSession");

    $.Constant({Static:true , Public:false}, "Snix_Execute", $.String, "Snix_Execute");

    $.Constant({Static:true , Public:false}, "Snix_Read", $.String, "Snix_Read");

    $.Constant({Static:true , Public:false}, "Snix_Close", $.String, "Snix_Close");

    $.Constant({Static:true , Public:false}, "Snix_SendRows", $.String, "Snix_SendRows");

    $.Constant({Static:true , Public:false}, "Snix_ProcessSspi", $.String, "Snix_ProcessSspi");

    $.Constant({Static:true , Public:false}, "LocalDB_CreateFailed", $.String, "LocalDB_CreateFailed");

    $.Constant({Static:true , Public:false}, "LocalDB_BadConfigSectionType", $.String, "LocalDB_BadConfigSectionType");

    $.Constant({Static:true , Public:false}, "LocalDB_FailedGetDLLHandle", $.String, "LocalDB_FailedGetDLLHandle");

    $.Constant({Static:true , Public:false}, "LocalDB_MethodNotFound", $.String, "LocalDB_MethodNotFound");

    $.Constant({Static:true , Public:false}, "LocalDB_UnobtainableMessage", $.String, "LocalDB_UnobtainableMessage");

    $.Constant({Static:true , Public:false}, "LocalDB_InvalidVersion", $.String, "LocalDB_InvalidVersion");

    $.Constant({Static:true , Public:false}, "TCE_InvalidKeyEncryptionAlgorithm", $.String, "TCE_InvalidKeyEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "TCE_InvalidKeyEncryptionAlgorithmSysErr", $.String, "TCE_InvalidKeyEncryptionAlgorithmSysErr");

    $.Constant({Static:true , Public:false}, "TCE_NullKeyEncryptionAlgorithm", $.String, "TCE_NullKeyEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "TCE_NullKeyEncryptionAlgorithmSysErr", $.String, "TCE_NullKeyEncryptionAlgorithmSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyColumnEncryptionKey", $.String, "TCE_EmptyColumnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_NullColumnEncryptionKey", $.String, "TCE_NullColumnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_EmptyEncryptedColumnEncryptionKey", $.String, "TCE_EmptyEncryptedColumnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_NullEncryptedColumnEncryptionKey", $.String, "TCE_NullEncryptedColumnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_LargeCertificatePathLength", $.String, "TCE_LargeCertificatePathLength");

    $.Constant({Static:true , Public:false}, "TCE_LargeCertificatePathLengthSysErr", $.String, "TCE_LargeCertificatePathLengthSysErr");

    $.Constant({Static:true , Public:false}, "TCE_NullCertificatePath", $.String, "TCE_NullCertificatePath");

    $.Constant({Static:true , Public:false}, "TCE_NullCertificatePathSysErr", $.String, "TCE_NullCertificatePathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_NullCspPath", $.String, "TCE_NullCspPath");

    $.Constant({Static:true , Public:false}, "TCE_NullCspPathSysErr", $.String, "TCE_NullCspPathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_NullCngPath", $.String, "TCE_NullCngPath");

    $.Constant({Static:true , Public:false}, "TCE_NullCngPathSysErr", $.String, "TCE_NullCngPathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificatePath", $.String, "TCE_InvalidCertificatePath");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificatePathSysErr", $.String, "TCE_InvalidCertificatePathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspPath", $.String, "TCE_InvalidCspPath");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspPathSysErr", $.String, "TCE_InvalidCspPathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCngPath", $.String, "TCE_InvalidCngPath");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCngPathSysErr", $.String, "TCE_InvalidCngPathSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificateLocation", $.String, "TCE_InvalidCertificateLocation");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificateLocationSysErr", $.String, "TCE_InvalidCertificateLocationSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificateStore", $.String, "TCE_InvalidCertificateStore");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificateStoreSysErr", $.String, "TCE_InvalidCertificateStoreSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCertificateThumbprint", $.String, "TCE_EmptyCertificateThumbprint");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCertificateThumbprintSysErr", $.String, "TCE_EmptyCertificateThumbprintSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCspName", $.String, "TCE_EmptyCspName");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCspNameSysErr", $.String, "TCE_EmptyCspNameSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCngName", $.String, "TCE_EmptyCngName");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCngNameSysErr", $.String, "TCE_EmptyCngNameSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCspKeyId", $.String, "TCE_EmptyCspKeyId");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCspKeyIdSysErr", $.String, "TCE_EmptyCspKeyIdSysErr");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCngKeyId", $.String, "TCE_EmptyCngKeyId");

    $.Constant({Static:true , Public:false}, "TCE_EmptyCngKeyIdSysErr", $.String, "TCE_EmptyCngKeyIdSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspName", $.String, "TCE_InvalidCspName");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspNameSysErr", $.String, "TCE_InvalidCspNameSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspKeyId", $.String, "TCE_InvalidCspKeyId");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCspKeyIdSysErr", $.String, "TCE_InvalidCspKeyIdSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCngKey", $.String, "TCE_InvalidCngKey");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCngKeySysErr", $.String, "TCE_InvalidCngKeySysErr");

    $.Constant({Static:true , Public:false}, "TCE_CertificateNotFound", $.String, "TCE_CertificateNotFound");

    $.Constant({Static:true , Public:false}, "TCE_CertificateNotFoundSysErr", $.String, "TCE_CertificateNotFoundSysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidAlgorithmVersionInEncryptedCEK", $.String, "TCE_InvalidAlgorithmVersionInEncryptedCEK");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCiphertextLengthInEncryptedCEK", $.String, "TCE_InvalidCiphertextLengthInEncryptedCEK");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCiphertextLengthInEncryptedCEKCsp", $.String, "TCE_InvalidCiphertextLengthInEncryptedCEKCsp");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCiphertextLengthInEncryptedCEKCng", $.String, "TCE_InvalidCiphertextLengthInEncryptedCEKCng");

    $.Constant({Static:true , Public:false}, "TCE_InvalidSignatureInEncryptedCEK", $.String, "TCE_InvalidSignatureInEncryptedCEK");

    $.Constant({Static:true , Public:false}, "TCE_InvalidSignatureInEncryptedCEKCsp", $.String, "TCE_InvalidSignatureInEncryptedCEKCsp");

    $.Constant({Static:true , Public:false}, "TCE_InvalidSignatureInEncryptedCEKCng", $.String, "TCE_InvalidSignatureInEncryptedCEKCng");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCertificateSignature", $.String, "TCE_InvalidCertificateSignature");

    $.Constant({Static:true , Public:false}, "TCE_InvalidSignature", $.String, "TCE_InvalidSignature");

    $.Constant({Static:true , Public:false}, "TCE_CertificateWithNoPrivateKey", $.String, "TCE_CertificateWithNoPrivateKey");

    $.Constant({Static:true , Public:false}, "TCE_CertificateWithNoPrivateKeySysErr", $.String, "TCE_CertificateWithNoPrivateKeySysErr");

    $.Constant({Static:true , Public:false}, "TCE_NullColumnEncryptionKeySysErr", $.String, "TCE_NullColumnEncryptionKeySysErr");

    $.Constant({Static:true , Public:false}, "TCE_InvalidKeySize", $.String, "TCE_InvalidKeySize");

    $.Constant({Static:true , Public:false}, "TCE_InvalidEncryptionType", $.String, "TCE_InvalidEncryptionType");

    $.Constant({Static:true , Public:false}, "TCE_NullPlainText", $.String, "TCE_NullPlainText");

    $.Constant({Static:true , Public:false}, "TCE_VeryLargeCiphertext", $.String, "TCE_VeryLargeCiphertext");

    $.Constant({Static:true , Public:false}, "TCE_NullCipherText", $.String, "TCE_NullCipherText");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCipherTextSize", $.String, "TCE_InvalidCipherTextSize");

    $.Constant({Static:true , Public:false}, "TCE_InvalidAlgorithmVersion", $.String, "TCE_InvalidAlgorithmVersion");

    $.Constant({Static:true , Public:false}, "TCE_InvalidAuthenticationTag", $.String, "TCE_InvalidAuthenticationTag");

    $.Constant({Static:true , Public:false}, "TCE_NullColumnEncryptionAlgorithm", $.String, "TCE_NullColumnEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "TCE_UnexpectedDescribeParamFormat", $.String, "TCE_UnexpectedDescribeParamFormat");

    $.Constant({Static:true , Public:false}, "TCE_InvalidEncryptionKeyOrdinal", $.String, "TCE_InvalidEncryptionKeyOrdinal");

    $.Constant({Static:true , Public:false}, "TCE_ParamEncryptionMetaDataMissing", $.String, "TCE_ParamEncryptionMetaDataMissing");

    $.Constant({Static:true , Public:false}, "TCE_ProcEncryptionMetaDataMissing", $.String, "TCE_ProcEncryptionMetaDataMissing");

    $.Constant({Static:true , Public:false}, "TCE_ParamEncryptionFailed", $.String, "TCE_ParamEncryptionFailed");

    $.Constant({Static:true , Public:false}, "TCE_ColumnDecryptionFailed", $.String, "TCE_ColumnDecryptionFailed");

    $.Constant({Static:true , Public:false}, "TCE_ParamDecryptionFailed", $.String, "TCE_ParamDecryptionFailed");

    $.Constant({Static:true , Public:false}, "TCE_UnknownColumnEncryptionAlgorithm", $.String, "TCE_UnknownColumnEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "TCE_UnknownColumnEncryptionAlgorithmId", $.String, "TCE_UnknownColumnEncryptionAlgorithmId");

    $.Constant({Static:true , Public:false}, "TCE_UnsupportedNormalizationVersion", $.String, "TCE_UnsupportedNormalizationVersion");

    $.Constant({Static:true , Public:false}, "TCE_UnrecognizedKeyStoreProviderName", $.String, "TCE_UnrecognizedKeyStoreProviderName");

    $.Constant({Static:true , Public:false}, "TCE_KeyDecryptionFailedCertStore", $.String, "TCE_KeyDecryptionFailedCertStore");

    $.Constant({Static:true , Public:false}, "TCE_UntrustedKeyPath", $.String, "TCE_UntrustedKeyPath");

    $.Constant({Static:true , Public:false}, "TCE_KeyDecryptionFailed", $.String, "TCE_KeyDecryptionFailed");

    $.Constant({Static:true , Public:false}, "TCE_UnsupportedDatatype", $.String, "TCE_UnsupportedDatatype");

    $.Constant({Static:true , Public:false}, "TCE_DecryptionFailed", $.String, "TCE_DecryptionFailed");

    $.Constant({Static:true , Public:false}, "TCE_ParamInvalidForceColumnEncryptionSetting", $.String, "TCE_ParamInvalidForceColumnEncryptionSetting");

    $.Constant({Static:true , Public:false}, "TCE_ParamUnExpectedEncryptionMetadata", $.String, "TCE_ParamUnExpectedEncryptionMetadata");

    $.Constant({Static:true , Public:false}, "TCE_NotSupportedByServer", $.String, "TCE_NotSupportedByServer");

    $.Constant({Static:true , Public:false}, "TCE_BatchedUpdateColumnEncryptionSettingMismatch", $.String, "TCE_BatchedUpdateColumnEncryptionSettingMismatch");

    $.Constant({Static:true , Public:false}, "TCE_StreamNotSupportOnEncryptedColumn", $.String, "TCE_StreamNotSupportOnEncryptedColumn");

    $.Constant({Static:true , Public:false}, "TCE_SequentialAccessNotSupportedOnEncryptedColumn", $.String, "TCE_SequentialAccessNotSupportedOnEncryptedColumn");

    $.Constant({Static:true , Public:false}, "TCE_CanOnlyCallOnce", $.String, "TCE_CanOnlyCallOnce");

    $.Constant({Static:true , Public:false}, "TCE_NullCustomKeyStoreProviderDictionary", $.String, "TCE_NullCustomKeyStoreProviderDictionary");

    $.Constant({Static:true , Public:false}, "TCE_InvalidCustomKeyStoreProviderName", $.String, "TCE_InvalidCustomKeyStoreProviderName");

    $.Constant({Static:true , Public:false}, "TCE_NullProviderValue", $.String, "TCE_NullProviderValue");

    $.Constant({Static:true , Public:false}, "TCE_EmptyProviderName", $.String, "TCE_EmptyProviderName");

    $.Constant({Static:true , Public:false}, "TCE_SqlCommand_ColumnEncryptionSetting", $.String, "TCE_SqlCommand_ColumnEncryptionSetting");

    $.Constant({Static:true , Public:false}, "TCE_DbConnectionString_ColumnEncryptionSetting", $.String, "TCE_DbConnectionString_ColumnEncryptionSetting");

    $.Constant({Static:true , Public:false}, "TCE_SqlParameter_ForceColumnEncryption", $.String, "TCE_SqlParameter_ForceColumnEncryption");

    $.Constant({Static:true , Public:false}, "TCE_SqlConnection_TrustedColumnMasterKeyPaths", $.String, "TCE_SqlConnection_TrustedColumnMasterKeyPaths");

    $.Constant({Static:true , Public:false}, "SQLROR_RecursiveRoutingNotSupported", $.String, "SQLROR_RecursiveRoutingNotSupported");

    $.Constant({Static:true , Public:false}, "SQLROR_FailoverNotSupported", $.String, "SQLROR_FailoverNotSupported");

    $.Constant({Static:true , Public:false}, "SQLROR_UnexpectedRoutingInfo", $.String, "SQLROR_UnexpectedRoutingInfo");

    $.Constant({Static:true , Public:false}, "SQLROR_InvalidRoutingInfo", $.String, "SQLROR_InvalidRoutingInfo");

    $.Constant({Static:true , Public:false}, "SQLROR_TimeoutAfterRoutingInfo", $.String, "SQLROR_TimeoutAfterRoutingInfo");

    $.Constant({Static:true , Public:false}, "SQLCR_InvalidConnectRetryCountValue", $.String, "SQLCR_InvalidConnectRetryCountValue");

    $.Constant({Static:true , Public:false}, "SQLCR_InvalidConnectRetryIntervalValue", $.String, "SQLCR_InvalidConnectRetryIntervalValue");

    $.Constant({Static:true , Public:false}, "SQLCR_NextAttemptWillExceedQueryTimeout", $.String, "SQLCR_NextAttemptWillExceedQueryTimeout");

    $.Constant({Static:true , Public:false}, "SQLCR_EncryptionChanged", $.String, "SQLCR_EncryptionChanged");

    $.Constant({Static:true , Public:false}, "SQLCR_TDSVestionNotPreserved", $.String, "SQLCR_TDSVestionNotPreserved");

    $.Constant({Static:true , Public:false}, "SQLCR_AllAttemptsFailed", $.String, "SQLCR_AllAttemptsFailed");

    $.Constant({Static:true , Public:false}, "SQLCR_UnrecoverableServer", $.String, "SQLCR_UnrecoverableServer");

    $.Constant({Static:true , Public:false}, "SQLCR_UnrecoverableClient", $.String, "SQLCR_UnrecoverableClient");

    $.Constant({Static:true , Public:false}, "SQLCR_NoCRAckAtReconnection", $.String, "SQLCR_NoCRAckAtReconnection");

    $.Constant({Static:true , Public:false}, "DbConnectionString_PoolBlockingPeriod", $.String, "DbConnectionString_PoolBlockingPeriod");

    $.Constant({Static:true , Public:false}, "AZURESQL_GenericEndpoint", $.String, "AZURESQL_GenericEndpoint");

    $.Constant({Static:true , Public:false}, "AZURESQL_GermanEndpoint", $.String, "AZURESQL_GermanEndpoint");

    $.Constant({Static:true , Public:false}, "AZURESQL_UsGovEndpoint", $.String, "AZURESQL_UsGovEndpoint");

    $.Constant({Static:true , Public:false}, "AZURESQL_ChinaEndpoint", $.String, "AZURESQL_ChinaEndpoint");

    $.Constant({Static:true , Public:false}, "TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled", $.String, "TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled");

    $.Constant({Static:true , Public:false}, "TCE_SqlConnection_ColumnEncryptionKeyCacheTtl", $.String, "TCE_SqlConnection_ColumnEncryptionKeyCacheTtl");

    $.Constant({Static:true , Public:false}, "SQL_Timeout_Execution", $.String, "SQL_Timeout_Execution");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.Sql");
/* class System.Data.Common.DbDataSourceEnumerator */ 

(function DbDataSourceEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbDataSourceEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataSources", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Sql.SqlDataSourceEnumerator */ 

(function SqlDataSourceEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataSourceEnumerator"), 
      Name: "System.Data.Sql.SqlDataSourceEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataSources", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseServerEnumString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $.Type);

    $.Constant({Static:true , Public:false}, "ServerName", $.String, "ServerName");

    $.Constant({Static:true , Public:false}, "InstanceName", $.String, "InstanceName");

    $.Constant({Static:true , Public:false}, "IsClustered", $.String, "IsClustered");

    $.Constant({Static:true , Public:false}, "Version", $.String, "Version");

    $.Constant({Static:true , Public:false}, "timeoutSeconds", $.Int32, 30);

    $.Field({Static:false, Public:false}, "timeoutTime", $.Int64);

    $.Field({Static:true , Public:false}, "_Version", $.String, "Version:");

    $.Field({Static:true , Public:false}, "_Cluster", $.String, "Clustered:");

    $.Field({Static:true , Public:false}, "_clusterLength", $.Int32);

    $.Field({Static:true , Public:false}, "_versionLength", $.Int32);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Sql.SqlGenericUtil */ 

(function SqlGenericUtil$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Sql.SqlGenericUtil", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "MismatchedMetaDataDirectionArrayLengths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCommandText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Sql.SqlNotificationRequest */ 

(function SqlNotificationRequest$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Sql.SqlNotificationRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_userData", $.String);

    $.Field({Static:false, Public:false}, "_options", $.String);

    $.Field({Static:false, Public:false}, "_timeout", $.Int32);

    $.Property({Static:false, Public:true }, "Options", $.String);

    $.Property({Static:false, Public:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:true }, "UserData", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Data.SqlTypes.INullable */ 

JSIL.MakeInterface(
  "System.Data.SqlTypes.INullable", true, [], function ($) {
    $.Method({}, "get_IsNull", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "IsNull");
  }, []);

/* class System.Data.SqlTypes.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.Data.SqlTypes.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CTL_CODE", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt16, $.UInt16, 
          $.Byte, $.Byte
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "DeviceIoControl", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.UInt32, 
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.IntPtr
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+FileType"), [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFullPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.IntPtr
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NtCreateFile", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+OBJECT_ATTRIBUTES")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+IO_STATUS_BLOCK")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $.UInt32, 
          $asm07.TypeRef("System.IO.FileShare"), $.UInt32, 
          $.UInt32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.UInt32
        ]), 
      {
        Module: "NtDll.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RtlNtStatusToDosError", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32]), 
      {
        Module: "NtDll.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeGetFullPathName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "SetErrorModeWrapper", 
      new JSIL.MethodSignature(null, [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetThreadErrorMode", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ThreadErrorModeMinOsVersion", $asm07.TypeRef("System.Version"));

    $.Constant({Static:true , Public:false}, "FILE_DEVICE_FILE_SYSTEM", $.UInt16, 9);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_HANDLE", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "ERROR_MR_MID_NOT_FOUND", $.Int32, 317);

    $.Constant({Static:true , Public:false}, "STATUS_INVALID_PARAMETER", $.UInt32, 3221225485);

    $.Constant({Static:true , Public:false}, "STATUS_SHARING_VIOLATION", $.UInt32, 3221225539);

    $.Constant({Static:true , Public:false}, "STATUS_OBJECT_NAME_NOT_FOUND", $.UInt32, 3221225524);

    $.Constant({Static:true , Public:false}, "SEM_FAILCRITICALERRORS", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "FILE_READ_DATA", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_WRITE_DATA", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_READ_ATTRIBUTES", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "SYNCHRONIZE", $.Int32, 1048576);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Data.SqlTypes.UnsafeNativeMethods+FileType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.UnsafeNativeMethods+FileType", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Disk: 1, 
    Char: 2, 
    Pipe: 3, 
    Remote: 32768, 
  }
);

/* struct System.Data.SqlTypes.UnsafeNativeMethods+OBJECT_ATTRIBUTES */ 

(function OBJECT_ATTRIBUTES$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.UnsafeNativeMethods+OBJECT_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:false, Public:false}, "rootDirectory", $.IntPtr);

    $.Field({Static:false, Public:false}, "objectName", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false}, "attributes", $.Int32);

    $.Field({Static:false, Public:false}, "securityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:false}, "securityQualityOfService", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.UnsafeNativeMethods+UNICODE_STRING */ 

(function UNICODE_STRING$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.UnsafeNativeMethods+UNICODE_STRING", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "$length", $.UInt16);

    $.Field({Static:false, Public:false}, "maximumLength", $.UInt16);

    $.Field({Static:false, Public:false}, "buffer", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlTypes.UnsafeNativeMethods+SecurityImpersonationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.UnsafeNativeMethods+SecurityImpersonationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SecurityAnonymous: 0, 
    SecurityIdentification: 1, 
    SecurityImpersonation: 2, 
    SecurityDelegation: 3, 
  }
);

/* struct System.Data.SqlTypes.UnsafeNativeMethods+SECURITY_QUALITY_OF_SERVICE */ 

(function SECURITY_QUALITY_OF_SERVICE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.UnsafeNativeMethods+SECURITY_QUALITY_OF_SERVICE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "$length", $.UInt32);

    $.Field({Static:false, Public:false}, "impersonationLevel", $.Int32);

    $.Field({Static:false, Public:false}, "contextDynamicTrackingMode", $.Byte);

    $.Field({Static:false, Public:false}, "effectiveOnly", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.UnsafeNativeMethods+IO_STATUS_BLOCK */ 

(function IO_STATUS_BLOCK$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.UnsafeNativeMethods+IO_STATUS_BLOCK", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "status", $.UInt32);

    $.Field({Static:false, Public:false}, "information", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.UnsafeNativeMethods+FILE_FULL_EA_INFORMATION */ 

(function FILE_FULL_EA_INFORMATION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.UnsafeNativeMethods+FILE_FULL_EA_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "nextEntryOffset", $.UInt32);

    $.Field({Static:false, Public:false}, "flags", $.Byte);

    $.Field({Static:false, Public:false}, "EaNameLength", $.Byte);

    $.Field({Static:false, Public:false}, "EaValueLength", $.UInt16);

    $.Field({Static:false, Public:false}, "EaName", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.SqlBinary */ 

(function SqlBinary$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlBinary", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashByteArray", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "PerformCompareByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.EComparison"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlGuid", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function SqlBinary__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlBinary__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Item", $.Byte);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Data.SqlTypes.SqlBoolean */ 

(function SqlBoolean$Members () {
  var $, $thisType;






























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlBoolean", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ByteValue", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFalse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTrue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEquals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEquals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_False", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LogicalNot", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_True", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_value", $.Byte);

    $.Constant({Static:true , Public:false}, "x_Null", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_False", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_True", $.Byte, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "True", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "False", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type);


    function SqlBoolean__cctor () {
      $thisType.True = new $thisType();
      $thisType.False = new $thisType();
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.One = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlBoolean__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTrue", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFalse", $.Boolean);

    $.Property({Static:false, Public:true }, "ByteValue", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlByte */ 

(function SqlByte$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlByte", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Byte, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Byte);

    $.Constant({Static:true , Public:false}, "x_iBitNotByteMax", $.Int32, -256);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlByte__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlByte__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* enum System.Data.SqlTypes.SqlBytesCharsState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.SqlBytesCharsState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Null: 0, 
    Buffer: 1, 
    Stream: 3, 
  }
);

/* class System.Data.SqlTypes.SqlBytes */ 

(function SqlBytes$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SqlBytes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "CopyStreamToBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Storage", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.StorageState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature($.Int64, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int64, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Stream", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBinary", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_rgbBuf", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_lCurLen", $.Int64);

    $.Field({Static:false, Public:false}, "m_stream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_state", $asm11.TypeRef("System.Data.SqlTypes.SqlBytesCharsState"));

    $.Field({Static:false, Public:false}, "m_rgbWorkBuf", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "x_lMaxLen", $.Int64, 2147483647);

    $.Constant({Static:true , Public:false}, "x_lNull", $.Int64, -1);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true }, "MaxLength", $.Int64);

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Item", $.Byte);

    $.Property({Static:false, Public:true }, "Storage", $asm11.TypeRef("System.Data.SqlTypes.StorageState"));

    $.Property({Static:false, Public:true }, "Stream", $asm07.TypeRef("System.IO.Stream"));

    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), 
      /* 2 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlTypes.StreamOnSqlBytes */ 

(function StreamOnSqlBytes$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlTypes.StreamOnSqlBytes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfStreamClosed", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "m_sb", $asm11.TypeRef("System.Data.SqlTypes.SqlBytes"));

    $.Field({Static:false, Public:false}, "m_lPosition", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlChars */ 

(function SqlChars$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SqlChars", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "CopyStreamToBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Char, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Storage", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.StorageState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Stream", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature($.Int64, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int64, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Stream", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_rgchBuf", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "m_lCurLen", $.Int64);

    $.Field({Static:false, Public:false}, "m_stream", $asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"));

    $.Field({Static:false, Public:false}, "m_state", $asm11.TypeRef("System.Data.SqlTypes.SqlBytesCharsState"));

    $.Field({Static:false, Public:false}, "m_rgchWorkBuf", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "x_lMaxLen", $.Int64, 2147483647);

    $.Constant({Static:true , Public:false}, "x_lNull", $.Int64, -1);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true }, "MaxLength", $.Int64);

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true }, "Item", $.Char);

    $.Property({Static:false, Public:false}, "Stream", $asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"));

    $.Property({Static:false, Public:true }, "Storage", $asm11.TypeRef("System.Data.SqlTypes.StorageState"));

    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), 
      /* 2 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* class System.Data.SqlTypes.StreamOnSqlChars */ 

(function StreamOnSqlChars$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlStreamChars"), 
      Name: "System.Data.SqlTypes.StreamOnSqlChars", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlChars"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfStreamClosed", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadChar", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.Field({Static:false, Public:false}, "m_sqlchars", $asm11.TypeRef("System.Data.SqlTypes.SqlChars"));

    $.Field({Static:false, Public:false}, "m_lPosition", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.SqlDateTime */ 

(function SqlDateTime$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlDateTime", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTimeSpan", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DayTicks", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeTicks", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLeapYear", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Type])
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_day", $.Int32);

    $.Field({Static:false, Public:false}, "m_time", $.Int32);

    $.Constant({Static:true , Public:false}, "SQLTicksPerMillisecond", $.Double, 0.3);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerSecond", $.Int32, 300);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerMinute", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerSecond, 60);
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerHour", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerMinute, 60);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerDay", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerHour, 24);
      });

    $.Constant({Static:true , Public:false}, "TicksPerSecond", $.Int64, 10000000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLBaseDate", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLBaseDateTicks", $.Int64);

    $.Constant({Static:true , Public:false}, "MinYear", $.Int32, 1753);

    $.Constant({Static:true , Public:false}, "MaxYear", $.Int32, 9999);

    $.Constant({Static:true , Public:false}, "MinDay", $.Int32, -53690);

    $.Constant({Static:true , Public:false}, "MaxDay", $.Int32, 2958463);

    $.Constant({Static:true , Public:false}, "MinTime", $.Int32, 0);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxTime", $.Int32, function ($pi) {
        return ((($pi.SQLTicksPerDay | 0) - 1) | 0);
      });

    $.Constant({Static:true , Public:false}, "DayBase", $.Int32, 693595);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DaysToMonth365", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DaysToMonth366", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MinDateTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxDateTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MinTimeSpan", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxTimeSpan", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "x_ISO8601_DateTimeFormat", $.String, "yyyy-MM-ddTHH:mm:ss.fff");

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_DateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "x_DateTimeStyle", $asm07.TypeRef("System.Globalization.DateTimeStyles"), 7);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function SqlDateTime__cctor () {
      $thisType.SQLBaseDate = new $asm07.System.DateTime();
      $thisType.MinDateTime = new $asm07.System.DateTime();
      $thisType.MaxDateTime = new $asm07.System.DateTime();
      $thisType.MinTimeSpan = new $asm07.System.TimeSpan();
      $thisType.MaxTimeSpan = new $asm07.System.TimeSpan();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlDateTime__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DayTicks", $.Int32);

    $.Property({Static:false, Public:true }, "TimeTicks", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlDecimal */ 

(function SqlDecimal$Members () {
  var $, $thisType;



















































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlDecimal", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Byte, 
          $.Byte, $.Byte, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddULong", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustScale", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "AdjustScale", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "BGetPrecUI4", 
      new JSIL.MethodSignature($.Byte, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "BGetPrecUI8", 
      new JSIL.MethodSignature($.Byte, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "BGetPrecUI8", 
      new JSIL.MethodSignature($.Byte, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculatePrecision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidPrecScale", 
      new JSIL.MethodSignature(null, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidPrecScale", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChFromDigit", 
      new JSIL.MethodSignature($.Char, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CLenFromPrec", 
      new JSIL.MethodSignature($.Byte, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareNm", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.EComparison"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToPrecScale", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DivByULong", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "DWL", 
      new JSIL.MethodSignature($.UInt64, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FGt10_38", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FGt10_38", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Floor", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "FZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BinData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPositive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "HI", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "LAbsCmp", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "LO", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeInteger", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "MpDiv", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpDiv1", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpMove", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpMul1", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpNormalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpSet", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MultByULong", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "Round", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPositive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSignBit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToZero", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreFromWorkingArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:false}, "ToDecimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPrecision", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ZeroToMaxLen", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "m_bStatus", $.Byte);

    $.Field({Static:false, Public:false}, "m_bLen", $.Byte);

    $.Field({Static:false, Public:false}, "m_bPrec", $.Byte);

    $.Field({Static:false, Public:false}, "m_bScale", $.Byte);

    $.Field({Static:false, Public:false}, "m_data1", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data2", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data3", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data4", $.UInt32);

    $.Constant({Static:true , Public:false}, "NUMERIC_MAX_PRECISION", $.Byte, 38);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxPrecision", $.Byte, 38);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxScale", $.Byte, 38);

    $.Constant({Static:true , Public:false}, "x_bNullMask", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_bIsNull", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_bNotNull", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_bReverseNullMask", $.Byte, 254);

    $.Constant({Static:true , Public:false}, "x_bSignMask", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "x_bPositive", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_bNegative", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "x_bReverseSignMask", $.Byte, 253);

    $.Constant({Static:true , Public:false}, "x_uiZero", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "x_cNumeMax", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "x_lInt32Base", $.Int64, 4294967296);

    $.Constant({Static:true , Public:false}, "x_ulInt32Base", $.UInt64, 4294967296);

    $.Constant({Static:true , Public:false}, "x_ulInt32BaseForMod", $.UInt64, 4294967295);

    $.Constant({Static:true , Public:false}, "x_llMax", $.UInt64, 9223372036854775807);

    $.Constant({Static:true , Public:false}, "x_ulBase10", $.UInt32, 10);

    $.Constant({Static:true , Public:false}, "DUINT_BASE", $.Double, 4294967296);

    $.Constant({Static:true , Public:false}, "DUINT_BASE2", $.Double, 1.8446744073709552E+19);

    $.Constant({Static:true , Public:false}, "DUINT_BASE3", $.Double, 7.9228162514264338E+28);

    $.Constant({Static:true , Public:false}, "DMAX_NUME", $.Double, 1E+38);

    $.Constant({Static:true , Public:false}, "DBL_DIG", $.UInt32, 17);

    $.Constant({Static:true , Public:false}, "x_cNumeDivScaleMin", $.Byte, 6);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_rgulShiftBase", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalHelpersLo", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalHelpersMid", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalHelpersHi", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalHelpersHiHi", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Constant({Static:true , Public:false}, "HelperTableStartIndexLo", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "HelperTableStartIndexMid", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "HelperTableStartIndexHi", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "HelperTableStartIndexHiHi", $.Int32, 33);

    $.Field({Static:true , Public:false, ReadOnly:true }, "rgCLenFromPrec", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "x_ulT1", $.UInt32, 10);

    $.Constant({Static:true , Public:false}, "x_ulT2", $.UInt32, 100);

    $.Constant({Static:true , Public:false}, "x_ulT3", $.UInt32, 1000);

    $.Constant({Static:true , Public:false}, "x_ulT4", $.UInt32, 10000);

    $.Constant({Static:true , Public:false}, "x_ulT5", $.UInt32, 100000);

    $.Constant({Static:true , Public:false}, "x_ulT6", $.UInt32, 1000000);

    $.Constant({Static:true , Public:false}, "x_ulT7", $.UInt32, 10000000);

    $.Constant({Static:true , Public:false}, "x_ulT8", $.UInt32, 100000000);

    $.Constant({Static:true , Public:false}, "x_ulT9", $.UInt32, 1000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT10", $.UInt64, 10000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT11", $.UInt64, 100000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT12", $.UInt64, 1000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT13", $.UInt64, 10000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT14", $.UInt64, 100000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT15", $.UInt64, 1000000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT16", $.UInt64, 10000000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT17", $.UInt64, 100000000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT18", $.UInt64, 1000000000000000000);

    $.Constant({Static:true , Public:false}, "x_dwlT19", $.UInt64, -8446744073709551616);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlDecimal__cctor () {
      $thisType.Null = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlDecimal__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "IsPositive", $.Boolean);

    $.Property({Static:false, Public:true }, "Precision", $.Byte);

    $.Property({Static:false, Public:true }, "Scale", $.Byte);

    $.Property({Static:false, Public:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "BinData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlDouble */ 

(function SqlDouble$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlDouble", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Double);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlDouble__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlDouble__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Double);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* class System.Data.SqlTypes.SqlFileStream */ 

(function SqlFileStream$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlTypes.SqlFileStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.IO.FileAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.IO.FileAccess"), $asm07.TypeRef("System.IO.FileOptions"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssertPathFormat", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DemandAccessPermission", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.FileAccess")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionContext", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPathInternal", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeNtPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenSqlFileStream", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.IO.FileAccess"), $asm07.TypeRef("System.IO.FileOptions"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionContext", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "IoControlCodeFunctionCode", $.UInt16, 2392);

    $.Field({Static:false, Public:false}, "m_fs", $asm07.TypeRef("System.IO.FileStream"));

    $.Field({Static:false, Public:false}, "m_path", $.String);

    $.Field({Static:false, Public:false}, "m_txn", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_disposed", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "MaxWin32PathLength", $.Int32, 32766);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "TransactionContext", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.UnicodeString */ 

(function UnicodeString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Data.SqlTypes.UnicodeString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SecurityQualityOfService */ 

(function SecurityQualityOfService$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Data.SqlTypes.SecurityQualityOfService", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+SecurityImpersonationLevel"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+SecurityImpersonationLevel"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_qos", $asm11.TypeRef("System.Data.SqlTypes.UnsafeNativeMethods+SECURITY_QUALITY_OF_SERVICE"));

    $.Field({Static:false, Public:false}, "m_hQos", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.FileFullEaInformation */ 

(function FileFullEaInformation$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Data.SqlTypes.FileFullEaInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeEaBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "EA_NAME_STRING", $.String);

    $.Field({Static:false, Public:false}, "m_cbBuffer", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.SqlGuid */ 

(function SqlGuid$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlGuid", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 11, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int16, 
          $.Int16, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.EComparison"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBinary")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBinary", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "SizeOfGuid", $.Int32, 16);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_rgiGuidOrder", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function SqlGuid__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlGuid__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlInt16 */ 

(function SqlInt16$Members () {
  var $, $thisType;



































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlInt16", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int16, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Int16);

    $.Constant({Static:true , Public:false}, "O_MASKI2", $.Int32, -32768);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlInt16__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlInt16__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Int16);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlInt32 */ 

(function SqlInt32$Members () {
  var $, $thisType;




































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlInt32", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameSignInt", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Int32);

    $.Constant({Static:true , Public:false}, "x_iIntMin", $.Int64, -2147483648);

    $.Constant({Static:true , Public:false}, "x_lBitNotIntMax", $.Int64, -2147483648);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlInt32__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlInt32__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlInt64 */ 

(function SqlInt64$Members () {
  var $, $thisType;




































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlInt64", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameSignLong", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Int64);

    $.Constant({Static:true , Public:false}, "x_lLowIntMask", $.Int64, 4294967295);

    $.Constant({Static:true , Public:false}, "x_lHighIntMask", $.Int64, -4294967296);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlInt64__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlInt64__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* struct System.Data.SqlTypes.SqlMoney */ 

(function SqlMoney$Members () {
  var $, $thisType;



































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlMoney", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToSqlInternalRepresentation", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Int64);

    $.Constant({Static:true , Public:false}, "x_iMoneyScale", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "x_lTickBase", $.Int64, 10000);

    $.Constant({Static:true , Public:false}, "x_dTickBase", $.Double, 10000);

    $.Constant({Static:true , Public:false}, "MinLong", $.Int64, -922337203685477);

    $.Constant({Static:true , Public:false}, "MaxLong", $.Int64, 922337203685477);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlMoney__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlMoney__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Decimal"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* class System.Data.SqlTypes.SQLResource */ 

(function SQLResource$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SQLResource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOpStreamClosed", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOpStreamNonReadable", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOpStreamNonSeekable", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOpStreamNonWritable", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullString", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MessageString", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ArithOverflowMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DivideByZeroMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullValueMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "TruncationMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeOverflowMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConcatDiffCollationMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "CompareDiffCollationMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidFlagMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumeToDecOverflowMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConversionOverflowMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidDateTimeMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "TimeZoneSpecifiedMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidArraySizeMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidPrecScaleMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "FormatMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotFilledMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "AlreadyFilledMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ClosedXmlReaderMessage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlTypes.SqlSingle */ 

(function SqlSingle$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlSingle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Single, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_value", $.Single);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);


    function SqlSingle__cctor () {
      $thisType.Null = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlSingle__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* enum System.Data.SqlTypes.SqlCompareOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.SqlCompareOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    IgnoreCase: 1, 
    IgnoreNonSpace: 2, 
    IgnoreKanaType: 8, 
    IgnoreWidth: 16, 
    BinarySort2: 16384, 
    BinarySort: 32768, 
  }
);

/* struct System.Data.SqlTypes.SqlString */ 

(function SqlString$Members () {
  var $, $thisType;











































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlTypes.SqlString", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), 
          $.String, $asm07.TypeRef("System.Globalization.CompareInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [
          $.Type, $.Type, 
          $asm11.TypeRef("System.Data.SqlTypes.EComparison")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareBinary", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareBinary2", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareOptionsFromSqlCompareOptions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.CompareOptions"), [$asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FBinarySort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompareInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CompareInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SqlCompareOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNonUnicodeBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnicodeBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlTypes.SqlGuid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCompareInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StringCompare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.ExternalMethod({Static:false, Public:true }, "ToSqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDateTime", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlGuid", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSqlCompareOptions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.Field({Static:false, Public:false}, "m_value", $.String);

    $.Field({Static:false, Public:false}, "m_cmpInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:false, Public:false}, "m_lcid", $.Int32);

    $.Field({Static:false, Public:false}, "m_flag", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_UnicodeEncoding", $asm07.TypeRef("System.Text.UnicodeEncoding"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "IgnoreCase", $.Int32, 1);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IgnoreWidth", $.Int32, 16);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IgnoreNonSpace", $.Int32, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "IgnoreKanaType", $.Int32, 8);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BinarySort", $.Int32, 32768);

    $.Field({Static:true , Public:true , ReadOnly:true }, "BinarySort2", $.Int32, 16384);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_iDefaultFlag", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), function ($pi) {
        return $asm11.System.Data.SqlTypes.SqlCompareOptions.$Flags("IgnoreCase", "IgnoreKanaType", "IgnoreWidth");
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_iValidCompareOptionMask", $asm07.TypeRef("System.Globalization.CompareOptions"), function ($pi) {
        return $asm07.System.Globalization.CompareOptions.$Flags("IgnoreCase", "IgnoreKanaType", "IgnoreNonSpace", "IgnoreWidth");
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_iValidSqlCompareOptionMask", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"), function ($pi) {
        return $asm11.System.Data.SqlTypes.SqlCompareOptions.$Flags(
            "BinarySort", "BinarySort2", "IgnoreCase", "IgnoreKanaType", 
            "IgnoreNonSpace", "IgnoreWidth"
        );
      });

    $.Constant({Static:true , Public:false}, "x_lcidUSEnglish", $.Int32, 1033);

    $.Constant({Static:true , Public:false}, "x_lcidBinary", $.Int32, 33280);


    function SqlString__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlString__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "LCID", $.Int32);

    $.Property({Static:false, Public:true }, "CultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "CompareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Property({Static:false, Public:true }, "SqlCompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* class System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper */ 

(function SqlTypesSchemaImporterExtensionHelper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), 
      Name: "System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeNamespaceImport")]), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeNamespaceImport")]), 
          $.String, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "m_references", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "m_namespaceImports", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeNamespaceImport")]));

    $.Field({Static:false, Public:false}, "m_destinationType", $.String);

    $.Field({Static:false, Public:false}, "m_direct", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SqlTypesNamespace", $.String, "http://schemas.microsoft.com/sqlserver/2004/sqltypes");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeCharSchemaImporterExtension */ 

(function TypeCharSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeCharSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeNCharSchemaImporterExtension */ 

(function TypeNCharSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeNCharSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeVarCharSchemaImporterExtension */ 

(function TypeVarCharSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeVarCharSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension */ 

(function TypeNVarCharSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeTextSchemaImporterExtension */ 

(function TypeTextSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeTextSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeNTextSchemaImporterExtension */ 

(function TypeNTextSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeNTextSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension */ 

(function TypeVarBinarySchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeBinarySchemaImporterExtension */ 

(function TypeBinarySchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeBinarySchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeVarImageSchemaImporterExtension */ 

(function TypeVarImageSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeVarImageSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeDecimalSchemaImporterExtension */ 

(function TypeDecimalSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeDecimalSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeNumericSchemaImporterExtension */ 

(function TypeNumericSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeNumericSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeBigIntSchemaImporterExtension */ 

(function TypeBigIntSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeBigIntSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeIntSchemaImporterExtension */ 

(function TypeIntSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeIntSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension */ 

(function TypeSmallIntSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension */ 

(function TypeTinyIntSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeBitSchemaImporterExtension */ 

(function TypeBitSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeBitSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeFloatSchemaImporterExtension */ 

(function TypeFloatSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeFloatSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeRealSchemaImporterExtension */ 

(function TypeRealSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeRealSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension */ 

(function TypeDateTimeSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension */ 

(function TypeSmallDateTimeSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeMoneySchemaImporterExtension */ 

(function TypeMoneySchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeMoneySchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension */ 

(function TypeSmallMoneySchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension */ 

(function TypeUniqueIdentifierSchemaImporterExtension$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper"), 
      Name: "System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlTypes.EComparison */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.EComparison", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LT: 0, 
    LE: 1, 
    EQ: 2, 
    GE: 3, 
    GT: 4, 
    NE: 5, 
  }
);

/* enum System.Data.SqlTypes.StorageState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlTypes.StorageState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Buffer: 0, 
    Stream: 1, 
    UnmanagedBuffer: 2, 
  }
);

/* class System.Data.SqlTypes.SqlTypeException */ 

(function SqlTypeException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Data.SqlTypes.SqlTypeException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlTypeExceptionSerialization", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlNullValueException */ 

(function SqlNullValueException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypeException"), 
      Name: "System.Data.SqlTypes.SqlNullValueException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlNullValueExceptionSerialization", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlTruncateException */ 

(function SqlTruncateException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypeException"), 
      Name: "System.Data.SqlTypes.SqlTruncateException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlTruncateExceptionSerialization", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlNotFilledException */ 

(function SqlNotFilledException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypeException"), 
      Name: "System.Data.SqlTypes.SqlNotFilledException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlAlreadyFilledException */ 

(function SqlAlreadyFilledException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlTypes.SqlTypeException"), 
      Name: "System.Data.SqlTypes.SqlAlreadyFilledException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SQLDebug */ 

(function SQLDebug$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SQLDebug", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlTypes.SqlXml */ 

(function SqlXml$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlTypes.SqlXml", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMemoryStreamFromXmlReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSqlReaderDelegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Func`4", [
            $asm07.TypeRef("System.IO.Stream"), $asm2F.TypeRef("System.Xml.XmlReaderSettings"), 
            $asm2F.TypeRef("System.Xml.XmlParserContext"), $asm2F.TypeRef("System.Xml.XmlReader")
          ]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSqlXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CreateSqlReaderMethodInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsdType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "GetSchema");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.ReadXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "ReadXml");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlSerializable.WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    )
      .Overrides($asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable"), "WriteXml");

    $.Field({Static:false, Public:false}, "m_fNotNull", $.Boolean);

    $.Field({Static:false, Public:false}, "m_stream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "firstCreateReader", $.Boolean);

    $.Field({Static:false, Public:false}, "createSqlReaderMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "sqlReaderDelegate", $asm07.TypeRef("System.Func`4", [
          $asm07.TypeRef("System.IO.Stream"), $asm2F.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm2F.TypeRef("System.Xml.XmlParserContext"), $asm2F.TypeRef("System.Xml.XmlReader")
        ]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultXmlReaderSettings", $asm2F.TypeRef("System.Xml.XmlReaderSettings"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultXmlReaderSettingsCloseInput", $asm2F.TypeRef("System.Xml.XmlReaderSettings"));

    $.Field({Static:true , Public:false}, "s_createSqlReaderMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "CreateSqlReaderMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable"), 
      /* 1 */ $asm2F.TypeRef("System.Xml.Serialization.IXmlSerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), function () { return ["GetXsdType"]; });

})();

/* class System.Data.SqlTypes.SqlXmlStreamWrapper */ 

(function SqlXmlStreamWrapper$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlTypes.SqlXmlStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStreamClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfStreamCannotRead", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfStreamCannotSeek", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfStreamCannotWrite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfStreamClosed", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "m_stream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_lPosition", $.Int64);

    $.Field({Static:false, Public:false}, "m_isClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.SqlClient");
/* class System.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList */ 

(function SqlClientEncryptionAlgorithmFactoryList$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAlgorithm", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"), $.Byte, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRegisteredCipherAlgorithmNames", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionAlgoFactoryList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithmFactory")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_singletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSymmetricKeyCache */ 

(function SqlSymmetricKeyCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSymmetricKeyCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey")])
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_singletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSymmetricKeyCache+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSymmetricKeyCache+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetKey$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "keyInfo", $asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider */ 

(function SqlColumnEncryptionKeyStoreProvider$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider */ 

(function SqlColumnEncryptionCertificateStoreProvider$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider"), 
      Name: "System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCertificate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCertificateByPath", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCSPFromCertificatePrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValidCertificateLocations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RSADecrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAEncrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSASignHashedData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAVerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCertificatePathLength", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEncryptionAlgorithm", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNonEmptyCertificatePath", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Constant({Static:true , Public:true }, "ProviderName", $.String, "MSSQL_CERTIFICATE_STORE");

    $.Constant({Static:true , Public:false}, "RSAEncryptionAlgorithmWithOAEP", $.String, "RSA_OAEP");

    $.Constant({Static:true , Public:false}, "_certLocationLocalMachine", $.String, "LocalMachine");

    $.Constant({Static:true , Public:false}, "_certLocationCurrentUser", $.String, "CurrentUser");

    $.Constant({Static:true , Public:false}, "_myCertificateStore", $.String, "My");

    $.Constant({Static:true , Public:false}, "_certificatePathFormat", $.String, "[LocalMachine|CurrentUser]/My/[Thumbprint]");

    $.Constant({Static:true , Public:false}, "_hashingAlgorithm", $.String, "SHA256");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlColumnEncryptionCngProvider */ 

(function SqlColumnEncryptionCngProvider$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider"), 
      Name: "System.Data.SqlClient.SqlColumnEncryptionCngProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRSACngProvider", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.RSACng"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCngProviderAndKeyId", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$asm10.TypeRef("System.Security.Cryptography.RSACng")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSADecrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm10.TypeRef("System.Security.Cryptography.RSACng"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAEncrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm10.TypeRef("System.Security.Cryptography.RSACng"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSASignHashedData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm10.TypeRef("System.Security.Cryptography.RSACng")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAVerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm10.TypeRef("System.Security.Cryptography.RSACng")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEncryptionAlgorithm", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNonEmptyKeyPath", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Constant({Static:true , Public:true }, "ProviderName", $.String, "MSSQL_CNG_STORE");

    $.Constant({Static:true , Public:false}, "RSAEncryptionAlgorithmWithOAEP", $.String, "RSA_OAEP");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlColumnEncryptionCspProvider */ 

(function SqlColumnEncryptionCspProvider$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider"), 
      Name: "System.Data.SqlClient.SqlColumnEncryptionCspProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRSACryptoProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptColumnEncryptionKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCspProviderAndKeyName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderType", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSADecrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAEncrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSASignHashedData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RSAVerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEncryptionAlgorithm", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNonEmptyCSPKeyPath", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Constant({Static:true , Public:true }, "ProviderName", $.String, "MSSQL_CSP_PROVIDER");

    $.Constant({Static:true , Public:false}, "RSAEncryptionAlgorithmWithOAEP", $.String, "RSA_OAEP");

    $.Constant({Static:true , Public:false}, "HashingAlgorithm", $.String, "SHA256");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientEncryptionAlgorithm */ 

(function SqlClientEncryptionAlgorithm$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlClientEncryptionAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EncryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm */ 

(function SqlAeadAes256CbcHmac256Algorithm$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"), 
      Name: "System.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey"), $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EncryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareAuthenticationTag", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "AlgorithmName", $.String, "AEAD_AES_256_CBC_HMAC_SHA256");

    $.Constant({Static:true , Public:false}, "_KeySizeInBytes", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "_BlockSizeInBytes", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "_MinimumCipherTextLengthInBytesNoAuthenticationTag", $.Int32, 33);

    $.Constant({Static:true , Public:false}, "_MinimumCipherTextLengthInBytesWithAuthenticationTag", $.Int32, 65);

    $.Constant({Static:true , Public:false}, "_cipherMode", $asm07.TypeRef("System.Security.Cryptography.CipherMode"), 1);

    $.Constant({Static:true , Public:false}, "_paddingMode", $asm07.TypeRef("System.Security.Cryptography.PaddingMode"), 2);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isDeterministic", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_algorithmVersion", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_columnEncryptionKey", $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cryptoProviderPool", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$asm10.TypeRef("System.Security.Cryptography.AesCryptoServiceProvider")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_version", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_versionSize", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientEncryptionAlgorithmFactory */ 

(function SqlClientEncryptionAlgorithmFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlClientEncryptionAlgorithmFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"), $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlAeadAes256CbcHmac256Factory */ 

(function SqlAeadAes256CbcHmac256Factory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithmFactory"), 
      Name: "System.Data.SqlClient.SqlAeadAes256CbcHmac256Factory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"), $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionAlgorithms", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientSymmetricKey */ 

(function SqlClientSymmetricKey$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlClientSymmetricKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_RootKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKeyHash", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rootKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false, Virtual:true }, "RootKey", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey */ 

(function SqlAeadAes256CbcHmac256EncryptionKey$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"), 
      Name: "System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IVKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MACKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Constant({Static:true , Public:false}, "KeySize", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "_encryptionKeySaltFormat", $.String, "Microsoft SQL Server cell encryption key with encryption algorithm:{0} and key length:{1}");

    $.Constant({Static:true , Public:false}, "_macKeySaltFormat", $.String, "Microsoft SQL Server cell MAC key with encryption algorithm:{0} and key length:{1}");

    $.Constant({Static:true , Public:false}, "_ivKeySaltFormat", $.String, "Microsoft SQL Server cell IV key with encryption algorithm:{0} and key length:{1}");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionKey", $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_macKey", $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ivKey", $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_algorithmName", $.String);

    $.Property({Static:false, Public:false}, "EncryptionKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "MACKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "IVKey", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlAes256CbcAlgorithm */ 

(function SqlAes256CbcAlgorithm$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm"), 
      Name: "System.Data.SqlClient.SqlAes256CbcAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey"), $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EncryptData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Constant({Static:true , Public:false}, "AlgorithmName", $.String, "AES_256_CBC");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlAes256CbcFactory */ 

(function SqlAes256CbcFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlAeadAes256CbcHmac256Factory"), 
      Name: "System.Data.SqlClient.SqlAes256CbcFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Create", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlClientSymmetricKey"), $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionAlgorithms", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlAes256CbcAlgorithm")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlClientEncryptionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlClientEncryptionType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PlainText: 0, 
    Deterministic: 1, 
    Randomized: 2, 
  }
);

/* class System.Data.SqlClient.SqlSecurityUtility */ 

(function SqlSecurityUtility$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("System.Data.SqlClient.SqlSecurityUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecryptSymmetricKey", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecryptWithKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptWithKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateRandomBytes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBase64LengthFromByteLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesAsString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentFunctionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHexString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHMACWithSHA256", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRegisteredCipherAlgorithmIds", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSHA256Hash", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAndGetEncryptionAlgorithmName", 
      new JSIL.MethodSignature($.String, [$.Byte, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlQueryMetadataCache */ 

(function SqlQueryMetadataCache$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlQueryMetadataCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddQueryMetadata", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCacheLookupKeyFromSqlCommand", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQueryMetadataIfExists", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCacheHits", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCacheMisses", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateCacheEntry", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCacheCounts", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "CacheSize", $.Int32, 2000);

    $.Constant({Static:true , Public:false}, "CacheTrimThreshold", $.Int32, 300);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_singletonInstance", $.Type);

    $.Field({Static:false, Public:false}, "_inTrim", $.Int32);

    $.Field({Static:false, Public:false}, "_cacheHits", $.Int64);

    $.Field({Static:false, Public:false}, "_cacheMisses", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.ApplicationIntent */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.ApplicationIntent", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ReadWrite: 0, 
    ReadOnly: 1, 
  }
);

/* class System.Data.SqlClient.SqlCredential */ 

(function SqlCredential$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCredential", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.SecureString")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecureString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_userId", $.String);

    $.Field({Static:false, Public:false}, "_password", $asm07.TypeRef("System.Security.SecureString"));

    $.Property({Static:false, Public:true }, "UserId", $.String);

    $.Property({Static:false, Public:true }, "Password", $asm07.TypeRef("System.Security.SecureString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnectionPoolKey */ 

(function DbConnectionPoolKey$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbConnectionPoolKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ConnectionString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionPoolKey */ 

(function SqlConnectionPoolKey$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
      Name: "System.Data.SqlClient.SqlConnectionPoolKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateHashCode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AccessToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Credential", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCredential"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.Field({Static:false, Public:false}, "_credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"));

    $.Field({Static:false, Public:false}, "_hashValue", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_accessToken", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ConnectionString", $.String);

    $.Property({Static:false, Public:false}, "Credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"));

    $.Property({Static:false, Public:false}, "AccessToken", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.AssemblyCache */ 

(function AssemblyCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AssemblyCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInfoFromType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlUdtInfo"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLength", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.SqlClient.OnChangeEventHandler */ 

JSIL.MakeDelegate("System.Data.SqlClient.OnChangeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.SqlClient.SqlNotificationEventArgs")]));

/* class System.Data.SqlClient.SqlRowsCopiedEventArgs */ 

(function SqlRowsCopiedEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.SqlClient.SqlRowsCopiedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Abort", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowsCopied", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Abort", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_abort", $.Boolean);

    $.Field({Static:false, Public:false}, "_rowsCopied", $.Int64);

    $.Property({Static:false, Public:true }, "Abort", $.Boolean);

    $.Property({Static:false, Public:true }, "RowsCopied", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.SqlClient.SqlRowsCopiedEventHandler */ 

JSIL.MakeDelegate("System.Data.SqlClient.SqlRowsCopiedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventArgs")]));

/* class System.Data.SqlClient.SqlBuffer */ 

(function SqlBuffer$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "Clear", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneBufferArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateBufferArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillInTimeInfo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer+TimeInfo")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Byte, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Boolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Byte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTimeOffset", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Decimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Double", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Guid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int16", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KatmaiDateTimeSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KatmaiDateTimeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Single", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlBinary", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlBoolean", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlByte", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlByte"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlCachedBuffer", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCachedBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlDateTime", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlDecimal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlDouble", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlGuid", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlInt16", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlInt32", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlInt64", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlMoney", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlSingle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlXml", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlXml"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_String", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Time", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VariantInternalStorageType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateFromByteArray", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTicksFromDateTime2Info", 
      new JSIL.MethodSignature($.Int64, [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer+DateTime2Info")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromStorageType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Boolean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Byte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Double", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int16", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int32", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Int64", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Single", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlBinary", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlCachedBuffer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCachedBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlGuid", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlXml", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlXml"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDate", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDateTime2", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDateTime2", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDateTimeOffset", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTimeOffset"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToDecimal", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToMoney", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToNullOfType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToTime", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfNull", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_isNull", $.Boolean);

    $.Field({Static:false, Public:false}, "_type", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"));

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+Storage"));

    $.Field({Static:false, Public:false}, "_object", $.Object);

    $.Field({Static:true , Public:false}, "__katmaiDateTimeOffsetFormatByScale", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "__katmaiDateTime2FormatByScale", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "__katmaiTimeFormatByScale", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNull", $.Boolean);

    $.Property({Static:false, Public:false}, "VariantInternalStorageType", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"));

    $.Property({Static:false, Public:false}, "Boolean", $.Boolean);

    $.Property({Static:false, Public:false}, "Byte", $.Byte);

    $.Property({Static:false, Public:false}, "ByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "DateTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Decimal", $asm07.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:false}, "Double", $.Double);

    $.Property({Static:false, Public:false}, "Guid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "Int16", $.Int16);

    $.Property({Static:false, Public:false}, "Int32", $.Int32);

    $.Property({Static:false, Public:false}, "Int64", $.Int64);

    $.Property({Static:false, Public:false}, "Single", $.Single);

    $.Property({Static:false, Public:false}, "String", $.String);

    $.Property({Static:false, Public:false}, "KatmaiDateTimeString", $.String);

    $.Property({Static:false, Public:false}, "KatmaiDateTimeSqlString", $asm11.TypeRef("System.Data.SqlTypes.SqlString"));

    $.Property({Static:false, Public:false}, "Time", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "DateTimeOffset", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:false}, "SqlBinary", $asm11.TypeRef("System.Data.SqlTypes.SqlBinary"));

    $.Property({Static:false, Public:false}, "SqlBoolean", $asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"));

    $.Property({Static:false, Public:false}, "SqlByte", $asm11.TypeRef("System.Data.SqlTypes.SqlByte"));

    $.Property({Static:false, Public:false}, "SqlCachedBuffer", $asm11.TypeRef("System.Data.SqlClient.SqlCachedBuffer"));

    $.Property({Static:false, Public:false}, "SqlXml", $asm11.TypeRef("System.Data.SqlTypes.SqlXml"));

    $.Property({Static:false, Public:false}, "SqlDateTime", $asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"));

    $.Property({Static:false, Public:false}, "SqlDecimal", $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"));

    $.Property({Static:false, Public:false}, "SqlDouble", $asm11.TypeRef("System.Data.SqlTypes.SqlDouble"));

    $.Property({Static:false, Public:false}, "SqlGuid", $asm11.TypeRef("System.Data.SqlTypes.SqlGuid"));

    $.Property({Static:false, Public:false}, "SqlInt16", $asm11.TypeRef("System.Data.SqlTypes.SqlInt16"));

    $.Property({Static:false, Public:false}, "SqlInt32", $asm11.TypeRef("System.Data.SqlTypes.SqlInt32"));

    $.Property({Static:false, Public:false}, "SqlInt64", $asm11.TypeRef("System.Data.SqlTypes.SqlInt64"));

    $.Property({Static:false, Public:false}, "SqlMoney", $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"));

    $.Property({Static:false, Public:false}, "SqlSingle", $asm11.TypeRef("System.Data.SqlTypes.SqlSingle"));

    $.Property({Static:false, Public:false}, "SqlString", $asm11.TypeRef("System.Data.SqlTypes.SqlString"));

    $.Property({Static:false, Public:false}, "SqlValue", $.Object);

    $.Property({Static:false, Public:false}, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlBuffer+StorageType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlBuffer+StorageType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Boolean: 1, 
    Byte: 2, 
    DateTime: 3, 
    Decimal: 4, 
    Double: 5, 
    Int16: 6, 
    Int32: 7, 
    Int64: 8, 
    Money: 9, 
    Single: 10, 
    String: 11, 
    SqlBinary: 12, 
    SqlCachedBuffer: 13, 
    SqlGuid: 14, 
    SqlXml: 15, 
    Date: 16, 
    DateTime2: 17, 
    DateTimeOffset: 18, 
    Time: 19, 
  }
);

/* struct System.Data.SqlClient.SqlBuffer+DateTimeInfo */ 

(function DateTimeInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+DateTimeInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "daypart", $.Int32);

    $.Field({Static:false, Public:false}, "timepart", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlBuffer+NumericInfo */ 

(function NumericInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+NumericInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "data1", $.Int32);

    $.Field({Static:false, Public:false}, "data2", $.Int32);

    $.Field({Static:false, Public:false}, "data3", $.Int32);

    $.Field({Static:false, Public:false}, "data4", $.Int32);

    $.Field({Static:false, Public:false}, "precision", $.Byte);

    $.Field({Static:false, Public:false}, "scale", $.Byte);

    $.Field({Static:false, Public:false}, "positive", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlBuffer+TimeInfo */ 

(function TimeInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+TimeInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "ticks", $.Int64);

    $.Field({Static:false, Public:false}, "scale", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlBuffer+DateTime2Info */ 

(function DateTime2Info$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+DateTime2Info", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "date", $.Int32);

    $.Field({Static:false, Public:false}, "timeInfo", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+TimeInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlBuffer+DateTimeOffsetInfo */ 

(function DateTimeOffsetInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+DateTimeOffsetInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dateTime2Info", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+DateTime2Info"));

    $.Field({Static:false, Public:false}, "offset", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlBuffer+Storage */ 

(function Storage$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBuffer+Storage", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "_boolean", $.Boolean);

    $.Field({Static:false, Public:false, Offset: 0}, "_byte", $.Byte);

    $.Field({Static:false, Public:false, Offset: 0}, "_dateTimeInfo", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+DateTimeInfo"));

    $.Field({Static:false, Public:false, Offset: 0}, "_double", $.Double);

    $.Field({Static:false, Public:false, Offset: 0}, "_numericInfo", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+NumericInfo"));

    $.Field({Static:false, Public:false, Offset: 0}, "_int16", $.Int16);

    $.Field({Static:false, Public:false, Offset: 0}, "_int32", $.Int32);

    $.Field({Static:false, Public:false, Offset: 0}, "_int64", $.Int64);

    $.Field({Static:false, Public:false, Offset: 0}, "_single", $.Single);

    $.Field({Static:false, Public:false, Offset: 0}, "_timeInfo", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+TimeInfo"));

    $.Field({Static:false, Public:false, Offset: 0}, "_dateTime2Info", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+DateTime2Info"));

    $.Field({Static:false, Public:false, Offset: 0}, "_dateTimeOffsetInfo", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer+DateTimeOffsetInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient._ColumnMapping */ 

(function _ColumnMapping$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient._ColumnMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.Field({Static:false, Public:false}, "_sourceColumnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_metadata", $asm11.TypeRef("System.Data.SqlClient._SqlMetaData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.Row */ 

(function Row$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.Row", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_dataFields", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:false}, "DataFields", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:false}, "Item", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.Result */ 

(function Result$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.Result", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.Row"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.Row"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.Field({Static:false, Public:false}, "_metadata", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:false}, "_rowset", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "MetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.SqlClient.Row"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.BulkCopySimpleResultSet */ 

(function BulkCopySimpleResultSet$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.BulkCopySimpleResultSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateIndexMap", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRowBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.Result"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMetaData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.Field({Static:false, Public:false}, "_results", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "resultSet", $asm11.TypeRef("System.Data.SqlClient.Result"));

    $.Field({Static:false, Public:false}, "indexmap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.SqlClient.Result"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.SqlBulkCopy */ 

(function SqlBulkCopy$Members () {
  var $, $thisType;
























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyOptions"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsyncContinued$gb__131_1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsyncContinued$gb__131_2", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsyncContinuedOnSuccess$gb__132_1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lCreateAndExecuteInitialQueryAsync$gb__83_0", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lReadFromRowSourceAsync$gb__90_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lSubmitUpdateBulkCommand$gb__85_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lWriteRowSourceToServerAsync$gb__117_3", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__136_0", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__136_3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__136_7", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AbortTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_SqlRowsCopied", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzeTargetAndCreateUpdateBulkCommand", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendColumnNameAndTypeName", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndRaiseNotification", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForCancellation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanUpStateObjectOnError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CommitTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueTaskPend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), 
          $asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("System.Data.SqlClient._SqlMetaData"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBatchesAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), $.String, 
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBatchesAsyncContinued", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), $.String, 
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBatchesAsyncContinuedOnError", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBatchesAsyncContinuedOnSuccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), $.String, 
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyColumnsAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Int32, $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyColumnsAsyncSetupContinuation", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $asm07.TypeRef("System.Threading.Tasks.Task"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyRowsAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAndExecuteInitialQueryAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInitialQuery", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateOrValidateConnection", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FireRowsCopiedEvent", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BulkCopyTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationTableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableStreaming", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotifyAfter", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnMetadata", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+SourceColumnMetadata"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueFromSourceRow", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCopyOption", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConnectionClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRowsCopied", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFromRowSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFromRowSourceAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWriteColumnValueAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterForConnectionCloseNotification", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_SqlRowsCopied", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RunParser", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RunParserReliably", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BulkCopyTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DestinationTableName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableStreaming", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotifyAfter", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SubmitUpdateBulkCommand", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false}, "UnquotedName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateBulkCopyVariant", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMetaData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRowSourceToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRowSourceToServerCommon", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServer", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.Common.DbDataReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.Common.DbDataReader"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.IDataReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.IDataReader"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToServerAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataRowState"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteToServerInternalAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteToServerInternalRestAsync", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteToServerInternalRestContinuedAsync", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), $asm07.TypeRef("System.Threading.CancellationToken"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.Constant({Static:true , Public:false}, "TranCountResultId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "TranCountRowId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "TranCountValueId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MetaDataResultId", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CollationResultId", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ColIdId", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "NameId", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Tds_CollationId", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "CollationId", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "MAX_LENGTH", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "DefaultCommandTimeout", $.Int32, 30);

    $.Field({Static:false, Public:false}, "_enableStreaming", $.Boolean);

    $.Field({Static:false, Public:false}, "_batchSize", $.Int32);

    $.Field({Static:false, Public:false}, "_ownConnection", $.Boolean);

    $.Field({Static:false, Public:false}, "_copyOptions", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyOptions"));

    $.Field({Static:false, Public:false}, "_timeout", $.Int32);

    $.Field({Static:false, Public:false}, "_destinationTableName", $.String);

    $.Field({Static:false, Public:false}, "_rowsCopied", $.Int32);

    $.Field({Static:false, Public:false}, "_notifyAfter", $.Int32);

    $.Field({Static:false, Public:false}, "_rowsUntilNotification", $.Int32);

    $.Field({Static:false, Public:false}, "_insideRowsCopiedEvent", $.Boolean);

    $.Field({Static:false, Public:false}, "_rowSource", $.Object);

    $.Field({Static:false, Public:false}, "_SqlDataReaderRowSource", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_rowSourceIsSqlDataReaderSmi", $.Boolean);

    $.Field({Static:false, Public:false}, "_DbDataReaderRowSource", $asm11.TypeRef("System.Data.Common.DbDataReader"));

    $.Field({Static:false, Public:false}, "_dataTableSource", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_columnMappings", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"));

    $.Field({Static:false, Public:false}, "_localColumnMappings", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"));

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_internalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"));

    $.Field({Static:false, Public:false}, "_externalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"));

    $.Field({Static:false, Public:false}, "_rowSourceType", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+ValueSourceType"));

    $.Field({Static:false, Public:false}, "_currentRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "_currentRowLength", $.Int32);

    $.Field({Static:false, Public:false}, "_rowStateToSkip", $asm11.TypeRef("System.Data.DataRowState"));

    $.Field({Static:false, Public:false}, "_rowEnumerator", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_sortedColumnMappings", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient._ColumnMapping")]));

    $.Field({Static:false, Public:false}, "_rowsCopiedEventHandler", $asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventHandler"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false}, "_savedBatchSize", $.Int32);

    $.Field({Static:false, Public:false}, "_hasMoreRowToCopy", $.Boolean);

    $.Field({Static:false, Public:false}, "_isAsyncBulkCopy", $.Boolean);

    $.Field({Static:false, Public:false}, "_isBulkCopyingInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "_parserLock", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds+SyncAsyncLock"));

    $.Field({Static:false, Public:false}, "_currentRowMetadata", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+SourceColumnMetadata")]));

    $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "BulkCopyTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "EnableStreaming", $.Boolean);

    $.Property({Static:false, Public:true }, "ColumnMappings", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"));

    $.Property({Static:false, Public:true }, "DestinationTableName", $.String);

    $.Property({Static:false, Public:true }, "NotifyAfter", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Event({Static:false, Public:true }, "SqlRowsCopied", $asm11.TypeRef("System.Data.SqlClient.SqlRowsCopiedEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlBulkCopy+ValueSourceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlBulkCopy+ValueSourceType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    IDataReader: 1, 
    DataTable: 2, 
    RowArray: 3, 
    DbDataReader: 4, 
  }
);

/* enum System.Data.SqlClient.SqlBulkCopy+ValueMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlBulkCopy+ValueMethod", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    GetValue: 0, 
    SqlTypeSqlDecimal: 1, 
    SqlTypeSqlDouble: 2, 
    SqlTypeSqlSingle: 3, 
    DataFeedStream: 4, 
    DataFeedText: 5, 
    DataFeedXml: 6, 
  }
);

/* struct System.Data.SqlClient.SqlBulkCopy+SourceColumnMetadata */ 

(function SourceColumnMetadata$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+SourceColumnMetadata", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+ValueMethod"), $.Boolean, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Method", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+ValueMethod"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "IsSqlType", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "IsDataFeed", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass117_0 */ 

(function $l$gc__DisplayClass117_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass117_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "columnCount", $.Int32);

    $.Field({Static:false, Public:true }, "ctoken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass117_1 */ 

(function $l$gc__DisplayClass117_1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass117_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteRowSourceToServerAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteRowSourceToServerAsync$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass117_0"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteRowSourceToServerAsync$gb__117_2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__136_8", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__117_2", $asm07.TypeRef("System.Action"));

    $.Field({Static:true , Public:true }, "$l$g9__136_8", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass125_0 */ 

(function $l$gc__DisplayClass125_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass125_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyColumnsAsyncSetupContinuation$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass128_0 */ 

(function $l$gc__DisplayClass128_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass128_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lContinueTaskPend$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "action", $asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass129_0 */ 

(function $l$gc__DisplayClass129_0$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass129_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyRowsAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyRowsAsync$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyRowsAsync$gb__2", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "totalRows", $.Int32);

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm07.TypeRef("System.Action"));

    $.Field({Static:false, Public:true }, "$l$g9__2", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass130_0 */ 

(function $l$gc__DisplayClass130_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass130_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "internalResults", $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"));

    $.Field({Static:false, Public:true }, "updateBulkCommandText", $.String);

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass131_0 */ 

(function $l$gc__DisplayClass131_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass131_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsyncContinued$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "internalResults", $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"));

    $.Field({Static:false, Public:true }, "updateBulkCommandText", $.String);

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass132_0 */ 

(function $l$gc__DisplayClass132_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass132_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyBatchesAsyncContinuedOnSuccess$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "internalResults", $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"));

    $.Field({Static:false, Public:true }, "updateBulkCommandText", $.String);

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass135_0 */ 

(function $l$gc__DisplayClass135_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass135_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestContinuedAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "task", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass136_0 */ 

(function $l$gc__DisplayClass136_0$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass136_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__4", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__5", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__6", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cancellableReconnectTS", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "regReconnectCancel", $asm07.TypeRef("System.Threading.CancellationTokenRegistration"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass136_1"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass136_1 */ 

(function $l$gc__DisplayClass136_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass136_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalRestAsync$gb__9", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cts", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "internalResultsTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass137_0 */ 

(function $l$gc__DisplayClass137_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopy+<>c__DisplayClass137_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteToServerInternalAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "ctoken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopy"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlBulkCopyColumnMapping */ 

(function SqlBulkCopyColumnMapping$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlBulkCopyColumnMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationOrdinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceOrdinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DestinationColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DestinationOrdinal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceOrdinal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_destinationColumnName", $.String);

    $.Field({Static:false, Public:false}, "_destinationColumnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceColumnName", $.String);

    $.Field({Static:false, Public:false}, "_sourceColumnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_internalDestinationColumnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_internalSourceColumnOrdinal", $.Int32);

    $.Property({Static:false, Public:true }, "DestinationColumn", $.String);

    $.Property({Static:false, Public:true }, "DestinationOrdinal", $.Int32);

    $.Property({Static:false, Public:true }, "SourceColumn", $.String);

    $.Property({Static:false, Public:true }, "SourceOrdinal", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection */ 

(function SqlBulkCopyColumnMappingCollection$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Data.SqlClient.SqlBulkCopyColumnMappingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertWriteAccess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDefaultMapping", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCollection", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_mappingSchema", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMappingCollection+MappingSchema"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.SqlClient.SqlBulkCopyColumnMapping"));

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.SqlClient.SqlBulkCopyColumnMappingCollection+MappingSchema */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlBulkCopyColumnMappingCollection+MappingSchema", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    NamesNames: 1, 
    NemesOrdinals: 2, 
    OrdinalsNames: 3, 
    OrdinalsOrdinals: 4, 
  }
);

/* enum System.Data.SqlClient.SqlBulkCopyOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlBulkCopyOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    KeepIdentity: 1, 
    CheckConstraints: 2, 
    TableLock: 4, 
    KeepNulls: 8, 
    FireTriggers: 16, 
    UseInternalTransaction: 32, 
    AllowEncryptedValueModifications: 64, 
  }
);

/* class System.Data.SqlClient.SqlCachedBuffer */ 

(function SqlCachedBuffer$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCachedBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddByteOrderMark", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CachedBytes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToSqlString", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToSqlXml", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlXml"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParser"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Constant({Static:true , Public:false}, "_maxChunkSize", $.Int32, 2048);

    $.Field({Static:false, Public:false}, "_cachedBytes", $asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]));

    $.Property({Static:false, Public:false}, "CachedBytes", $asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderFactory */ 

(function DbProviderFactory$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbProviderFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommandBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommandBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataSourceEnumerator", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataSourceEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.CodeAccessPermission"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateDataSourceEnumerator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateDataSourceEnumerator", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientFactory */ 

(function SqlClientFactory$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbProviderFactory"), 
      Name: "System.Data.SqlClient.SqlClientFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommandBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommandBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataSourceEnumerator", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataSourceEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.CodeAccessPermission"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateDataSourceEnumerator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IServiceProvider.GetService", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm07.TypeRef("System.IServiceProvider"), "GetService");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateDataSourceEnumerator", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IServiceProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientMetaDataCollectionNames */ 

(function SqlClientMetaDataCollectionNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.SqlClient.SqlClientMetaDataCollectionNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Columns", $.String, "Columns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Databases", $.String, "Databases");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ForeignKeys", $.String, "ForeignKeys");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IndexColumns", $.String, "IndexColumns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Indexes", $.String, "Indexes");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Parameters", $.String, "Parameters");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcedureColumns", $.String, "ProcedureColumns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedures", $.String, "Procedures");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tables", $.String, "Tables");

    $.Field({Static:true , Public:true , ReadOnly:true }, "UserDefinedTypes", $.String, "UserDefinedTypes");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Users", $.String, "Users");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ViewColumns", $.String, "ViewColumns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Views", $.String, "Views");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DBDataPermission */ 

(function DBDataPermission$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Data.Common.DBDataPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["DBDataPermission() has been deprecated.  Use the DBDataPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Permissions.PermissionState"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["DBDataPermission(PermissionState state,Boolean allowBlankPassword) has been deprecated.  Use the DBDataPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DBDataPermissionAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionEntry", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DBConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeXmlValue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeXmlValue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowBlankPassword", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "_isUnrestricted", $.Boolean);

    $.Field({Static:false, Public:false}, "_allowBlankPassword", $.Boolean);

    $.Field({Static:false, Public:false}, "_keyvaluetree", $asm11.TypeRef("System.Data.Common.NameValuePermission"));

    $.Field({Static:false, Public:false}, "_keyvalues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "AllowBlankPassword", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlClientPermission */ 

(function SqlClientPermission$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermission"), 
      Name: "System.Data.SqlClient.SqlClientPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["SqlClientPermission() has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Permissions.PermissionState"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["SqlClientPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlClientPermissionAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DBDataPermissionAttribute */ 

(function DBDataPermissionAttribute$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.Data.Common.DBDataPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyRestrictionBehavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyRestrictions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowBlankPassword", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyRestrictionBehavior", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyRestrictions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldSerializeConnectionString", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "ShouldSerializeKeyRestrictions", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "_allowBlankPassword", $.Boolean);

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Field({Static:false, Public:false}, "_restrictions", $.String);

    $.Field({Static:false, Public:false}, "_behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:true }, "AllowBlankPassword", $.Boolean);

    $.Property({Static:false, Public:true }, "ConnectionString", $.String);

    $.Property({Static:false, Public:true }, "KeyRestrictionBehavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:true }, "KeyRestrictions", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Struct"
      )]; });

})();

/* class System.Data.SqlClient.SqlClientPermissionAttribute */ 

(function SqlClientPermissionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermissionAttribute"), 
      Name: "System.Data.SqlClient.SqlClientPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Struct"
      )]; });

})();

/* class System.Data.Common.DbCommand */ 

(function DbCommand$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Data.Common.DbCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelIgnoreFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteNonQueryAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQueryAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteScalarAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalarAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DesignTimeVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdatedRowSource", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DesignTimeVisible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdatedRowSource", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbDataParameter"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "CreateParameter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDataReader"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "ExecuteReader");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "ExecuteReader");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbConnection"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "get_Connection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDataParameterCollection"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "get_Parameters");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.get_Transaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbTransaction"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "get_Transaction");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbConnection"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "set_Connection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbTransaction"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "set_Transaction");

    $.Property({Static:false, Public:true , Virtual:true }, "CommandText", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandText"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandTimeout"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandType", $asm11.TypeRef("System.Data.CommandType"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.CommandType.Text]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandType"]; });

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.Common.DbConnection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Connection"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.Connection", $asm11.TypeRef("System.Data.IDbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbParameterCollection", $asm11.TypeRef("System.Data.Common.DbParameterCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbTransaction", $asm11.TypeRef("System.Data.Common.DbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "DesignTimeVisible", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Data.Common.DbParameterCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Parameters"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.Parameters", $asm11.TypeRef("System.Data.IDataParameterCollection"));

    $.Property({Static:false, Public:true }, "Transaction", $asm11.TypeRef("System.Data.Common.DbTransaction"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Transaction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.Transaction", $asm11.TypeRef("System.Data.IDbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_UpdatedRowSource"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.UpdateRowSource.Both]; });

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("System.Data.IDbCommand")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommand */ 

(function SqlCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



















































































  function SqlCommand_get_CachingQueryMetadataPostponed () {
    return this.SqlCommand$CachingQueryMetadataPostponed$value;
  }; 













































































  function SqlCommand_set_CachingQueryMetadataPostponed (value) {
    this.SqlCommand$CachingQueryMetadataPostponed$value = value;
  }; 


































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommand"), 
      Name: "System.Data.SqlClient.SqlCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPrepareForTransparentEncryption$gb__197_1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTds$gb__205_4", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTdsWithTransparentParameterEncryption$gb__204_2", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTdsWithTransparentParameterEncryption$gb__204_3", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_StatementCompleted", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.StatementCompletedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBatchCommand", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), 
          $asm11.TypeRef("System.Data.CommandType"), $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteNonQuery", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteNonQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteNonQueryAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteNonQueryInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object, $.Int32, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteNonQueryInternalReadStage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.AsyncCallback"), $.Object, 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteReaderInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object, $.Int32, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteReaderInternalReadStage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteXmlReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginExecuteXmlReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteXmlReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteXmlReaderInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object, $.Int32, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginExecuteXmlReaderInternalReadStage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildExecute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient._SqlRPC"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildExecuteSql", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.CommandBehavior"), $.String, 
          $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildParamList", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParser"), $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPrepare", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient._SqlRPC"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPrepExec", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient._SqlRPC"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRPC", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildStoredProcedureStatementForColumnEncryption", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildUnprepare", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient._SqlRPC"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNotificationStateAndAutoEnlist", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckThrowSNIException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearBatchCommand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearDescribeParameterEncryptionRequests", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteAsyncExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteExecuteScalar", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CountSendableParameters", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DeriveParameters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EndExecuteNonQuery", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteNonQueryAsync", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteNonQueryInternal", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteReaderAsync", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteReaderInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndExecuteXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteXmlReaderAsync", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndExecuteXmlReaderInternal", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteBatchRPCCommand", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.Common.DbDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQueryAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]), [$asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalarAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteToPipe", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteXmlReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteXmlReaderAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm2F.TypeRef("System.Xml.XmlReader")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteXmlReaderAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm2F.TypeRef("System.Xml.XmlReader")]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishExecuteReader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BatchRPCMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_cachedAsyncState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand+CachedAsyncState"))
    );

    $.Method({Static:false, Public:false}, "get_CachingQueryMetadataPostponed", 
      JSIL.MethodSignature.Return($.Boolean), 
      SqlCommand_get_CachingQueryMetadataPostponed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnEncryptionSetting", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DesignTimeVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventSink", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand+CommandEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InPrepare", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalRecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSmiConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTdsConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsColumnEncryptionEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDescribeParameterEncryptionRPCCurrentlyInProgress", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsShiloh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUserPrepared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notification", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotificationAutoEnlist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutParamEventSink", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowsAffectedByDescribeParameterEncryption", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StateObject", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdatedRowSource", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCommandText", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrors", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterCount", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterForOutputValueExtraction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecordsAffected", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Int32]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResetOptionsString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRPCObject", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSetOptionsString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSqlParameterWithQueryText", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStateObject", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalEndExecuteNonQuery", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IAsyncResult"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalEndExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm07.TypeRef("System.IAsyncResult"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalExecuteNonQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.String, 
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalPrepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyDependency", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConnectionClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDoneDescribeParameterEncryptionProc", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDoneProc", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnParameterAvailableSmi", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnParametersAvailableSmi", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnReturnStatus", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnReturnValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlReturnValue"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnStatementCompleted", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterDirectionFromOleDbDirection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ParameterDirection"), [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndQuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareDescribeParameterEncryptionRequest", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareForTransparentEncryption", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.CommandBehavior"), $.Boolean, 
          $.Boolean, $.Int32, 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task")]), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareTransparentEncryptionFinallyBlock", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $asm11.TypeRef("System.Data.SqlClient._SqlRPC")]), $asm11.TypeRef("System.Data.SqlClient.SqlDataReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PutStateObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDescribeEncryptionParameterResults", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $asm11.TypeRef("System.Data.SqlClient._SqlRPC")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterForConnectionCloseNotification", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReliablePutStateObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_StatementCompleted", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.StatementCompletedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetCommandTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetEncryptionState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteNonQuerySmi", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteNonQueryTds", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $.Boolean, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteReaderSmi", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteReaderTds", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.Boolean, $.Boolean, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task")]), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExecuteReaderTdsWithTransparentParameterEncryption", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.Boolean, $.Boolean, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task")]), 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Boolean, 
          $asm07.TypeRef("System.Threading.Tasks.Task")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BatchRPCMode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_CachingQueryMetadataPostponed", 
      JSIL.MethodSignature.Action($.Boolean), 
      SqlCommand_set_CachingQueryMetadataPostponed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DesignTimeVisible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalRecordsAffected", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsDirty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Notification", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotificationAutoEnlist", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RowsAffectedByDescribeParameterEncryption", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdatedRowSource", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColumnEncryptionSetting", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpRPCParameters", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpSmiRequest", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiRequestExecutor"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldSendParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlParameter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCommandTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlNotificationContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfReconnectionHasBeenCanceled", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TriggerInternalEndAndRetryIfNecessary", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.CommandBehavior"), $.Object, 
          $.Int32, $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $asm07.TypeRef("System.Func`4", [
              $asm07.TypeRef("System.IAsyncResult"), $.String, 
              $.Boolean, $.Object
            ]), 
          $asm07.TypeRef("System.Func`7", [
              $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
              $.Object, $.Int32, 
              $.Boolean, $.Boolean, 
              $asm07.TypeRef("System.IAsyncResult")
            ])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryFetchInputParameterEncryptionInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $.Int32, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $asm11.TypeRef("System.Data.SqlClient._SqlRPC")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Unprepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "UnquoteProcedureName", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnquoteProcedurePart", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAsyncCommand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCommand", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyEndExecuteState", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForAsyncResults", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IAsyncResult"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBeginExecuteEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndExecuteEvent", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Nullable`1", [$.Int32]), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_commandText", $.String);

    $.Field({Static:false, Public:false}, "_commandType", $asm11.TypeRef("System.Data.CommandType"));

    $.Field({Static:false, Public:false}, "_commandTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_updatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"));

    $.Field({Static:false, Public:false}, "_designTimeInvisible", $.Boolean);

    $.Field({Static:false, Public:false}, "_wasBatchModeColumnEncryptionSettingSetOnce", $.Boolean);

    $.Field({Static:false, Public:false}, "_columnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"));

    $.Field({Static:false, Public:false}, "_sqlDep", $asm11.TypeRef("System.Data.SqlClient.SqlDependency"));

    $.Field({Static:false, Public:false}, "_inPrepare", $.Boolean);

    $.Field({Static:false, Public:false}, "_prepareHandle", $.Int32);

    $.Field({Static:false, Public:false}, "_hiddenPrepare", $.Boolean);

    $.Field({Static:false, Public:false}, "_preparedConnectionCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_preparedConnectionReconnectCount", $.Int32);

    $.Field({Static:false, Public:false}, "_parameters", $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"));

    $.Field({Static:false, Public:false}, "_activeConnection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_dirty", $.Boolean);

    $.Field({Static:false, Public:false}, "_execType", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+EXECTYPE"));

    $.Field({Static:false, Public:false}, "_rpcArrayOf1", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:false}, "_rpcForEncryption", $asm11.TypeRef("System.Data.SqlClient._SqlRPC"));

    $.Field({Static:false, Public:false}, "_cachedMetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:false}, "_reconnectionCompletionSource", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_cachedAsyncState", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+CachedAsyncState"));

    $.Field({Static:false, Public:false}, "_rowsAffected", $.Int32);

    $.Field({Static:false, Public:false}, "_rowsAffectedBySpDescribeParameterEncryption", $.Int32);

    $.Field({Static:false, Public:false}, "_notification", $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"));

    $.Field({Static:false, Public:false}, "_notificationAutoEnlist", $.Boolean);

    $.Field({Static:false, Public:false}, "_transaction", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"));

    $.Field({Static:false, Public:false}, "_statementCompletedEventHandler", $asm11.TypeRef("System.Data.StatementCompletedEventHandler"));

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_pendingCancel", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_batchRPCMode", $.Boolean);

    $.Field({Static:false, Public:false}, "_RPCList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:false}, "_SqlRPCBatchArray", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:false}, "_sqlRPCParameterEncryptionReqArray", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:false}, "_parameterCollectionList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection")]));

    $.Field({Static:false, Public:false}, "_currentlyExecutingBatch", $.Int32);

    $.Field({Static:false, Public:false}, "_currentlyExecutingDescribeParameterEncryptionRPC", $.Int32);

    $.Field({Static:false, Public:false}, "_isDescribeParameterEncryptionRPCCurrentlyInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "_internalEndExecuteInitiated", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "SqlCommand$CachingQueryMetadataPostponed$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_smiRequestContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Field({Static:false, Public:false}, "_smiEventSink", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+CommandEventSink"));

    $.Field({Static:false, Public:false}, "_outParamEventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "PreKatmaiProcParamsNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "KatmaiProcParamsNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "InPrepare", $.Boolean);

    $.Property({Static:false, Public:false}, "IsColumnEncryptionEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "cachedAsyncState", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+CachedAsyncState"));

    $.Property({Static:false, Public:false}, "IsDescribeParameterEncryptionRPCCurrentlyInProgress", $.Boolean);

    $.Property({Static:false, Public:false}, "CachingQueryMetadataPostponed", $.Boolean);

    $.Property({Static:false, Public:false}, "EventSink", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+CommandEventSink"));

    $.Property({Static:false, Public:false}, "OutParamEventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing"));

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Connection"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false}, "InternalSmiConnection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"));

    $.Property({Static:false, Public:false}, "InternalTdsConnection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));

    $.Property({Static:false, Public:false}, "IsShiloh", $.Boolean);

    $.Property({Static:false, Public:true }, "NotificationAutoEnlist", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlCommand_NotificationAutoEnlist"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Notification"]; });

    $.Property({Static:false, Public:true }, "Notification", $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Notification"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlCommand_Notification"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Property({Static:false, Public:true }, "Transaction", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Transaction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbTransaction", $asm11.TypeRef("System.Data.Common.DbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommandText", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandText"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_SqlCommand_ColumnEncryptionSetting"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandTimeout"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandType", $asm11.TypeRef("System.Data.CommandType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandType"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.CommandType.Text]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DesignTimeVisible", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Parameters"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbParameterCollection", $asm11.TypeRef("System.Data.Common.DbParameterCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.UpdateRowSource.Both]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_UpdatedRowSource"]; });

    $.Property({Static:false, Public:false}, "MetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Property({Static:false, Public:false}, "StateObject", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Property({Static:false, Public:false}, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUserPrepared", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDirty", $.Boolean);

    $.Property({Static:false, Public:false}, "RowsAffectedByDescribeParameterEncryption", $.Int32);

    $.Property({Static:false, Public:false}, "InternalRecordsAffected", $.Int32);

    $.Property({Static:false, Public:false}, "BatchRPCMode", $.Boolean);

    $.Event({Static:false, Public:true }, "StatementCompleted", $asm11.TypeRef("System.Data.StatementCompletedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_StatementCompleted"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_StatementCompleted"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [true]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RecordsAffected"]; });

})();

/* enum System.Data.SqlClient.SqlCommand+EXECTYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlCommand+EXECTYPE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UNPREPARED: 0, 
    PREPAREPENDING: 1, 
    PREPARED: 2, 
  }
);

/* class System.Data.SqlClient.SqlCommand+CachedAsyncState */ 

(function CachedAsyncState$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+CachedAsyncState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CachedAsyncReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CachedRunBehavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.RunBehavior"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CachedSetOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PendingAsyncOperation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsActiveConnectionValid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetAsyncState", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "SetActiveConnectionAndResult", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.String, 
          $asm11.TypeRef("System.Data.SqlClient.SqlConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAsyncReaderState", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "_cachedAsyncCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_cachedAsyncResult", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_cachedAsyncConnection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_cachedAsyncReader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_cachedRunBehavior", $asm11.TypeRef("System.Data.SqlClient.RunBehavior"));

    $.Field({Static:false, Public:false}, "_cachedSetOptions", $.String);

    $.Field({Static:false, Public:false}, "_cachedEndMethod", $.String);

    $.Property({Static:false, Public:false}, "CachedAsyncReader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Property({Static:false, Public:false}, "CachedRunBehavior", $asm11.TypeRef("System.Data.SqlClient.RunBehavior"));

    $.Property({Static:false, Public:false}, "CachedSetOptions", $.String);

    $.Property({Static:false, Public:false}, "PendingAsyncOperation", $.Boolean);

    $.Property({Static:false, Public:false}, "EndMethodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommand+CommandEventSink */ 

(function CommandEventSink$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
      Name: "System.Data.SqlClient.SqlCommand+CommandEventSink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BatchCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParameterAvailable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParametersAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData")]), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StatementCompleted", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass137_0 */ 

(function $l$gc__DisplayClass137_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass137_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteNonQueryInternal$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteNonQueryInternal$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.Field({Static:false, Public:true }, "localCompletion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass146_0 */ 

(function $l$gc__DisplayClass146_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass146_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInternalExecuteNonQuery$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass151_0 */ 

(function $l$gc__DisplayClass151_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass151_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteXmlReaderInternal$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteXmlReaderInternal$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.Field({Static:false, Public:true }, "localCompletion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass169_0 */ 

(function $l$gc__DisplayClass169_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass169_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteReaderInternal$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginExecuteReaderInternal$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.Field({Static:false, Public:true }, "localCompletion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass170_0 */ 

(function $l$gc__DisplayClass170_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass170_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTriggerInternalEndAndRetryIfNecessary$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.Field({Static:false, Public:true }, "globalCompletion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "endFunc", $asm07.TypeRef("System.Func`4", [
          $asm07.TypeRef("System.IAsyncResult"), $.String, 
          $.Boolean, $.Object
        ]));

    $.Field({Static:false, Public:true }, "endMethod", $.String);

    $.Field({Static:false, Public:true }, "retryFunc", $asm07.TypeRef("System.Func`7", [
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object, $.Int32, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.IAsyncResult")
        ]));

    $.Field({Static:false, Public:true }, "behavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:true }, "stateObject", $.Object);

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "asyncWrite", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass170_1 */ 

(function $l$gc__DisplayClass170_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass170_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTriggerInternalEndAndRetryIfNecessary$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]))
    );

    $.Field({Static:false, Public:true }, "firstAttemptStart", $.Int64);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass170_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass173_0 */ 

(function $l$gc__DisplayClass173_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass173_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteNonQueryAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]))
    );

    $.Field({Static:false, Public:true }, "registration", $asm07.TypeRef("System.Threading.CancellationTokenRegistration"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteDbDataReaderAsync$gb__174_0", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteNonQueryTds$gb__193_2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTds$gb__205_2", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__174_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]), $asm11.TypeRef("System.Data.Common.DbDataReader")]));

    $.Field({Static:true , Public:true }, "$l$g9__193_2", $asm07.TypeRef("System.Action"));

    $.Field({Static:true , Public:true }, "$l$g9__205_2", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass178_0 */ 

(function $l$gc__DisplayClass178_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass178_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteReaderAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]))
    );

    $.Field({Static:false, Public:true }, "registration", $asm07.TypeRef("System.Threading.CancellationTokenRegistration"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_0 */ 

(function $l$gc__DisplayClass179_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteScalarAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object]), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])])
    );

    $.Field({Static:false, Public:true }, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_1 */ 

(function $l$gc__DisplayClass179_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteScalarAsync$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]))
    );

    $.Field({Static:false, Public:true }, "reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_2"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_2 */ 

(function $l$gc__DisplayClass179_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass179_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass181_0 */ 

(function $l$gc__DisplayClass181_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass181_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteXmlReaderAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm2F.TypeRef("System.Xml.XmlReader")]))
    );

    $.Field({Static:false, Public:true }, "registration", $asm07.TypeRef("System.Threading.CancellationTokenRegistration"));

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm2F.TypeRef("System.Xml.XmlReader")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_0 */ 

(function $l$gc__DisplayClass193_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteNonQueryTds$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteNonQueryTds$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "timeoutCTS", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals2", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_2"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_1 */ 

(function $l$gc__DisplayClass193_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "methodName", $.String);

    $.Field({Static:false, Public:true }, "async", $.Boolean);

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "asyncWrite", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_2 */ 

(function $l$gc__DisplayClass193_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "reconnectionStart", $.Int64);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass193_1"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass197_0 */ 

(function $l$gc__DisplayClass197_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass197_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPrepareForTransparentEncryption$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPrepareForTransparentEncryption$gb__2", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "describeParameterEncryptionDataReader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:true }, "describeParameterEncryptionRpcOriginalRpcMap", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC"), $asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:true }, "describeParameterEncryptionNeeded", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass204_0 */ 

(function $l$gc__DisplayClass204_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass204_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cmdBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:true }, "runBehavior", $asm11.TypeRef("System.Data.SqlClient.RunBehavior"));

    $.Field({Static:false, Public:true }, "returnStream", $.Boolean);

    $.Field({Static:false, Public:true }, "async", $.Boolean);

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "asyncWrite", $.Boolean);

    $.Field({Static:false, Public:true }, "inRetry", $.Boolean);

    $.Field({Static:false, Public:true }, "ds", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass204_1 */ 

(function $l$gc__DisplayClass204_1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass204_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTdsWithTransparentParameterEncryption$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTdsWithTransparentParameterEncryption$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "parameterEncryptionStart", $.Int64);

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass204_0"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_0 */ 

(function $l$gc__DisplayClass205_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTds$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTds$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "timeoutCTS", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals2", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_2"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_1 */ 

(function $l$gc__DisplayClass205_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRunExecuteReaderTds$gb__3", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cmdBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:true }, "runBehavior", $asm11.TypeRef("System.Data.SqlClient.RunBehavior"));

    $.Field({Static:false, Public:true }, "returnStream", $.Boolean);

    $.Field({Static:false, Public:true }, "async", $.Boolean);

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "asyncWrite", $.Boolean);

    $.Field({Static:false, Public:true }, "inRetry", $.Boolean);

    $.Field({Static:false, Public:true }, "ds", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:true }, "optionSettings", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_2 */ 

(function $l$gc__DisplayClass205_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "reconnectionStart", $.Int64);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlCommand+<>c__DisplayClass205_1"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.Common.DbCommandBuilder */ 

(function DbCommandBuilder$Members () {
  var $, $thisType;










































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Data.Common.DbCommandBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyParameterInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCache", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm11.TypeRef("System.Data.DataRow"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildInformation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildWhereClause", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm07.TypeRef("System.Text.StringBuilder"), $asm11.TypeRef("System.Data.Common.DbCommand"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParameterForNullTest", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("System.Data.Common.DbCommand"), $.String, 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Int32, $.Object, 
          $asm11.TypeRef("System.Data.Common.DbSchemaRow"), $asm11.TypeRef("System.Data.StatementType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParameterForValue", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("System.Data.Common.DbCommand"), $.String, 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Int32, $.Object, 
          $asm11.TypeRef("System.Data.Common.DbSchemaRow"), $asm11.TypeRef("System.Data.StatementType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogLocation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConflictOption", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConflictOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterNameMaxLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterNamePattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QuotedBaseTableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuotePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SetAllValues", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.DataRow"), $.String, 
          $asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.DataColumn"), 
          $asm11.TypeRef("System.Data.DataRowVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.String, $asm11.TypeRef("System.Data.Common.DataTableMapping"), 
          $asm11.TypeRef("System.Data.DataRow")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.DataRow"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.DataRow"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$asm11.TypeRef("System.Data.Common.DbCommand"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterPlaceholder", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchemaTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.Common.DbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableMapping", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.DataRow"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeInInsertValues", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.DbSchemaRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeInUpdateSet", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.DbSchemaRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeInWhereClause", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.DbSchemaRow"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementWhereCount", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.DbSchemaRow")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.Common.DbCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseProcedureName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuotedColumn", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RefreshSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveExtraParameters", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbCommand"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RowUpdatingHandlerBuilder", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogLocation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConflictOption", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConflictOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAdapter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_QuotePrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_QuoteSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SchemaSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SetAllValues", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetRowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "DeleteFrom", $.String, "DELETE FROM ");

    $.Constant({Static:true , Public:false}, "InsertInto", $.String, "INSERT INTO ");

    $.Constant({Static:true , Public:false}, "DefaultValues", $.String, " DEFAULT VALUES");

    $.Constant({Static:true , Public:false}, "Values", $.String, " VALUES ");

    $.Constant({Static:true , Public:false}, "Update", $.String, "UPDATE ");

    $.Constant({Static:true , Public:false}, "Set", $.String, " SET ");

    $.Constant({Static:true , Public:false}, "Where", $.String, " WHERE ");

    $.Constant({Static:true , Public:false}, "SpaceLeftParenthesis", $.String, " (");

    $.Constant({Static:true , Public:false}, "Comma", $.String, ", ");

    $.Constant({Static:true , Public:false}, "Equal", $.String, " = ");

    $.Constant({Static:true , Public:false}, "LeftParenthesis", $.String, "(");

    $.Constant({Static:true , Public:false}, "RightParenthesis", $.String, ")");

    $.Constant({Static:true , Public:false}, "NameSeparator", $.String, ".");

    $.Constant({Static:true , Public:false}, "IsNull", $.String, " IS NULL");

    $.Constant({Static:true , Public:false}, "EqualOne", $.String, " = 1");

    $.Constant({Static:true , Public:false}, "And", $.String, " AND ");

    $.Constant({Static:true , Public:false}, "Or", $.String, " OR ");

    $.Field({Static:false, Public:false}, "_dataAdapter", $asm11.TypeRef("System.Data.Common.DbDataAdapter"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.Field({Static:false, Public:false}, "_missingMappingAction", $asm11.TypeRef("System.Data.MissingMappingAction"));

    $.Field({Static:false, Public:false}, "_conflictDetection", $asm11.TypeRef("System.Data.ConflictOption"));

    $.Field({Static:false, Public:false}, "_setAllValues", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasPartialPrimaryKey", $.Boolean);

    $.Field({Static:false, Public:false}, "_dbSchemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_dbSchemaRows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbSchemaRow")]));

    $.Field({Static:false, Public:false}, "_sourceColumnNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_parameterNames", $asm11.TypeRef("System.Data.Common.DbCommandBuilder+ParameterNames"));

    $.Field({Static:false, Public:false}, "_quotedBaseTableName", $.String);

    $.Field({Static:false, Public:false}, "_catalogLocation", $asm11.TypeRef("System.Data.Common.CatalogLocation"));

    $.Field({Static:false, Public:false}, "_catalogSeparator", $.String);

    $.Field({Static:false, Public:false}, "_schemaSeparator", $.String);

    $.Field({Static:false, Public:false}, "_quotePrefix", $.String);

    $.Field({Static:false, Public:false}, "_quoteSuffix", $.String);

    $.Field({Static:false, Public:false}, "_parameterNamePattern", $.String);

    $.Field({Static:false, Public:false}, "_parameterMarkerFormat", $.String);

    $.Field({Static:false, Public:false}, "_parameterNameMaxLength", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConflictOption", $asm11.TypeRef("System.Data.ConflictOption"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.ConflictOption.CompareAllSearchableValues]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_ConflictOption"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogLocation", $asm11.TypeRef("System.Data.Common.CatalogLocation"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_CatalogLocation"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.Common.CatalogLocation.Start]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogSeparator", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_CatalogSeparator"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["."]; });

    $.Property({Static:false, Public:true }, "DataAdapter", $asm11.TypeRef("System.Data.Common.DbDataAdapter"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_DataAdapter"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "ParameterNameMaxLength", $.Int32);

    $.Property({Static:false, Public:false}, "ParameterNamePattern", $.String);

    $.Property({Static:false, Public:false}, "QuotedBaseTableName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuotePrefix", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_QuotePrefix"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteSuffix", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_QuoteSuffix"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaSeparator", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["."]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_SchemaSeparator"]; });

    $.Property({Static:false, Public:true }, "SetAllValues", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Schema"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommandBuilder_SetAllValues"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "InsertCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.Property({Static:false, Public:false}, "UpdateCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.Property({Static:false, Public:false}, "DeleteCommand", $asm11.TypeRef("System.Data.Common.DbCommand"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbCommandBuilder+ParameterNames */ 

(function ParameterNames$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbCommandBuilder+ParameterNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbCommandBuilder"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbSchemaRow")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyProviderSpecificFormat", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EliminateConflictingNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMissingNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbSchemaRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAdjustedParameterNameMaxLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextGenericParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAndValidateNamePrefixes", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "DefaultOriginalPrefix", $.String, "Original_");

    $.Constant({Static:true , Public:false}, "DefaultIsNullPrefix", $.String, "IsNull_");

    $.Constant({Static:true , Public:false}, "AlternativeOriginalPrefix", $.String, "original");

    $.Constant({Static:true , Public:false}, "AlternativeIsNullPrefix", $.String, "isnull");

    $.Constant({Static:true , Public:false}, "AlternativeOriginalPrefix2", $.String, "ORIGINAL");

    $.Constant({Static:true , Public:false}, "AlternativeIsNullPrefix2", $.String, "ISNULL");

    $.Field({Static:false, Public:false}, "_originalPrefix", $.String);

    $.Field({Static:false, Public:false}, "_isNullPrefix", $.String);

    $.Field({Static:false, Public:false}, "_parameterNameParser", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "_dbCommandBuilder", $asm11.TypeRef("System.Data.Common.DbCommandBuilder"));

    $.Field({Static:false, Public:false}, "_baseParameterNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_originalParameterNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_nullParameterNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_isMutatedName", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:false, Public:false}, "_genericParameterCount", $.Int32);

    $.Field({Static:false, Public:false}, "_adjustedParameterNameMaxLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommandBuilder */ 

(function SqlCommandBuilder$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommandBuilder"), 
      Name: "System.Data.SqlClient.SqlCommandBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyParameterInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConsistentQuoteDelimiters", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeriveParameters", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogLocation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuotePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterPlaceholder", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchemaTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.Common.DbCommand")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbCommand"), [$asm11.TypeRef("System.Data.Common.DbCommand")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogLocation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAdapter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_QuotePrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_QuoteSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SchemaSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetRowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SqlRowUpdatingHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatingEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogLocation", $asm11.TypeRef("System.Data.Common.CatalogLocation"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogSeparator", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "DataAdapter", $asm11.TypeRef("System.Data.SqlClient.SqlDataAdapter"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlCommandBuilder_DataAdapter"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "QuotePrefix", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteSuffix", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaSeparator", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommandSet */ 

(function SqlCommandSet$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommandSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildStoredProcedureName", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BatchCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlCommandSet+LocalCommand")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBatchedAffected", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCommandBehavior", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.Constant({Static:true , Public:false}, "SqlIdentifierPattern", $.String, "^@[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}_@#][\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\uff3f_@#\\$]*$");

    $.Field({Static:true , Public:false, ReadOnly:true }, "SqlIdentifierParser", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "_commandList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlCommandSet+LocalCommand")]));

    $.Field({Static:false, Public:false}, "_batchCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "BatchCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Property({Static:false, Public:false}, "CommandCount", $.Int32);

    $.Property({Static:false, Public:false}, "CommandList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlCommandSet+LocalCommand")]));

    $.Property({Static:false, Public:false}, "CommandTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Property({Static:false, Public:false}, "Transaction", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCommandSet+LocalCommand */ 

(function LocalCommand$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCommandSet+LocalCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"), 
          $.Int32, $asm11.TypeRef("System.Data.CommandType"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "CommandText", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $asm11.TypeRef("System.Data.SqlClient.SqlParameterCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ReturnParameterIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "CmdType", $asm11.TypeRef("System.Data.CommandType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnection */ 

(function DbConnection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };

















  function DbConnection_get_ForceNewConnection () {
    return this.DbConnection$ForceNewConnection$value;
  }; 













  function DbConnection_set_ForceNewConnection (value) {
    this.DbConnection$ForceNewConnection$value = value;
  }; 




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Data.Common.DbConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_StateChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.StateChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDbTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.Method({Static:false, Public:false}, "get_ForceNewConnection", 
      JSIL.MethodSignature.Return($.Boolean), 
      DbConnection_get_ForceNewConnection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnStateChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.StateChangeEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_StateChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.StateChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "set_ForceNewConnection", 
      JSIL.MethodSignature.Action($.Boolean), 
      DbConnection_set_ForceNewConnection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbConnection.BeginTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbTransaction"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbConnection"), "BeginTransaction");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbConnection.BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    )
      .Overrides($asm11.TypeRef("System.Data.IDbConnection"), "BeginTransaction");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbConnection.CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbConnection"), "CreateCommand");

    $.Field({Static:false, Public:false}, "_stateChangeEventHandler", $asm11.TypeRef("System.Data.StateChangeEventHandler"));

    $.Field({Static:false, Public:false}, "_supressStateChangeForReconnection", $.Boolean);

    $.Field({Static:false, Public:false}, "DbConnection$ForceNewConnection$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionString", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RecommendedAsConfigurableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Database", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSource", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));

    $.Property({Static:false, Public:false}, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_State"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "ForceNewConnection", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "StateChange", $asm11.TypeRef("System.Data.StateChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_StateChange"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_StateChange"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("System.Data.IDbConnection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnection */ 

(function SqlConnection$Members () {
  var $, $thisType;














































































































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnection"), 
      Name: "System.Data.SqlClient.SqlConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlCredential")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "add_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDbTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheConnectionStringProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelOpenAndWait", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangePassword", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangePassword", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), 
          $asm07.TypeRef("System.Security.SecureString")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangePassword", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), $.String, 
          $asm07.TypeRef("System.Security.SecureString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndThrowOnInvalidCombinationOfConnectionOptionAndAccessToken", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndThrowOnInvalidCombinationOfConnectionStringAndSqlCredential", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckGetExtendedUDTInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSQLDebug", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSQLDebug", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDebugContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSQLDebugOnConnect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearAllPools", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearPool", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInnerConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Get", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateExecutePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.CodeAccessPermission"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeMe", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDistributedTransaction", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDistributedTransactionHelper", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FixupDatabaseTransactionName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AccessToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncCommandInProgress", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Asynchronous", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientConnectionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CloseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ColumnEncryptionKeyCacheTtl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ColumnEncryptionQueryMetadataCacheEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ColumnEncryptionTrustedMasterKeyPaths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectRetryInterval", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Credential", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCredential"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FireInfoMessageEventOnUserErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalTransactionFromAPI", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsColumnEncryptionSettingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsContextConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKatmaiOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsShiloh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsYukonOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PacketSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parser", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolBlockingPeriod", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReconnectCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatisticsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionBinding", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSystem", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSystemAssemblyVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WorkstationId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Microsoft.SqlServer.Server.Format")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetColumnEncryptionCustomKeyStoreProviders", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetColumnEncryptionSystemKeyStoreProviders", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactoryInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenTdsConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenTdsConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUdtValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IssueSQLDebug", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnError", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlException"), $.Boolean, 
          $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Action")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInfoMessage", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventArgs"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReconnectAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnection_$lReconnectAsync$gd__123.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "RefreshMemoryMappedData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDebugContext"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RegisterColumnEncryptionKeyStoreProviders", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterForConnectionCloseNotification", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])]), $.Object, 
          $.Int32
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterWaitingForReconnect", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RepairInnerConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetStatistics", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveTypeAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Reflection.AssemblyName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "RetrieveStatistics", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AccessToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AsyncCommandInProgress", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "set_ColumnEncryptionKeyCacheTtl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_ColumnEncryptionQueryMetadataCacheEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Credential", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCredential"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FireInfoMessageEventOnUserErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StatisticsEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionEvent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:true , Public:false}, "TryGetColumnEncryptionKeyStoreProvider", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryOpen", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryOpenInner", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStatistics", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UsesActiveDirectoryIntegrated", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsesAuthentication", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsesClearUserIdOrPassword", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsesContextConnection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsesIntegratedSecurity", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAndReconnect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Action"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConnectionForExecute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyExecutePermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "WaitForPendingReconnection", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventInfoMessage", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_SystemColumnEncryptionKeyStoreProviders", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider")]));

    $.Field({Static:true , Public:false}, "_CustomColumnEncryptionKeyStoreProviders", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_CustomColumnEncryptionKeyProvidersLock", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_ColumnEncryptionTrustedMasterKeyPaths", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]));

    $.Field({Static:true , Public:false}, "_ColumnEncryptionQueryMetadataCacheEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "_ColumnEncryptionKeyCacheTtl", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_sdc", $asm11.TypeRef("System.Data.SqlClient.SqlDebugContext"));

    $.Field({Static:false, Public:false}, "_AsyncCommandInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "_statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Field({Static:false, Public:false}, "_collectstats", $.Boolean);

    $.Field({Static:false, Public:false}, "_fireInfoMessageEventOnUserErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "_currentCompletion", $asm07.TypeRef("System.Tuple`2", [$asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm07.TypeRef("System.Threading.Tasks.Task")]));

    $.Field({Static:false, Public:false}, "_credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"));

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Field({Static:false, Public:false}, "_connectRetryCount", $.Int32);

    $.Field({Static:false, Public:false}, "_accessToken", $.String);

    $.Field({Static:false, Public:false}, "_reconnectLock", $.Object);

    $.Field({Static:false, Public:false}, "_currentReconnectionTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_asyncWaitingForReconnection", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_originalConnectionId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "_reconnectionCancellationSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "_recoverySessionData", $asm11.TypeRef("System.Data.SqlClient.SessionData"));

    $.Field({Static:false, Public:false}, "_lastIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "_impersonateIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "_reconnectCount", $.Int32);

    $.Field({Static:false, Public:false}, "_applyTransientFaultHandling", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_connectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), function ($pi) {
        return $asm11.System.Data.SqlClient.SqlConnectionFactory.SingletonInstance;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExecutePermission", $asm07.TypeRef("System.Security.CodeAccessPermission"));

    $.Field({Static:false, Public:false}, "_userConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false}, "_poolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false}, "_innerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Field({Static:false, Public:false}, "_closeCount", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);


    function SqlConnection__cctor () {
      $thisType._ColumnEncryptionKeyCacheTtl = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlConnection__cctor
    );

    $.Property({Static:true , Public:true }, "ColumnEncryptionTrustedMasterKeyPaths", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_SqlConnection_TrustedColumnMasterKeyPaths"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:true , Public:true }, "ColumnEncryptionQueryMetadataCacheEnabled", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:true , Public:true }, "ColumnEncryptionKeyCacheTtl", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_SqlConnection_ColumnEncryptionKeyCacheTtl"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "StatisticsEnabled", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_StatisticsEnabled"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "AsyncCommandInProgress", $.Boolean);

    $.Property({Static:false, Public:false}, "IsContextConnection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsColumnEncryptionSettingEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "TransactionBinding", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum"));

    $.Property({Static:false, Public:false}, "TypeSystem", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"));

    $.Property({Static:false, Public:false}, "TypeSystemAssemblyVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "PoolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"));

    $.Property({Static:false, Public:false}, "ConnectRetryInterval", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "DbProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));

    $.Property({Static:false, Public:true }, "AccessToken", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_AccessToken"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionString", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RecommendedAsConfigurableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_ConnectionString"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_ConnectionTimeout"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Database", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_Database"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSource", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_DataSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "PacketSize", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_PacketSize"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "ClientConnectionId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_ClientConnectionId"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_ServerVersion"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_State"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Property({Static:false, Public:true }, "WorkstationId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_WorkstationId"]; });

    $.Property({Static:false, Public:true }, "Credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlConnection_Credential"]; });

    $.Property({Static:false, Public:true }, "FireInfoMessageEventOnUserErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "ReconnectCount", $.Int32);

    $.Property({Static:false, Public:false}, "HasLocalTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocalTransactionFromAPI", $.Boolean);

    $.Property({Static:false, Public:false}, "IsShiloh", $.Boolean);

    $.Property({Static:false, Public:false}, "IsYukonOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKatmaiOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "Parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Property({Static:false, Public:false}, "Asynchronous", $.Boolean);

    $.Property({Static:false, Public:false}, "CloseCount", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "InnerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "UserConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Event({Static:false, Public:true }, "InfoMessage", $asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_InfoMessage"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_InfoMessage"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["InfoMessage"]; });

})();

/* class System.Data.SqlClient.SqlConnection+OpenAsyncRetry */ 

(function OpenAsyncRetry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+OpenAsyncRetry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $asm07.TypeRef("System.Threading.CancellationTokenRegistration")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Retry", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]))
    );

    $.Field({Static:false, Public:false}, "_parent", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_retry", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:false}, "_result", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_registration", $asm07.TypeRef("System.Threading.CancellationTokenRegistration"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlConnection+<ReconnectAsync>d__123 */ 

(function $lReconnectAsync$gd__123$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlConnection+<ReconnectAsync>d__123", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "SetStateMachine")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$gt__builder", $asm07.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder"));

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "$lctoken$g5__1", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$lattempt$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lretryCount$g5__3", $.Int32);

    $.Field({Static:false, Public:false}, "$lcommandTimeoutExpiration$g5__4", $.Int64);

    $.Field({Static:false, Public:false}, "$l$gu__1", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnection+<>c__DisplayClass124_0 */ 

(function $l$gc__DisplayClass124_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+<>c__DisplayClass124_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lValidateAndReconnect$gb__0", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnection+<>c__DisplayClass127_0 */ 

(function $l$gc__DisplayClass127_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+<>c__DisplayClass127_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOpenAsync$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnection+<>c__DisplayClass147_0 */ 

(function $l$gc__DisplayClass147_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+<>c__DisplayClass147_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOnError$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "capturedCloseCount", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnection+<>c__DisplayClass162_0`1 */ 

(function $l$gc__DisplayClass162_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+<>c__DisplayClass162_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRegisterForConnectionCloseNotification$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")]), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "value", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnection+<>c__DisplayClass168_0 */ 

(function $l$gc__DisplayClass168_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnection+<>c__DisplayClass168_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCheckGetExtendedUDTInfo$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.Field({Static:false, Public:true }, "fThrow", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SQLDebugging */ 

(function SQLDebugging$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SQLDebugging", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSD", 
      new JSIL.MethodSignature($.IntPtr, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.SqlClient.ISQLDebug.SQLDebug", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Overrides($asm11.TypeRef("System.Data.SqlClient.ISQLDebug"), "SQLDebug");

    $.Constant({Static:true , Public:false}, "STANDARD_RIGHTS_REQUIRED", $.Int32, 983040);

    $.Constant({Static:true , Public:false}, "DELETE", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "READ_CONTROL", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "WRITE_DAC", $.Int32, 262144);

    $.Constant({Static:true , Public:false}, "WRITE_OWNER", $.Int32, 524288);

    $.Constant({Static:true , Public:false}, "SYNCHRONIZE", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "FILE_ALL_ACCESS", $.Int32, 2032127);

    $.Constant({Static:true , Public:false}, "GENERIC_READ", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "GENERIC_WRITE", $.UInt32, 1073741824);

    $.Constant({Static:true , Public:false}, "GENERIC_EXECUTE", $.UInt32, 536870912);

    $.Constant({Static:true , Public:false}, "GENERIC_ALL", $.UInt32, 268435456);

    $.Constant({Static:true , Public:false}, "SECURITY_DESCRIPTOR_REVISION", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ACL_REVISION", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "SECURITY_AUTHENTICATED_USER_RID", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "SECURITY_LOCAL_SYSTEM_RID", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "SECURITY_BUILTIN_DOMAIN_RID", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "SECURITY_WORLD_RID", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SECURITY_NT_AUTHORITY", $.Byte, 5);

    $.Constant({Static:true , Public:false}, "DOMAIN_GROUP_RID_ADMINS", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "DOMAIN_ALIAS_RID_ADMINS", $.Int32, 544);

    $.Constant({Static:true , Public:false}, "sizeofSECURITY_ATTRIBUTES", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "sizeofSECURITY_DESCRIPTOR", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "sizeofACCESS_ALLOWED_ACE", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "sizeofACCESS_DENIED_ACE", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "sizeofSID_IDENTIFIER_AUTHORITY", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "sizeofACL", $.Int32, 8);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.SqlClient.ISQLDebug")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["afef65ad-4577-447a-a148-83acadd3d4b9"]; });

})();

/* interface System.Data.SqlClient.ISQLDebug */ 

JSIL.MakeInterface(
  "System.Data.SqlClient.ISQLDebug", false, [], function ($) {
    $.Method({}, "SQLDebug", new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.BestFitMappingAttribute"), function () { return [false]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["6cb925bf-c3c0-45b3-9f44-5dd67c7b7fe8"]; });

/* class System.Data.SqlClient.SqlDebugContext */ 

(function SqlDebugContext$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDebugContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.Field({Static:false, Public:false}, "pid", $.UInt32);

    $.Field({Static:false, Public:false}, "tid", $.UInt32);

    $.Field({Static:false, Public:false}, "active", $.Boolean);

    $.Field({Static:false, Public:false}, "pMemMap", $.IntPtr);

    $.Field({Static:false, Public:false}, "hMemMap", $.IntPtr);

    $.Field({Static:false, Public:false}, "dbgpid", $.UInt32);

    $.Field({Static:false, Public:false}, "fOption", $.Boolean);

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "sdiDllName", $.String);

    $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.MEMMAP */ 

(function MEMMAP$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.MEMMAP", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dbgpid", $.UInt32);

    $.Field({Static:false, Public:false}, "fOption", $.UInt32);

    $.Field({Static:false, Public:false}, "rgbMachineName", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "rgbDllName", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "rgbData", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.ProviderBase");
/* class System.Data.ProviderBase.DbConnectionFactory */ 

(function DbConnectionFactory$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearAllPools", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearPool", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearPool", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNonPooledConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePooledConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), $asm11.TypeRef("System.Data.Common.DbConnection"), 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePruningTimer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Timer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbConnectionOptions"), [$asm11.TypeRef("System.Data.Common.DbConnectionPoolKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCompletedTask", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPool", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PruneConnectionPoolGroups", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolForRelease", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolGroupForRelease", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
        ])
    );

    $.Field({Static:false, Public:false}, "_connectionPoolGroups", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolsToRelease", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolGroupsToRelease", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_performanceCounters", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pruningTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Constant({Static:true , Public:false}, "PruningDueTime", $.Int32, 240000);

    $.Constant({Static:true , Public:false}, "PruningPeriod", $.Int32, 30000);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "s_pendingOpenNonPooledNext", $.Int32, 0);

    $.Field({Static:true , Public:false}, "s_pendingOpenNonPooled", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])]));

    $.Field({Static:true , Public:false}, "s_completedTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionFactory+<>c__DisplayClass31_0 */ 

(function $l$gc__DisplayClass31_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionFactory+<>c__DisplayClass31_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryGetConnection$gb__0", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])])
    );

    $.Field({Static:false, Public:true }, "retry", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:true }, "owningConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Field({Static:false, Public:true }, "poolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:true }, "userOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:true }, "oldConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.ProviderBase.DbConnectionFactory+<>c__DisplayClass31_1 */ 

(function $l$gc__DisplayClass31_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionFactory+<>c__DisplayClass31_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryGetConnection$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]))
    );

    $.Field({Static:false, Public:true }, "cancellationTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory+<>c__DisplayClass31_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlConnectionFactory */ 

(function SqlConnectionFactory$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
      Name: "System.Data.SqlClient.SqlConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSqlConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionPoolKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContextConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);

    $.Constant({Static:true , Public:false}, "_metaDataXml", $.String, "MetaDataXml");

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters */ 

(function DbConnectionPoolCounters$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "ExceptionEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExitEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstanceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "UnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Constant({Static:true , Public:false}, "CounterInstanceNameMaxLength", $.Int32, 127);

    $.Field({Static:false, Public:false, ReadOnly:true }, "HardConnectsPerSecond", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "HardDisconnectsPerSecond", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SoftConnectsPerSecond", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SoftDisconnectsPerSecond", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfNonPooledConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfPooledConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnectionPoolGroups", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPoolGroups", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnectionPools", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPools", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfFreeConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfStasisConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfReclaimedConnections", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters+CreationData */ 

(function CreationData$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.ProviderBase.DbConnectionPoolCounters+CreationData", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "HardConnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "HardDisconnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SoftConnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SoftDisconnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfNonPooledConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfPooledConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnectionPoolGroups", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPoolGroups", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnectionPools", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPools", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfFreeConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfStasisConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfReclaimedConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters+Counter */ 

(function Counter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCounters+Counter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm0A.TypeRef("System.Diagnostics.PerformanceCounterType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Decrement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "Increment", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_instance", $asm0A.TypeRef("System.Diagnostics.PerformanceCounter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlPerformanceCounters */ 

(function SqlPerformanceCounters$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"), 
      Name: "System.Data.SqlClient.SqlPerformanceCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "CategoryName", $.String, ".NET Data Provider for SqlServer");

    $.Constant({Static:true , Public:false}, "CategoryHelp", $.String, "Counters for System.Data.SqlClient");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo */ 

(function DbConnectionPoolGroupProviderInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.Field({Static:false, Public:false}, "_poolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo */ 

(function SqlConnectionPoolGroupProviderInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), 
      Name: "System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AliasCheck", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFailoverPermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FailoverCheck", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FailoverPermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FailoverPartner", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseFailoverPartner", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_alias", $.String);

    $.Field({Static:false, Public:false}, "_failoverPermissionSet", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:false, Public:false}, "_failoverPartner", $.String);

    $.Field({Static:false, Public:false}, "_useFailoverPartner", $.Boolean);

    $.Property({Static:false, Public:false}, "FailoverPartner", $.String);

    $.Property({Static:false, Public:false}, "UseFailoverPartner", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolProviderInfo */ 

(function DbConnectionPoolProviderInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionPoolProviderInfo */ 

(function SqlConnectionPoolProviderInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"), 
      Name: "System.Data.SqlClient.SqlConnectionPoolProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InstanceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_instanceName", $.String);

    $.Property({Static:false, Public:false}, "InstanceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnectionOptions */ 

(function DbConnectionOptions$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbConnectionOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendKeyValuePairBuilder", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInsensitiveInvariant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32Internal", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertValueToBooleanInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToIntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToIntegratedSecurityInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandPermission", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Expand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandDataDirectories", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandDataDirectory", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandKeyword", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasPersistablePassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parsetable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Text.StringBuilder"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyValuePair", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKeyNameValid", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValueValidInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.NameValuePair"), [
          $asm07.TypeRef("System.Collections.Hashtable"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplacePasswordPwd", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.NameValuePair"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "UsersConnectionString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsersConnectionString", 
      new JSIL.MethodSignature($.String, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsersConnectionStringForTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateKeyValuePair", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "ConnectionStringValidKeyPattern", $.String, "^(?![;\\s])[^\\p{Cc}]+(?<!\\s)$");

    $.Constant({Static:true , Public:false}, "ConnectionStringValidValuePattern", $.String, "^[^\x00]*$");

    $.Constant({Static:true , Public:false}, "ConnectionStringQuoteValuePattern", $.String, "^[^\"'=;\\s\\p{Cc}]*$");

    $.Constant({Static:true , Public:false}, "ConnectionStringQuoteOdbcValuePattern", $.String, "^\\{([^\\}\x00]|\\}\\})*\\}$");

    $.Constant({Static:true , Public:false}, "DataDirectory", $.String, "|datadirectory|");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConnectionStringValidKeyRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConnectionStringValidValueRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConnectionStringQuoteValueRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConnectionStringQuoteOdbcValueRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_usersConnectionString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parsetable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "KeyChain", $asm11.TypeRef("System.Data.Common.NameValuePair"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "HasPasswordKeyword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "HasUserIdKeyword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "UseOdbcRules", $.Boolean);

    $.Field({Static:false, Public:false}, "_permissionset", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Property({Static:false, Public:false}, "HasBlankPassword", $.Boolean);

    $.Property({Static:false, Public:false}, "HasPersistablePassword", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "Parsetable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.Common.DbConnectionOptions+ParserState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.DbConnectionOptions+ParserState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NothingYet: 1, 
    Key: 2, 
    KeyEqual: 3, 
    KeyEnd: 4, 
    UnquotedValue: 5, 
    DoubleQuoteValue: 6, 
    DoubleQuoteValueQuote: 7, 
    SingleQuoteValue: 8, 
    SingleQuoteValueQuote: 9, 
    BraceQuoteValue: 10, 
    BraceQuoteValueQuote: 11, 
    QuotedValueEnd: 12, 
    NullTermination: 13, 
  }
);

/* class System.Data.SqlClient.SqlConnectionString */ 

(function SqlConnectionString$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
      Name: "System.Data.SqlClient.SqlConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $.Boolean, $asm07.TypeRef("System.Nullable`1", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareHostName", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToApplicationIntent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToAuthenticationType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToColumnEncryptionSetting", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToEncrypt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToPoolBlockingPeriod", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Expand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationIntent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Asynchronous", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttachDBFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Authentication", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnEncryptionSetting", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionReset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectRetryCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectRetryInterval", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContextConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLanguage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encrypt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnforceLocalHost", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enlist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FailoverPartner", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InitialCatalog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalDBInstance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MARS", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MultiSubnetFailover", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NetworkLibrary", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PacketSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PersistSecurityInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolBlockingPeriod", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pooling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Replication", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionBinding", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransparentNetworkIPResolution", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TrustServerCertificate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSystemAssemblyVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeSystemVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserInstance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WorkstationId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParseSynonyms", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NetlibMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ObtainWorkstationId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateValueLength", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidProtocal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyLocalHostAndFixup", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Boolean, 
          $.Boolean
        ])
    );

    $.Constant({Static:true , Public:false}, "SynonymCount", $.Int32, 21);

    $.Field({Static:true , Public:false}, "_sqlClientSynonyms", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "_netlibMapping", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_integratedSecurity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionReset", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_contextConnection", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encrypt", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_trustServerCertificate", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_enlist", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_mars", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_persistSecurityInfo", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pooling", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_replication", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_userInstance", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_multiSubnetFailover", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transparentNetworkIPResolution", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_authType", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_columnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_loadBalanceTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_packetSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectRetryCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectRetryInterval", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_applicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_applicationName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_attachDBFileName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_currentLanguage", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataSource", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_localDBInstance", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_failoverPartner", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_initialCatalog", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_password", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_userID", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_networkLibrary", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_workstationId", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeSystemVersion", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeSystemAssemblyVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "constTypeSystemAsmVersion10", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "constTypeSystemAsmVersion11", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transactionBinding", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandedAttachDBFilename", $.String);

    $.Property({Static:false, Public:false}, "IntegratedSecurity", $.Boolean);

    $.Property({Static:false, Public:false}, "Asynchronous", $.Boolean);

    $.Property({Static:false, Public:false}, "PoolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"));

    $.Property({Static:false, Public:false}, "ConnectionReset", $.Boolean);

    $.Property({Static:false, Public:false}, "ContextConnection", $.Boolean);

    $.Property({Static:false, Public:false}, "Encrypt", $.Boolean);

    $.Property({Static:false, Public:false}, "TrustServerCertificate", $.Boolean);

    $.Property({Static:false, Public:false}, "Enlist", $.Boolean);

    $.Property({Static:false, Public:false}, "MARS", $.Boolean);

    $.Property({Static:false, Public:false}, "MultiSubnetFailover", $.Boolean);

    $.Property({Static:false, Public:false}, "TransparentNetworkIPResolution", $.Boolean);

    $.Property({Static:false, Public:false}, "Authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Property({Static:false, Public:false}, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"));

    $.Property({Static:false, Public:false}, "PersistSecurityInfo", $.Boolean);

    $.Property({Static:false, Public:false}, "Pooling", $.Boolean);

    $.Property({Static:false, Public:false}, "Replication", $.Boolean);

    $.Property({Static:false, Public:false}, "UserInstance", $.Boolean);

    $.Property({Static:false, Public:false}, "ConnectTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "LoadBalanceTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "PacketSize", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectRetryCount", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectRetryInterval", $.Int32);

    $.Property({Static:false, Public:false}, "ApplicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"));

    $.Property({Static:false, Public:false}, "ApplicationName", $.String);

    $.Property({Static:false, Public:false}, "AttachDBFilename", $.String);

    $.Property({Static:false, Public:false}, "CurrentLanguage", $.String);

    $.Property({Static:false, Public:false}, "DataSource", $.String);

    $.Property({Static:false, Public:false}, "LocalDBInstance", $.String);

    $.Property({Static:false, Public:false}, "FailoverPartner", $.String);

    $.Property({Static:false, Public:false}, "InitialCatalog", $.String);

    $.Property({Static:false, Public:false}, "NetworkLibrary", $.String);

    $.Property({Static:false, Public:false}, "Password", $.String);

    $.Property({Static:false, Public:false}, "UserID", $.String);

    $.Property({Static:false, Public:false}, "WorkstationId", $.String);

    $.Property({Static:false, Public:false}, "TypeSystemVersion", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"));

    $.Property({Static:false, Public:false}, "TypeSystemAssemblyVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "TransactionBinding", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum"));

    $.Property({Static:false, Public:false}, "EnforceLocalHost", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionString+DEFAULT */ 

(function DEFAULT$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.SqlClient.SqlConnectionString+DEFAULT", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "ApplicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"), 0);

    $.Constant({Static:true , Public:false}, "Application_Name", $.String, ".Net SqlClient Data Provider");

    $.Constant({Static:true , Public:false}, "Asynchronous", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "AttachDBFilename", $.String, "");

    $.Constant({Static:true , Public:false}, "PoolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"), 0);

    $.Constant({Static:true , Public:false}, "Connect_Timeout", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "Connection_Reset", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "Context_Connection", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Current_Language", $.String, "");

    $.Constant({Static:true , Public:false}, "Data_Source", $.String, "");

    $.Constant({Static:true , Public:false}, "Encrypt", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Enlist", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "FailoverPartner", $.String, "");

    $.Constant({Static:true , Public:false}, "Initial_Catalog", $.String, "");

    $.Constant({Static:true , Public:false}, "Integrated_Security", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Load_Balance_Timeout", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MARS", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Max_Pool_Size", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "Min_Pool_Size", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MultiSubnetFailover", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "TransparentNetworkIPResolution", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "Network_Library", $.String, "");

    $.Constant({Static:true , Public:false}, "Packet_Size", $.Int32, 8000);

    $.Constant({Static:true , Public:false}, "Password", $.String, "");

    $.Constant({Static:true , Public:false}, "Persist_Security_Info", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Pooling", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "TrustServerCertificate", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Type_System_Version", $.String, "");

    $.Constant({Static:true , Public:false}, "User_ID", $.String, "");

    $.Constant({Static:true , Public:false}, "User_Instance", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Replication", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Connect_Retry_Count", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Connect_Retry_Interval", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlConnectionString+TypeSystem */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionString+TypeSystem", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SQLServer2000: 2000, 
    SQLServer2005: 2005, 
    Latest: 2008, 
    SQLServer2008: 2008, 
    SQLServer2012: 2012, 
  }
);

/* enum System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionString+TransactionBindingEnum", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ImplicitUnbind: 0, 
    ExplicitUnbind: 1, 
  }
);

/* class System.Data.Common.DbConnectionStringBuilder */ 

(function DbConnectionStringBuilder$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbConnectionStringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "AppendKeyValuePair", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AppendKeyValuePair", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPropertyDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ConvertValueToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EquivalentTo", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BrowsableConnectionString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Collection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Dictionary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributesFromCollection", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")]), [$asm0A.TypeRef("System.ComponentModel.AttributeCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProperties", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ObjectToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BrowsableConnectionString", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetAttributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetAttributes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetClassName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetClassName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetComponentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetComponentName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetConverter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEditor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEditor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetPropertyOwner");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.Field({Static:false, Public:false}, "_currentValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Field({Static:false, Public:false}, "_propertyDescriptors", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.Field({Static:false, Public:false}, "_browsableConnectionString", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "UseOdbcRules", $.Boolean);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "Collection", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "Dictionary", $asm07.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:false}, "CurrentValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "BrowsableConnectionString", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "ConnectionString", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ConnectionString"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 1 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.SqlConnectionStringBuilder */ 

(function SqlConnectionStringBuilder$Members () {
  var $, $thisType;











































































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"), 
      Name: "System.Data.SqlClient.SqlConnectionStringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToApplicationIntent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToAuthenticationType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToColumnEncryptionSetting", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntegratedSecurity", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToPoolBlockingPeriod", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ConvertValueToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationIntent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsynchronousProcessing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttachDBFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Authentication", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnEncryptionSetting", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionReset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectRetryCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectRetryInterval", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentLanguage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encrypt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enlist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FailoverPartner", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InitialCatalog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MultipleActiveResultSets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MultiSubnetFailover", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkLibrary", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PacketSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PersistSecurityInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PoolBlockingPeriod", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pooling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Replication", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransparentNetworkIPResolution", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustServerCertificate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeSystemVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserInstance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WorkstationID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAt", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder+Keywords")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder+Keywords"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProperties", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder+Keywords"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationIntent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AsynchronousProcessing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttachDBFilename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Authentication", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ColumnEncryptionSetting", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionReset", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectRetryCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectRetryInterval", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContextConnection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentLanguage", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encrypt", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enlist", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FailoverPartner", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InitialCatalog", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IntegratedSecurity", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LoadBalanceTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxPoolSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinPoolSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MultipleActiveResultSets", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MultiSubnetFailover", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NetworkLibrary", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PacketSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PersistSecurityInfo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PoolBlockingPeriod", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pooling", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Replication", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransactionBinding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransparentNetworkIPResolution", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustServerCertificate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeSystemVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserID", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserInstance", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WorkstationID", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetApplicationIntentValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAuthenticationValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColumnEncryptionSettingValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPoolBlockingPeriodValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.Constant({Static:true , Public:false}, "KeywordsCount", $.Int32, 37);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_validKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_keywords", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder+Keywords")]));

    $.Field({Static:false, Public:false}, "_applicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"));

    $.Field({Static:false, Public:false}, "_applicationName", $.String);

    $.Field({Static:false, Public:false}, "_attachDBFilename", $.String);

    $.Field({Static:false, Public:false}, "_currentLanguage", $.String);

    $.Field({Static:false, Public:false}, "_dataSource", $.String);

    $.Field({Static:false, Public:false}, "_failoverPartner", $.String);

    $.Field({Static:false, Public:false}, "_initialCatalog", $.String);

    $.Field({Static:false, Public:false}, "_networkLibrary", $.String);

    $.Field({Static:false, Public:false}, "_password", $.String);

    $.Field({Static:false, Public:false}, "_transactionBinding", $.String);

    $.Field({Static:false, Public:false}, "_typeSystemVersion", $.String);

    $.Field({Static:false, Public:false}, "_userID", $.String);

    $.Field({Static:false, Public:false}, "_workstationID", $.String);

    $.Field({Static:false, Public:false}, "_connectTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_loadBalanceTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false}, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false}, "_packetSize", $.Int32);

    $.Field({Static:false, Public:false}, "_connectRetryCount", $.Int32);

    $.Field({Static:false, Public:false}, "_connectRetryInterval", $.Int32);

    $.Field({Static:false, Public:false}, "_asynchronousProcessing", $.Boolean);

    $.Field({Static:false, Public:false}, "_connectionReset", $.Boolean);

    $.Field({Static:false, Public:false}, "_contextConnection", $.Boolean);

    $.Field({Static:false, Public:false}, "_encrypt", $.Boolean);

    $.Field({Static:false, Public:false}, "_trustServerCertificate", $.Boolean);

    $.Field({Static:false, Public:false}, "_enlist", $.Boolean);

    $.Field({Static:false, Public:false}, "_integratedSecurity", $.Boolean);

    $.Field({Static:false, Public:false}, "_multipleActiveResultSets", $.Boolean);

    $.Field({Static:false, Public:false}, "_multiSubnetFailover", $.Boolean);

    $.Field({Static:false, Public:false}, "_transparentNetworkIPResolution", $.Boolean);

    $.Field({Static:false, Public:false}, "_persistSecurityInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "_pooling", $.Boolean);

    $.Field({Static:false, Public:false}, "_replication", $.Boolean);

    $.Field({Static:false, Public:false}, "_userInstance", $.Boolean);

    $.Field({Static:false, Public:false}, "_authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:false, Public:false}, "_columnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"));

    $.Field({Static:false, Public:false}, "_poolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "ApplicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ApplicationIntent"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["ApplicationIntent"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; });

    $.Property({Static:false, Public:true }, "ApplicationName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ApplicationName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Application Name"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Context"]; });

    $.Property({Static:false, Public:true }, "AsynchronousProcessing", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Asynchronous Processing"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_AsynchronousProcessing"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; });

    $.Property({Static:false, Public:true }, "AttachDBFilename", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["AttachDbFilename"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_AttachDBFilename"]; });

    $.Property({Static:false, Public:true }, "PoolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_PoolBlockingPeriod"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["PoolBlockingPeriod"]; });

    $.Property({Static:false, Public:true }, "ConnectionReset", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ConnectionReset"]; })
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["ConnectionReset has been deprecated.  SqlConnection will ignore the 'connection reset' keyword and always reset the connection"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Connection Reset"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "ContextConnection", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ContextConnection"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Context Connection"]; });

    $.Property({Static:false, Public:true }, "ConnectTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Connect Timeout"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ConnectTimeout"]; });

    $.Property({Static:false, Public:true }, "CurrentLanguage", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_CurrentLanguage"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Current Language"]; });

    $.Property({Static:false, Public:true }, "DataSource", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Data Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_DataSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnectionStringBuilder_SqlDataSourceConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "Encrypt", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Encrypt"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Encrypt"]; });

    $.Property({Static:false, Public:true }, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Column Encryption Setting"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_DbConnectionString_ColumnEncryptionSetting"]; });

    $.Property({Static:false, Public:true }, "TrustServerCertificate", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_TrustServerCertificate"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["TrustServerCertificate"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; });

    $.Property({Static:false, Public:true }, "Enlist", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Enlist"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Enlist"]; });

    $.Property({Static:false, Public:true }, "FailoverPartner", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnectionStringBuilder_SqlDataSourceConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Failover Partner"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_FailoverPartner"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "InitialCatalog", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Initial Catalog"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnectionStringBuilder_SqlInitialCatalogConverter.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_InitialCatalog"]; });

    $.Property({Static:false, Public:true }, "IntegratedSecurity", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Integrated Security"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_IntegratedSecurity"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; });

    $.Property({Static:false, Public:true }, "Authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Authentication"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Authentication"]; });

    $.Property({Static:false, Public:true }, "LoadBalanceTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_LoadBalanceTimeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Load Balance Timeout"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; });

    $.Property({Static:false, Public:true }, "MaxPoolSize", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_MaxPoolSize"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Max Pool Size"]; });

    $.Property({Static:false, Public:true }, "ConnectRetryCount", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["ConnectRetryCount"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ConnectRetryCount"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_ConnectionResilency"]; });

    $.Property({Static:false, Public:true }, "ConnectRetryInterval", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["ConnectRetryInterval"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_ConnectRetryInterval"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_ConnectionResilency"]; });

    $.Property({Static:false, Public:true }, "MinPoolSize", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Min Pool Size"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_MinPoolSize"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "MultipleActiveResultSets", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["MultipleActiveResultSets"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Advanced"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_MultipleActiveResultSets"]; });

    $.Property({Static:false, Public:true }, "MultiSubnetFailover", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_MultiSubnetFailover"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["MultiSubnetFailover"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; });

    $.Property({Static:false, Public:true }, "TransparentNetworkIPResolution", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_TransparentNetworkIPResolution"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["TransparentNetworkIPResolution"]; });

    $.Property({Static:false, Public:true }, "NetworkLibrary", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Network Library"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_NetworkLibrary"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnectionStringBuilder_NetworkLibraryConverter.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Advanced"]; });

    $.Property({Static:false, Public:true }, "PacketSize", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Packet Size"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Advanced"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_PacketSize"]; });

    $.Property({Static:false, Public:true }, "Password", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Password"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Password"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.PasswordPropertyTextAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; });

    $.Property({Static:false, Public:true }, "PersistSecurityInfo", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Persist Security Info"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_PersistSecurityInfo"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; });

    $.Property({Static:false, Public:true }, "Pooling", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Pooling"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "Replication", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Replication"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Replication"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Replication"]; });

    $.Property({Static:false, Public:true }, "TransactionBinding", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Advanced"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Transaction Binding"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_TransactionBinding"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "TypeSystemVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Type System Version"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Advanced"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_TypeSystemVersion"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "UserID", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_UserID"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["User ID"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; });

    $.Property({Static:false, Public:true }, "UserInstance", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_UserInstance"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["User Instance"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; });

    $.Property({Static:false, Public:true }, "WorkstationID", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_WorkstationID"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Workstation ID"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Context"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlConnectionStringBuilder_SqlConnectionStringBuilderConverter.__Type__]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["DataSource"]; });

})();

/* enum System.Data.SqlClient.SqlConnectionStringBuilder+Keywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionStringBuilder+Keywords", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DataSource: 0, 
    FailoverPartner: 1, 
    AttachDBFilename: 2, 
    InitialCatalog: 3, 
    IntegratedSecurity: 4, 
    PersistSecurityInfo: 5, 
    UserID: 6, 
    Password: 7, 
    Enlist: 8, 
    Pooling: 9, 
    MinPoolSize: 10, 
    MaxPoolSize: 11, 
    PoolBlockingPeriod: 12, 
    AsynchronousProcessing: 13, 
    ConnectionReset: 14, 
    MultipleActiveResultSets: 15, 
    Replication: 16, 
    ConnectTimeout: 17, 
    Encrypt: 18, 
    TrustServerCertificate: 19, 
    LoadBalanceTimeout: 20, 
    NetworkLibrary: 21, 
    PacketSize: 22, 
    TypeSystemVersion: 23, 
    Authentication: 24, 
    ApplicationName: 25, 
    CurrentLanguage: 26, 
    WorkstationID: 27, 
    UserInstance: 28, 
    ContextConnection: 29, 
    TransactionBinding: 30, 
    ApplicationIntent: 31, 
    MultiSubnetFailover: 32, 
    TransparentNetworkIPResolution: 33, 
    ConnectRetryCount: 34, 
    ConnectRetryInterval: 35, 
    ColumnEncryptionSetting: 36, 
    KeywordsCount: 37, 
  }
);

/* class System.Data.SqlClient.SqlConnectionStringBuilder+NetworkLibraryConverter */ 

(function NetworkLibraryConverter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Data.SqlClient.SqlConnectionStringBuilder+NetworkLibraryConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Constant({Static:true , Public:false}, "NamedPipes", $.String, "Named Pipes (DBNMPNTW)");

    $.Constant({Static:true , Public:false}, "SharedMemory", $.String, "Shared Memory (DBMSLPCN)");

    $.Constant({Static:true , Public:false}, "TCPIP", $.String, "TCP/IP (DBMSSOCN)");

    $.Constant({Static:true , Public:false}, "VIA", $.String, "VIA (DBMSGNET)");

    $.Field({Static:false, Public:false}, "_standardValues", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionStringBuilder+SqlDataSourceConverter */ 

(function SqlDataSourceConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.StringConverter"), 
      Name: "System.Data.SqlClient.SqlConnectionStringBuilder+SqlDataSourceConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:false, Public:false}, "_standardValues", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionStringBuilder+SqlInitialCatalogConverter */ 

(function SqlInitialCatalogConverter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.StringConverter"), 
      Name: "System.Data.SqlClient.SqlConnectionStringBuilder+SqlInitialCatalogConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStandardValuesSupportedInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionStringBuilder+SqlConnectionStringBuilderConverter */ 

(function SqlConnectionStringBuilderConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.SqlClient.SqlConnectionStringBuilder+SqlConnectionStringBuilderConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionStringBuilder")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlConnectionTimeoutErrorPhase */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionTimeoutErrorPhase", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    PreLoginBegin: 1, 
    InitializeConnection: 2, 
    SendPreLoginHandshake: 3, 
    ConsumePreLoginHandshake: 4, 
    LoginBegin: 5, 
    ProcessConnectionAuth: 6, 
    PostLogin: 7, 
    Complete: 8, 
    Count: 9, 
  }
);

/* enum System.Data.SqlClient.SqlConnectionInternalSourceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionInternalSourceType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Principle: 0, 
    Failover: 1, 
    RoutingDestination: 2, 
  }
);

/* class System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration */ 

(function SqlConnectionTimeoutPhaseDuration$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMilliSecondDuration", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartCapture", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StopCapture", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "swDuration", $asm0A.TypeRef("System.Diagnostics.Stopwatch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlConnectionTimeoutErrorInternal */ 

(function SqlConnectionTimeoutErrorInternal$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlConnectionTimeoutErrorInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndPhase", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorPhase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentPhase", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorPhase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetAndRestartPhase", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAllCompleteMarker", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAndBeginPhase", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorPhase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetFailoverScenario", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInternalSourceType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionInternalSourceType"))
    );

    $.Field({Static:false, Public:false}, "phaseDurations", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration")]));

    $.Field({Static:false, Public:false}, "originalPhaseDurations", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration")]));

    $.Field({Static:false, Public:false}, "currentPhase", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorPhase"));

    $.Field({Static:false, Public:false}, "currentSourceType", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionInternalSourceType"));

    $.Field({Static:false, Public:false}, "isFailoverScenario", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentPhase", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorPhase"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DataAdapter */ 

(function DataAdapter$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Data.Common.DataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "add_FillError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.FillErrorEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDataTableToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderHandleFieldCount", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertSchemaMapping", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.SchemaMapping"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "CloneFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloneInternals", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTableMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataTableMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $.String, 
          $asm11.TypeRef("System.Data.IDataReader"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.IDataReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $asm11.TypeRef("System.Data.IDataReader"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromReader", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $.String, $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.DataColumn"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillLoadDataRow", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.ProviderBase.SchemaMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillLoadDataRowChunk", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.ProviderBase.SchemaMapping"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillMapping", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.SchemaMapping"), [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $.String, $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
          $.Int32, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillMappingInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.SchemaMapping"), [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $.String, $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
          $.Int32, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillNextResult", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType"), 
          $.String, $asm11.TypeRef("System.Data.IDataReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.SchemaType"), 
          $asm11.TypeRef("System.Data.IDataReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillSchemaFromReader", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm11.TypeRef("System.Data.SchemaType"), $.String, 
          $asm11.TypeRef("System.Data.IDataReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptChangesDuringFill", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptChangesDuringUpdate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueUpdateOnError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FillLoadOption", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.LoadOption"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MissingMappingAction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingMappingAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MissingSchemaAction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingSchemaAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnProviderSpecificTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataTableMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFillParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IDataParameter")]))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:false}, "GetSourceTableName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableMappingBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.MissingMappingAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasTableMappings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfDataSetTable", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnFillError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.FillErrorEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnFillErrorHandler", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $asm11.TypeRef("System.Data.DataTable"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_FillError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.FillErrorEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetFillLoadOption", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "set_AcceptChangesDuringFill", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AcceptChangesDuringUpdate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContinueUpdateOnError", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FillLoadOption", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.LoadOption"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_MissingMappingAction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MissingMappingAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_MissingSchemaAction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.MissingSchemaAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReturnProviderSpecificTypes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeAcceptChangesDuringFill", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeFillLoadOption", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ShouldSerializeTableMappings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataAdapter.get_TableMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ITableMappingCollection"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDataAdapter"), "get_TableMappings");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventFillError", $.Object);

    $.Field({Static:false, Public:false}, "_acceptChangesDuringUpdate", $.Boolean);

    $.Field({Static:false, Public:false}, "_acceptChangesDuringUpdateAfterInsert", $.Boolean);

    $.Field({Static:false, Public:false}, "_continueUpdateOnError", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasFillErrorHandler", $.Boolean);

    $.Field({Static:false, Public:false}, "_returnProviderSpecificTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "_acceptChangesDuringFill", $.Boolean);

    $.Field({Static:false, Public:false}, "_fillLoadOption", $asm11.TypeRef("System.Data.LoadOption"));

    $.Field({Static:false, Public:false}, "_missingMappingAction", $asm11.TypeRef("System.Data.MissingMappingAction"));

    $.Field({Static:false, Public:false}, "_missingSchemaAction", $asm11.TypeRef("System.Data.MissingSchemaAction"));

    $.Field({Static:false, Public:false}, "_tableMappings", $asm11.TypeRef("System.Data.Common.DataTableMappingCollection"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "AcceptChangesDuringFill", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_AcceptChangesDuringFill"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; });

    $.Property({Static:false, Public:true }, "AcceptChangesDuringUpdate", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_AcceptChangesDuringUpdate"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true }, "ContinueUpdateOnError", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_ContinueUpdateOnError"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true }, "FillLoadOption", $asm11.TypeRef("System.Data.LoadOption"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_FillLoadOption"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "MissingMappingAction", $asm11.TypeRef("System.Data.MissingMappingAction"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_MissingMappingAction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.MissingMappingAction.Passthrough]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "MissingSchemaAction", $asm11.TypeRef("System.Data.MissingSchemaAction"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_MissingSchemaAction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.MissingSchemaAction.Add]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnProviderSpecificTypes", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_ReturnProviderSpecificTypes"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; });

    $.Property({Static:false, Public:true }, "TableMappings", $asm11.TypeRef("System.Data.Common.DataTableMappingCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_TableMappings"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDataAdapter.TableMappings", $asm11.TypeRef("System.Data.ITableMappingCollection"));

    $.Event({Static:false, Public:true }, "FillError", $asm11.TypeRef("System.Data.FillErrorEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataAdapter_FillError"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("System.Data.IDataAdapter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbDataAdapter */ 

(function DbDataAdapter$Members () {
  var $, $thisType;

















































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataAdapter"), 
      Name: "System.Data.Common.DbDataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddToBatch", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbCommand"), [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatedEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBatch", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $.Int32, 
          $.Int32, $.String, 
          $asm11.TypeRef("System.Data.IDbCommand"), $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")])
        ])
    )
      .Parameter(2, "dataTables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillInternal", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), 
          $.Int32, $.Int32, 
          $.String, $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.SchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FillSchema", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.SchemaType"), 
          $asm11.TypeRef("System.Data.IDbCommand"), $.String, 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FillSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.SchemaType"), 
          $asm11.TypeRef("System.Data.IDbCommand"), $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillSchemaInternal", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm11.TypeRef("System.Data.SchemaType"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $.String, $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__IDbDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FillCommandBehavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdateBatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UpdateMappingAction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingMappingAction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UpdateSchemaAction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.MissingSchemaAction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataParameter"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedRecordsAffected", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConnection1", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbConnection"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConnection3", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbConnection"), [
          $.Type, $asm11.TypeRef("System.Data.IDbCommand"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConnection4", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDbConnection"), [
          $.Type, $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFillParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IDataParameter")]))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:false}, "GetParameterSourceVersion", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRowVersion"), [$asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.IDataParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableMapping", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeBatching", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterInput", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataParameterCollection"), $asm11.TypeRef("System.Data.StatementType"), 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterOutput", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.Common.DataTableMapping"), $asm11.TypeRef("System.Data.MissingMappingAction"), 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterOutput", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.IDataParameterCollection"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuietClose", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDbConnection"), $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuietOpen", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDbConnection"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ConnectionState")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FillCommandBehavior", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdateBatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TerminateBatching", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataSet"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateBatchExecute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbDataAdapter+BatchCommandInfo")]), $.Int32, 
          $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateConnectionOpen", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ConnectionState"), [
          $asm11.TypeRef("System.Data.IDbConnection"), $asm11.TypeRef("System.Data.StatementType"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.IDbConnection")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.ConnectionState")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatedRowStatus", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbDataAdapter+BatchCommandInfo")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatedRowStatusContinue", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbDataAdapter+BatchCommandInfo")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatedRowStatusErrors", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbDataAdapter+BatchCommandInfo")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatedRowStatusSkip", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbDataAdapter+BatchCommandInfo")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFromDataTable", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateRowExecute", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatingRowStatusErrors", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.Constant({Static:true , Public:true }, "DefaultSourceTableName", $.String, "Table");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ParameterValueNonNullValue", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ParameterValueNullValue", $.Object);

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_selectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_fillCommandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Property({Static:false, Public:false}, "_IDbDataAdapter", $asm11.TypeRef("System.Data.IDbDataAdapter"));

    $.Property({Static:false, Public:true }, "DeleteCommand", $asm11.TypeRef("System.Data.Common.DbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.DeleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:false}, "FillCommandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Property({Static:false, Public:true }, "InsertCommand", $asm11.TypeRef("System.Data.Common.DbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.InsertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "SelectCommand", $asm11.TypeRef("System.Data.Common.DbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.SelectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateBatchSize", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [1]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_UpdateBatchSize"]; });

    $.Property({Static:false, Public:true }, "UpdateCommand", $asm11.TypeRef("System.Data.Common.DbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.UpdateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:false}, "UpdateMappingAction", $asm11.TypeRef("System.Data.MissingMappingAction"));

    $.Property({Static:false, Public:false}, "UpdateSchemaAction", $asm11.TypeRef("System.Data.MissingSchemaAction"));

    $.ImplementInterfaces(
      /* 3 */ $asm11.TypeRef("System.Data.IDbDataAdapter"), 
      /* 4 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Common.DbDataAdapter+BatchCommandInfo */ 

(function BatchCommandInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Common.DbDataAdapter+BatchCommandInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "CommandIdentifier", $.Int32);

    $.Field({Static:false, Public:false}, "ParameterCount", $.Int32);

    $.Field({Static:false, Public:false}, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "StatementType", $asm11.TypeRef("System.Data.StatementType"));

    $.Field({Static:false, Public:false}, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"));

    $.Field({Static:false, Public:false}, "RecordsAffected", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "Errors", $asm07.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDataAdapter */ 

(function SqlDataAdapter$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataAdapter"), 
      Name: "System.Data.SqlClient.SqlDataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddToBatch", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatedEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBatch", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdateBatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataParameter"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedRecordsAffected", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeBatching", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdateBatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TerminateBatching", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdated", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdating", $.Object);

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_selectCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_commandSet", $asm11.TypeRef("System.Data.SqlClient.SqlCommandSet"));

    $.Field({Static:false, Public:false}, "_updateBatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "DeleteCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_DeleteCommand"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.DeleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "InsertCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_InsertCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.InsertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "SelectCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_SelectCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.SelectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateBatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "UpdateCommand", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_UpdateCommand"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.UpdateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Event({Static:false, Public:true }, "RowUpdated", $asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdated"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Event({Static:false, Public:true }, "RowUpdating", $asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatingEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdating"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RowUpdated"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.SqlClient.SqlDataReader */ 

(function SqlDataReader$Members () {
  var $, $thisType;















































































































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataReader"), 
      Name: "System.Data.SqlClient.SqlDataReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand"), $asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderState", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Nullable`1", [$.Int32]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Cancel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDataIsReady", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDataIsReady", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckHeaderIsReady", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMetaDataIsReady", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMetaDataIsReady", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanPartialReadReliable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAfterAsyncInvocation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAfterAsyncInvocationInternal", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearMetaData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseActiveSequentialStreamAndTextReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseReaderFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnDataBytesRemaining", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteRetryable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"]), 
          $asm07.TypeRef("System.IDisposable")
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueRetryable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytesAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytesAsyncReadDataStage", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int32, $.Boolean, 
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.CancellationToken"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBytesInternal", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytesInternalSequential", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Nullable`1", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharsFromPlpData", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeNameInternal", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldTypeInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValue", 
      new JSIL.MethodSignature("!!0", [$.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValueAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldValueFromSqlBufferInternal", 
      new JSIL.MethodSignature("!!0", [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $asm11.TypeRef("System.Data.SqlClient._SqlMetaData")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldValueInternal", 
      new JSIL.MethodSignature("!!0", [$.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInternalSmiMetaData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocaleId", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderSpecificFieldTypeInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSqlValueFromSqlBufferInternal", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSqlValueInternal", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStreamingXmlChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTextReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.TextReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueFromSqlBufferInternal", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueInternal", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariantInternalStorageType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVersionedMetaType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.MetaType"), [$asm11.TypeRef("System.Data.SqlClient.MetaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasActiveStreamOrTextReaderOnColumn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeRetryable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])]), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"]), 
          $asm07.TypeRef("System.IDisposable")
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCommandBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNullAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRowToken", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResultAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareAsyncInvocation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareForAsyncContinuation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadColumn", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadColumnHeader", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreServerSettings", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParser"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BrowseModeInfoConsumed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsInitialized", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResetOptionsString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TableNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeout", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchToAsyncWithoutSnapshot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataRecord.GetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$.Int32])
    )
      .Overrides($asm11.TypeRef("System.Data.IDataRecord"), "GetData")
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "TryCleanPartialRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCloseInternal", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryConsumeMetaData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetBytesInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetBytesInternalSequential", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryHasMoreResults", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryHasMoreRows", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryNextResult", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadColumn", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadColumnData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadColumnHeader", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadColumnInternal", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInternal", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryResetBlobState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetAltMetaDataSet", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetMetaData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WillHaveEnoughData", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "_sharedState", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+SharedState"));

    $.Field({Static:false, Public:false}, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_defaultLCID", $.Int32);

    $.Field({Static:false, Public:false}, "_haltRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_metaDataConsumed", $.Boolean);

    $.Field({Static:false, Public:false}, "_browseModeInfoConsumed", $.Boolean);

    $.Field({Static:false, Public:false}, "_isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "_isInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasRows", $.Boolean);

    $.Field({Static:false, Public:false}, "_altRowStatus", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+ALTROWSTATUS"));

    $.Field({Static:false, Public:false}, "_recordsAffected", $.Int32);

    $.Field({Static:false, Public:false}, "_defaultTimeoutMilliseconds", $.Int64);

    $.Field({Static:false, Public:false}, "_typeSystem", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString+TypeSystem"));

    $.Field({Static:false, Public:false}, "_statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Field({Static:false, Public:false}, "_data", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlBuffer")]));

    $.Field({Static:false, Public:false}, "_streamingXml", $asm11.TypeRef("System.Data.SqlClient.SqlStreamingXml"));

    $.Field({Static:false, Public:false}, "_metaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:false}, "_altMetaDataSetCollection", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSetCollection"));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "_commandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_tableNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")]));

    $.Field({Static:false, Public:false}, "_resetOptionsString", $.String);

    $.Field({Static:false, Public:false}, "_lastColumnWithDataChunkRead", $.Int32);

    $.Field({Static:false, Public:false}, "_columnDataBytesRead", $.Int64);

    $.Field({Static:false, Public:false}, "_columnDataCharsRead", $.Int64);

    $.Field({Static:false, Public:false}, "_columnDataChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "_columnDataCharsIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_currentTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_snapshot", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+Snapshot"));

    $.Field({Static:false, Public:false}, "_cancelAsyncOnCloseTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "_cancelAsyncOnCloseToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_typeofINullable", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm11.System.Data.SqlTypes.INullable.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "_typeofSqlString", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm11.System.Data.SqlTypes.SqlString.__Type__;
      });

    $.Field({Static:false, Public:false}, "_currentStream", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialStream"));

    $.Field({Static:false, Public:false}, "_currentTextReader", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReader"));

    $.Property({Static:false, Public:false}, "BrowseModeInfoConsumed", $.Boolean);

    $.Property({Static:false, Public:false}, "Command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInitialized", $.Boolean);

    $.Property({Static:false, Public:false}, "MetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:false}, "ResetOptionsString", $.String);

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Property({Static:false, Public:false}, "TableNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")]));

    $.Property({Static:false, Public:true , Virtual:true }, "VisibleFieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.SqlClient.SqlDataReader+ALTROWSTATUS */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlDataReader+ALTROWSTATUS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Null: 0, 
    AltRow: 1, 
    Done: 2, 
  }
);

/* class System.Data.SqlClient.SqlDataReader+SharedState */ 

(function SharedState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+SharedState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_nextColumnHeaderToRead", $.Int32);

    $.Field({Static:false, Public:false}, "_nextColumnDataToRead", $.Int32);

    $.Field({Static:false, Public:false}, "_columnDataBytesRemaining", $.Int64);

    $.Field({Static:false, Public:false}, "_dataReady", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDataReader+Snapshot */ 

(function Snapshot$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+Snapshot", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "_dataReady", $.Boolean);

    $.Field({Static:false, Public:true }, "_haltRead", $.Boolean);

    $.Field({Static:false, Public:true }, "_metaDataConsumed", $.Boolean);

    $.Field({Static:false, Public:true }, "_browseModeInfoConsumed", $.Boolean);

    $.Field({Static:false, Public:true }, "_hasRows", $.Boolean);

    $.Field({Static:false, Public:true }, "_altRowStatus", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+ALTROWSTATUS"));

    $.Field({Static:false, Public:true }, "_nextColumnDataToRead", $.Int32);

    $.Field({Static:false, Public:true }, "_nextColumnHeaderToRead", $.Int32);

    $.Field({Static:false, Public:true }, "_columnDataBytesRead", $.Int64);

    $.Field({Static:false, Public:true }, "_columnDataBytesRemaining", $.Int64);

    $.Field({Static:false, Public:true }, "_metadata", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:true }, "_altMetaDataSetCollection", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSetCollection"));

    $.Field({Static:false, Public:true }, "_tableNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")]));

    $.Field({Static:false, Public:true }, "_currentStream", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialStream"));

    $.Field({Static:false, Public:true }, "_currentTextReader", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass186_0 */ 

(function $l$gc__DisplayClass186_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass186_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lNextResultAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass187_0 */ 

(function $l$gc__DisplayClass187_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass187_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "index", $.Int32);

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass187_1 */ 

(function $l$gc__DisplayClass187_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass187_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetBytesAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "timeoutToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32])]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+<>c__DisplayClass187_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass188_0 */ 

(function $l$gc__DisplayClass188_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass188_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetBytesAsyncReadDataStage$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]))
    );

    $.Field({Static:false, Public:true }, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "timeoutToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "index", $.Int32);

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "timeoutCancellationSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass188_1 */ 

(function $l$gc__DisplayClass188_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass188_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetBytesAsyncReadDataStage$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "totalBytesRead", $.Int32);

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32])]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+<>c__DisplayClass188_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass189_0 */ 

(function $l$gc__DisplayClass189_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass189_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "rowTokenRead", $.Boolean);

    $.Field({Static:false, Public:true }, "more", $.Boolean);

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass190_0 */ 

(function $l$gc__DisplayClass190_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass190_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass190_1 */ 

(function $l$gc__DisplayClass190_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass190_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lIsDBNullAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean])]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+<>c__DisplayClass190_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass191_0`1 */ 

(function $l$gc__DisplayClass191_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass191_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetFieldValueAsync$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")]), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass193_0`1 */ 

(function $l$gc__DisplayClass193_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass193_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lContinueRetryable$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")]), [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Object])])
    );

    $.Field({Static:false, Public:true }, "moreFunc", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReader+<>c__DisplayClass194_0`1 */ 

(function $l$gc__DisplayClass194_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDataReader+<>c__DisplayClass194_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInvokeRetryable$gb__0", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "objectToDispose", $asm07.TypeRef("System.IDisposable"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlDataReaderSmi */ 

(function SqlDataReaderSmi$Members () {
  var $, $thisType;























































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), 
      Name: "System.Data.SqlClient.SqlDataReaderSmi", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventStream"), $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), 
          $asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"), 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRequestExecutor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BatchCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseReaderFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCanGetCol", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCanGetMetaData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureOnRow", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FInResults", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FNotInResults", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBytesInternal", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValue", 
      new JSIL.MethodSignature("!!0", [$.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldValueAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInternalSmiMetaData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocaleId", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSqlXml", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlXml"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTextReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.TextReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariantInternalStorageType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlBuffer+StorageType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasActiveStreamOrTextReaderOnColumn", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalNextResult", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalRead", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNullAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$.Int32, $asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsReallyClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MetaDataAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiQueryMetaData")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResultAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetResultSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StatementCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfClosed", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_currentPosition", $asm11.TypeRef("System.Data.SqlClient.SqlDataReaderSmi+PositionState"));

    $.Field({Static:false, Public:false}, "_isOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "_currentMetaData", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiQueryMetaData")]));

    $.Field({Static:false, Public:false}, "_indexMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_visibleColumnCount", $.Int32);

    $.Field({Static:false, Public:false}, "_schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_currentColumnValues", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"));

    $.Field({Static:false, Public:false}, "_currentColumnValuesV3", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"));

    $.Field({Static:false, Public:false}, "_hasRows", $.Boolean);

    $.Field({Static:false, Public:false}, "_eventStream", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventStream"));

    $.Field({Static:false, Public:false}, "_requestExecutor", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRequestExecutor"));

    $.Field({Static:false, Public:false}, "_currentConnection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"));

    $.Field({Static:false, Public:false}, "_readerEventSink", $asm11.TypeRef("System.Data.SqlClient.SqlDataReaderSmi+ReaderEventSink"));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "_currentStream", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialStreamSmi"));

    $.Field({Static:false, Public:false}, "_currentTextReader", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReaderSmi"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "VisibleFieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalFieldCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.SqlClient.SqlDataReaderSmi+PositionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlDataReaderSmi+PositionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BeforeResults: 0, 
    BeforeRows: 1, 
    OnRow: 2, 
    AfterRows: 3, 
    AfterResults: 4, 
  }
);

/* class System.Data.SqlClient.SqlDataReaderSmi+ReaderEventSink */ 

(function ReaderEventSink$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
      Name: "System.Data.SqlClient.SqlDataReaderSmi+ReaderEventSink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReaderSmi"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BatchCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MetaDataAvailable", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiQueryMetaData")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGetters"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RowAvailable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StatementCompleted", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReaderSmi"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDelegatedTransaction */ 

(function SqlDelegatedTransaction$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDelegatedTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), $asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsActive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Transaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGlobalTxnIdentifierFromToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValidConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SinglePhaseCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateActiveOnConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"))
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Constant({Static:true , Public:false}, "_globalTransactionsTokenVersionSizeInBytes", $.Int32, 4);

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"));

    $.Field({Static:false, Public:false}, "_isolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Field({Static:false, Public:false}, "_internalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_atomicTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "_active", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Transaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "IsActive", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
      /* 1 */ $asm27.TypeRef("System.Transactions.ITransactionPromoter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependency */ 

(function SqlDependency$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDependency", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_OnChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.OnChangeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCommandDependency", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    )
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlDependency_AddCommandDependency"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddCommandInternal", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToServerList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToServerUserHash", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependency+IdentityUserNamePair"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlDependency+DatabaseServicePair")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeCommandHash", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeHashAndAddToDispatcher", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsServer", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateProcessDispatcher", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Remoting.ObjectHandle"), [$asm07.TypeRef("System._AppDomain")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FixupServiceOrDatabaseName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AppDomainKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasChanges", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Options", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessDispatcher", 
      JSIL.MethodSignature.Return($asm11.TypeRef("SqlDependencyProcessDispatcher"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultComposedOptions", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlClient.SqlDependency+IdentityUserNamePair"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeserializedObject", 
      new JSIL.MethodSignature($asm11.TypeRef("SqlDependencyProcessDispatcher"), [$asm07.TypeRef("System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"), $asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Remoting.ObjRef"), [$asm11.TypeRef("SqlDependencyProcessDispatcher")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSerializedObject", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Remoting.ObjRef"), $asm07.TypeRef("System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"), 
          $asm07.TypeRef("System.IO.MemoryStream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Invalidate", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"), $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObtainProcessDispatcher", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_OnChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.OnChangeEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveFromServerUserHash", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependency+IdentityUserNamePair"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlDependency+DatabaseServicePair")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Start", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Start", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Start", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartTimer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Stop", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_id", $.String);

    $.Field({Static:false, Public:false}, "_options", $.String);

    $.Field({Static:false, Public:false}, "_timeout", $.Int32);

    $.Field({Static:false, Public:false}, "_dependencyFired", $.Boolean);

    $.Field({Static:false, Public:false}, "_eventList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDependency+EventContextPair")]));

    $.Field({Static:false, Public:false}, "_eventHandlerLock", $.Object);

    $.Field({Static:false, Public:false}, "_expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_serverList", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:false}, "_startStopLock", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_appDomainKey", $.String);

    $.Field({Static:true , Public:false}, "_serverUserHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Data.SqlClient.SqlDependency+IdentityUserNamePair"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDependency+DatabaseServicePair")])])]));

    $.Field({Static:true , Public:false}, "_processDispatcher", $asm11.TypeRef("SqlDependencyProcessDispatcher"), null);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_assemblyName", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_typeName", $.String);

    $.Constant({Static:true , Public:false}, "NotificationsTracePoints", $asm11.TypeRef("Bid+ApiGroup"), 8192);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "HasChanges", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlDependency_HasChanges"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlDependency_Id"]; });

    $.Property({Static:true , Public:false}, "AppDomainKey", $.String);

    $.Property({Static:false, Public:false}, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Options", $.String);

    $.Property({Static:true , Public:false}, "ProcessDispatcher", $asm11.TypeRef("SqlDependencyProcessDispatcher"));

    $.Property({Static:false, Public:false}, "Timeout", $.Int32);

    $.Event({Static:false, Public:true }, "OnChange", $asm11.TypeRef("System.Data.SqlClient.OnChangeEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlDependency_OnChange"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependency+IdentityUserNamePair */ 

(function IdentityUserNamePair$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDependency+IdentityUserNamePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Field({Static:false, Public:false}, "_userName", $.String);

    $.Property({Static:false, Public:false}, "Identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Property({Static:false, Public:false}, "UserName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependency+DatabaseServicePair */ 

(function DatabaseServicePair$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDependency+DatabaseServicePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Service", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_database", $.String);

    $.Field({Static:false, Public:false}, "_service", $.String);

    $.Property({Static:false, Public:false}, "Database", $.String);

    $.Property({Static:false, Public:false}, "Service", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependency+EventContextPair */ 

(function EventContextPair$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlDependency+EventContextPair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.OnChangeEventHandler"), $asm11.TypeRef("System.Data.SqlClient.SqlDependency")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlNotificationEventArgs"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_eventHandler", $asm11.TypeRef("System.Data.SqlClient.OnChangeEventHandler"));

    $.Field({Static:false, Public:false}, "_context", $asm07.TypeRef("System.Threading.ExecutionContext"));

    $.Field({Static:false, Public:false}, "_dependency", $asm11.TypeRef("System.Data.SqlClient.SqlDependency"));

    $.Field({Static:false, Public:false}, "_args", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationEventArgs"));

    $.Field({Static:true , Public:false}, "_contextCallback", $asm07.TypeRef("System.Threading.ContextCallback"), function ($pi) {
        return $asm07.System.Threading.ContextCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "InvokeCallback", JSIL.MethodSignature.Action($.Object), true, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher */ 

(function SqlDependencyPerAppDomainDispatcher$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCommandEntry", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependency")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependencyEntry", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDependency"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateCommandID", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlNotification"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateServer", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlNotification")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupCommandEntryWithRemove", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDependency")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDependencyEntry", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDependency"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDependencyEntryWithRemove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencyFromCommandToDependenciesHash", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDependency"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartTimer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDependency"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutTimerCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "UnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $.Type);

    $.Field({Static:false, Public:false}, "_dependencyIdToDependencyHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependency")]));

    $.Field({Static:false, Public:false}, "_notificationIdToDependenciesHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher+DependencyList")]));

    $.Field({Static:false, Public:false}, "_commandHashToNotificationId", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_SqlDependencyTimeOutTimerStarted", $.Boolean);

    $.Field({Static:false, Public:false}, "_nextTimeout", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_timeoutTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher+DependencyList */ 

(function DependencyList$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlDependency")]), 
      Name: "System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher+DependencyList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "CommandHash", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlNotification */ 

(function SqlNotification$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.SqlClient.SqlNotification", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"), $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Info", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Source", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_info", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_source", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_key", $.String);

    $.Property({Static:false, Public:false}, "Info", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"));

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:false}, "Source", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"));

    $.Property({Static:false, Public:false}, "Type", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.MetaType */ 

(function MetaType$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.MetaType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Int32, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Byte, $.Byte, 
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.SqlDbType"), 
          $asm11.TypeRef("System.Data.DbType"), $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Is100Supported", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Is70Supported", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Is80Supported", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_Is90Supported", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsAnsiType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsBinType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsCharType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsNCharType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsNewKatmaiType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsSizeInCharacters", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "_IsVarTime", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssertIsUserDefinedTypeInstance", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "FromDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.TdsDateTime"), [$asm07.TypeRef("System.DateTime"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComValueFromSqlVariant", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMetaType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMaxMetaTypeFromMetaType", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeFromDbType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeFromSqlDbType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlDbType"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeFromType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeFromValue", 
      new JSIL.MethodSignature($.Type, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeFromValue", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Type"), $.Object, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNullSqlValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDataType", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.UInt32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlDbTypeFromOleDbType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlDbType"), [$.Int16, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlValueFromComVariant", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStringFromXml", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeSizeFromScale", 
      new JSIL.MethodSignature($.Int32, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "PromoteStringType", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "ClassType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SqlType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "FixedLength", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsFixed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsLong", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsPlp", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Precision", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Scale", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "TDSType", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "NullableType", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "TypeName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "SqlDbType", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "PropBytes", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsAnsiType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsBinType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsCharType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsNCharType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsSizeInCharacters", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsNewKatmaiType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsVarTime", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is70Supported", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is80Supported", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is90Supported", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Is100Supported", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaBigInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaFloat", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaReal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTimestamp", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaVarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaMaxVarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaSmallVarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaImage", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaBit", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTinyInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaSmallInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaMaxVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaText", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaNChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaNVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaMaxNVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaNText", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaDecimal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaXml", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaDateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaSmallDateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaMoney", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaSmallMoney", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaUniqueId", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaVariant", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaUdt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaMaxUdt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTable", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaSUDT", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaDate", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaDateTime2", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaDateTimeOffset", $.Type);

    $.Property({Static:false, Public:true }, "TypeId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.TdsDateTime */ 

(function TdsDateTime$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsDateTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "days", $.Int32);

    $.Field({Static:false, Public:true }, "time", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlError */ 

(function SqlError$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlError", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.String, 
          $.String, $.String, 
          $.Int32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.String, 
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Class", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Procedure", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Server", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Win32ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "number", $.Int32);

    $.Field({Static:false, Public:false}, "state", $.Byte);

    $.Field({Static:false, Public:false}, "errorClass", $.Byte);

    $.Field({Static:false, Public:false}, "server", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Field({Static:false, Public:false}, "procedure", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "Number", $.Int32);

    $.Property({Static:false, Public:true }, "State", $.Byte);

    $.Property({Static:false, Public:true }, "Class", $.Byte);

    $.Property({Static:false, Public:true }, "Server", $.String);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "Procedure", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "Win32ErrorCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlErrorCollection */ 

(function SqlErrorCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlErrorCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlError"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlError")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlError"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "errors", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.SqlClient.SqlError"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Common.DbException */ 

(function DbException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "System.Data.Common.DbException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlException */ 

(function SqlException$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbException"), 
      Name: "System.Data.SqlClient.SqlException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), 
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), $.String, 
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), $.String, 
          $asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Class", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientConnectionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Procedure", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Server", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalClone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "OriginalClientConnectionIdKey", $.String, "OriginalClientConnectionId");

    $.Constant({Static:true , Public:false}, "RoutingDestinationKey", $.String, "RoutingDestination");

    $.Field({Static:false, Public:false}, "_errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_clientConnectionId", $asm07.TypeRef("System.Guid"))
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "_doNotReconnect", $.Boolean);

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.Property({Static:false, Public:true }, "ClientConnectionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "Class", $.Byte);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Number", $.Int32);

    $.Property({Static:false, Public:true }, "Procedure", $.String);

    $.Property({Static:false, Public:true }, "Server", $.String);

    $.Property({Static:false, Public:true }, "State", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Source", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInfoMessageEventArgs */ 

(function SqlInfoMessageEventArgs$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.SqlClient.SqlInfoMessageEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlException"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "exception", $asm11.TypeRef("System.Data.SqlClient.SqlException"));

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "Source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.SqlClient.SqlInfoMessageEventHandler */ 

JSIL.MakeDelegate("System.Data.SqlClient.SqlInfoMessageEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.SqlClient.SqlInfoMessageEventArgs")]));

/* class System.Data.ProviderBase.DbConnectionInternal */ 

(function DbConnectionInternal$Members () {
  var $, $thisType;































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ConnectionState"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ActivateConnection", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupConnectionOnTransactionCompletion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CleanupTransactionOnCompletion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeactivateConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DelegatedTransactionEnded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachCurrentTransactionIfEnded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachTransaction", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoNotPoolThisConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoomThisConnection", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowSetConnectionString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBePooled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistedTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistedTransactionDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConnectionDoomed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmancipated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInPool", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsNonPoolableTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTxRootWaitingForTxEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Owner", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pool", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadyToPrepareTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersionNormalized", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldHidePassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UnbindOnTransactionCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConnectionAlive", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeNonPooledObject", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakePooledConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ObtainAdditionalLocksForClose", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostPop", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareForCloseConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareForReplaceConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrePush", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseAdditionalLocksForClose", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EnlistedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInStasis", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TerminateStasis", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionCompletedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm27.TypeRef("System.Transactions.TransactionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionOutcomeEnlist", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryOpenConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Type]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryOpenConnectionInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Type]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryReplaceConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Type]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateChangeClosed", $asm11.TypeRef("System.Data.StateChangeEventArgs"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateChangeOpen", $asm11.TypeRef("System.Data.StateChangeEventArgs"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_allowSetConnectionString", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hidePassword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_state", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_owningObject", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_connectionPool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Field({Static:false, Public:false}, "_performanceCounters", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Field({Static:false, Public:false}, "_referenceCollection", $asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"));

    $.Field({Static:false, Public:false}, "_pooledCount", $.Int32);

    $.Field({Static:false, Public:false}, "_connectionIsDoomed", $.Boolean);

    $.Field({Static:false, Public:false}, "_cannotBePooled", $.Boolean);

    $.Field({Static:false, Public:false}, "_isInStasis", $.Boolean);

    $.Field({Static:false, Public:false}, "_createTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_enlistedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "_enlistedTransactionOriginal", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "AllowSetConnectionString", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBePooled", $.Boolean);

    $.Property({Static:false, Public:false}, "EnlistedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "EnlistedTransactionDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTxRootWaitingForTxEnd", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "UnbindOnTransactionCompletion", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsNonPoolableTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConnectionDoomed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmancipated", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInPool", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Owner", $.Object);

    $.Property({Static:false, Public:false}, "Pool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:false, Virtual:true }, "ReadyToPrepareTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferenceCollection", $asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersionNormalized", $.String);

    $.Property({Static:false, Public:true }, "ShouldHidePassword", $.Boolean);

    $.Property({Static:false, Public:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInternalConnection */ 

(function SqlInternalConnection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm11.System.Data.SqlClient.SqlDelegatedTransaction)) ();
  };























  function SqlInternalConnection_get_CurrentDatabase () {
    return this.SqlInternalConnection$CurrentDatabase$value;
  }; 

  function SqlInternalConnection_get_CurrentDataSource () {
    return this.SqlInternalConnection$CurrentDataSource$value;
  }; 


  function SqlInternalConnection_get_DelegatedTransaction () {
    return this.SqlInternalConnection$DelegatedTransaction$value;
  }; 




















  function SqlInternalConnection_set_CurrentDatabase (value) {
    this.SqlInternalConnection$CurrentDatabase$value = value;
  }; 

  function SqlInternalConnection_set_CurrentDataSource (value) {
    this.SqlInternalConnection$CurrentDataSource$value = value;
  }; 

  function SqlInternalConnection_set_DelegatedTransaction (value) {
    this.SqlInternalConnection$DelegatedTransaction$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.SqlClient.SqlInternalConnection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginSqlTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), [
          $asm11.TypeRef("System.Data.IsolationLevel"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BestEffortCleanup", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeDatabaseInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CleanupTransactionOnCompletion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisconnectTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Enlist", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistNonNull", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteTransaction", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLiveCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlCommand"), [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLiveReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_AvailableInternalTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.Method({Static:false, Public:false}, "get_CurrentDatabase", 
      JSIL.MethodSignature.Return($.String), 
      SqlInternalConnection_get_CurrentDatabase
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_CurrentDataSource", 
      JSIL.MethodSignature.Return($.String), 
      SqlInternalConnection_get_CurrentDataSource
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.Method({Static:false, Public:false}, "get_DelegatedTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlDelegatedTransaction")), 
      SqlInternalConnection_get_DelegatedTransaction
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalTransactionFromAPI", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnlistedInTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGlobalTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGlobalTransactionsEnabledForServer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsKatmaiOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsLockedForBulkCopy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsNonPoolableTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsShiloh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsYukonOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PendingTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PromotedDTCToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBestEffortCleanupTarget", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.TdsParser"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDTCAddress", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTransactionCookie", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.Transaction"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnError", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlException"), $.Boolean, 
          $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Action")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PropagateTransactionCookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Method({Static:false, Public:false}, "set_CurrentDatabase", 
      JSIL.MethodSignature.Action($.String), 
      SqlInternalConnection_set_CurrentDatabase
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CurrentDataSource", 
      JSIL.MethodSignature.Action($.String), 
      SqlInternalConnection_set_CurrentDataSource
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DelegatedTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDelegatedTransaction")), 
      SqlInternalConnection_set_DelegatedTransaction
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsGlobalTransaction", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGlobalTransactionsEnabledForServer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PromotedDTCToken", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConnectionForExecute", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionOptions", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"));

    $.Field({Static:false, Public:false}, "_isEnlistedInTransaction", $.Boolean);

    $.Field({Static:false, Public:false}, "_promotedDTCToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_whereAbouts", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_isGlobalTransaction", $.Boolean);

    $.Field({Static:false, Public:false}, "_isGlobalTransactionEnabledForServer", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_globalTransactionTMID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "SqlInternalConnection$CurrentDatabase$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SqlInternalConnection$CurrentDataSource$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SqlInternalConnection$DelegatedTransaction$value", $asm11.TypeRef("System.Data.SqlClient.SqlDelegatedTransaction"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));


    function SqlInternalConnection__cctor () {
      $thisType._globalTransactionTMID = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlInternalConnection__cctor
    );

    $.Property({Static:false, Public:false}, "CurrentDatabase", $.String);

    $.Property({Static:false, Public:false}, "CurrentDataSource", $.String);

    $.Property({Static:false, Public:false}, "DelegatedTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlDelegatedTransaction"));

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "AvailableInternalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "PendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsNonPoolableTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocalTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocalTransactionFromAPI", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEnlistedInTransaction", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsLockedForBulkCopy", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsShiloh", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsYukonOrNewer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsKatmaiOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "PromotedDTCToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "IsGlobalTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGlobalTransactionsEnabledForServer", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlInternalConnection+TransactionRequest */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlInternalConnection+TransactionRequest", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Begin: 0, 
    Promote: 1, 
    Commit: 2, 
    Rollback: 3, 
    IfRollback: 4, 
    Save: 5, 
  }
);

/* class System.Data.SqlClient.SqlInternalConnectionSmi */ 

(function SqlInternalConnectionSmi$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm27.System.Transactions.Transaction)) ();
  };











  function SqlInternalConnectionSmi_get_ContextTransaction () {
    return this.SqlInternalConnectionSmi$ContextTransaction$value;
  }; 


















  function SqlInternalConnectionSmi_set_ContextTransaction (value) {
    this.SqlInternalConnectionSmi$ContextTransaction$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionSmi", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Activate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AutomaticEnlistment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeDatabaseInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DelegatedTransactionEnded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisconnectTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteTransaction", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"), 
          $.Boolean
        ])
    );

    $.Method({Static:false, Public:false}, "get_ContextTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction")), 
      SqlInternalConnectionSmi_get_ContextTransaction
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentEventSink", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalEnlistedTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsKatmaiOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsLockedForBulkCopy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsShiloh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsYukonOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PendingTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SmiConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UnbindOnTransactionCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentTransactionPair", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Transaction")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDTCAddress", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnOutOfScope", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PropagateTransactionCookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Method({Static:false, Public:false}, "set_ContextTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction")), 
      SqlInternalConnectionSmi_set_ContextTransaction
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      new JSIL.MethodSignature(null, [$.Int64, $asm11.TypeRef("System.Data.SqlClient.TransactionState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEndedByServer", 
      new JSIL.MethodSignature(null, [$.Int64, $asm11.TypeRef("System.Data.SqlClient.TransactionState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionStarted", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConnectionForExecute", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.Field({Static:false, Public:false}, "_smiContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Field({Static:false, Public:false}, "_smiConnection", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"));

    $.Field({Static:false, Public:false}, "_smiEventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_isInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_pendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_currentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "SqlInternalConnectionSmi$ContextTransaction$value", $asm27.TypeRef("System.Transactions.Transaction"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "InternalContext", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiContext"));

    $.Property({Static:false, Public:false}, "SmiConnection", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiConnection"));

    $.Property({Static:false, Public:false}, "CurrentEventSink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"));

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsLockedForBulkCopy", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsShiloh", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsYukonOrNewer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsKatmaiOrNewer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "UnbindOnTransactionCompletion", $.Boolean);

    $.Property({Static:false, Public:false}, "ContextTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "InternalEnlistedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInternalConnectionSmi+EventSink */ 

(function EventSink$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionSmi+EventSink", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DefaultDatabaseChanged", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DispatchMessages", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionCommitted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionDefected", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnded", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionEnlisted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionRolledBack", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TransactionStarted", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionSmi"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServerVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SessionStateRecord */ 

(function SessionStateRecord$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SessionStateRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_recoverable", $.Boolean);

    $.Field({Static:false, Public:false}, "_version", $.UInt32);

    $.Field({Static:false, Public:false}, "_dataLength", $.Int32);

    $.Field({Static:false, Public:false}, "_data", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SessionData */ 

(function SessionData$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SessionData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AssertUnrecoverableStateCountIsCorrect", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "_maxNumberOfSessionStates", $.Int32, 256);

    $.Field({Static:false, Public:false}, "_tdsVersion", $.UInt32);

    $.Field({Static:false, Public:false}, "_encrypted", $.Boolean);

    $.Field({Static:false, Public:false}, "_database", $.String);

    $.Field({Static:false, Public:false}, "_collation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "_language", $.String);

    $.Field({Static:false, Public:false}, "_initialDatabase", $.String);

    $.Field({Static:false, Public:false}, "_initialCollation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "_initialLanguage", $.String);

    $.Field({Static:false, Public:false}, "_unrecoverableStatesCount", $.Byte);

    $.Field({Static:false, Public:false}, "_resolvedAliases", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Tuple`2", [$.String, $.String])]));

    $.Field({Static:false, Public:false}, "_delta", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SessionStateRecord")]));

    $.Field({Static:false, Public:false}, "_deltaDirty", $.Boolean);

    $.Field({Static:false, Public:false}, "_initialState", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInternalConnectionTds */ 

(function SqlInternalConnectionTds$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionTds", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 12, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), $.Object, 
          $.String, $asm07.TypeRef("System.Security.SecureString"), 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), 
          $asm11.TypeRef("System.Data.SqlClient.SessionData"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOnFeatureExtAck$gb__129_0", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AttemptOneLogin", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), $.String, 
          $asm07.TypeRef("System.Security.SecureString"), $.Boolean, 
          $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BreakConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeDatabaseInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEnlistedTransactionBinding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteLogin", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementAsyncCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DelegatedTransactionEnded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisconnectTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteTransaction", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteTransaction", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteTransactionPreYukon", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteTransactionYukon", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection+TransactionRequest"), $.String, 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FailoverPermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_AvailableInternalTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClientConnectionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentSessionData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SessionData"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CurrentTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreEnvChange", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InstanceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsKatmaiOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsLockedForBulkCopy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsNonPoolableTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsShiloh", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsYukonOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalClientConnectionId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PacketSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parser", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PendingTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroupProviderInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadyToPrepareTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RoutingDestination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerProvidedFailOverPartner", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThreadHasParserLockForClose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimeoutErrorInternal", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorInternal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UnbindOnTransactionCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDTCAddress", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFedAuthToken", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlFedAuthToken"), [$asm11.TypeRef("System.Data.SqlClient.SqlFedAuthInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSessionAndReconnectIfNeeded", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnection"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementAsyncCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsConnectionAlive", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDoNotRetryConnectError", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTransientError", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Login", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer"), 
          $.String, $asm07.TypeRef("System.Security.SecureString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoginFailure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoginNoFailover", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), $.String, 
          $asm07.TypeRef("System.Security.SecureString"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), 
          $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoginWithFailover", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Security.SecureString"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), 
          $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ObtainAdditionalLocksForClose", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEnvChange", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlEnvChange"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnFeatureExtAck", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnFedAuthInfo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlFedAuthInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnLoginAck", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlLoginAck"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenLoginEnlist", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer"), $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCredential"), $.String, 
          $asm07.TypeRef("System.Security.SecureString"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "populateTransientErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PropagateTransactionCookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseAdditionalLocksForClose", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveExtendedServerName", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ThreadHasParserLockForClose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldDisableTnir", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetFedAuthTokenLocked", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlFedAuthInfo"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlFedAuthToken")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryReplaceConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConnectionForExecute", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolGroupProviderInfo", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo"));

    $.Field({Static:false, Public:false}, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false}, "_loginAck", $asm11.TypeRef("System.Data.SqlClient.SqlLoginAck"));

    $.Field({Static:false, Public:false}, "_credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"));

    $.Field({Static:false, Public:false}, "_fedAuthFeatureExtensionData", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData")]));

    $.Field({Static:false, Public:false}, "_sessionRecoveryRequested", $.Boolean);

    $.Field({Static:false, Public:false}, "_sessionRecoveryAcknowledged", $.Boolean);

    $.Field({Static:false, Public:false}, "_currentSessionData", $asm11.TypeRef("System.Data.SqlClient.SessionData"));

    $.Field({Static:false, Public:false}, "_recoverySessionData", $asm11.TypeRef("System.Data.SqlClient.SessionData"));

    $.Field({Static:false, Public:false}, "_fedAuthRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_federatedAuthenticationRequested", $.Boolean);

    $.Field({Static:false, Public:false}, "_federatedAuthenticationAcknowledged", $.Boolean);

    $.Field({Static:false, Public:false}, "_federatedAuthenticationInfoRequested", $.Boolean);

    $.Field({Static:false, Public:false}, "_federatedAuthenticationInfoReceived", $.Boolean);

    $.Field({Static:false, Public:false}, "_tceVersionSupported", $.Byte);

    $.Field({Static:false, Public:false}, "_accessTokenInBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_dbConnectionPool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Field({Static:false, Public:false}, "_newDbConnectionPoolAuthenticationContext", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext"));

    $.Field({Static:false, Public:false}, "_dbConnectionPoolAuthenticationContextKey", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_dbAuthenticationContextLockedRefreshTimeSpan", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_dbAuthenticationContextUnLockedRefreshTimeSpan", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_timeout", $asm11.TypeRef("System.Data.ProviderBase.TimeoutTimer"));

    $.Field({Static:true , Public:false}, "transientErrors", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "_fConnectionOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "_fResetConnection", $.Boolean);

    $.Field({Static:false, Public:false}, "_originalDatabase", $.String);

    $.Field({Static:false, Public:false}, "_currentFailoverPartner", $.String);

    $.Field({Static:false, Public:false}, "_originalLanguage", $.String);

    $.Field({Static:false, Public:false}, "_currentLanguage", $.String);

    $.Field({Static:false, Public:false}, "_currentPacketSize", $.Int32);

    $.Field({Static:false, Public:false}, "_asyncCommandCount", $.Int32);

    $.Field({Static:false, Public:false}, "_instanceName", $.String);

    $.Field({Static:false, Public:false}, "_identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Field({Static:false, Public:false}, "_parserLock", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds+SyncAsyncLock"));

    $.Field({Static:false, Public:false}, "_threadIdOwningParserLock", $.Int32);

    $.Field({Static:false, Public:false}, "timeoutErrorInternal", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorInternal"));

    $.Field({Static:false, Public:false}, "_clientConnectionId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "_routingInfo", $asm11.TypeRef("System.Data.SqlClient.RoutingInfo"));

    $.Field({Static:false, Public:false}, "_originalClientConnectionId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "_routingDestination", $.String);


    function SqlInternalConnectionTds__cctor () {
      $thisType._dbAuthenticationContextLockedRefreshTimeSpan = new $asm07.System.TimeSpan();
      $thisType._dbAuthenticationContextUnLockedRefreshTimeSpan = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SqlInternalConnectionTds__cctor
    );

    $.Property({Static:false, Public:false}, "CurrentSessionData", $asm11.TypeRef("System.Data.SqlClient.SessionData"));

    $.Property({Static:false, Public:false}, "TimeoutErrorInternal", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionTimeoutErrorInternal"));

    $.Property({Static:false, Public:false}, "ClientConnectionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "OriginalClientConnectionId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "RoutingDestination", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "CurrentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "AvailableInternalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "PendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false}, "Identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Property({Static:false, Public:false}, "InstanceName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsLockedForBulkCopy", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsNonPoolableTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsShiloh", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsYukonOrNewer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsKatmaiOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "PacketSize", $.Int32);

    $.Property({Static:false, Public:false}, "Parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Property({Static:false, Public:false}, "ServerProvidedFailOverPartner", $.String);

    $.Property({Static:false, Public:false}, "PoolGroupProviderInfo", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "ReadyToPrepareTransaction", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "UnbindOnTransactionCompletion", $.Boolean);

    $.Property({Static:false, Public:false}, "IgnoreEnvChange", $.Boolean);

    $.Property({Static:false, Public:false}, "ThreadHasParserLockForClose", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInternalConnectionTds+SyncAsyncLock */ 

(function SyncAsyncLock$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionTds+SyncAsyncLock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeReleasedFromAnyThread", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThreadMayHaveLock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Wait", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Wait", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "semaphore", $asm07.TypeRef("System.Threading.SemaphoreSlim"));

    $.Property({Static:false, Public:false}, "CanBeReleasedFromAnyThread", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlInternalConnectionTds+<>c__DisplayClass103_0 */ 

(function $l$gc__DisplayClass103_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionTds+<>c__DisplayClass103_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteTransactionYukon$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "releaseConnectionLock", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlInternalConnectionTds+<>c__DisplayClass120_0 */ 

(function $l$gc__DisplayClass120_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlInternalConnectionTds+<>c__DisplayClass120_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetSessionAndReconnectIfNeeded$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "releaseConnectionLock", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.ServerInfo */ 

(function ServerInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };





  function ServerInfo_get_ExtendedServerName () {
    return this.ServerInfo$ExtendedServerName$value;
  }; 

  function ServerInfo_get_ResolvedDatabaseName () {
    return this.ServerInfo$ResolvedDatabaseName$value;
  }; 

  function ServerInfo_get_ResolvedServerName () {
    return this.ServerInfo$ResolvedServerName$value;
  }; 

  function ServerInfo_get_UserProtocol () {
    return this.ServerInfo$UserProtocol$value;
  }; 


  function ServerInfo_set_ExtendedServerName (value) {
    this.ServerInfo$ExtendedServerName$value = value;
  }; 

  function ServerInfo_set_ResolvedDatabaseName (value) {
    this.ServerInfo$ResolvedDatabaseName$value = value;
  }; 

  function ServerInfo_set_ResolvedServerName (value) {
    this.ServerInfo$ResolvedServerName$value = value;
  }; 

  function ServerInfo_set_UserProtocol (value) {
    this.ServerInfo$UserProtocol$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.ServerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlConnectionString"), $asm11.TypeRef("System.Data.SqlClient.RoutingInfo"), 
          $.String
        ])
    );

    $.Method({Static:false, Public:false}, "get_ExtendedServerName", 
      JSIL.MethodSignature.Return($.String), 
      ServerInfo_get_ExtendedServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ResolvedDatabaseName", 
      JSIL.MethodSignature.Return($.String), 
      ServerInfo_get_ResolvedDatabaseName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ResolvedServerName", 
      JSIL.MethodSignature.Return($.String), 
      ServerInfo_get_ResolvedServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_UserProtocol", 
      JSIL.MethodSignature.Return($.String), 
      ServerInfo_get_UserProtocol
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_UserServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:false}, "set_ExtendedServerName", 
      JSIL.MethodSignature.Action($.String), 
      ServerInfo_set_ExtendedServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ResolvedDatabaseName", 
      JSIL.MethodSignature.Action($.String), 
      ServerInfo_set_ResolvedDatabaseName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ResolvedServerName", 
      JSIL.MethodSignature.Action($.String), 
      ServerInfo_set_ResolvedServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_UserProtocol", 
      JSIL.MethodSignature.Action($.String), 
      ServerInfo_set_UserProtocol
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_UserServerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDerivedNames", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "ServerInfo$ExtendedServerName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServerInfo$ResolvedServerName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServerInfo$ResolvedDatabaseName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServerInfo$UserProtocol$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_userServerName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "PreRoutingServerName", $.String);

    $.Property({Static:false, Public:false}, "ExtendedServerName", $.String);

    $.Property({Static:false, Public:false}, "ResolvedServerName", $.String);

    $.Property({Static:false, Public:false}, "ResolvedDatabaseName", $.String);

    $.Property({Static:false, Public:false}, "UserProtocol", $.String);

    $.Property({Static:false, Public:false}, "UserServerName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.TransactionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TransactionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Pending: 0, 
    Active: 1, 
    Aborted: 2, 
    Committed: 3, 
    Unknown: 4, 
  }
);

/* enum System.Data.SqlClient.TransactionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TransactionType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LocalFromTSQL: 1, 
    LocalFromAPI: 2, 
    Delegated: 3, 
    Distributed: 4, 
    Context: 5, 
  }
);

/* class System.Data.SqlClient.SqlInternalTransaction */ 

(function SqlInternalTransaction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };












  function SqlInternalTransaction_get_ConnectionHasBeenRestored () {
    return this.SqlInternalTransaction$ConnectionHasBeenRestored$value;
  }; 















  function SqlInternalTransaction_get_RestoreBrokenConnection () {
    return this.SqlInternalTransaction$RestoreBrokenConnection$value;
  }; 








  function SqlInternalTransaction_set_ConnectionHasBeenRestored (value) {
    this.SqlInternalTransaction$ConnectionHasBeenRestored$value = value;
  }; 

  function SqlInternalTransaction_set_RestoreBrokenConnection (value) {
    this.SqlInternalTransaction$RestoreBrokenConnection$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlInternalTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), $asm11.TypeRef("System.Data.SqlClient.TransactionType"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), $asm11.TypeRef("System.Data.SqlClient.TransactionType"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"), $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Activate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTransactionLevelAndZombie", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Completed", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementAndObtainOpenResultCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_ConnectionHasBeenRestored", 
      JSIL.MethodSignature.Return($.Boolean), 
      SqlInternalTransaction_get_ConnectionHasBeenRestored
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasParentTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsActive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCommitted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDelegated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDistributed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOrphaned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsZombied", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OpenResultsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.Method({Static:false, Public:false}, "get_RestoreBrokenConnection", 
      JSIL.MethodSignature.Return($.Boolean), 
      SqlInternalTransaction_get_RestoreBrokenConnection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionId", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServerTransactionLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementAndObtainOpenResultCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitParent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Save", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "set_ConnectionHasBeenRestored", 
      JSIL.MethodSignature.Action($.Boolean), 
      SqlInternalTransaction_set_ConnectionHasBeenRestored
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RestoreBrokenConnection", 
      JSIL.MethodSignature.Action($.Boolean), 
      SqlInternalTransaction_set_RestoreBrokenConnection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionId", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Zombie", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ZombieParent", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "NullTransactionId", $.Int64, 0);

    $.Field({Static:false, Public:false}, "_transactionState", $asm11.TypeRef("System.Data.SqlClient.TransactionState"));

    $.Field({Static:false, Public:false}, "_transactionType", $asm11.TypeRef("System.Data.SqlClient.TransactionType"));

    $.Field({Static:false, Public:false}, "_transactionId", $.Int64);

    $.Field({Static:false, Public:false}, "_openResultCount", $.Int32);

    $.Field({Static:false, Public:false}, "_innerConnection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"));

    $.Field({Static:false, Public:false}, "_disposing", $.Boolean);

    $.Field({Static:false, Public:false}, "_parent", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false}, "SqlInternalTransaction$RestoreBrokenConnection$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SqlInternalTransaction$ConnectionHasBeenRestored$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "RestoreBrokenConnection", $.Boolean);

    $.Property({Static:false, Public:false}, "ConnectionHasBeenRestored", $.Boolean);

    $.Property({Static:false, Public:false}, "HasParentTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAborted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsActive", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCommitted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsContext", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDelegated", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDistributed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLocal", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOrphaned", $.Boolean);

    $.Property({Static:false, Public:false}, "IsZombied", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "OpenResultsCount", $.Int32);

    $.Property({Static:false, Public:false}, "Parent", $asm11.TypeRef("System.Data.SqlClient.SqlTransaction"));

    $.Property({Static:false, Public:false}, "TransactionId", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbMetaDataFactory */ 

(function DbMetaDataFactory$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbMetaDataFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneAndFilterCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataRow"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterColumns", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.DataColumnCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMetaDataCollectionRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixUpVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollectionDataSet", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionNormalized", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeThisColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataSetFromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportedByCurrentVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.Field({Static:false, Public:false}, "_metaDataCollectionsDataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_normalizedServerVersion", $.String);

    $.Field({Static:false, Public:false}, "_serverVersionString", $.String);

    $.Constant({Static:true , Public:false}, "_collectionName", $.String, "CollectionName");

    $.Constant({Static:true , Public:false}, "_populationMechanism", $.String, "PopulationMechanism");

    $.Constant({Static:true , Public:false}, "_populationString", $.String, "PopulationString");

    $.Constant({Static:true , Public:false}, "_maximumVersion", $.String, "MaximumVersion");

    $.Constant({Static:true , Public:false}, "_minimumVersion", $.String, "MinimumVersion");

    $.Constant({Static:true , Public:false}, "_dataSourceProductVersionNormalized", $.String, "DataSourceProductVersionNormalized");

    $.Constant({Static:true , Public:false}, "_dataSourceProductVersion", $.String, "DataSourceProductVersion");

    $.Constant({Static:true , Public:false}, "_restrictionDefault", $.String, "RestrictionDefault");

    $.Constant({Static:true , Public:false}, "_restrictionNumber", $.String, "RestrictionNumber");

    $.Constant({Static:true , Public:false}, "_numberOfRestrictions", $.String, "NumberOfRestrictions");

    $.Constant({Static:true , Public:false}, "_restrictionName", $.String, "RestrictionName");

    $.Constant({Static:true , Public:false}, "_parameterName", $.String, "ParameterName");

    $.Constant({Static:true , Public:false}, "_dataTable", $.String, "DataTable");

    $.Constant({Static:true , Public:false}, "_sqlCommand", $.String, "SQLCommand");

    $.Constant({Static:true , Public:false}, "_prepareCollection", $.String, "PrepareCollection");

    $.Property({Static:false, Public:false}, "CollectionDataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Property({Static:false, Public:false}, "ServerVersion", $.String);

    $.Property({Static:false, Public:false}, "ServerVersionNormalized", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlMetaDataFactory */ 

(function SqlMetaDataFactory$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), 
      Name: "System.Data.SqlClient.SqlMetaDataFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTVPsToDataTypesTable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "addUDTsToDataTypesTable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypesTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.SqlClient.SqlConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.Constant({Static:true , Public:false}, "_serverVersionNormalized90", $.String, "09.00.0000");

    $.Constant({Static:true , Public:false}, "_serverVersionNormalized90782", $.String, "09.00.0782");

    $.Constant({Static:true , Public:false}, "_serverVersionNormalized10", $.String, "10.00.0000");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlNotificationEventArgs */ 

(function SqlNotificationEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.SqlClient.SqlNotificationEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"), $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"))
    );

    $.Field({Static:false, Public:false}, "_type", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"));

    $.Field({Static:false, Public:false}, "_info", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"));

    $.Field({Static:false, Public:false}, "_source", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"));

    $.Field({Static:true , Public:false}, "NotifyError", $.Type);

    $.Property({Static:false, Public:true }, "Type", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationType"));

    $.Property({Static:false, Public:true }, "Info", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationInfo"));

    $.Property({Static:false, Public:true }, "Source", $asm11.TypeRef("System.Data.SqlClient.SqlNotificationSource"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SqlNotificationInfo */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlNotificationInfo", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AlreadyChanged: -2, 
    Unknown: -1, 
    Truncate: 0, 
    Insert: 1, 
    Update: 2, 
    Delete: 3, 
    Drop: 4, 
    Alter: 5, 
    Restart: 6, 
    Error: 7, 
    Query: 8, 
    Invalid: 9, 
    Options: 10, 
    Isolation: 11, 
    Expired: 12, 
    Resource: 13, 
    PreviousFire: 14, 
    TemplateLimit: 15, 
    Merge: 16, 
  }
);

/* enum System.Data.SqlClient.SqlNotificationSource */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlNotificationSource", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Client: -2, 
    Unknown: -1, 
    Data: 0, 
    Timeout: 1, 
    Object: 2, 
    Database: 3, 
    System: 4, 
    Statement: 5, 
    Environment: 6, 
    Execution: 7, 
    Owner: 8, 
  }
);

/* enum System.Data.SqlClient.SqlNotificationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlNotificationType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Change: 0, 
    Subscribe: 1, 
  }
);

/* class System.Data.SqlClient.DataFeed */ 

(function DataFeed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.DataFeed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.StreamDataFeed */ 

(function StreamDataFeed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.DataFeed"), 
      Name: "System.Data.SqlClient.StreamDataFeed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "_source", $asm07.TypeRef("System.IO.Stream"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TextDataFeed */ 

(function TextDataFeed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.DataFeed"), 
      Name: "System.Data.SqlClient.TextDataFeed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.Field({Static:false, Public:false}, "_source", $asm07.TypeRef("System.IO.TextReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.XmlDataFeed */ 

(function XmlDataFeed$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.DataFeed"), 
      Name: "System.Data.SqlClient.XmlDataFeed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.Field({Static:false, Public:false}, "_source", $asm2F.TypeRef("System.Xml.XmlReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbParameter */ 

(function DbParameter$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DbParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumnNullMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetDbType", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ParameterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumnNullMapping", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataParameter"), "get_Precision");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataParameter"), "get_Scale");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataParameter"), "set_Precision");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataParameter"), "set_Scale");

    $.Property({Static:false, Public:true , Virtual:true }, "DbType", $asm11.TypeRef("System.Data.DbType"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_DbType"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.ParameterDirection.Input]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Direction"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_ParameterName"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.Precision", $.Byte);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataParameter.Scale", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Precision", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Scale", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Size"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumn"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumnNullMapping", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumnNullMapping"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceVersion"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.DataRowVersion.Current]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Value"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IDbDataParameter"), 
      /* 1 */ $asm11.TypeRef("System.Data.IDataParameter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlParameter */ 

(function SqlParameter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



























  function SqlParameter_get_ForceColumnEncryption () {
    return this.SqlParameter$ForceColumnEncryption$value;
  }; 

  function SqlParameter_get_HasReceivedMetadata () {
    return this.SqlParameter$HasReceivedMetadata$value;
  }; 





















































  function SqlParameter_set_ForceColumnEncryption (value) {
    this.SqlParameter$ForceColumnEncryption$value = value;
  }; 

  function SqlParameter_set_HasReceivedMetadata (value) {
    this.SqlParameter$HasReceivedMetadata$value = value;
  }; 








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameter"), 
      Name: "System.Data.SqlClient.SqlParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 13, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Boolean, $.Byte, 
          $.Byte, $.String, 
          $asm11.TypeRef("System.Data.DataRowVersion"), $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Byte, $.Byte, 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Boolean, $.Object, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertCachedPropertiesAreValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertPropertiesAreValid", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Nullable`1", [$.Boolean]), 
          $asm07.TypeRef("System.Nullable`1", [$.Boolean]), $asm07.TypeRef("System.Nullable`1", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "BinarySize", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelper", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelperCore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CoerceValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareExchangeParent", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FixStreamDataForNonPLP", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherMetadata", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValueIsDataFeed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValueIsSqlType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Collation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCollation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompareInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.Method({Static:false, Public:true }, "get_ForceColumnEncryption", 
      JSIL.MethodSignature.Return($.Boolean), 
      SqlParameter_get_ForceColumnEncryption
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_HasReceivedMetadata", 
      JSIL.MethodSignature.Return($.Boolean), 
      SqlParameter_get_HasReceivedMetadata
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InternalMetaType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.MetaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocaleId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaData", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NormalizationRuleVersion", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParamaterIsSqlType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterNameFixed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrecisionInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScaleInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SizeInferred", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumnNullMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SqlDbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SqlValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UdtTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueAsINullable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.INullable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionDatabase", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchemaCollectionOwningSchema", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetActualFieldsAndProperties", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.ParameterPeekAheadValue")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetActualPrecision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetActualScale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetActualSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetadataForTypeInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaSqlDbTypeOnly", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaTypeOnly", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.MetaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MetaDataForSmi", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.ParameterPeekAheadValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseTypeName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyTypeChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetSqlDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CipherMetadata", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CoercedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Collation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCollation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompareInfo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.Method({Static:false, Public:true }, "set_ForceColumnEncryption", 
      JSIL.MethodSignature.Action($.Boolean), 
      SqlParameter_set_ForceColumnEncryption
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasReceivedMetadata", 
      JSIL.MethodSignature.Action($.Boolean), 
      SqlParameter_set_HasReceivedMetadata
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_InternalMetaType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.MetaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocaleId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParamaterIsSqlType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ParameterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrecisionInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScaleInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumnNullMapping", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SqlDbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlDbType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SqlValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UdtTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSchemaCollectionDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSchemaCollectionName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSchemaCollectionOwningSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSqlBuffer", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUdtLoadError", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializePrecision", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSqlDbType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "StringSize", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateTypeLengths", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.MetaType"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecision", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecisionCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScale", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScaleCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSize", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSizeCore", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_metaType", $asm11.TypeRef("System.Data.SqlClient.MetaType"));

    $.Field({Static:false, Public:false}, "_collation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "_xmlSchemaCollectionDatabase", $.String);

    $.Field({Static:false, Public:false}, "_xmlSchemaCollectionOwningSchema", $.String);

    $.Field({Static:false, Public:false}, "_xmlSchemaCollectionName", $.String);

    $.Field({Static:false, Public:false}, "_udtTypeName", $.String);

    $.Field({Static:false, Public:false}, "_typeName", $.String);

    $.Field({Static:false, Public:false}, "_udtType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_udtLoadError", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_parameterName", $.String);

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_hasScale", $.Boolean);

    $.Field({Static:false, Public:false}, "_internalMetaType", $asm11.TypeRef("System.Data.SqlClient.MetaType"));

    $.Field({Static:false, Public:false}, "_sqlBufferReturnValue", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"));

    $.Field({Static:false, Public:false}, "_valueAsINullable", $asm11.TypeRef("System.Data.SqlTypes.INullable"));

    $.Field({Static:false, Public:false}, "_isSqlParameterSqlType", $.Boolean);

    $.Field({Static:false, Public:false}, "_isNull", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValueIsSqlType", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValueIsDataFeed", $.Boolean);

    $.Field({Static:false, Public:false}, "_actualSize", $.Int32);

    $.Field({Static:false, Public:false}, "_columnEncryptionCipherMetadata", $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"));

    $.Field({Static:false, Public:false}, "SqlParameter$HasReceivedMetadata$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SqlParameter$ForceColumnEncryption$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Field({Static:false, Public:false}, "_parent", $.Object);

    $.Field({Static:false, Public:false}, "_direction", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_offset", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceColumn", $.String);

    $.Field({Static:false, Public:false}, "_sourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Field({Static:false, Public:false}, "_sourceColumnNullMapping", $.Boolean);

    $.Field({Static:false, Public:false}, "_isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValue", $.Object);

    $.Property({Static:false, Public:false}, "CipherMetadata", $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"));

    $.Property({Static:false, Public:false}, "HasReceivedMetadata", $.Boolean);

    $.Property({Static:false, Public:false}, "NormalizationRuleVersion", $.Byte);

    $.Property({Static:false, Public:false}, "Collation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Property({Static:false, Public:true }, "CompareInfo", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionDatabase", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Xml"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlParameter_XmlSchemaCollectionDatabase"]; });

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionOwningSchema", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Xml"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlParameter_XmlSchemaCollectionOwningSchema"]; });

    $.Property({Static:false, Public:true }, "XmlSchemaCollectionName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlParameter_XmlSchemaCollectionName"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Xml"]; });

    $.Property({Static:false, Public:true }, "ForceColumnEncryption", $.Boolean)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["TCE_SqlParameter_ForceColumnEncryption"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:false}, "InternalMetaType", $asm11.TypeRef("System.Data.SqlClient.MetaType"));

    $.Property({Static:false, Public:true }, "LocaleId", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "MetaData", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlMetaData"));

    $.Property({Static:false, Public:false}, "SizeInferred", $.Boolean);

    $.Property({Static:false, Public:false}, "ParamaterIsSqlType", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlParameter_ParameterName"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ParameterNameFixed", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Precision", $.Byte)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Precision"]; });

    $.Property({Static:false, Public:false}, "PrecisionInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Scale", $.Byte)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Scale"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; });

    $.Property({Static:false, Public:false}, "ScaleInternal", $.Byte);

    $.Property({Static:false, Public:true }, "SqlDbType", $asm11.TypeRef("System.Data.SqlDbType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["SqlParameter_SqlDbType"]; })
      .Attribute($asm11.TypeRef("System.Data.Common.DbProviderSpecificTypePropertyAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "SqlValue", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "UdtTypeName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "TypeName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Value"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.StringConverter.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ValueAsINullable", $asm11.TypeRef("System.Data.SqlTypes.INullable"));

    $.Property({Static:false, Public:false}, "IsNull", $.Boolean);

    $.Property({Static:false, Public:false}, "CoercedValueIsSqlType", $.Boolean);

    $.Property({Static:false, Public:false}, "CoercedValueIsDataFeed", $.Boolean);

    $.Property({Static:false, Public:false}, "CoercedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Direction"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "Offset", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Offset"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Size"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumn"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumnNullMapping", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceVersion"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.SqlClient.SqlParameter_SqlParameterConverter.__Type__]; });

})();

/* class System.Data.SqlClient.SqlParameter+SqlParameterConverter */ 

(function SqlParameterConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.SqlClient.SqlParameter+SqlParameterConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbParameterCollection */ 

(function DbParameterCollection$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DbParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataParameterCollection.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm11.TypeRef("System.Data.IDataParameterCollection"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDataParameterCollection.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm11.TypeRef("System.Data.IDataParameterCollection"), "set_Item");

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDataParameterCollection.Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DbParameter"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DbParameter"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IDataParameterCollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 2 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.SqlParameterCollection */ 

(function SqlParameterCollection$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameterCollection"), 
      Name: "System.Data.SqlClient.SqlParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String, $.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", false]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String, $asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [
          $.String, $asm11.TypeRef("System.Data.SqlDbType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddWithValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.IEnumerable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsDirty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.SqlParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_isDirty", $.Boolean);

    $.Field({Static:true , Public:false}, "ItemType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm11.System.Data.SqlClient.SqlParameter.__Type__;
      });

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]));

    $.Property({Static:false, Public:false}, "IsDirty", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.SqlClient.SqlParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.SqlClient.SqlParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "InnerList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; });

})();

/* class System.Data.ProviderBase.DbReferenceCollection */ 

(function DbReferenceCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbReferenceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddItem", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitItemLockIfNeeded", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindItem", 
      new JSIL.MethodSignature("!!0", [$.Int32, $asm07.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "Notify", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NotifyItem", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveItem", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterItemLock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Boolean]))
    );

    $.Constant({Static:true , Public:false}, "LockPollTime", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "DefaultCollectionSize", $.Int32, 20);

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection+CollectionEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_itemLock", $.Object);

    $.Field({Static:false, Public:false}, "_optimisticCount", $.Int32);

    $.Field({Static:false, Public:false}, "_lastItemIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_isNotifying", $asm07.TypeRef("System.Boolean"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.ProviderBase.DbReferenceCollection+CollectionEntry */ 

(function CollectionEntry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.ProviderBase.DbReferenceCollection+CollectionEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_HasTarget", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "NewTarget", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveTarget", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_tag", $.Int32);

    $.Field({Static:false, Public:false}, "_weak", $asm07.TypeRef("System.WeakReference"));

    $.Property({Static:false, Public:true }, "HasTarget", $.Boolean);

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "Target", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlReferenceCollection */ 

(function SqlReferenceCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"), 
      Name: "System.Data.SqlClient.SqlReferenceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLiveCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlCommand"), [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLiveReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NotifyItem", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Constant({Static:true , Public:false}, "DataReaderTag", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CommandTag", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "BulkCopyTag", $.Int32, 3);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlReferenceCollection+<>c__DisplayClass5_0 */ 

(function $l$gc__DisplayClass5_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlReferenceCollection+<>c__DisplayClass5_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindLiveReader$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])
    );

    $.Field({Static:false, Public:true }, "command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlReferenceCollection+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlReferenceCollection+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindLiveReader$gb__5_0", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__5_0", $asm07.TypeRef("System.Func`2", [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlReferenceCollection+<>c__DisplayClass6_0 */ 

(function $l$gc__DisplayClass6_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlReferenceCollection+<>c__DisplayClass6_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindLiveCommand$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlCommand")])
    );

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.Common.RowUpdatedEventArgs */ 

(function RowUpdatedEventArgs$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.Common.RowUpdatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdapterInit", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AdapterInit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToRows", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToRows", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RowCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Rows", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatementType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.StatementType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableMapping", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataTableMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Errors", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateStatus"))
    );

    $.Field({Static:false, Public:false}, "_command", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_statementType", $asm11.TypeRef("System.Data.StatementType"));

    $.Field({Static:false, Public:false}, "_tableMapping", $asm11.TypeRef("System.Data.Common.DataTableMapping"));

    $.Field({Static:false, Public:false}, "_errors", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_dataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "_dataRows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Field({Static:false, Public:false}, "_status", $asm11.TypeRef("System.Data.UpdateStatus"));

    $.Field({Static:false, Public:false}, "_recordsAffected", $.Int32);

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "Errors", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "Rows", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]));

    $.Property({Static:false, Public:true }, "RowCount", $.Int32);

    $.Property({Static:false, Public:true }, "StatementType", $asm11.TypeRef("System.Data.StatementType"));

    $.Property({Static:false, Public:true }, "Status", $asm11.TypeRef("System.Data.UpdateStatus"));

    $.Property({Static:false, Public:true }, "TableMapping", $asm11.TypeRef("System.Data.Common.DataTableMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlRowUpdatedEventArgs */ 

(function SqlRowUpdatedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), 
      Name: "System.Data.SqlClient.SqlRowUpdatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.SqlClient.SqlRowUpdatedEventHandler */ 

JSIL.MakeDelegate("System.Data.SqlClient.SqlRowUpdatedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatedEventArgs")]));

/* class System.Data.Common.RowUpdatingEventArgs */ 

(function RowUpdatingEventArgs$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.Common.RowUpdatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Row", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatementType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.StatementType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableMapping", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataTableMapping"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_BaseCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Errors", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateStatus"))
    );

    $.Field({Static:false, Public:false}, "_command", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Field({Static:false, Public:false}, "_statementType", $asm11.TypeRef("System.Data.StatementType"));

    $.Field({Static:false, Public:false}, "_tableMapping", $asm11.TypeRef("System.Data.Common.DataTableMapping"));

    $.Field({Static:false, Public:false}, "_errors", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_dataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Field({Static:false, Public:false}, "_status", $asm11.TypeRef("System.Data.UpdateStatus"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "Errors", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Row", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:true }, "StatementType", $asm11.TypeRef("System.Data.StatementType"));

    $.Property({Static:false, Public:true }, "Status", $asm11.TypeRef("System.Data.UpdateStatus"));

    $.Property({Static:false, Public:true }, "TableMapping", $asm11.TypeRef("System.Data.Common.DataTableMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlRowUpdatingEventArgs */ 

(function SqlRowUpdatingEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), 
      Name: "System.Data.SqlClient.SqlRowUpdatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_BaseCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCommand", $asm11.TypeRef("System.Data.IDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.SqlClient.SqlRowUpdatingEventHandler */ 

JSIL.MakeDelegate("System.Data.SqlClient.SqlRowUpdatingEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.SqlClient.SqlRowUpdatingEventArgs")]));

/* class System.Data.SqlClient.SqlSequentialStream */ 

(function SqlSequentialStream$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlClient.SqlSequentialStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateReadParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_columnIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_currentTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_readTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_disposalTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "ColumnIndex", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass26_0 */ 

(function $l$gc__DisplayClass26_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass26_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginRead$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "callback", $asm07.TypeRef("System.AsyncCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass28_0 */ 

(function $l$gc__DisplayClass28_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass28_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass28_1 */ 

(function $l$gc__DisplayClass28_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass28_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]))
    );

    $.Field({Static:false, Public:true }, "combinedTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialStream+<>c__DisplayClass28_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlSequentialStreamSmi */ 

(function SqlSequentialStreamSmi$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlClient.SqlSequentialStreamSmi", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_getters", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"));

    $.Field({Static:false, Public:false}, "_columnIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_position", $.Int64);

    $.Field({Static:false, Public:false}, "_length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "ColumnIndex", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSequentialTextReader */ 

(function SqlSequentialTextReader$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.TextReader"), 
      Name: "System.Data.SqlClient.SqlSequentialTextReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Int32, 
          $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeBytesToChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasPeekedChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDataLeft", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Peek", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareByteBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateReadParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_columnIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "_decoder", $asm07.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "_leftOverBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_peekedChar", $.Int32);

    $.Field({Static:false, Public:false}, "_currentTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_disposalTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Property({Static:false, Public:false}, "ColumnIndex", $.Int32);

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDataLeft", $.Boolean);

    $.Property({Static:false, Public:false}, "HasPeekedChar", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSequentialTextReader+<>c__DisplayClass14_0 */ 

(function $l$gc__DisplayClass14_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSequentialTextReader+<>c__DisplayClass14_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]))
    );

    $.Field({Static:false, Public:true }, "byteBufferUsed", $.Int32);

    $.Field({Static:false, Public:true }, "charsRead", $.Int32);

    $.Field({Static:false, Public:true }, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "adjustedIndex", $.Int32);

    $.Field({Static:false, Public:true }, "charsNeeded", $.Int32);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReader+<>c__DisplayClass14_1"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlSequentialTextReader+<>c__DisplayClass14_1 */ 

(function $l$gc__DisplayClass14_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlSequentialTextReader+<>c__DisplayClass14_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.SqlSequentialTextReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SqlUnicodeEncoding */ 

(function SqlUnicodeEncoding$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Text.UnicodeEncoding"), 
      Name: "System.Data.SqlClient.SqlUnicodeEncoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SqlUnicodeEncodingInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecoder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Decoder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "_singletonEncoding", $.Type);

    $.Property({Static:true , Public:true }, "SqlUnicodeEncodingInstance", $asm07.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlUnicodeEncoding+SqlUnicodeDecoder */ 

(function SqlUnicodeDecoder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Text.Decoder"), 
      Name: "System.Data.SqlClient.SqlUnicodeEncoding+SqlUnicodeDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlSequentialTextReaderSmi */ 

(function SqlSequentialTextReaderSmi$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.TextReader"), 
      Name: "System.Data.SqlClient.SqlSequentialTextReaderSmi", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"), $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"), 
          $.Int32, $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasPeekedChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Peek", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetClosed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_sink", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default"));

    $.Field({Static:false, Public:false}, "_getters", $asm11.TypeRef("Microsoft.SqlServer.Server.ITypedGettersV3"));

    $.Field({Static:false, Public:false}, "_columnIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_position", $.Int64);

    $.Field({Static:false, Public:false}, "_length", $.Int64);

    $.Field({Static:false, Public:false}, "_peekedChar", $.Int32);

    $.Property({Static:false, Public:false}, "ColumnIndex", $.Int32);

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "HasPeekedChar", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlStatistics */ 

(function SqlStatistics$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlStatistics", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ContinueOnNewConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WaitForDoneAfterRow", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WaitForReply", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashtable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseAndUpdateExecutionTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseAndUpdateNetworkServerTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RequestExecutionTimer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RequestNetworkServerTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeAdd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeIncrement", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WaitForDoneAfterRow", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "StartTimer", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "StopTimer", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStatistics", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_closeTimestamp", $.Int64);

    $.Field({Static:false, Public:false}, "_openTimestamp", $.Int64);

    $.Field({Static:false, Public:false}, "_startExecutionTimestamp", $.Int64);

    $.Field({Static:false, Public:false}, "_startFetchTimestamp", $.Int64);

    $.Field({Static:false, Public:false}, "_startNetworkServerTimestamp", $.Int64);

    $.Field({Static:false, Public:false}, "_buffersReceived", $.Int64);

    $.Field({Static:false, Public:false}, "_buffersSent", $.Int64);

    $.Field({Static:false, Public:false}, "_bytesReceived", $.Int64);

    $.Field({Static:false, Public:false}, "_bytesSent", $.Int64);

    $.Field({Static:false, Public:false}, "_connectionTime", $.Int64);

    $.Field({Static:false, Public:false}, "_cursorOpens", $.Int64);

    $.Field({Static:false, Public:false}, "_executionTime", $.Int64);

    $.Field({Static:false, Public:false}, "_iduCount", $.Int64);

    $.Field({Static:false, Public:false}, "_iduRows", $.Int64);

    $.Field({Static:false, Public:false}, "_networkServerTime", $.Int64);

    $.Field({Static:false, Public:false}, "_preparedExecs", $.Int64);

    $.Field({Static:false, Public:false}, "_prepares", $.Int64);

    $.Field({Static:false, Public:false}, "_selectCount", $.Int64);

    $.Field({Static:false, Public:false}, "_selectRows", $.Int64);

    $.Field({Static:false, Public:false}, "_serverRoundtrips", $.Int64);

    $.Field({Static:false, Public:false}, "_sumResultSets", $.Int64);

    $.Field({Static:false, Public:false}, "_transactions", $.Int64);

    $.Field({Static:false, Public:false}, "_unpreparedExecs", $.Int64);

    $.Field({Static:false, Public:false}, "_waitForDoneAfterRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_waitForReply", $.Boolean);

    $.Property({Static:false, Public:false}, "WaitForDoneAfterRow", $.Boolean);

    $.Property({Static:false, Public:false}, "WaitForReply", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlStream */ 

(function SqlStream$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlClient.SqlStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AdvanceToNextRow", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_columnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_bytesCol", $.Int64);

    $.Field({Static:false, Public:false}, "_bom", $.Int32);

    $.Field({Static:false, Public:false}, "_bufferedData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_processAllRows", $.Boolean);

    $.Field({Static:false, Public:false}, "_advanceReader", $.Boolean);

    $.Field({Static:false, Public:false}, "_readFirstRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_endOfColumn", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCachedStream */ 

(function SqlCachedStream$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlClient.SqlCachedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlCachedBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TotalLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInternalPosition", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_currentPosition", $.Int32);

    $.Field({Static:false, Public:false}, "_currentArrayIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_cachedBytes", $asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]));

    $.Field({Static:false, Public:false}, "_totalLength", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "TotalLength", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlStreamingXml */ 

(function SqlStreamingXml$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlStreamingXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlDataReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnOrdinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlElement", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_columnOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_reader", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"));

    $.Field({Static:false, Public:false}, "_xmlReader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "_xmlWriter", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "_strWriter", $asm07.TypeRef("System.IO.StringWriter"));

    $.Field({Static:false, Public:false}, "_charsRemoved", $.Int64);

    $.Property({Static:false, Public:true }, "ColumnOrdinal", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbTransaction */ 

(function DbTransaction$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DbTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbTransaction.get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbConnection"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbTransaction"), "get_Connection");

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbTransaction.Connection", $asm11.TypeRef("System.Data.IDbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IDbTransaction"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlTransaction */ 

(function SqlTransaction$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbTransaction"), 
      Name: "System.Data.SqlClient.SqlTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnection"), $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), 
          $asm11.TypeRef("System.Data.IsolationLevel"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsYukonPartialZombie", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsZombied", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Zombie", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ZombieCheck", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Field({Static:false, Public:false}, "_internalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:false}, "_isFromAPI", $.Boolean);

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false}, "InternalTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Property({Static:false, Public:false}, "IsYukonPartialZombie", $.Boolean);

    $.Property({Static:false, Public:false}, "IsZombied", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlUdtInfo */ 

(function SqlUdtInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlUdtInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFromType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetFromType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "SerializationFormat", $asm11.TypeRef("Microsoft.SqlServer.Server.Format"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsByteOrdered", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsFixedLength", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxByteSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ValidationMethodName", $.String);

    $.Field({Static:true , Public:false}, "m_types2UdtInfo", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Type]))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.AsyncHelper */ 

(function AsyncHelper$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Data.SqlClient.AsyncHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContinueTask", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), 
          $asm07.TypeRef("System.Action"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), 
          $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Exception")]), $asm07.TypeRef("System.Action"), 
          $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Exception")]), $asm11.TypeRef("System.Data.SqlClient.SqlConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContinuationTask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Action"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContinuationTask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Action`2", ["!!0", "!!1"]), 
          "!!0", "!!1", 
          $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Exception")])
        ], ["T1", "T2"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTimeoutException", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.Int32, 
          $asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Exception")]), $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitForCompletion", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $.Int32, 
          $asm07.TypeRef("System.Action"), $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.AsyncHelper+<>c__DisplayClass0_0 */ 

(function $l$gc__DisplayClass0_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AsyncHelper+<>c__DisplayClass0_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "onSuccess", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.AsyncHelper+<>c__DisplayClass0_1 */ 

(function $l$gc__DisplayClass0_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AsyncHelper+<>c__DisplayClass0_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateContinuationTask$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.AsyncHelper+<>c__DisplayClass0_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.AsyncHelper+<>c__DisplayClass1_0`2 */ 

(function $l$gc__DisplayClass1_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AsyncHelper+<>c__DisplayClass1_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateContinuationTask$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "onSuccess", $asm07.TypeRef("System.Action`2", [$.GenericParameter("T1"), $.GenericParameter("T2")]));

    $.Field({Static:false, Public:true }, "arg1", $.GenericParameter("T1"));

    $.Field({Static:false, Public:true }, "arg2", $.GenericParameter("T2"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.AsyncHelper+<>c__DisplayClass2_0 */ 

(function $l$gc__DisplayClass2_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AsyncHelper+<>c__DisplayClass2_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lContinueTask$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "exceptionConverter", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Exception")]));

    $.Field({Static:false, Public:true }, "onFailure", $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Exception")]));

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "onCancellation", $asm07.TypeRef("System.Action"));

    $.Field({Static:false, Public:true }, "connectionToDoom", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));

    $.Field({Static:false, Public:true }, "connectionToAbort", $asm11.TypeRef("System.Data.SqlClient.SqlConnection"));

    $.Field({Static:false, Public:true }, "onSuccess", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.AsyncHelper+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.AsyncHelper+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSetTimeoutException$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "exc", $asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Exception")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.InOutOfProcHelper */ 

(function InOutOfProcHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.InOutOfProcHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InProc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $.Type);

    $.Field({Static:false, Public:false}, "_inProc", $.Boolean);

    $.Property({Static:true , Public:false}, "InProc", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SQL */ 

(function SQL$Members () {
  var $, $thisType;





























































































































































































































































  JSIL.MakeStaticClass("System.Data.SqlClient.SQL", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentLengthMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncConnectionRequired", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AuthenticationAndIntegratedSecurity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BatchedUpdateColumnEncryptionSettingMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BatchedUpdatesNotAvailableOnContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadBulkLoadNotAllowDBNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadCannotConvertValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadConflictingTransactionOption", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadExistingTransaction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadInvalidDestinationTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadInvalidTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadInvalidVariantValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadLcidMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadMappingInaccessible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadMappingsNamesOrOrdinalsOnly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadMissingDestinationTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadNoCollation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadNonMatchingColumnMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadNonMatchingColumnName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadNonMatchingColumnName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadPendingOperation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BulkLoadStringTooLong", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompleteDelegatedTransactionWithOpenResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotGetDTCAddress", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotModifyPropertyAsyncOperationInProgress", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanOnlyCallOnce", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CertificateNotFound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CertificateWithNoPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangePasswordArgumentMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangePasswordConflictsWithSSPI", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangePasswordRequiresYukon", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangePasswordUseOfUnallowedKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnDecryptionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionDoomed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionLockedForBcpEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContextAllowsLimitedKeywords", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContextAllowsOnlyTypeSystem2005", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContextConnectionIsInUse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContextUnavailableOutOfProc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContextUnavailableWhileInProc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_AllAttemptsFailed", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$asm11.TypeRef("System.Data.SqlClient.SqlException"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_EncryptionChanged", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_NextAttemptWillExceedQueryTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlException"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_NoCRAckAtReconnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_ReconnectionCancelled", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_ReconnectTimeout", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_TDSVersionNotPreserved", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_UnrecoverableClient", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CR_UnrecoverableServer", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlException"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CredentialsNotProvided", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DBNullNotSupportedForTVPValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateSortOrdinal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyCertificateThumbprint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyCngKeyId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyCngName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyColumnEncryptionKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyCspKeyId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyCspName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyEncryptedColumnEncryptionKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyProviderName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumeratedRecordFieldCountChanged", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumeratedRecordMetaDataChanged", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "FatalTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSNIErrorMessage", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GlobalTransactionsNotEnabled", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IEnumerableOfSqlDataRecordHasNoRows", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFailure", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IntegratedWithUserIDAndPassword", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAlgorithmVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAlgorithmVersionInEncryptedCEK", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAuthenticationTag", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCertificateLocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCertificatePath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCertificateSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCertificateStore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCiphertextLengthInEncryptedCEK", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCiphertextLengthInEncryptedCEKCng", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCiphertextLengthInEncryptedCEKCsp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCipherTextSize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCngKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCngPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidColumnMaxLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidColumnPrecScale", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCspKeyIdentifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCspName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCspPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCustomKeyStoreProviderName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataTypeForEncryptedParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidEncryptionKeyOrdinal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidEncryptionType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType")])
        ])
    )
      .Parameter(2, "validEncryptionTypes", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "InvalidInternalPacketSize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeyEncryptionAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeySize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperationInsideEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOptionLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPacketSize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPacketSizeValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterNameLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterTypeNameFormat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPartnerConfiguration", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRead", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSchemaTableOrdinals", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSignatureInEncryptedCEK", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSignatureInEncryptedCEKCng", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSignatureInEncryptedCEKCsp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSortOrder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SortOrder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSqlDbType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSqlDbTypeForConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSqlDbTypeOneAllowedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.SqlDbType"), $.String, 
          $asm11.TypeRef("System.Data.SqlDbType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSqlDependencyTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSQLServerVersionUnknown", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSSPIPacketSize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidTableDerivedPrecisionForTvp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidTDSVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUdt3PartNameFormat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDecryptionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LargeCertificatePathLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MARSUnspportedOnConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingSortOrdinal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoneyOverflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiSubnetFailoverWithFailoverPartner", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Boolean, $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiSubnetFailoverWithInstanceSpecified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiSubnetFailoverWithMoreThan64IPs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiSubnetFailoverWithNonTcpProtocol", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustSetTypeNameForParam", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustSetUdtTypeNameForUdtParams", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustSpecifyBothSortOrderAndOrdinal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SortOrder"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NameTooLong", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NestedTransactionScopesNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NonBlobColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonCharColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalSSEInstance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NonXmlResult", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAvailableOnContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotEnoughColumnsInStructuredType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsNotAvailableOnContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotificationsRequireYukon", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedCommandType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.CommandType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedEnumerationValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedIsolationLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCertificatePath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCipherText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCngKeyPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullColumnEncryptionAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullColumnEncryptionKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullColumnEncryptionKeySysErr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCspKeyPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullCustomKeyStoreProviderDictionary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullEmptyTransactionName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullEncryptedColumnEncryptionKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullKeyEncryptionAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullPlainText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NullProviderValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullSchemaTableDataTypeNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenResultCountExceeded", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationCancelled", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParamDecryptionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParamEncryptionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParamEncryptionMetadataMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterInvalidVariant", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterSizeRestrictionFailure", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParamInvalidForceColumnEncryptionSetting", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParamUnExpectedEncryptionMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorFeatureId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorLibraryType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorStatus", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParsingErrorValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.ParsingErrorState"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "PendingBeginXXXExists", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PrecisionValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcEncryptionMetadataMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PromotionFailed", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionPromotionException"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_FailoverNotSupportedConnString", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_FailoverNotSupportedServer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_InvalidRoutingInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_RecursiveRoutingNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_TimeoutAfterRoutingInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ROR_UnexpectedRoutingInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScaleValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "SequentialAccessNotSupportedOnEncryptedColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SettingCredentialWithIntegratedArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SettingCredentialWithIntegratedInvalid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SettingIntegratedWithCredential", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SingleValuedStructNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SmallDateTimeOverflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SnapshotNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SNIPacketAllocationFailure", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SortOrdinalGreaterThanFieldCount", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlCommandHasExistingSqlNotificationRequest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDepCannotBeCreatedInProc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDepDefaultOptionsButNoStart", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyDatabaseBrokerDisabled", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyDuplicateStart", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyEventNoDuplicate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyIdMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyNoMatchingServerDatabaseStart", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlDependencyNoMatchingServerStart", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlMetaDataNoMetaData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlNotificationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.SqlClient.SqlNotificationEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlNullValue", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlNullValueException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeAlreadyHasAnOpenResultSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeCommandHookedUpToNonContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeDoesNotHaveAnOpenResultSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeErrorRequiresSendEnd", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeIsBusy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlPipeMessageTooLong", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlRecordReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlResultSetClosed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlResultSetCommandNotInSameConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlResultSetNoAcceptableCursor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlResultSetNoData", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SqlResultSetRowDeleted", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamNotSupportOnColumnType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamNotSupportOnEncryptedColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamReadNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamSeekNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamWriteNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SubclassMustOverride", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SynchronousCallMayNotPend", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TableTypeCanOnlyBeParameter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TceNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TextReaderNotSupportOnColumnType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowDecryptionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeOverflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeScaleValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "TooManyValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UDTInvalidSqlType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UDTUnexpectedResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedDescribeParamFormat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedSmiEvent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink_Default+UnexpectedEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedTypeNameForNonStructParams", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedUdtTypeNameForNonUdtParams", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownColumnEncryptionAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownColumnEncryptionAlgorithmId", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownSysTxIsolationLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm27.TypeRef("System.Transactions.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnrecognizedKeyStoreProviderName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedColumnTypeForSqlProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedDatatypeEncryption", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedNormalizationVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedSysTxForGlobalTransactions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedTVPOutputParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.ParameterDirection"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UntrustedKeyPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserInstanceFailoverNotCompatible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UserInstanceNotAvailableInProc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "VeryLargeCiphertext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int64, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlReaderNotSupportOnColumnType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttentionHeader", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "WriteToServer", $.String, "WriteToServer");

    $.Constant({Static:true , Public:false}, "SqlDependencyTimeoutDefault", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SqlDependencyServerTimeout", $.Int32, 432000);

    $.Constant({Static:true , Public:false}, "SqlNotificationServiceDefault", $.String, "SqlQueryNotificationService");

    $.Constant({Static:true , Public:false}, "SqlNotificationStoredProcedureDefault", $.String, "SqlQueryNotificationStoredProcedure");

    $.Constant({Static:true , Public:false}, "Transaction", $.String, "Transaction");

    $.Constant({Static:true , Public:false}, "Connection", $.String, "Connection");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SQL+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SQL+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInvalidEncryptionType$gb__174_0", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lUnrecognizedKeyStoreProviderName$gb__195_0", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lUnrecognizedKeyStoreProviderName$gb__195_1", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__174_0", $asm07.TypeRef("System.Func`2", [$asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionType"), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__195_0", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__195_1", $asm07.TypeRef("System.Func`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.SQLMessage */ 

(function SQLMessage$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SQLMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CultureIdError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Duration_Login_Begin", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Duration_Login_ProcessConnectionAuth", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $.Int64, 
          $.Int64, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Duration_PostLogin", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $.Int64, 
          $.Int64, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Duration_PreLogin_Begin", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "Duration_PreLoginHandshake", 
      new JSIL.MethodSignature($.String, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptionNotSupportedByClient", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptionNotSupportedByServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExClientConnectionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExErrorNumberStateClass", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExOriginalClientConnectionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExRoutingDestination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationCancelled", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "PreloginError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SevereError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SSPIGenerateError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SSPIInitializeError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_FailoverInfo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_Login_Begin", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_Login_ProcessConnectionAuth", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_PostLogin", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_PreLogin_Begin", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_PreLogin_ConsumeHandshake", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_PreLogin_InitializeConnection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_PreLogin_SendHandshake", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Timeout_RoutingDestination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "UserInstanceFailure", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlServerEscapeHelper */ 

(function SqlServerEscapeHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Data.SqlClient.SqlServerEscapeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EscapeIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeIdentifier", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeStringAsLiteral", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeStringLiteral", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SysTxForGlobalTransactions */ 

(function SysTxForGlobalTransactions$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Data.SqlClient.SysTxForGlobalTransactions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_EnlistPromotableSinglePhase", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GetPromotedToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SetDistributedTransactionIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_enlistPromotableSinglePhase", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_setDistributedTransactionIdentifier", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_getPromotedToken", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Property({Static:true , Public:true }, "EnlistPromotableSinglePhase", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "SetDistributedTransactionIdentifier", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetPromotedToken", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SysTxForGlobalTransactions+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SysTxForGlobalTransactions+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__9_0", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__9_1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__9_2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsEnums */ 

(function TdsEnums$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.SqlClient.TdsEnums", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "SQL_SERVER_VERSION_SEVEN", $.Int16, 7);

    $.Constant({Static:true , Public:true }, "SQL_PROVIDER_NAME", $.String, ".Net SqlClient Data Provider");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQL_SMALL_MONEY_MIN", $asm07.TypeRef("System.Decimal"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQL_SMALL_MONEY_MAX", $asm07.TypeRef("System.Decimal"));

    $.Constant({Static:true , Public:true }, "SDCI_MAPFILENAME", $.String, "SqlClientSSDebug");

    $.Constant({Static:true , Public:true }, "SDCI_MAX_MACHINENAME", $.Byte, 32);

    $.Constant({Static:true , Public:true }, "SDCI_MAX_DLLNAME", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "SDCI_MAX_DATA", $.Byte, 255);

    $.Constant({Static:true , Public:true }, "SQLDEBUG_OFF", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SQLDEBUG_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SQLDEBUG_CONTEXT", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SP_SDIDEBUG", $.String, "sp_sdidebug");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLDEBUG_MODE_NAMES", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:true }, "SmallVarBinary", $asm11.TypeRef("System.Data.SqlDbType"), 24);

    $.Constant({Static:true , Public:true }, "TCP", $.String, "tcp");

    $.Constant({Static:true , Public:true }, "NP", $.String, "np");

    $.Constant({Static:true , Public:true }, "RPC", $.String, "rpc");

    $.Constant({Static:true , Public:true }, "BV", $.String, "bv");

    $.Constant({Static:true , Public:true }, "ADSP", $.String, "adsp");

    $.Constant({Static:true , Public:true }, "SPX", $.String, "spx");

    $.Constant({Static:true , Public:true }, "VIA", $.String, "via");

    $.Constant({Static:true , Public:true }, "LPC", $.String, "lpc");

    $.Constant({Static:true , Public:true }, "INIT_SSPI_PACKAGE", $.String, "InitSSPIPackage");

    $.Constant({Static:true , Public:true }, "INIT_ADAL_PACKAGE", $.String, "InitADALPackage");

    $.Constant({Static:true , Public:true }, "INIT_SESSION", $.String, "InitSession");

    $.Constant({Static:true , Public:true }, "CONNECTION_GET_SVR_USER", $.String, "ConnectionGetSvrUser");

    $.Constant({Static:true , Public:true }, "GEN_CLIENT_CONTEXT", $.String, "GenClientContext");

    $.Constant({Static:true , Public:true }, "SOFTFLUSH", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "HARDFLUSH", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "IGNORE", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "HEADER_LEN", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "HEADER_LEN_FIELD_OFFSET", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "YUKON_HEADER_LEN", $.Int32, 12);

    $.Constant({Static:true , Public:true }, "MARS_ID_OFFSET", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "HEADERTYPE_QNOTIFICATION", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "HEADERTYPE_MARS", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "HEADERTYPE_TRACE", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "SUCCEED", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "FAIL", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "TYPE_SIZE_LIMIT", $.Int16, 8000);

    $.Constant({Static:true , Public:true }, "MIN_PACKET_SIZE", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "DEFAULT_LOGIN_PACKET_SIZE", $.Int32, 4096);

    $.Constant({Static:true , Public:true }, "MAX_PRELOGIN_PAYLOAD_LENGTH", $.Int32, 1024);

    $.Constant({Static:true , Public:true }, "MAX_PACKET_SIZE", $.Int32, 32768);

    $.Constant({Static:true , Public:true }, "MAX_SERVER_USER_NAME", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "MIN_ERROR_CLASS", $.Byte, 11);

    $.Constant({Static:true , Public:true }, "MAX_USER_CORRECTABLE_ERROR_CLASS", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "FATAL_ERROR_CLASS", $.Byte, 20);

    $.Constant({Static:true , Public:true }, "MT_SQL", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "MT_LOGIN", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "MT_RPC", $.Byte, 3);

    $.Constant({Static:true , Public:true }, "MT_TOKENS", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "MT_BINARY", $.Byte, 5);

    $.Constant({Static:true , Public:true }, "MT_ATTN", $.Byte, 6);

    $.Constant({Static:true , Public:true }, "MT_BULK", $.Byte, 7);

    $.Constant({Static:true , Public:true }, "MT_FEDAUTH", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "MT_CLOSE", $.Byte, 9);

    $.Constant({Static:true , Public:true }, "MT_ERROR", $.Byte, 10);

    $.Constant({Static:true , Public:true }, "MT_ACK", $.Byte, 11);

    $.Constant({Static:true , Public:true }, "MT_ECHO", $.Byte, 12);

    $.Constant({Static:true , Public:true }, "MT_LOGOUT", $.Byte, 13);

    $.Constant({Static:true , Public:true }, "MT_TRANS", $.Byte, 14);

    $.Constant({Static:true , Public:true }, "MT_OLEDB", $.Byte, 15);

    $.Constant({Static:true , Public:true }, "MT_LOGIN7", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "MT_SSPI", $.Byte, 17);

    $.Constant({Static:true , Public:true }, "MT_PRELOGIN", $.Byte, 18);

    $.Constant({Static:true , Public:true }, "ST_EOM", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "ST_AACK", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "ST_IGNORE", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "ST_BATCH", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "ST_RESET_CONNECTION", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "ST_RESET_CONNECTION_PRESERVE_TRANSACTION", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "SQLCOLFMT", $.Byte, 161);

    $.Constant({Static:true , Public:true }, "SQLPROCID", $.Byte, 124);

    $.Constant({Static:true , Public:true }, "SQLCOLNAME", $.Byte, 160);

    $.Constant({Static:true , Public:true }, "SQLTABNAME", $.Byte, 164);

    $.Constant({Static:true , Public:true }, "SQLCOLINFO", $.Byte, 165);

    $.Constant({Static:true , Public:true }, "SQLALTNAME", $.Byte, 167);

    $.Constant({Static:true , Public:true }, "SQLALTFMT", $.Byte, 168);

    $.Constant({Static:true , Public:true }, "SQLERROR", $.Byte, 170);

    $.Constant({Static:true , Public:true }, "SQLINFO", $.Byte, 171);

    $.Constant({Static:true , Public:true }, "SQLRETURNVALUE", $.Byte, 172);

    $.Constant({Static:true , Public:true }, "SQLRETURNSTATUS", $.Byte, 121);

    $.Constant({Static:true , Public:true }, "SQLRETURNTOK", $.Byte, 219);

    $.Constant({Static:true , Public:true }, "SQLALTCONTROL", $.Byte, 175);

    $.Constant({Static:true , Public:true }, "SQLROW", $.Byte, 209);

    $.Constant({Static:true , Public:true }, "SQLNBCROW", $.Byte, 210);

    $.Constant({Static:true , Public:true }, "SQLALTROW", $.Byte, 211);

    $.Constant({Static:true , Public:true }, "SQLDONE", $.Byte, 253);

    $.Constant({Static:true , Public:true }, "SQLDONEPROC", $.Byte, 254);

    $.Constant({Static:true , Public:true }, "SQLDONEINPROC", $.Byte, 255);

    $.Constant({Static:true , Public:true }, "SQLOFFSET", $.Byte, 120);

    $.Constant({Static:true , Public:true }, "SQLORDER", $.Byte, 169);

    $.Constant({Static:true , Public:true }, "SQLDEBUG_CMD", $.Byte, 96);

    $.Constant({Static:true , Public:true }, "SQLLOGINACK", $.Byte, 173);

    $.Constant({Static:true , Public:true }, "SQLFEATUREEXTACK", $.Byte, 174);

    $.Constant({Static:true , Public:true }, "SQLSESSIONSTATE", $.Byte, 228);

    $.Constant({Static:true , Public:true }, "SQLENVCHANGE", $.Byte, 227);

    $.Constant({Static:true , Public:true }, "SQLSECLEVEL", $.Byte, 237);

    $.Constant({Static:true , Public:true }, "SQLROWCRC", $.Byte, 57);

    $.Constant({Static:true , Public:true }, "SQLCOLMETADATA", $.Byte, 129);

    $.Constant({Static:true , Public:true }, "SQLALTMETADATA", $.Byte, 136);

    $.Constant({Static:true , Public:true }, "SQLSSPI", $.Byte, 237);

    $.Constant({Static:true , Public:true }, "SQLFEDAUTHINFO", $.Byte, 238);

    $.Constant({Static:true , Public:true }, "ENV_DATABASE", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "ENV_LANG", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "ENV_CHARSET", $.Byte, 3);

    $.Constant({Static:true , Public:true }, "ENV_PACKETSIZE", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "ENV_LOCALEID", $.Byte, 5);

    $.Constant({Static:true , Public:true }, "ENV_COMPFLAGS", $.Byte, 6);

    $.Constant({Static:true , Public:true }, "ENV_COLLATION", $.Byte, 7);

    $.Constant({Static:true , Public:true }, "ENV_BEGINTRAN", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "ENV_COMMITTRAN", $.Byte, 9);

    $.Constant({Static:true , Public:true }, "ENV_ROLLBACKTRAN", $.Byte, 10);

    $.Constant({Static:true , Public:true }, "ENV_ENLISTDTC", $.Byte, 11);

    $.Constant({Static:true , Public:true }, "ENV_DEFECTDTC", $.Byte, 12);

    $.Constant({Static:true , Public:true }, "ENV_LOGSHIPNODE", $.Byte, 13);

    $.Constant({Static:true , Public:true }, "ENV_PROMOTETRANSACTION", $.Byte, 15);

    $.Constant({Static:true , Public:true }, "ENV_TRANSACTIONMANAGERADDRESS", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "ENV_TRANSACTIONENDED", $.Byte, 17);

    $.Constant({Static:true , Public:true }, "ENV_SPRESETCONNECTIONACK", $.Byte, 18);

    $.Constant({Static:true , Public:true }, "ENV_USERINSTANCE", $.Byte, 19);

    $.Constant({Static:true , Public:true }, "ENV_ROUTING", $.Byte, 20);

    $.Constant({Static:true , Public:true }, "DONE_MORE", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "DONE_ERROR", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "DONE_INXACT", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "DONE_PROC", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "DONE_COUNT", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "DONE_ATTN", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "DONE_INPROC", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "DONE_RPCINBATCH", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "DONE_SRVERROR", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "DONE_FMTSENT", $.Int32, 32768);

    $.Constant({Static:true , Public:true }, "FEATUREEXT_TERMINATOR", $.Byte, 255);

    $.Constant({Static:true , Public:true }, "FEATUREEXT_SRECOVERY", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "FEATUREEXT_FEDAUTH", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "FEATUREEXT_TCE", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "FEATUREEXT_GLOBALTRANSACTIONS", $.Byte, 5);

    $.Constant({Static:true , Public:true }, "FEDAUTHLIB_LIVEID", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "FEDAUTHLIB_SECURITYTOKEN", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "FEDAUTHLIB_ADAL", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "FEDAUTHLIB_RESERVED", $.Byte, 127);

    $.Constant({Static:true , Public:true }, "ADALWORKFLOW_ACTIVEDIRECTORYPASSWORD", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "ADALWORKFLOW_ACTIVEDIRECTORYINTEGRATED", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "NTAUTHORITYANONYMOUSLOGON", $.String, "NT Authority\\Anonymous Logon");

    $.Constant({Static:true , Public:true }, "MAX_LOG_NAME", $.Byte, 30);

    $.Constant({Static:true , Public:true }, "MAX_PROG_NAME", $.Byte, 10);

    $.Constant({Static:true , Public:true }, "SEC_COMP_LEN", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "MAX_PK_LEN", $.Byte, 6);

    $.Constant({Static:true , Public:true }, "MAX_NIC_SIZE", $.Byte, 6);

    $.Constant({Static:true , Public:true }, "SQLVARIANT_SIZE", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "VERSION_SIZE", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "CLIENT_PROG_VER", $.Int32, 100663296);

    $.Constant({Static:true , Public:true }, "YUKON_LOG_REC_FIXED_LEN", $.Int32, 94);

    $.Constant({Static:true , Public:true }, "TEXT_TIME_STAMP_LEN", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "COLLATION_INFO_LEN", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "SPHINXORSHILOH_MAJOR", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "SPHINX_INCREMENT", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SHILOH_INCREMENT", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "DEFAULT_MINOR", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SHILOHSP1_MAJOR", $.Int32, 113);

    $.Constant({Static:true , Public:true }, "YUKON_MAJOR", $.Int32, 114);

    $.Constant({Static:true , Public:true }, "KATMAI_MAJOR", $.Int32, 115);

    $.Constant({Static:true , Public:true }, "DENALI_MAJOR", $.Int32, 116);

    $.Constant({Static:true , Public:true }, "SHILOHSP1_INCREMENT", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "YUKON_INCREMENT", $.Int32, 9);

    $.Constant({Static:true , Public:true }, "KATMAI_INCREMENT", $.Int32, 11);

    $.Constant({Static:true , Public:true }, "DENALI_INCREMENT", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SHILOHSP1_MINOR", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "YUKON_RTM_MINOR", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "KATMAI_MINOR", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "DENALI_MINOR", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "ORDER_68000", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "USE_DB_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "INIT_DB_FATAL", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SET_LANG_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "INIT_LANG_FATAL", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "ODBC_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SSPI_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "REPL_ON", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "READONLY_INTENT_ON", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SQLLenMask", $.Byte, 48);

    $.Constant({Static:true , Public:true }, "SQLFixedLen", $.Byte, 48);

    $.Constant({Static:true , Public:true }, "SQLVarLen", $.Byte, 32);

    $.Constant({Static:true , Public:true }, "SQLZeroLen", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "SQLVarCnt", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "SQLDifferentName", $.Byte, 32);

    $.Constant({Static:true , Public:true }, "SQLExpression", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "SQLKey", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "SQLHidden", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "Nullable", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "Identity", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "Updatability", $.Byte, 11);

    $.Constant({Static:true , Public:true }, "ClrFixedLen", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "IsColumnSet", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "IsEncrypted", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "VARLONGNULL", $.UInt32, 4294967295);

    $.Constant({Static:true , Public:true }, "VARNULL", $.Int32, 65535);

    $.Constant({Static:true , Public:true }, "MAXSIZE", $.Int32, 8000);

    $.Constant({Static:true , Public:true }, "FIXEDNULL", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "UDTNULL", $.UInt64, -1);

    $.Constant({Static:true , Public:true }, "SQLVOID", $.Int32, 31);

    $.Constant({Static:true , Public:true }, "SQLTEXT", $.Int32, 35);

    $.Constant({Static:true , Public:true }, "SQLVARBINARY", $.Int32, 37);

    $.Constant({Static:true , Public:true }, "SQLINTN", $.Int32, 38);

    $.Constant({Static:true , Public:true }, "SQLVARCHAR", $.Int32, 39);

    $.Constant({Static:true , Public:true }, "SQLBINARY", $.Int32, 45);

    $.Constant({Static:true , Public:true }, "SQLIMAGE", $.Int32, 34);

    $.Constant({Static:true , Public:true }, "SQLCHAR", $.Int32, 47);

    $.Constant({Static:true , Public:true }, "SQLINT1", $.Int32, 48);

    $.Constant({Static:true , Public:true }, "SQLBIT", $.Int32, 50);

    $.Constant({Static:true , Public:true }, "SQLINT2", $.Int32, 52);

    $.Constant({Static:true , Public:true }, "SQLINT4", $.Int32, 56);

    $.Constant({Static:true , Public:true }, "SQLMONEY", $.Int32, 60);

    $.Constant({Static:true , Public:true }, "SQLDATETIME", $.Int32, 61);

    $.Constant({Static:true , Public:true }, "SQLFLT8", $.Int32, 62);

    $.Constant({Static:true , Public:true }, "SQLFLTN", $.Int32, 109);

    $.Constant({Static:true , Public:true }, "SQLMONEYN", $.Int32, 110);

    $.Constant({Static:true , Public:true }, "SQLDATETIMN", $.Int32, 111);

    $.Constant({Static:true , Public:true }, "SQLFLT4", $.Int32, 59);

    $.Constant({Static:true , Public:true }, "SQLMONEY4", $.Int32, 122);

    $.Constant({Static:true , Public:true }, "SQLDATETIM4", $.Int32, 58);

    $.Constant({Static:true , Public:true }, "SQLDECIMALN", $.Int32, 106);

    $.Constant({Static:true , Public:true }, "SQLNUMERICN", $.Int32, 108);

    $.Constant({Static:true , Public:true }, "SQLUNIQUEID", $.Int32, 36);

    $.Constant({Static:true , Public:true }, "SQLBIGCHAR", $.Int32, 175);

    $.Constant({Static:true , Public:true }, "SQLBIGVARCHAR", $.Int32, 167);

    $.Constant({Static:true , Public:true }, "SQLBIGBINARY", $.Int32, 173);

    $.Constant({Static:true , Public:true }, "SQLBIGVARBINARY", $.Int32, 165);

    $.Constant({Static:true , Public:true }, "SQLBITN", $.Int32, 104);

    $.Constant({Static:true , Public:true }, "SQLNCHAR", $.Int32, 239);

    $.Constant({Static:true , Public:true }, "SQLNVARCHAR", $.Int32, 231);

    $.Constant({Static:true , Public:true }, "SQLNTEXT", $.Int32, 99);

    $.Constant({Static:true , Public:true }, "SQLUDT", $.Int32, 240);

    $.Constant({Static:true , Public:true }, "AOPCNTB", $.Int32, 9);

    $.Constant({Static:true , Public:true }, "AOPSTDEV", $.Int32, 48);

    $.Constant({Static:true , Public:true }, "AOPSTDEVP", $.Int32, 49);

    $.Constant({Static:true , Public:true }, "AOPVAR", $.Int32, 50);

    $.Constant({Static:true , Public:true }, "AOPVARP", $.Int32, 51);

    $.Constant({Static:true , Public:true }, "AOPCNT", $.Int32, 75);

    $.Constant({Static:true , Public:true }, "AOPSUM", $.Int32, 77);

    $.Constant({Static:true , Public:true }, "AOPAVG", $.Int32, 79);

    $.Constant({Static:true , Public:true }, "AOPMIN", $.Int32, 81);

    $.Constant({Static:true , Public:true }, "AOPMAX", $.Int32, 82);

    $.Constant({Static:true , Public:true }, "AOPANY", $.Int32, 83);

    $.Constant({Static:true , Public:true }, "AOPNOOP", $.Int32, 86);

    $.Constant({Static:true , Public:true }, "SQLTIMESTAMP", $.Int32, 80);

    $.Constant({Static:true , Public:true }, "MAX_NUMERIC_LEN", $.Int32, 17);

    $.Constant({Static:true , Public:true }, "DEFAULT_NUMERIC_PRECISION", $.Int32, 29);

    $.Constant({Static:true , Public:true }, "SPHINX_DEFAULT_NUMERIC_PRECISION", $.Int32, 28);

    $.Constant({Static:true , Public:true }, "MAX_NUMERIC_PRECISION", $.Int32, 38);

    $.Constant({Static:true , Public:true }, "UNKNOWN_PRECISION_SCALE", $.Byte, 255);

    $.Constant({Static:true , Public:true }, "SQLINT8", $.Int32, 127);

    $.Constant({Static:true , Public:true }, "SQLVARIANT", $.Int32, 98);

    $.Constant({Static:true , Public:true }, "SQLXMLTYPE", $.Int32, 241);

    $.Constant({Static:true , Public:true }, "XMLUNICODEBOM", $.Int32, 65279);

    $.Field({Static:true , Public:true , ReadOnly:true }, "XMLUNICODEBOMBYTES", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:true }, "SQLTABLE", $.Int32, 243);

    $.Constant({Static:true , Public:true }, "SQLDATE", $.Int32, 40);

    $.Constant({Static:true , Public:true }, "SQLTIME", $.Int32, 41);

    $.Constant({Static:true , Public:true }, "SQLDATETIME2", $.Int32, 42);

    $.Constant({Static:true , Public:true }, "SQLDATETIMEOFFSET", $.Int32, 43);

    $.Constant({Static:true , Public:true }, "DEFAULT_VARTIME_SCALE", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "SQL_PLP_NULL", $.UInt64, -1);

    $.Constant({Static:true , Public:true }, "SQL_PLP_UNKNOWNLEN", $.UInt64, -2);

    $.Constant({Static:true , Public:true }, "SQL_PLP_CHUNK_TERMINATOR", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SQL_USHORTVARMAXLEN", $.UInt16, 65535);

    $.Constant({Static:true , Public:true }, "TVP_ROWCOUNT_ESTIMATE", $.Byte, 18);

    $.Constant({Static:true , Public:true }, "TVP_ROW_TOKEN", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "TVP_END_TOKEN", $.Byte, 0);

    $.Constant({Static:true , Public:true }, "TVP_NOMETADATA_TOKEN", $.UInt16, 65535);

    $.Constant({Static:true , Public:true }, "TVP_ORDER_UNIQUE_TOKEN", $.Byte, 16);

    $.Constant({Static:true , Public:true }, "TVP_DEFAULT_COLUMN", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "TVP_ORDERASC_FLAG", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "TVP_ORDERDESC_FLAG", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "TVP_UNIQUE_FLAG", $.Byte, 4);

    $.Constant({Static:true , Public:true }, "Is68K", $.Boolean, false);

    $.Constant({Static:true , Public:true }, "TraceTDS", $.Boolean, false);

    $.Constant({Static:true , Public:true }, "SP_EXECUTESQL", $.String, "sp_executesql");

    $.Constant({Static:true , Public:true }, "SP_PREPEXEC", $.String, "sp_prepexec");

    $.Constant({Static:true , Public:true }, "SP_PREPARE", $.String, "sp_prepare");

    $.Constant({Static:true , Public:true }, "SP_EXECUTE", $.String, "sp_execute");

    $.Constant({Static:true , Public:true }, "SP_UNPREPARE", $.String, "sp_unprepare");

    $.Constant({Static:true , Public:true }, "SP_PARAMS", $.String, "sp_procedure_params_rowset");

    $.Constant({Static:true , Public:true }, "SP_PARAMS_MANAGED", $.String, "sp_procedure_params_managed");

    $.Constant({Static:true , Public:true }, "SP_PARAMS_MGD10", $.String, "sp_procedure_params_100_managed");

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSOR", $.UInt16, 1);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSOROPEN", $.UInt16, 2);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSORPREPARE", $.UInt16, 3);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSOREXECUTE", $.UInt16, 4);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSORPREPEXEC", $.UInt16, 5);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSORUNPREPARE", $.UInt16, 6);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSORFETCH", $.UInt16, 7);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSOROPTION", $.UInt16, 8);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_CURSORCLOSE", $.UInt16, 9);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_EXECUTESQL", $.UInt16, 10);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_PREPARE", $.UInt16, 11);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_EXECUTE", $.UInt16, 12);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_PREPEXEC", $.UInt16, 13);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_PREPEXECRPC", $.UInt16, 14);

    $.Constant({Static:true , Public:true }, "RPC_PROCID_UNPREPARE", $.UInt16, 15);

    $.Constant({Static:true , Public:true }, "TRANS_BEGIN", $.String, "BEGIN TRANSACTION");

    $.Constant({Static:true , Public:true }, "TRANS_COMMIT", $.String, "COMMIT TRANSACTION");

    $.Constant({Static:true , Public:true }, "TRANS_ROLLBACK", $.String, "ROLLBACK TRANSACTION");

    $.Constant({Static:true , Public:true }, "TRANS_IF_ROLLBACK", $.String, "IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION");

    $.Constant({Static:true , Public:true }, "TRANS_SAVE", $.String, "SAVE TRANSACTION");

    $.Constant({Static:true , Public:true }, "TRANS_READ_COMMITTED", $.String, "SET TRANSACTION ISOLATION LEVEL READ COMMITTED");

    $.Constant({Static:true , Public:true }, "TRANS_READ_UNCOMMITTED", $.String, "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");

    $.Constant({Static:true , Public:true }, "TRANS_REPEATABLE_READ", $.String, "SET TRANSACTION ISOLATION LEVEL REPEATABLE READ");

    $.Constant({Static:true , Public:true }, "TRANS_SERIALIZABLE", $.String, "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");

    $.Constant({Static:true , Public:true }, "TRANS_SNAPSHOT", $.String, "SET TRANSACTION ISOLATION LEVEL SNAPSHOT");

    $.Constant({Static:true , Public:true }, "SHILOH_RPCBATCHFLAG", $.Byte, 128);

    $.Constant({Static:true , Public:true }, "YUKON_RPCBATCHFLAG", $.Byte, 255);

    $.Constant({Static:true , Public:true }, "RPC_RECOMPILE", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "RPC_NOMETADATA", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "RPC_PARAM_BYREF", $.Byte, 1);

    $.Constant({Static:true , Public:true }, "RPC_PARAM_DEFAULT", $.Byte, 2);

    $.Constant({Static:true , Public:true }, "RPC_PARAM_ENCRYPTED", $.Byte, 8);

    $.Constant({Static:true , Public:true }, "PARAM_OUTPUT", $.String, "output");

    $.Constant({Static:true , Public:true }, "MAX_PARAMETER_NAME_LENGTH", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "FMTONLY_ON", $.String, " SET FMTONLY ON;");

    $.Constant({Static:true , Public:true }, "FMTONLY_OFF", $.String, " SET FMTONLY OFF;");

    $.Constant({Static:true , Public:true }, "BROWSE_ON", $.String, " SET NO_BROWSETABLE ON;");

    $.Constant({Static:true , Public:true }, "BROWSE_OFF", $.String, " SET NO_BROWSETABLE OFF;");

    $.Constant({Static:true , Public:true }, "TABLE", $.String, "Table");

    $.Constant({Static:true , Public:true }, "EXEC_THRESHOLD", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "TIMEOUT_EXPIRED", $.Int16, -2);

    $.Constant({Static:true , Public:true }, "ENCRYPTION_NOT_SUPPORTED", $.Int16, 20);

    $.Constant({Static:true , Public:true }, "LOGON_FAILED", $.Int32, 18456);

    $.Constant({Static:true , Public:true }, "PASSWORD_EXPIRED", $.Int32, 18488);

    $.Constant({Static:true , Public:true }, "IMPERSONATION_FAILED", $.Int32, 1346);

    $.Constant({Static:true , Public:true }, "P_TOKENTOOLONG", $.Int32, 103);

    $.Constant({Static:true , Public:true }, "TCE_CONVERSION_ERROR_CLIENT_RETRY", $.Int32, 33514);

    $.Constant({Static:true , Public:true }, "SNI_UNINITIALIZED", $.UInt32, 4294967295);

    $.Constant({Static:true , Public:true }, "SNI_SUCCESS", $.UInt32, 0);

    $.Constant({Static:true , Public:true }, "SNI_WAIT_TIMEOUT", $.UInt32, 258);

    $.Constant({Static:true , Public:true }, "SNI_SUCCESS_IO_PENDING", $.UInt32, 997);

    $.Constant({Static:true , Public:true }, "SNI_WSAECONNRESET", $.Int16, 10054);

    $.Constant({Static:true , Public:true }, "SNI_SSL_VALIDATE_CERTIFICATE", $.UInt32, 1);

    $.Constant({Static:true , Public:true }, "SNI_SSL_USE_SCHANNEL_CACHE", $.UInt32, 2);

    $.Constant({Static:true , Public:true }, "SNI_SSL_IGNORE_CHANNEL_BINDINGS", $.UInt32, 16);

    $.Constant({Static:true , Public:true }, "DEFAULT_ENGLISH_CODE_PAGE_STRING", $.String, "iso_1");

    $.Constant({Static:true , Public:true }, "DEFAULT_ENGLISH_CODE_PAGE_VALUE", $.Int16, 1252);

    $.Constant({Static:true , Public:true }, "CHARSET_CODE_PAGE_OFFSET", $.Int16, 2);

    $.Constant({Static:true , Public:false}, "MAX_SERVERNAME", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "SELECT", $.UInt16, 193);

    $.Constant({Static:true , Public:false}, "INSERT", $.UInt16, 195);

    $.Constant({Static:true , Public:false}, "DELETE", $.UInt16, 196);

    $.Constant({Static:true , Public:false}, "UPDATE", $.UInt16, 197);

    $.Constant({Static:true , Public:false}, "ABORT", $.UInt16, 210);

    $.Constant({Static:true , Public:false}, "BEGINXACT", $.UInt16, 212);

    $.Constant({Static:true , Public:false}, "ENDXACT", $.UInt16, 213);

    $.Constant({Static:true , Public:false}, "BULKINSERT", $.UInt16, 240);

    $.Constant({Static:true , Public:false}, "OPENCURSOR", $.UInt16, 32);

    $.Constant({Static:true , Public:false}, "MERGE", $.UInt16, 279);

    $.Constant({Static:true , Public:false}, "MAXLEN_HOSTNAME", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_USERNAME", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_PASSWORD", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_APPNAME", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_SERVERNAME", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_CLIENTINTERFACE", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_LANGUAGE", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_DATABASE", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "MAXLEN_ATTACHDBFILE", $.UInt16, 260);

    $.Constant({Static:true , Public:false}, "MAXLEN_NEWPASSWORD", $.UInt16, 128);

    $.Field({Static:true , Public:true , ReadOnly:true }, "CODE_PAGE_FROM_SORT_ID", $jsilcore.TypeRef("System.Array", [$.UInt16]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TICKS_FROM_SCALE", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Constant({Static:true , Public:false}, "MAX_TIME_SCALE", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "MAX_TIME_LENGTH", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "MAX_DATETIME2_LENGTH", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "WHIDBEY_DATE_LENGTH", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "WHIDBEY_TIME_LENGTH", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "WHIDBEY_DATETIME2_LENGTH", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "WHIDBEY_DATETIMEOFFSET_LENGTH", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Constant({Static:true , Public:false}, "MAX_SUPPORTED_TCE_VERSION", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "MAX_TCE_CIPHERINFO_SIZE", $.UInt16, 2048);

    $.Constant({Static:true , Public:false}, "MAX_TCE_CIPHERTEXT_SIZE", $.Int64, 2147483648);

    $.Constant({Static:true , Public:false}, "CustomCipherAlgorithmId", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "AES_256_CBC", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "AEAD_AES_256_CBC_HMAC_SHA256", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "TCE_PARAM_CIPHERTEXT", $.String, "cipherText");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_CIPHER_ALGORITHM_ID", $.String, "cipherAlgorithmId");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_COLUMNENCRYPTION_KEY", $.String, "columnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_ENCRYPTION_ALGORITHM", $.String, "encryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_ENCRYPTIONTYPE", $.String, "encryptionType");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_ENCRYPTIONKEY", $.String, "encryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_MASTERKEY_PATH", $.String, "masterKeyPath");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_ENCRYPTED_CEK", $.String, "encryptedColumnEncryptionKey");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_CLIENT_KEYSTORE_PROVIDERS", $.String, "clientKeyStoreProviders");

    $.Constant({Static:true , Public:false}, "TCE_PARAM_FORCE_COLUMN_ENCRYPTION", $.String, "ForceColumnEncryption(true)");


    function TdsEnums__cctor () {
      $thisType.SQL_SMALL_MONEY_MIN = 0;
      $thisType.SQL_SMALL_MONEY_MAX = 0;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TdsEnums__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.TdsEnums+FeatureExtension */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+FeatureExtension", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    SessionRecovery: 1, 
    FedAuth: 2, 
    Tce: 4, 
    GlobalTransactions: 8, 
  }
);

/* enum System.Data.SqlClient.TdsEnums+FedAuthLibrary */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+FedAuthLibrary", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LiveId: 0, 
    SecurityToken: 1, 
    ADAL: 2, 
    Default: 127, 
  }
);

/* enum System.Data.SqlClient.TdsEnums+ActiveDirectoryWorkflow */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+ActiveDirectoryWorkflow", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Password: 1, 
    Integrated: 2, 
  }
);

/* enum System.Data.SqlClient.TdsEnums+TransactionManagerRequestType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+TransactionManagerRequestType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    GetDTCAddress: 0, 
    Propagate: 1, 
    Begin: 5, 
    Promote: 6, 
    Commit: 7, 
    Rollback: 8, 
    Save: 9, 
  }
);

/* enum System.Data.SqlClient.TdsEnums+TransactionManagerIsolationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+TransactionManagerIsolationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    ReadUncommitted: 1, 
    ReadCommitted: 2, 
    RepeatableRead: 3, 
    Serializable: 4, 
    Snapshot: 5, 
  }
);

/* enum System.Data.SqlClient.TdsEnums+FedAuthInfoId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsEnums+FedAuthInfoId", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Stsurl: 1, 
    Spn: 2, 
  }
);

/* enum System.Data.SqlClient.ParsingErrorState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.ParsingErrorState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    FedAuthInfoLengthTooShortForCountOfInfoIds: 1, 
    FedAuthInfoLengthTooShortForData: 2, 
    FedAuthInfoFailedToReadCountOfInfoIds: 3, 
    FedAuthInfoFailedToReadTokenStream: 4, 
    FedAuthInfoInvalidOffset: 5, 
    FedAuthInfoFailedToReadData: 6, 
    FedAuthInfoDataNotUnicode: 7, 
    FedAuthInfoDoesNotContainStsurlAndSpn: 8, 
    FedAuthInfoNotReceived: 9, 
    FedAuthNotAcknowledged: 10, 
    FedAuthFeatureAckContainsExtraData: 11, 
    FedAuthFeatureAckUnknownLibraryType: 12, 
    UnrequestedFeatureAckReceived: 13, 
    UnknownFeatureAck: 14, 
    InvalidTdsTokenReceived: 15, 
    SessionStateLengthTooShort: 16, 
    SessionStateInvalidStatus: 17, 
    CorruptedTdsStream: 18, 
    ProcessSniPacketFailed: 19, 
    FedAuthRequiredPreLoginResponseInvalidValue: 20, 
    TceUnknownVersion: 21, 
    TceInvalidVersion: 22, 
    TceInvalidOrdinalIntoCipherInfoTable: 23, 
  }
);

/* enum System.Data.SqlClient.SniContext */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SniContext", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undefined: 0, 
    Snix_Connect: 1, 
    Snix_PreLoginBeforeSuccessfullWrite: 2, 
    Snix_PreLogin: 3, 
    Snix_LoginSspi: 4, 
    Snix_ProcessSspi: 5, 
    Snix_Login: 6, 
    Snix_EnableMars: 7, 
    Snix_AutoEnlist: 8, 
    Snix_GetMarsSession: 9, 
    Snix_Execute: 10, 
    Snix_Read: 11, 
    Snix_Close: 12, 
    Snix_SendRows: 13, 
  }
);

/* enum System.Data.SqlClient.SqlConnectionColumnEncryptionSetting */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlConnectionColumnEncryptionSetting", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Disabled: 0, 
    Enabled: 1, 
  }
);

/* enum System.Data.SqlClient.SqlCommandColumnEncryptionSetting */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlCommandColumnEncryptionSetting", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UseConnectionSetting: 0, 
    Enabled: 1, 
    ResultSetOnly: 2, 
    Disabled: 3, 
  }
);

/* enum System.Data.SqlClient.SqlAuthenticationMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SqlAuthenticationMethod", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NotSpecified: 0, 
    SqlPassword: 1, 
    ActiveDirectoryPassword: 2, 
    ActiveDirectoryIntegrated: 3, 
  }
);

/* enum System.Data.SqlClient.TransparentNetworkResolutionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TransparentNetworkResolutionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DisabledMode: 0, 
    SequentialMode: 1, 
    ParallelMode: 2, 
  }
);

/* class System.Data.SqlClient.ActiveDirectoryAuthentication */ 

(function ActiveDirectoryAuthentication$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.ActiveDirectoryAuthentication", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "AdoClientId", $.String, "4d079b4c-cab7-4b7c-a115-8fd51b6f8239");

    $.Constant({Static:true , Public:false}, "AdalGetAccessTokenFunctionName", $.String, "ADALGetAccessToken");

    $.Constant({Static:true , Public:false}, "GetAccessTokenSuccess", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "GetAccessTokenInvalidGrant", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "GetAccessTokenTansisentError", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "GetAccessTokenOtherError", $.Int32, 3);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParser */ 

(function TdsParser$Members () {
  var $, $thisType;































































































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTdsExecuteRPC$gb__228_2", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AdjustDecimalScale", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Decimal"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustSqlDecimalScale", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "BestEffortCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckResetConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Connect", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.ServerInfo"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"), 
          $.Boolean, $.Int64, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConsumePreLoginHandshake", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.PreLoginHandshakeStatus"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyCharsToBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyStringToBytes", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSession", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Deactivate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementNonTransactedOpenResultCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeUnencryptedValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Disconnect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisconnectTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DrainData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableMars", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptColumnValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $.String, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteFlushTaskCallback", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FailureCleanup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinalizeExecuteRPC", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FireInfoMessageEvent", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlConnection"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlError")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CompletedTask", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultLCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeTraceHeader", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsColumnEncryptionSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKatmaiOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsYukonOrNewer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MARSOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PendingTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Server", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParserState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Statistics", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodePage", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlCollation"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDTCAddress", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEncodingCharLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNotificationHeaderSize", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Sql.SqlNotificationRequest")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNullSqlValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSession", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTerminationTask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $.Object, 
          $asm11.TypeRef("System.Data.SqlClient.MetaType"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementNonTransactedOpenResultCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBOMNeeded", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.MetaType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.MetaType"), $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidTdsToken", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsVarTimeTds", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadADALLibrary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadColumnEncryptionKeys", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSSPILibrary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NullIfCompletedWriteTask", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PlpBytesLeft", 
      new JSIL.MethodSignature($.UInt64, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PlpBytesTotalLength", 
      new JSIL.MethodSignature($.UInt64, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareResetConnection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttention", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessPendingAck", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSNIError", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlError"), [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSqlStatistics", 
      new JSIL.MethodSignature(null, [
          $.UInt16, $.UInt16, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSSPI", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PropagateDistributedTransaction", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutSession", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPlpAnsiChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Char])]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPlpUnicodeChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Char])]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveEncryption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackOrphanedAPITransactions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Run", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunReliably", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendFedAuthToken", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlFedAuthToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendPreLoginHandshake", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeCharArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeCurrency", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Decimal"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDateTime2", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.DateTime"), $.Byte, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDateTimeOffset", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.DateTimeOffset"), $.Byte, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDecimal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Decimal"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeDouble", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeEncodingChar", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeFloat", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeInt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeLong", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int64, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializePartialLong", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeShort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeSqlDecimal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeSqlMoney", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeTime", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.TimeSpan"), $.Byte, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeUnencryptedSqlValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Int32, $.Int32, 
          $.Byte, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeUnencryptedValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Byte, $.Int32, 
          $.Int32, $.Boolean, 
          $.Byte, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeUnsignedInt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.UInt32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EncryptionOptions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsColumnEncryptionSupported", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PendingTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Statistics", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlStatistics"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldEncryptValuesForBulkCopy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldHonorTceForRead", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipPlpValue", 
      new JSIL.MethodSignature($.UInt64, [$.UInt64, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SNISSPIData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SSPIData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SSPIError", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StateValueLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TdsExecuteRPC", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]), 
          $.Int32, $.Boolean, 
          $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TdsExecuteRPC_OnFailure", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TdsExecuteSQLBatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $.Int32, 
          $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TdsExecuteTransactionManagerRequest", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Data.SqlClient.TdsEnums+TransactionManagerRequestType"), 
          $.String, $asm11.TypeRef("System.Data.SqlClient.TdsEnums+TransactionManagerIsolationLevel"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TdsLogin", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlLogin"), $asm11.TypeRef("System.Data.SqlClient.TdsEnums+FeatureExtension"), 
          $asm11.TypeRef("System.Data.SqlClient.SessionData"), $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowExceptionAndWarning", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnsupportedCollationEncountered", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceObjectClass", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCommonProcessMetaData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("System.Data.SqlClient._SqlMetaData"), 
          $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")]), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetAltRowId", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetDataLength", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetTokenLength", 
      new JSIL.MethodSignature($.Boolean, [
          $.Byte, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPlpBytesLeft", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessAltMetaData", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessCipherInfoTable", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessColInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessCollation", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlCollation")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessColumnHeader", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessColumnHeaderNoNBC", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessDone", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.RunBehavior")]), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessEnvChange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlEnvChange")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessError", 
      new JSIL.MethodSignature($.Boolean, [
          $.Byte, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlError")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessFeatureExtAck", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessFedAuthInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlFedAuthInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessLoginAck", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlLoginAck")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessMetaData", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet")]), $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessOneTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessReturnValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlReturnValue")]), $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessRow", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessSessionState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.SessionData")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessTableName", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.MultiPartTableName")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessTceCryptoMetadata", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")]), $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessUDTMetaData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadCipherInfoEntry", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDecimalBits", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPlpUnicodeChars", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Char])]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPlpUnicodeCharsChunk", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlDateTime", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $.Byte, 
          $.Int32, $.Byte, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlDecimal", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $.Int32, 
          $.Byte, $.Byte, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlStringValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $.Byte, 
          $.Int32, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCommandColumnEncryptionSetting"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlValueInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $.Byte, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSqlVariant", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadTwoBinaryFields", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlEnvChange"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadTwoStringFields", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlEnvChange"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryRun", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.RunBehavior"), $asm11.TypeRef("System.Data.SqlClient.SqlCommand"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlDataReader"), $asm11.TypeRef("System.Data.SqlClient.BulkCopySimpleResultSet"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipPlpValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt64, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipRow", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipRow", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBulkCopyDone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBulkCopyMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBulkCopyValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBulkCopyValueSetupContinuation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Data.SqlClient.SqlCollation"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCekTable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollation", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlCollation"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCryptoMetadata", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient._SqlMetaData"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCurrency", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Decimal"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDate", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDateTime2", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $.Byte, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTimeOffset"), $.Byte, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Decimal"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodingChar", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodingChar", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncryptionEntries", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")]), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncryptionMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm07.TypeRef("System.Threading.Tasks.Task"), $asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionInputParameterInfo"), 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncryptionMetadata", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlColumnEncryptionInputParameterInfo"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFedAuthFeatureRequest", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFloat", 
      new JSIL.MethodSignature(null, [$.Single, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteGlobalTransactionsFeatureRequest", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIdentifier", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIdentifierWithShortLength", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLong", 
      new JSIL.MethodSignature(null, [$.Int64, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMarsHeaderData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteParameterName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteParameterVarLen", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.MetaType"), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePartialLong", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQueryNotificationHeaderData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRPCBatchHeaders", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSessionRecoveryFeatureRequest", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SessionData"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteShort", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSmiParameter", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlParameter"), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSmiParameterMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSmiTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlDecimal", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlMoney", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Int32, $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlVariantDataRowValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlVariantDate", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlVariantDateTime2", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlVariantHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSqlVariantValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStreamFeed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.StreamDataFeed"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm11.System.Data.SqlClient.TdsParser_$lWriteStreamFeed$gd__266.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.String, $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTceFeatureRequest", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTceUserTypeAndTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextFeed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.TextDataFeed"), $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm11.System.Data.SqlClient.TdsParser_$lWriteTextFeed$gd__265.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteTime", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.TimeSpan"), $.Byte, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTokenLength", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTraceHeaderData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTvpColumnMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTvpOrderUnique", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTvpTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiExtendedMetaData"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUDTMetaData", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.String, $.String, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnsignedInt", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnsignedLong", 
      new JSIL.MethodSignature(null, [$.UInt64, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnsignedShort", 
      new JSIL.MethodSignature(null, [$.UInt16, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnterminatedSqlValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Int32, $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnterminatedValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Byte, $.Int32, 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $.Object, $asm11.TypeRef("System.Data.SqlClient.MetaType"), 
          $.Byte, $.Int32, 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlFeed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.XmlDataFeed"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $.Boolean, $asm07.TypeRef("System.Text.Encoding"), 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm11.System.Data.SqlClient.TdsParser_$lWriteXmlFeed$gd__264.__Type__]; });

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false}, "completedTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Field({Static:false, Public:false}, "_physicalStateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_pMarsPhysicalConObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Constant({Static:true , Public:false}, "constBinBufferSize", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "constTextBufferSize", $.Int32, 4096);

    $.Field({Static:false, Public:false}, "_state", $asm11.TypeRef("System.Data.SqlClient.TdsParserState"));

    $.Field({Static:false, Public:false}, "_server", $.String);

    $.Field({Static:false, Public:false}, "_fResetConnection", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_fPreserveTransaction", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_defaultCollation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "_defaultCodePage", $.Int32);

    $.Field({Static:false, Public:false}, "_defaultLCID", $.Int32);

    $.Field({Static:false, Public:false}, "_defaultEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:true , Public:false}, "_sniSupportedEncryptionOption", $asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"));

    $.Field({Static:false, Public:false}, "_encryptionOption", $asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"));

    $.Field({Static:false, Public:false}, "_currentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_pendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_retainedTransactionId", $.Int64);

    $.Field({Static:false, Public:false}, "_nonTransactedOpenResultCount", $.Int32);

    $.Field({Static:false, Public:false}, "_connHandler", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));

    $.Field({Static:false, Public:false}, "_fMARS", $.Boolean);

    $.Field({Static:false, Public:false}, "_loginWithFailover", $.Boolean);

    $.Field({Static:false, Public:false}, "_resetConnectionEvent", $asm07.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "_sessionPool", $asm11.TypeRef("System.Data.SqlClient.TdsParserSessionPool"));

    $.Field({Static:false, Public:false}, "_isShiloh", $.Boolean);

    $.Field({Static:false, Public:false}, "_isShilohSP1", $.Boolean);

    $.Field({Static:false, Public:false}, "_isYukon", $.Boolean);

    $.Field({Static:false, Public:false}, "_isKatmai", $.Boolean);

    $.Field({Static:false, Public:false}, "_isDenali", $.Boolean);

    $.Field({Static:false, Public:false}, "_sniSpnBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Field({Static:false, Public:false}, "_statisticsIsInTransaction", $.Boolean);

    $.Field({Static:true , Public:false}, "s_nicAddress", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "s_fSSPILoaded", $.Boolean, false);

    $.Field({Static:true , Public:false}, "s_maxSSPILength", $asm07.TypeRef("System.UInt32"), 0);

    $.Field({Static:true , Public:false}, "s_fADALLoaded", $.Boolean, false);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_longDataHeader", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "s_tdsParserLock", $.Object);

    $.Constant({Static:true , Public:false}, "ATTENTION_TIMEOUT", $.Int32, 5000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_xmlMetadataSubstituteSequence", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "GUID_SIZE", $.Int32, 16);

    $.Field({Static:false, Public:false}, "_asyncWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "_serverSupportsColumnEncryption", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "__tvpEmptyValue", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord")]));

    $.Constant({Static:true , Public:false}, "_indeterminateSize", $.UInt64, -1);

    $.Constant({Static:true , Public:false}, "StateTraceFormatString", $.String, "\n\t         _physicalStateObj = {0}\n\t         _pMarsPhysicalConObj = {1}\n\t         _state = {2}\n\t         _server = {3}\n\t         _fResetConnection = {4}\n\t         _defaultCollation = {5}\n\t         _defaultCodePage = {6}\n\t         _defaultLCID = {7}\n\t         _defaultEncoding = {8}\n\t         _encryptionOption = {10}\n\t         _currentTransaction = {11}\n\t         _pendingTransaction = {12}\n\t         _retainedTransactionId = {13}\n\t         _nonTransactedOpenResultCount = {14}\n\t         _connHandler = {15}\n\t         _fMARS = {16}\n\t         _sessionPool = {17}\n\t         _isShiloh = {18}\n\t         _isShilohSP1 = {19}\n\t         _isYukon = {20}\n\t         _sniSpnBuffer = {21}\n\t         _errors = {22}\n\t         _warnings = {23}\n\t         _attentionErrors = {24}\n\t         _attentionWarnings = {25}\n\t         _statistics = {26}\n\t         _statisticsIsInTransaction = {27}\n\t         _fPreserveTransaction = {28}         _fParallel = {29}");

    $.Property({Static:true , Public:false}, "CompletedTask", $asm07.TypeRef("System.Threading.Tasks.Task"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "IsColumnEncryptionSupported", $.Boolean);

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));

    $.Property({Static:false, Public:false}, "CurrentTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false}, "DefaultLCID", $.Int32);

    $.Property({Static:false, Public:false}, "EncryptionOptions", $asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"));

    $.Property({Static:false, Public:false}, "IsYukonOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKatmaiOrNewer", $.Boolean);

    $.Property({Static:false, Public:false}, "MARSOn", $.Boolean);

    $.Property({Static:false, Public:false}, "PendingTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Property({Static:false, Public:false}, "Server", $.String);

    $.Property({Static:false, Public:false}, "State", $asm11.TypeRef("System.Data.SqlClient.TdsParserState"));

    $.Property({Static:false, Public:false}, "Statistics", $asm11.TypeRef("System.Data.SqlClient.SqlStatistics"));

    $.Property({Static:false, Public:false}, "IncludeTraceHeader", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.TdsParser+ReliabilitySection */ 

(function ReliabilitySection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsParser+ReliabilitySection", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Stop", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParser+TdsOrderUnique */ 

(function TdsOrderUnique$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+TdsOrderUnique", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int16, $.Byte])
    );

    $.Field({Static:false, Public:false}, "ColumnOrdinal", $.Int16);

    $.Field({Static:false, Public:false}, "Flags", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParser+TdsOutputStream */ 

(function TdsOutputStream$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.SqlClient.TdsParser+TdsOutputStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParser"), $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "StripPreamble", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateWriteParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.Field({Static:false, Public:false}, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_preambleToStrip", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParser+ConstrainedTextWriter */ 

(function ConstrainedTextWriter$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.TextWriter"), 
      Name: "System.Data.SqlClient.TdsParser+ConstrainedTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FlushAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateWriteParameters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.String])
    );

    $.Field({Static:false, Public:false}, "_next", $asm07.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_written", $.Int32);

    $.Property({Static:false, Public:true }, "IsComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass100_0 */ 

(function $l$gc__DisplayClass100_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass100_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lThrowExceptionAndWarning$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Action"))
    );

    $.Field({Static:false, Public:true }, "connHandler", $asm11.TypeRef("System.Data.SqlClient.SqlInternalConnectionTds"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass100_1 */ 

(function $l$gc__DisplayClass100_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass100_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lThrowExceptionAndWarning$gb__1", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "closeAction", $asm07.TypeRef("System.Action"));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.TdsParser+<>c__DisplayClass100_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass123_0 */ 

(function $l$gc__DisplayClass123_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass123_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTryRun$gb__0", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass227_0 */ 

(function $l$gc__DisplayClass227_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass227_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass227_1 */ 

(function $l$gc__DisplayClass227_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass227_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTdsExecuteSQLBatch$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "taskReleaseConnectionLock", $.Boolean);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.TdsParser+<>c__DisplayClass227_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass228_0 */ 

(function $l$gc__DisplayClass228_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass228_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTdsExecuteRPC$gb__1", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.Field({Static:false, Public:true }, "cmd", $asm11.TypeRef("System.Data.SqlClient.SqlCommand"));

    $.Field({Static:false, Public:true }, "rpcArray", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlRPC")]));

    $.Field({Static:false, Public:true }, "timeout", $.Int32);

    $.Field({Static:false, Public:true }, "inSchema", $.Boolean);

    $.Field({Static:false, Public:true }, "notificationRequest", $asm11.TypeRef("System.Data.Sql.SqlNotificationRequest"));

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:true }, "isCommandProc", $.Boolean);

    $.Field({Static:false, Public:true }, "sync", $.Boolean);

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Exception")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass228_1 */ 

(function $l$gc__DisplayClass228_1$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass228_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ii", $.Int32);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm11.TypeRef("System.Data.SqlClient.TdsParser+<>c__DisplayClass228_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass228_2 */ 

(function $l$gc__DisplayClass228_2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass228_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTdsExecuteRPC$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "i", $.Int32);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals2", $asm11.TypeRef("System.Data.SqlClient.TdsParser+<>c__DisplayClass228_1"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass228_3 */ 

(function $l$gc__DisplayClass228_3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass228_3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lTdsExecuteRPC$gb__3", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "taskReleaseConnectionLock", $.Boolean);

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals3", $asm11.TypeRef("System.Data.SqlClient.TdsParser+<>c__DisplayClass228_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParser+<>c__DisplayClass251_0 */ 

(function $l$gc__DisplayClass251_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParser+<>c__DisplayClass251_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteBulkCopyValueSetupContinuation$gb__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.Tasks.Task")])
    );

    $.Field({Static:false, Public:true }, "saveEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:true }, "saveCollation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:true }, "saveCodePage", $.Int32);

    $.Field({Static:false, Public:true }, "saveLCID", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Data.SqlClient.TdsParser+<WriteXmlFeed>d__264 */ 

(function $lWriteXmlFeed$gd__264$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsParser+<WriteXmlFeed>d__264", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "SetStateMachine")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$gt__builder", $asm07.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder"));

    $.Field({Static:false, Public:true }, "needBom", $.Boolean);

    $.Field({Static:false, Public:true }, "encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:true }, "size", $.Int32);

    $.Field({Static:false, Public:true }, "feed", $asm11.TypeRef("System.Data.SqlClient.XmlDataFeed"));

    $.Field({Static:false, Public:false}, "$lww$g5__1", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "$lwriter$g5__2", $asm11.TypeRef("System.Data.SqlClient.TdsParser+ConstrainedTextWriter"));

    $.Field({Static:false, Public:false}, "$l$gu__1", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Data.SqlClient.TdsParser+<WriteTextFeed>d__265 */ 

(function $lWriteTextFeed$gd__265$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsParser+<WriteTextFeed>d__265", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "SetStateMachine")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$gt__builder", $asm07.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder"));

    $.Field({Static:false, Public:true }, "encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:true }, "size", $.Int32);

    $.Field({Static:false, Public:true }, "needBom", $.Boolean);

    $.Field({Static:false, Public:false}, "$lwriter$g5__1", $asm11.TypeRef("System.Data.SqlClient.TdsParser+ConstrainedTextWriter"));

    $.Field({Static:false, Public:true }, "feed", $asm11.TypeRef("System.Data.SqlClient.TextDataFeed"));

    $.Field({Static:false, Public:false}, "$linBuff$g5__2", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "$lnRead$g5__3", $.Int32);

    $.Field({Static:false, Public:false}, "$lnWritten$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gu__1", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter"));

    $.Field({Static:false, Public:false}, "$l$gu__2", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", [$.Int32]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Data.SqlClient.TdsParser+<WriteStreamFeed>d__266 */ 

(function $lWriteStreamFeed$gd__266$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsParser+<WriteStreamFeed>d__266", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "SetStateMachine")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$gt__builder", $asm07.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:true }, "stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:true }, "len", $.Int32);

    $.Field({Static:false, Public:true }, "feed", $asm11.TypeRef("System.Data.SqlClient.StreamDataFeed"));

    $.Field({Static:false, Public:false}, "$lbuff$g5__1", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "$lreadSize$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$loutput$g5__3", $asm11.TypeRef("System.Data.SqlClient.TdsParser+TdsOutputStream"));

    $.Field({Static:false, Public:false}, "$lnRead$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$lnWritten$g5__5", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gu__1", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", [$.Int32]));

    $.Field({Static:false, Public:false}, "$l$gu__2", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum System.Data.SqlClient.CallbackType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.CallbackType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    Write: 1, 
  }
);

/* enum System.Data.SqlClient.EncryptionOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.EncryptionOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OFF: 0, 
    ON: 1, 
    NOT_SUP: 2, 
    REQ: 3, 
    LOGIN: 4, 
  }
);

/* enum System.Data.SqlClient.PreLoginHandshakeStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.PreLoginHandshakeStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Successful: 0, 
    InstanceFailure: 1, 
  }
);

/* enum System.Data.SqlClient.RunBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.RunBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UntilDone: 1, 
    ReturnImmediately: 2, 
    Clean: 5, 
    Attention: 13, 
  }
);

/* enum System.Data.SqlClient.TdsParserState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.TdsParserState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Closed: 0, 
    OpenNotLoggedIn: 1, 
    OpenLoggedIn: 2, 
    Broken: 3, 
  }
);

/* struct System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData */ 

(function FederatedAuthenticationFeatureExtensionData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "libraryType", $asm11.TypeRef("System.Data.SqlClient.TdsEnums+FedAuthLibrary"));

    $.Field({Static:false, Public:false}, "fedAuthRequiredPreLoginResponse", $.Boolean);

    $.Field({Static:false, Public:false}, "authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:false, Public:false}, "accessToken", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlEncryptionKeyInfo */ 

(function SqlEncryptionKeyInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlEncryptionKeyInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "encryptedKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "databaseId", $.Int32);

    $.Field({Static:false, Public:false}, "cekId", $.Int32);

    $.Field({Static:false, Public:false}, "cekVersion", $.Int32);

    $.Field({Static:false, Public:false}, "cekMdVersion", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "keyPath", $.String);

    $.Field({Static:false, Public:false}, "keyStoreName", $.String);

    $.Field({Static:false, Public:false}, "algorithmName", $.String);

    $.Field({Static:false, Public:false}, "normalizationRuleVersion", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlTceCipherInfoEntry */ 

(function SqlTceCipherInfoEntry$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlTceCipherInfoEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CekId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CekMdVersion", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CekVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnEncryptionKeyValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DatabaseId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ordinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_columnEncryptionKeyValues", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "_databaseId", $.Int32);

    $.Field({Static:false, Public:false}, "_cekId", $.Int32);

    $.Field({Static:false, Public:false}, "_cekVersion", $.Int32);

    $.Field({Static:false, Public:false}, "_cekMdVersion", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "Ordinal", $.Int32);

    $.Property({Static:false, Public:false}, "DatabaseId", $.Int32);

    $.Property({Static:false, Public:false}, "CekId", $.Int32);

    $.Property({Static:false, Public:false}, "CekVersion", $.Int32);

    $.Property({Static:false, Public:false}, "CekMdVersion", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "ColumnEncryptionKeyValues", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.SqlTceCipherInfoTable */ 

(function SqlTceCipherInfoTable$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.SqlTceCipherInfoTable", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "keyList", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]));

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry"));

    $.Property({Static:false, Public:false}, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient.SqlCollation */ 

(function SqlCollation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCollation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AreSame", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "FirstSupportedCollationVersion", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SqlCompareOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LCID", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SqlCompareOptions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "IgnoreCase", $.UInt32, 1048576);

    $.Constant({Static:true , Public:false}, "IgnoreNonSpace", $.UInt32, 2097152);

    $.Constant({Static:true , Public:false}, "IgnoreWidth", $.UInt32, 4194304);

    $.Constant({Static:true , Public:false}, "IgnoreKanaType", $.UInt32, 8388608);

    $.Constant({Static:true , Public:false}, "BinarySort", $.UInt32, 16777216);

    $.Constant({Static:true , Public:false}, "MaskLcid", $.UInt32, 1048575);

    $.Constant({Static:true , Public:false}, "LcidVersionBitOffset", $.Int32, 28);

    $.Constant({Static:true , Public:false}, "MaskLcidVersion", $.UInt32, 4026531840);

    $.Constant({Static:true , Public:false}, "MaskCompareOpt", $.UInt32, 32505856);

    $.Field({Static:false, Public:false}, "info", $.UInt32);

    $.Field({Static:false, Public:false}, "sortId", $.Byte);

    $.Property({Static:false, Public:false}, "LCID", $.Int32);

    $.Property({Static:false, Public:false}, "SqlCompareOptions", $asm11.TypeRef("System.Data.SqlTypes.SqlCompareOptions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.RoutingInfo */ 

(function RoutingInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };



  function RoutingInfo_get_Port () {
    return this.RoutingInfo$Port$value;
  }; 

  function RoutingInfo_get_Protocol () {
    return this.RoutingInfo$Protocol$value;
  }; 

  function RoutingInfo_get_ServerName () {
    return this.RoutingInfo$ServerName$value;
  }; 

  function RoutingInfo_set_Port (value) {
    this.RoutingInfo$Port$value = (value | 0);
  }; 

  function RoutingInfo_set_Protocol (value) {
    this.RoutingInfo$Protocol$value = (value | 0);
  }; 

  function RoutingInfo_set_ServerName (value) {
    this.RoutingInfo$ServerName$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.RoutingInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.UInt16, 
          $.String
        ])
    );

    $.Method({Static:false, Public:false}, "get_Port", 
      JSIL.MethodSignature.Return($.UInt16), 
      RoutingInfo_get_Port
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Protocol", 
      JSIL.MethodSignature.Return($.Byte), 
      RoutingInfo_get_Protocol
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ServerName", 
      JSIL.MethodSignature.Return($.String), 
      RoutingInfo_get_ServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Port", 
      JSIL.MethodSignature.Action($.UInt16), 
      RoutingInfo_set_Port
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Protocol", 
      JSIL.MethodSignature.Action($.Byte), 
      RoutingInfo_set_Protocol
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ServerName", 
      JSIL.MethodSignature.Action($.String), 
      RoutingInfo_set_ServerName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RoutingInfo$Protocol$value", $.Byte)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RoutingInfo$Port$value", $.UInt16)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RoutingInfo$ServerName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Protocol", $.Byte);

    $.Property({Static:false, Public:false}, "Port", $.UInt16);

    $.Property({Static:false, Public:false}, "ServerName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlEnvChange */ 

(function SqlEnvChange$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlEnvChange", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "type", $.Byte);

    $.Field({Static:false, Public:false}, "oldLength", $.Byte);

    $.Field({Static:false, Public:false}, "newLength", $.Int32);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:false, Public:false}, "newValue", $.String);

    $.Field({Static:false, Public:false}, "oldValue", $.String);

    $.Field({Static:false, Public:false}, "newBinValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "oldBinValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "newLongValue", $.Int64);

    $.Field({Static:false, Public:false}, "oldLongValue", $.Int64);

    $.Field({Static:false, Public:false}, "newCollation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "oldCollation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "newRoutingInfo", $asm11.TypeRef("System.Data.SqlClient.RoutingInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlLogin */ 

(function SqlLogin$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlLogin", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:false, Public:false}, "timeout", $.Int32);

    $.Field({Static:false, Public:false}, "userInstance", $.Boolean);

    $.Field({Static:false, Public:false}, "hostName", $.String);

    $.Field({Static:false, Public:false}, "userName", $.String);

    $.Field({Static:false, Public:false}, "password", $.String);

    $.Field({Static:false, Public:false}, "applicationName", $.String);

    $.Field({Static:false, Public:false}, "serverName", $.String);

    $.Field({Static:false, Public:false}, "language", $.String);

    $.Field({Static:false, Public:false}, "database", $.String);

    $.Field({Static:false, Public:false}, "attachDBFilename", $.String);

    $.Field({Static:false, Public:false}, "newPassword", $.String);

    $.Field({Static:false, Public:false}, "useReplication", $.Boolean);

    $.Field({Static:false, Public:false}, "useSSPI", $.Boolean);

    $.Field({Static:false, Public:false}, "packetSize", $.Int32);

    $.Field({Static:false, Public:false}, "readOnlyIntent", $.Boolean);

    $.Field({Static:false, Public:false}, "credential", $asm11.TypeRef("System.Data.SqlClient.SqlCredential"));

    $.Field({Static:false, Public:false}, "newSecurePassword", $asm07.TypeRef("System.Security.SecureString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlLoginAck */ 

(function SqlLoginAck$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlLoginAck", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "programName", $.String);

    $.Field({Static:false, Public:false}, "majorVersion", $.Byte);

    $.Field({Static:false, Public:false}, "minorVersion", $.Byte);

    $.Field({Static:false, Public:false}, "buildNum", $.Int16);

    $.Field({Static:false, Public:false}, "isVersion8", $.Boolean);

    $.Field({Static:false, Public:false}, "tdsVersion", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlFedAuthInfo */ 

(function SqlFedAuthInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlFedAuthInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "spn", $.String);

    $.Field({Static:false, Public:false}, "stsurl", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlFedAuthToken */ 

(function SqlFedAuthToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlFedAuthToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dataLen", $.UInt32);

    $.Field({Static:false, Public:false}, "accessToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "expirationFileTime", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlMetaDataPriv */ 

(function SqlMetaDataPriv$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlMetaDataPriv", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NormalizationRuleVersion", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAlgorithmInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Data.SqlDbType"));

    $.Field({Static:false, Public:false}, "tdsType", $.Byte);

    $.Field({Static:false, Public:false}, "precision", $.Byte);

    $.Field({Static:false, Public:false}, "scale", $.Byte);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:false, Public:false}, "collation", $asm11.TypeRef("System.Data.SqlClient.SqlCollation"));

    $.Field({Static:false, Public:false}, "codePage", $.Int32);

    $.Field({Static:false, Public:false}, "encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "isMultiValued", $.Boolean);

    $.Field({Static:false, Public:false}, "udtDatabaseName", $.String);

    $.Field({Static:false, Public:false}, "udtSchemaName", $.String);

    $.Field({Static:false, Public:false}, "udtTypeName", $.String);

    $.Field({Static:false, Public:false}, "udtAssemblyQualifiedName", $.String);

    $.Field({Static:false, Public:false}, "udtType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "xmlSchemaCollectionDatabase", $.String);

    $.Field({Static:false, Public:false}, "xmlSchemaCollectionOwningSchema", $.String);

    $.Field({Static:false, Public:false}, "xmlSchemaCollectionName", $.String);

    $.Field({Static:false, Public:false}, "metaType", $asm11.TypeRef("System.Data.SqlClient.MetaType"));

    $.Field({Static:false, Public:false}, "structuredTypeDatabaseName", $.String);

    $.Field({Static:false, Public:false}, "structuredTypeSchemaName", $.String);

    $.Field({Static:false, Public:false}, "structuredTypeName", $.String);

    $.Field({Static:false, Public:false}, "structuredFields", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")]));

    $.Field({Static:false, Public:false}, "isEncrypted", $.Boolean);

    $.Field({Static:false, Public:false}, "baseTI", $.Type);

    $.Field({Static:false, Public:false}, "cipherMD", $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"));

    $.Property({Static:false, Public:false}, "NormalizationRuleVersion", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient._SqlMetaData */ 

(function _SqlMetaData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
      Name: "System.Data.SqlClient._SqlMetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_catalogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLargeUdt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNewKatmaiDateTimeType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_schemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_serverName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_tableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "column", $.String);

    $.Field({Static:false, Public:false}, "baseColumn", $.String);

    $.Field({Static:false, Public:false}, "multiPartTableName", $asm11.TypeRef("System.Data.SqlClient.MultiPartTableName"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "updatability", $.Byte);

    $.Field({Static:false, Public:false}, "tableNum", $.Byte);

    $.Field({Static:false, Public:false}, "isDifferentName", $.Boolean);

    $.Field({Static:false, Public:false}, "isKey", $.Boolean);

    $.Field({Static:false, Public:false}, "isHidden", $.Boolean);

    $.Field({Static:false, Public:false}, "isExpression", $.Boolean);

    $.Field({Static:false, Public:false}, "isIdentity", $.Boolean);

    $.Field({Static:false, Public:false}, "isColumnSet", $.Boolean);

    $.Field({Static:false, Public:false}, "op", $.Byte);

    $.Field({Static:false, Public:false}, "operand", $.UInt16);

    $.Property({Static:false, Public:false}, "serverName", $.String);

    $.Property({Static:false, Public:false}, "catalogName", $.String);

    $.Property({Static:false, Public:false}, "schemaName", $.String);

    $.Property({Static:false, Public:false}, "tableName", $.String);

    $.Property({Static:false, Public:false}, "IsNewKatmaiDateTimeType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLargeUdt", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient._SqlMetaDataSet */ 

(function _SqlMetaDataSet$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient._SqlMetaDataSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient._SqlMetaData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.SqlClient._SqlMetaData")])
    );

    $.Field({Static:false, Public:false}, "id", $.UInt16);

    $.Field({Static:false, Public:false}, "indexMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "visibleColumns", $.Int32);

    $.Field({Static:false, Public:false}, "schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "cekTable", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoTable")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "metaDataArray", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient._SqlMetaData")]));

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm11.TypeRef("System.Data.SqlClient._SqlMetaData"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.SqlClient._SqlMetaDataSetCollection */ 

(function _SqlMetaDataSetCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient._SqlMetaDataSetCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAltMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAltMetaData", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "altMetaDataSetArray", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet")]));

    $.Field({Static:false, Public:false}, "metaDataSet", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlCipherMetadata */ 

(function SqlCipherMetadata$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlCipherMetadata", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]), $.UInt16, 
          $.Byte, $.String, 
          $.Byte, $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CekTableOrdinal", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherAlgorithm", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherAlgorithmId", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CipherAlgorithmName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionKeyInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionType", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NormalizationRuleVersion", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAlgorithmInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CipherAlgorithm", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EncryptionInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EncryptionKeyInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]))
    );

    $.Field({Static:false, Public:false}, "_sqlTceCipherInfoEntry", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cipherAlgorithmId", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cipherAlgorithmName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionType", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_normalizationRuleVersion", $.Byte);

    $.Field({Static:false, Public:false}, "_sqlClientEncryptionAlgorithm", $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"));

    $.Field({Static:false, Public:false}, "_sqlEncryptionKeyInfo", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ordinal", $.UInt16);

    $.Property({Static:false, Public:false}, "EncryptionInfo", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlTceCipherInfoEntry")]));

    $.Property({Static:false, Public:false}, "CipherAlgorithmId", $.Byte);

    $.Property({Static:false, Public:false}, "CipherAlgorithmName", $.String);

    $.Property({Static:false, Public:false}, "EncryptionType", $.Byte);

    $.Property({Static:false, Public:false}, "NormalizationRuleVersion", $.Byte);

    $.Property({Static:false, Public:false}, "CipherAlgorithm", $asm11.TypeRef("System.Data.SqlClient.SqlClientEncryptionAlgorithm"));

    $.Property({Static:false, Public:false}, "EncryptionKeyInfo", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.SqlClient.SqlEncryptionKeyInfo")]));

    $.Property({Static:false, Public:false}, "CekTableOrdinal", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlColumnEncryptionInputParameterInfo */ 

(function SqlColumnEncryptionInputParameterInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.SqlColumnEncryptionInputParameterInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"), $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterMetadata", 
      JSIL.MethodSignature.Return($asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializedWireFormat", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeIntIntoBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeToWriteFormat", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_smiParameterMetadata", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cipherMetadata", $asm11.TypeRef("System.Data.SqlClient.SqlCipherMetadata"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_serializedWireFormat", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "ParameterMetadata", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiParameterMetaData"));

    $.Property({Static:false, Public:false}, "SerializedWireFormat", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient._SqlRPC */ 

(function _SqlRPC$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient._SqlRPC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCommandTextOrRpcName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "rpcName", $.String);

    $.Field({Static:false, Public:false}, "databaseName", $.String);

    $.Field({Static:false, Public:false}, "ProcID", $.UInt16);

    $.Field({Static:false, Public:false}, "options", $.UInt16);

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.SqlParameter")]));

    $.Field({Static:false, Public:false}, "paramoptions", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "recordsAffected", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "cumulativeRecordsAffected", $.Int32);

    $.Field({Static:false, Public:false}, "errorsIndexStart", $.Int32);

    $.Field({Static:false, Public:false}, "errorsIndexEnd", $.Int32);

    $.Field({Static:false, Public:false}, "errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "warningsIndexStart", $.Int32);

    $.Field({Static:false, Public:false}, "warningsIndexEnd", $.Int32);

    $.Field({Static:false, Public:false}, "warnings", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "needsFetchParameterEncryptionMetadata", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SqlReturnValue */ 

(function SqlReturnValue$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.SqlClient.SqlMetaDataPriv"), 
      Name: "System.Data.SqlClient.SqlReturnValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parmIndex", $.UInt16);

    $.Field({Static:false, Public:false}, "parameter", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $asm11.TypeRef("System.Data.SqlClient.SqlBuffer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.MultiPartTableName */ 

(function MultiPartTableName$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.MultiPartTableName", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CatalogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMultipartName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CatalogName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ServerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TableName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_multipartName", $.String);

    $.Field({Static:false, Public:false}, "_serverName", $.String);

    $.Field({Static:false, Public:false}, "_catalogName", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_tableName", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Null", $.Type);


    function MultiPartTableName__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MultiPartTableName__cctor
    );

    $.Property({Static:false, Public:false}, "ServerName", $.String);

    $.Property({Static:false, Public:false}, "CatalogName", $.String);

    $.Property({Static:false, Public:false}, "SchemaName", $.String);

    $.Property({Static:false, Public:false}, "TableName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SNILoadHandle */ 

(function SNILoadHandle$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.SqlClient.SNILoadHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SNIStatus", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadDispatcher", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDispatcher", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ReadAsyncCallbackDispatcher", $asm11.TypeRef("SNINativeMethodWrapper+SqlAsyncCallbackDelegate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "WriteAsyncCallbackDispatcher", $asm11.TypeRef("SNINativeMethodWrapper+SqlAsyncCallbackDelegate"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sniStatus", $.UInt32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptionOption", $asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:true }, "SNIStatus", $.UInt32);

    $.Property({Static:false, Public:true }, "Options", $asm11.TypeRef("System.Data.SqlClient.EncryptionOptions"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SNIHandle */ 

(function SNIHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.SqlClient.SNIHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("SNINativeMethodWrapper+ConsumerInfo"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Data.SqlClient.TransparentNetworkResolutionState"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("SNINativeMethodWrapper+ConsumerInfo"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Status", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_status", $.UInt32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fSync", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "Status", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.SNIPacket */ 

(function SNIPacket$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.SqlClient.SNIPacket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.WritePacketCache */ 

(function WritePacketCache$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.WritePacketCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SNIPacket"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SNIPacket"), [$asm11.TypeRef("System.Data.SqlClient.SNIHandle")])
    );

    $.Field({Static:false, Public:false}, "_disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "_packets", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm11.TypeRef("System.Data.SqlClient.SNIPacket")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParserSessionPool */ 

(function TdsParserSessionPool$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserSessionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BestEffortCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActiveSessionsCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSession", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutSession", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "MaxInactiveCount", $.Int32, 10);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")]));

    $.Field({Static:false, Public:false}, "_cachedCount", $.Int32);

    $.Field({Static:false, Public:false}, "_freeStateObjects", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject")]));

    $.Field({Static:false, Public:false}, "_freeStateObjectCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "ActiveSessionsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.LastIOTimer */ 

(function LastIOTimer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.LastIOTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_value", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParserStateObject */ 

(function TdsParserStateObject$Members () {
  var $, $thisType;




















































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.TdsParser"), $asm11.TypeRef("System.Data.SqlClient.SNIHandle"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lDispose$gb__134_0", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lExecuteFlush$gb__141_0", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Activate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorsToCollection", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPacketToPendingList", 
      new JSIL.MethodSignature($.IntPtr, [$asm11.TypeRef("System.Data.SqlClient.SNIPacket")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWarning", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertStateIsClean", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertValidState", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "Cancel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelWritePacket", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeNetworkPacketTimeout", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckSetResetConnectionState", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm11.TypeRef("System.Data.SqlClient.CallbackType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckThrowSNIException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAllWritePackets", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneCleanupAltMetaDataSetArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConsumerInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("SNINativeMethodWrapper+ConsumerInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePhysicalSNIHandle", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.SqlClient.TransparentNetworkResolutionState"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Deactivate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementOpenResultCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementPendingCallbacks", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteFlush", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BcpLock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SNIHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrorOrWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasOpenResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasOwner", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOrphaned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parser", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.TdsParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PreAttentionErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PreAttentionWarningCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SniContext", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SniContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Status", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimeoutHasExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimeoutTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WarningCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFullErrorAndWarningCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResetWritePacket", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.SqlClient.SNIPacket"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimeoutRemaining", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementAndObtainOpenResultCount", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementPendingCallbacks", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "IsConnectionAlive", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNullCompressionBitSet", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRowTokenReady", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConnectionClosed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnTimeout", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareReplaySnapshot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ProcessSniPacket", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAsyncCallback", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAsyncCallbackCaptureException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPlpBytesChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPlpLength", 
      new JSIL.MethodSignature($.UInt64, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSni", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSniError", 
      new JSIL.MethodSignature(null, [$.Type, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSniSyncOverAsync", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveOwner", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePacketFromPendingList", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCancelAndProcessAttention", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSecurePasswordsInfomation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSnapshot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreErrorAndWarningAfterAttention", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SendAttention", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BcpLock", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Owner", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SniContext", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SniContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TimeoutTime", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPacketSize", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSnapshot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeoutMilliseconds", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeoutSeconds", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SniReadStatisticsAndTracing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SNIWritePacket", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $asm11.TypeRef("System.Data.SqlClient.SNIHandle"), $asm11.TypeRef("System.Data.SqlClient.SNIPacket"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SniWriteStatisticsAndTracing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSession", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreErrorAndWarningForAttention", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowExceptionAndWarning", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPeekByte", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPrepareBuffer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryProcessHeader", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadByte", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadByteArray", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadByteArray", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadChar", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDouble", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt16", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt32", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt64", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadNetworkPacket", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPlpBytes", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPlpLength", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSingle", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadString", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadStringWithEncoding", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadUInt16", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadUInt32", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySkipLongBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryStartNewRow", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSNIConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForAccumulatedWrites", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAsyncCallback", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByteArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByteArraySetupContinuation", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]), $.Int32, 
          $asm07.TypeRef("System.Threading.Tasks.Task")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePacket", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Byte, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSecureString", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.SecureString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSni", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Boolean])
    );

    $.Constant({Static:true , Public:false}, "AttentionTimeoutSeconds", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "CheckConnectionWindow", $.Int64, 50000);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Field({Static:false, Public:false}, "_sessionHandle", $asm11.TypeRef("System.Data.SqlClient.SNIHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_owner", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_readerState", $asm11.TypeRef("System.Data.SqlClient.SqlDataReader+SharedState"));

    $.Field({Static:false, Public:false}, "_activateCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_inputHeaderLen", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_outputHeaderLen", $.Int32);

    $.Field({Static:false, Public:false}, "_outBuff", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_outBytesUsed", $.Int32);

    $.Field({Static:false, Public:false}, "_inBuff", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_inBytesUsed", $.Int32);

    $.Field({Static:false, Public:false}, "_inBytesRead", $.Int32);

    $.Field({Static:false, Public:false}, "_inBytesPacket", $.Int32);

    $.Field({Static:false, Public:false}, "_outputMessageType", $.Byte);

    $.Field({Static:false, Public:false}, "_messageStatus", $.Byte);

    $.Field({Static:false, Public:false}, "_outputPacketNumber", $.Byte);

    $.Field({Static:false, Public:false}, "_pendingData", $.Boolean);

    $.Field({Static:false, Public:false}, "_fResetEventOwned", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_fResetConnectionSent", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_errorTokenReceived", $.Boolean);

    $.Field({Static:false, Public:false}, "_bulkCopyOpperationInProgress", $.Boolean);

    $.Field({Static:false, Public:false}, "_bulkCopyWriteTimeout", $.Boolean);

    $.Field({Static:false, Public:false}, "_sniPacket", $asm11.TypeRef("System.Data.SqlClient.SNIPacket"));

    $.Field({Static:false, Public:false}, "_sniAsyncAttnPacket", $asm11.TypeRef("System.Data.SqlClient.SNIPacket"));

    $.Field({Static:false, Public:false}, "_writePacketCache", $asm11.TypeRef("System.Data.SqlClient.WritePacketCache"));

    $.Field({Static:false, Public:false}, "_pendingWritePackets", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.IntPtr, $asm11.TypeRef("System.Data.SqlClient.SNIPacket")]));

    $.Field({Static:false, Public:false}, "_writePacketLockObject", $.Object);

    $.Field({Static:false, Public:false}, "_gcHandle", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:false, Public:false}, "_pendingCallbacks", $.Int32);

    $.Field({Static:false, Public:false}, "_timeoutMilliseconds", $.Int64);

    $.Field({Static:false, Public:false}, "_timeoutTime", $.Int64);

    $.Field({Static:false, Public:false}, "_attentionSent", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_attentionReceived", $.Boolean);

    $.Field({Static:false, Public:false}, "_attentionSending", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_internalTimeout", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lastSuccessfulIOTimer", $asm11.TypeRef("System.Data.SqlClient.LastIOTimer"));

    $.Field({Static:false, Public:false}, "_securePasswords", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Security.SecureString")]));

    $.Field({Static:false, Public:false}, "_securePasswordOffsetsInBuffer", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_cancelled", $.Boolean);

    $.Constant({Static:true , Public:false}, "_waitForCancellationLockPollTimeout", $.Int32, 100);

    $.Field({Static:false, Public:false}, "_allowObjectID", $asm07.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "_hasOpenResult", $.Boolean);

    $.Field({Static:false, Public:false}, "_executedUnderTransaction", $asm11.TypeRef("System.Data.SqlClient.SqlInternalTransaction"));

    $.Field({Static:false, Public:false}, "_longlen", $.UInt64);

    $.Field({Static:false, Public:false}, "_longlenleft", $.UInt64);

    $.Field({Static:false, Public:false}, "_decimalBits", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_bTmp", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_bTmpRead", $.Int32);

    $.Field({Static:false, Public:false}, "_plpdecoder", $asm07.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "_accumulateInfoEvents", $.Boolean);

    $.Field({Static:false, Public:false}, "_pendingInfoEvents", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.SqlError")]));

    $.Field({Static:false, Public:false}, "_bLongBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_bIntBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_bShortBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_bDecimalBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_partialHeaderBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_partialHeaderBytesRead", $.Int32);

    $.Field({Static:false, Public:false}, "_cleanupMetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:false}, "_cleanupAltMetaDataSetArray", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSetCollection"));

    $.Field({Static:false, Public:false}, "_tracePasswordOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_tracePasswordLength", $.Int32);

    $.Field({Static:false, Public:false}, "_traceChangePasswordOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_traceChangePasswordLength", $.Int32);

    $.Field({Static:false, Public:false}, "_receivedColMetaData", $.Boolean);

    $.Field({Static:false, Public:false}, "_sniContext", $asm11.TypeRef("System.Data.SqlClient.SniContext"));

    $.Field({Static:false, Public:false}, "_bcpLock", $.Boolean);

    $.Field({Static:false, Public:false}, "_nullBitmapInfo", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject+NullBitmap"));

    $.Field({Static:false, Public:false}, "_networkPacketTaskSource", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_networkPacketTimeout", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "_syncOverAsync", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotReplay", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshot", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject+StateSnapshot"));

    $.Field({Static:false, Public:false}, "_executionContext", $asm07.TypeRef("System.Threading.ExecutionContext"));

    $.Field({Static:false, Public:false}, "_asyncReadWithoutSnapshot", $.Boolean);

    $.Field({Static:false, Public:false}, "_errors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_warnings", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_errorAndWarningsLock", $.Object);

    $.Field({Static:false, Public:false}, "_hasErrorOrWarning", $.Boolean);

    $.Field({Static:false, Public:false}, "_preAttentionErrors", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_preAttentionWarnings", $asm11.TypeRef("System.Data.SqlClient.SqlErrorCollection"));

    $.Field({Static:false, Public:false}, "_writeCompletionSource", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1"));

    $.Field({Static:false, Public:false}, "_asyncWriteCount", $asm07.TypeRef("System.Int32"));

    $.Field({Static:false, Public:false}, "_delayedWriteAsyncCallbackException", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_readingCount", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "BcpLock", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $asm11.TypeRef("System.Data.SqlClient.SNIHandle"));

    $.Property({Static:false, Public:false}, "HasOpenResult", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOrphaned", $.Boolean);

    $.Property({Static:false, Public:false}, "Owner", $.Object);

    $.Property({Static:false, Public:false}, "HasOwner", $.Boolean);

    $.Property({Static:false, Public:false}, "Parser", $asm11.TypeRef("System.Data.SqlClient.TdsParser"));

    $.Property({Static:false, Public:false}, "SniContext", $asm11.TypeRef("System.Data.SqlClient.SniContext"));

    $.Property({Static:false, Public:false}, "Status", $.UInt32);

    $.Property({Static:false, Public:false}, "TimeoutHasExpired", $.Boolean);

    $.Property({Static:false, Public:false}, "TimeoutTime", $.Int64);

    $.Property({Static:false, Public:false}, "HasErrorOrWarning", $.Boolean);

    $.Property({Static:false, Public:false}, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:false}, "WarningCount", $.Int32);

    $.Property({Static:false, Public:false}, "PreAttentionErrorCount", $.Int32);

    $.Property({Static:false, Public:false}, "PreAttentionWarningCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.SqlClient.TdsParserStateObject+NullBitmap */ 

(function NullBitmap$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+NullBitmap", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Clean", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGuaranteedNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceEquals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryInitialize", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "_nullBitmap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_columnsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParserStateObject+PacketData */ 

(function PacketData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+PacketData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "Read", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParserStateObject+StateSnapshot */ 

(function StateSnapshot$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+StateSnapshot", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneCleanupAltMetaDataSetArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneNullBitmapInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareReplay", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Replay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSnapshotState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Snap", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_snapshotInBuffs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject+PacketData")]));

    $.Field({Static:false, Public:false}, "_snapshotInBuffCurrent", $.Int32);

    $.Field({Static:false, Public:false}, "_snapshotInBytesUsed", $.Int32);

    $.Field({Static:false, Public:false}, "_snapshotInBytesPacket", $.Int32);

    $.Field({Static:false, Public:false}, "_snapshotPendingData", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotErrorTokenReceived", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotHasOpenResult", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotReceivedColumnMetadata", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotAttentionReceived", $.Boolean);

    $.Field({Static:false, Public:false}, "_snapshotMessageStatus", $.Byte);

    $.Field({Static:false, Public:false}, "_snapshotNullBitmapInfo", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject+NullBitmap"));

    $.Field({Static:false, Public:false}, "_snapshotLongLen", $.UInt64);

    $.Field({Static:false, Public:false}, "_snapshotLongLenLeft", $.UInt64);

    $.Field({Static:false, Public:false}, "_snapshotCleanupMetaData", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSet"));

    $.Field({Static:false, Public:false}, "_snapshotCleanupAltMetaDataSetArray", $asm11.TypeRef("System.Data.SqlClient._SqlMetaDataSetCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass172_0 */ 

(function $l$gc__DisplayClass172_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass172_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOnTimeout$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass179_0 */ 

(function $l$gc__DisplayClass179_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass179_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsyncCallback$gb__0", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsyncCallback$gb__1", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass180_0 */ 

(function $l$gc__DisplayClass180_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass180_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsyncCallbackCaptureException$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "source", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass187_0 */ 

(function $l$gc__DisplayClass187_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStateObject+<>c__DisplayClass187_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteByteArraySetupContinuation$gb__0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "b", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "len", $.Int32);

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.SqlClient.TdsParserStaticMethods */ 

(function TdsParserStaticMethods$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsParserStaticMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AliasRegistryLookup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptPassword", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcessIdForTdsLoginOnly", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentThreadIdForTdsLoginOnly", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNetworkPhysicalAddressForTdsLoginOnly", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRemainingTimeout", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeout", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeoutMilliseconds", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeoutSeconds", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NullAwareStringLength", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutHasExpired", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.ParameterPeekAheadValue */ 

(function ParameterPeekAheadValue$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.ParameterPeekAheadValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Enumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord")]));

    $.Field({Static:false, Public:false}, "FirstRecord", $asm11.TypeRef("Microsoft.SqlServer.Server.SqlDataRecord"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.SortOrder */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.SortOrder", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: -1, 
    Ascending: 0, 
    Descending: 1, 
  }
);

/* class System.Data.SqlClient.TdsParameterSetter */ 

(function TdsParameterSetter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), 
      Name: "System.Data.SqlClient.TdsParameterSetter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTypedGetterSetter", 
      new JSIL.MethodSignature($asm11.TypeRef("Microsoft.SqlServer.Server.SmiTypedGetterSetter"), [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "_target", $asm11.TypeRef("System.Data.SqlClient.TdsRecordBufferSetter"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanGet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CanSet", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsRecordBufferSetter */ 

(function TdsRecordBufferSetter$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("Microsoft.SqlServer.Server.SmiRecordBuffer"), 
      Name: "System.Data.SqlClient.TdsRecordBufferSetter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSettingColumn", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckWritingToColumn", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndElements", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanGet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NewElement", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBoolean", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetByte", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetBytesLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCharsLength", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTime", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDateTimeOffset", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.DateTimeOffset")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDBNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetDouble", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetGuid", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt16", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt32", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInt64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSingle", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSqlDecimal", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetVariantMetaData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiEventSink"), $.Int32, 
          $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipPossibleDefaultedColumns", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false}, "_fieldSetters", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlClient.TdsValueSetter")]));

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_metaData", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanGet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CanSet", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.SqlClient.TdsValueSetter */ 

(function TdsValueSetter$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.SqlClient.TdsValueSetter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"), $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSettingOffset", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBoolean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBytesLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBytesNoOffsetHandling", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCharsLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDateTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDateTimeOffset", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDBNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDouble", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetGuid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInt16", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInt32", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInt64", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSingle", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSqlDecimal", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetString", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeSpan", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetVariantType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"))
    );

    $.Field({Static:false, Public:false}, "_stateObj", $asm11.TypeRef("System.Data.SqlClient.TdsParserStateObject"));

    $.Field({Static:false, Public:false}, "_metaData", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));

    $.Field({Static:false, Public:false}, "_isPlp", $.Boolean);

    $.Field({Static:false, Public:false}, "_plpUnknownSent", $.Boolean);

    $.Field({Static:false, Public:false}, "_encoder", $asm07.TypeRef("System.Text.Encoder"));

    $.Field({Static:false, Public:false}, "_variantType", $asm11.TypeRef("Microsoft.SqlServer.Server.SmiMetaData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.SqlClient.PoolBlockingPeriod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.SqlClient.PoolBlockingPeriod", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    AlwaysBlock: 1, 
    NeverBlock: 2, 
  }
);

JSIL.DeclareNamespace("System.Data.OleDb");
/* class System.Data.OleDb.ColumnBinding */ 

(function ColumnBinding$Members () {
  var $, $thisType;











































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.ColumnBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), $.Int32, 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.OleDb.OleDbParameter"), $asm11.TypeRef("System.Data.OleDb.RowBinding"), 
          $asm11.TypeRef("System.Data.OleDb.Bindings"), $asm11.TypeRef("System.Data.OleDb.tagDBBINDING"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTypeValueStatusValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTypeValueStatusValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Bindings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.Bindings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnBindingMaxLen", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnBindingOrdinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnBindingPrecision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DbType", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndexForAccessor", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndexWithinAccessor", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowBinding", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.RowBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueBindingOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueBindingSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParameterBindingInvalid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValueNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LengthValue", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LengthValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Parameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueDBNull", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueEmpty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StatusValue", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.DBStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StatusValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.DBStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BOOL", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BOOL", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BSTR", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BSTR", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ByRefBYTES", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ByRefBYTES", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ByRefWSTR", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ByRefWSTR", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ByRefWSTR", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BYTES", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_BYTES", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_CY", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_CY", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DATE", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DATE", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBDATE", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBDATE", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBTIME", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBTIME", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBTIMESTAMP", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DBTIMESTAMP", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DECIMAL", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_DECIMAL", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ERROR", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_ERROR", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_FILETIME", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_FILETIME", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_GUID", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_GUID", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_HCHAPTER", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I1", 
      JSIL.MethodSignature.Return($.SByte)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I1", 
      JSIL.MethodSignature.Action($.SByte)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I2", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I2", 
      JSIL.MethodSignature.Action($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I4", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I4", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I8", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_I8", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_IDISPATCH", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_IDISPATCH", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_IUNKNOWN", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_IUNKNOWN", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_NUMERIC", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_NUMERIC", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_R4", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_R4", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_R8", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_R8", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI1", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI1", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI2", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI2", 
      JSIL.MethodSignature.Action($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI4", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI4", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI8", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_UI8", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_VARIANT", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_VARIANT", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_WSTR", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_WSTR", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Value_WSTR", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueChapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueDecimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueInt16", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueInt32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSingle", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueVariant", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataReader", $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rowbinding", $asm11.TypeRef("System.Data.OleDb.RowBinding"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameter", $asm11.TypeRef("System.Data.OleDb.OleDbParameter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameterChangeID", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_offsetStatus", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_offsetLength", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_offsetValue", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxLen", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_wType", $.Int16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_precision", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexForAccessor", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexWithinAccessor", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ifIRowsetElseIRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_valueBindingOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_valueBindingSize", $.Int32);

    $.Field({Static:false, Public:false}, "_sptr", $asm11.TypeRef("System.Data.OleDb.StringMemHandle"));

    $.Field({Static:false, Public:false}, "_pinnedBuffer", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Property({Static:false, Public:false}, "Bindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Property({Static:false, Public:false}, "RowBinding", $asm11.TypeRef("System.Data.OleDb.RowBinding"));

    $.Property({Static:false, Public:false}, "ColumnBindingOrdinal", $.Int32);

    $.Property({Static:false, Public:false}, "ColumnBindingMaxLen", $.Int32);

    $.Property({Static:false, Public:false}, "ColumnBindingPrecision", $.Byte);

    $.Property({Static:false, Public:false}, "DbType", $.Int16);

    $.Property({Static:false, Public:false}, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Index", $.Int32);

    $.Property({Static:false, Public:false}, "IndexForAccessor", $.Int32);

    $.Property({Static:false, Public:false}, "IndexWithinAccessor", $.Int32);

    $.Property({Static:false, Public:false}, "ValueBindingOffset", $.Int32);

    $.Property({Static:false, Public:false}, "ValueBindingSize", $.Int32);

    $.Property({Static:false, Public:false}, "ValueOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.Bindings */ 

(function Bindings$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.Bindings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateForAccessor", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyInputParameters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyOutputParameters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AreParameterBindingsInvalid", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbParameterCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupBindings", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnBindings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.ColumnBinding")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAccessor", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IAccessor"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BindInfo", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMBINDINFO")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DBColumnAccess", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBCOLUMNACCESS")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DbType", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ForceRebind", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParamSize", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "GuidKindName", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.Int32, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterStatus", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RowBinding", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.RowBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DataSourceType", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DbType", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Flags", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ForceRebind", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MaxLen", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Ordinal", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParamIO", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParamSize", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Part", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindInfo", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMBINDINFO")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dbbindings", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBBINDING")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dbcolumns", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBCOLUMNACCESS")]));

    $.Field({Static:false, Public:false}, "_parameters", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]));

    $.Field({Static:false, Public:false}, "_collectionChangeID", $.Int32);

    $.Field({Static:false, Public:false}, "_dataReader", $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"));

    $.Field({Static:false, Public:false}, "_columnBindings", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.ColumnBinding")]));

    $.Field({Static:false, Public:false}, "_rowBinding", $asm11.TypeRef("System.Data.OleDb.RowBinding"));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:false, Public:false}, "_dataBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_ifIRowsetElseIRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_forceRebind", $.Boolean);

    $.Field({Static:false, Public:false}, "_needToReset", $.Boolean);

    $.Property({Static:false, Public:false}, "BindInfo", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMBINDINFO")]));

    $.Property({Static:false, Public:false}, "DBColumnAccess", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBCOLUMNACCESS")]));

    $.Property({Static:false, Public:false}, "CurrentIndex", $.Int32);

    $.Property({Static:false, Public:false}, "ForceRebind", $.Boolean);

    $.Property({Static:false, Public:false}, "DataSourceType", $.IntPtr);

    $.Property({Static:false, Public:false}, "Name", $.IntPtr);

    $.Property({Static:false, Public:false}, "ParamSize", $.IntPtr);

    $.Property({Static:false, Public:false}, "Flags", $.Int32);

    $.Property({Static:false, Public:false}, "Ordinal", $.IntPtr);

    $.Property({Static:false, Public:false}, "Part", $.Int32);

    $.Property({Static:false, Public:false}, "ParamIO", $.Int32);

    $.Property({Static:false, Public:false}, "MaxLen", $.Int32);

    $.Property({Static:false, Public:false}, "DbType", $.Int32);

    $.Property({Static:false, Public:false}, "Precision", $.Byte);

    $.Property({Static:false, Public:false}, "Scale", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.DBPropSet */ 

(function DBPropSet$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.OleDb.DBPropSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBProperties"), $asm11.TypeRef("System.Data.OleDb.PropertyIDSet"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowsetInfo"), $asm11.TypeRef("System.Data.OleDb.PropertyIDSet"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandProperties"), $asm11.TypeRef("System.Data.OleDb.PropertyIDSet"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateProperty", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Guid"), $.Int32, 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PropertySetCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertySet", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPROP")]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLastErrorInfo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPropertySet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPROP")])
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "propertySetCount", $.Int32);

    $.Field({Static:false, Public:false}, "lastErrorFromProvider", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "PropertySetCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbCommand */ 

(function OleDbCommand$Members () {
  var $, $thisType;


















































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommand"), 
      Name: "System.Data.OleDb.OleDbCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnection"), 
          $asm11.TypeRef("System.Data.OleDb.OleDbTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyParameterBindings", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandWithParameters"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMBINDINFO")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseCommandFromConnection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromDataReader", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.Bindings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternalCommand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseInternalParameters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CommandPropertySets", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.DBPropSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAccessor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommand", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.CommandBehavior"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandText", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandTextErrorHandling", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandTextForMultpleResults", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMS"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandTextForSingleResult", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMS"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandTextForSingleRow", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMS"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommandTextSpecialErrorHandling", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.OleDb.OleDbHResult"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteReaderInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteTableDirect", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.CommandBehavior"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandCommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandOdbcMaximumToText", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandOdbcMinimumToText", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandStoredProcedureToText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DesignTimeVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterBindings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.Bindings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdatedRowSource", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IAccessor", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ICommandPrepare", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandPrepare"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ICommandProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandProperties"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ICommandWithParameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandWithParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeCommand", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareCommandText", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResults", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResultsNoReset", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertiesOnCommand", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetCommandTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DesignTimeVisible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParameterBindings", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.Bindings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdatedRowSource", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCommandTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDataReader"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "ExecuteReader");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbCommand.ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    )
      .Overrides($asm11.TypeRef("System.Data.IDbCommand"), "ExecuteReader");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false}, "TakeBindingOwnerShip", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.Bindings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConnection", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConnectionAndTransaction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_commandText", $.String);

    $.Field({Static:false, Public:false}, "_commandType", $asm11.TypeRef("System.Data.CommandType"));

    $.Field({Static:false, Public:false}, "_commandTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_updatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"));

    $.Field({Static:false, Public:false}, "_designTimeInvisible", $.Boolean);

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"));

    $.Field({Static:false, Public:false}, "_transaction", $asm11.TypeRef("System.Data.OleDb.OleDbTransaction"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_parameters", $asm11.TypeRef("System.Data.OleDb.OleDbParameterCollection"));

    $.Field({Static:false, Public:false}, "_icommandText", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandText"));

    $.Field({Static:false, Public:false}, "commandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:false}, "_dbBindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Field({Static:false, Public:false}, "canceling", $.Boolean);

    $.Field({Static:false, Public:false}, "_isPrepared", $.Boolean);

    $.Field({Static:false, Public:false}, "_executeQuery", $.Boolean);

    $.Field({Static:false, Public:false}, "_trackingForClose", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasDataReader", $.Boolean);

    $.Field({Static:false, Public:false}, "_recordsAffected", $.IntPtr);

    $.Field({Static:false, Public:false}, "_changeID", $.Int32);

    $.Field({Static:false, Public:false}, "_lastChangeID", $.Int32);

    $.Property({Static:false, Public:false}, "ParameterBindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommandText", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.ADO.Design.OleDbCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandText"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandTimeout"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandType", $asm11.TypeRef("System.Data.CommandType"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandType"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.CommandType.Text]; });

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Connection"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbParameterCollection", $asm11.TypeRef("System.Data.Common.DbParameterCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbTransaction", $asm11.TypeRef("System.Data.Common.DbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "DesignTimeVisible", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Data.OleDb.OleDbParameterCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Parameters"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true }, "Transaction", $asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Transaction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_UpdatedRowSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.UpdateRowSource.Both]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OleDbCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [true]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RecordsAffected"]; });

})();

/* class System.Data.OleDb.OleDbCommandBuilder */ 

(function OleDbCommandBuilder$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommandBuilder"), 
      Name: "System.Data.OleDb.OleDbCommandBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyParameterInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToParameterDirection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ParameterDirection"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeriveParameters", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveParametersFromStoredProcedure", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]), [$asm11.TypeRef("System.Data.OleDb.OleDbConnection"), $asm11.TypeRef("System.Data.OleDb.OleDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterPlaceholder", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OleDbRowUpdatingHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatingEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAdapter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetRowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.Property({Static:false, Public:true }, "DataAdapter", $asm11.TypeRef("System.Data.OleDb.OleDbDataAdapter"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbCommandBuilder_DataAdapter"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnection */ 

(function OleDbConnection$Members () {
  var $, $thisType;

















































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnection"), 
      Name: "System.Data.OleDb.OleDbConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "add_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDbTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStateOpen", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Get", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateExecutePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.CodeAccessPermission"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeMe", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDistributedTransaction", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDistributedTransactionHelper", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CloseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OleDbConnectionStringValue", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourcePropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourceValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLiteralQuotes", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactoryInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOleDbSchemaTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm07.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaRowset", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm07.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasLiveReader", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ICommandText", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandText"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IDBPropertiesWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IOpenRowset", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IOpenRowsetWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInfoMessage", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo"), $asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessResults", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), $.Type, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuotedIdentifierCase", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseObjectPool", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetState", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:false}, "ResetState", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LocalTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataSourcePropertyValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.Int32, 
          $.String, $.Boolean, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionEvent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SqlSupport", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportIRow", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportMultipleResults", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportSchemaRowset", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false}, "ValidateTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"), [$asm11.TypeRef("System.Data.OleDb.OleDbTransaction"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyExecutePermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventInfoMessage", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_connectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), function ($pi) {
        return $asm11.System.Data.OleDb.OleDbConnectionFactory.SingletonInstance;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExecutePermission", $asm07.TypeRef("System.Security.CodeAccessPermission"));

    $.Field({Static:false, Public:false}, "_userConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false}, "_poolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false}, "_innerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Field({Static:false, Public:false}, "_closeCount", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionString", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_ConnectionString"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RecommendedAsConfigurableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:false}, "OleDbConnectionStringValue", $asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_ConnectionTimeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Database", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_Database"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSource", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [true]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_DataSource"]; });

    $.Property({Static:false, Public:false}, "IsOpen", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalTransaction", $asm11.TypeRef("System.Data.OleDb.OleDbTransaction"));

    $.Property({Static:false, Public:true }, "Provider", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_Provider"]; });

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm11.TypeRef("System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbConnection_ServerVersion"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_State"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "CloseCount", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "InnerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "UserConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Event({Static:false, Public:true }, "InfoMessage", $asm11.TypeRef("System.Data.OleDb.OleDbInfoMessageEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_InfoMessage"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_InfoMessage"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["InfoMessage"]; });

})();

/* class System.Data.OleDb.OleDbConnectionFactory */ 

(function OleDbConnectionFactory$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
      Name: "System.Data.OleDb.OleDbConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Constant({Static:true , Public:false}, "_metaDataXml", $.String, ":MetaDataXml");

    $.Constant({Static:true , Public:false}, "_defaultMetaDataXml", $.String, "defaultMetaDataXml");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionInternal */ 

(function OleDbConnectionInternal$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.OleDb.OleDbConnectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"), $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInfoKeywordsToTable", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildInfoKeywords", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildInfoLiterals", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaGuids", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceDataLinks", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistTransactionInternal", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSession", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourcePropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourceValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLiteralInfo", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjectPool", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbServicesWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbPropertyInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaRowset", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm07.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaRowsetInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasLiveReader", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ICommandText", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ICommandText"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IDBInfoWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBProperties", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IDBPropertiesWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBSchemaRowset", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IDBSchemaRowsetWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IOpenRowset", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.IOpenRowsetWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ITransactionJoin", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.ITransactionJoinWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResults", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseObjectPool", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LocalTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetMTAApartmentState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportSchemaRowset", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbTransaction"), [$asm11.TypeRef("System.Data.OleDb.OleDbTransaction"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VersionCheck", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "idataInitialize", $asm11.TypeRef("System.Data.OleDb.OleDbServicesWrapper"));

    $.Field({Static:true , Public:false}, "dataInitializeLock", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ConnectionString", $asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_datasrcwrp", $asm11.TypeRef("System.Data.OleDb.DataSourceWrapper"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sessionwrp", $asm11.TypeRef("System.Data.OleDb.SessionWrapper"));

    $.Field({Static:false, Public:false}, "weakTransaction", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_unEnlistDuringDeactivate", $.Boolean);

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"));

    $.Property({Static:false, Public:false}, "HasSession", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalTransaction", $asm11.TypeRef("System.Data.OleDb.OleDbTransaction"));

    $.Property({Static:false, Public:false}, "Provider", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionInternal+<>c__DisplayClass41_0 */ 

(function $l$gc__DisplayClass41_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbConnectionInternal+<>c__DisplayClass41_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lHasLiveReader$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbDataReader")])
    );

    $.Field({Static:false, Public:true }, "cmd", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo */ 

(function OleDbConnectionPoolGroupProviderInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), 
      Name: "System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasQuoteFix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QuotePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QuoteSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQuoteFix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "_hasQuoteFix", $.Boolean);

    $.Field({Static:false, Public:false}, "_quotePrefix", $.String);

    $.Field({Static:false, Public:false}, "_quoteSuffix", $.String);

    $.Property({Static:false, Public:false}, "HasQuoteFix", $.Boolean);

    $.Property({Static:false, Public:false}, "QuotePrefix", $.String);

    $.Property({Static:false, Public:false}, "QuoteSuffix", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.SchemaSupport */ 

(function SchemaSupport$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.SchemaSupport", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_schemaRowset", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "_restrictions", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionString */ 

(function OleDbConnectionString$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
      Name: "System.Data.OleDb.OleDbConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Expand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InitialCatalog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OleDbServices", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaSupport", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UdlPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSqlSupport", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSupportIRow", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbConnection"), $asm11.TypeRef("System.Data.OleDb.OleDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSupportMultipleResults", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMSDASQL", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadStringFromFileStorage", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadStringFromStorage", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReleaseObjectPool", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaSupport", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConnectionString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateProvider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "PossiblePrompt", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ActualConnectionString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandedConnectionString", $.String);

    $.Field({Static:false, Public:false}, "_schemaSupport", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")]));

    $.Field({Static:false, Public:false}, "_sqlSupport", $.Int32);

    $.Field({Static:false, Public:false}, "_supportMultipleResults", $.Boolean);

    $.Field({Static:false, Public:false}, "_supportIRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasSqlSupport", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasSupportMultipleResults", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasSupportIRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_oledbServices", $.Int32);

    $.Field({Static:false, Public:false}, "DangerousDataSourceIUnknownQueryInterface", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IUnknownQueryInterface"));

    $.Field({Static:false, Public:false}, "DangerousIDBInitializeInitialize", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBInitializeInitialize"));

    $.Field({Static:false, Public:false}, "DangerousIDBCreateSessionCreateSession", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBCreateSessionCreateSession"));

    $.Field({Static:false, Public:false}, "DangerousIDBCreateCommandCreateCommand", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBCreateCommandCreateCommand"));

    $.Field({Static:false, Public:false}, "HaveQueriedForCreateCommand", $.Boolean);

    $.Property({Static:false, Public:false}, "ConnectTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "DataSource", $.String);

    $.Property({Static:false, Public:false}, "InitialCatalog", $.String);

    $.Property({Static:false, Public:false}, "Provider", $.String);

    $.Property({Static:false, Public:false}, "OleDbServices", $.Int32);

    $.Property({Static:false, Public:false}, "SchemaSupport", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")]));

    $.Property({Static:true , Public:false}, "UdlPoolSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionString+UDL */ 

(function UDL$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.OleDb.OleDbConnectionString+UDL", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Header", $.String, "\ufeff[oledb]\r\n; Everything after this line is an OLE DB initstring\r\n");

    $.Constant({Static:true , Public:false}, "Location", $.String, "SOFTWARE\\Microsoft\\DataAccess\\Udl Pooling");

    $.Constant({Static:true , Public:false}, "Pooling", $.String, "Cache Size");

    $.Field({Static:true , Public:false}, "_PoolSizeInit", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "_PoolSize", $.Int32);

    $.Field({Static:true , Public:false}, "_Pool", $asm07.TypeRef("System.Collections.Generic.Dictionary`2"));

    $.Field({Static:true , Public:false}, "_PoolLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionStringBuilder */ 

(function OleDbConnectionStringBuilder$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"), 
      Name: "System.Data.OleDb.OleDbConnectionStringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPropertyDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OleDbServices", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PersistSecurityInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAt", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionStringBuilder+Keywords")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProperties", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbPropertyInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbConnectionStringBuilder+Keywords"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RestartProvider", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OleDbServices", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PersistSecurityInfo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_validKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_keywords", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnectionStringBuilder+Keywords")]));

    $.Field({Static:false, Public:false}, "_knownKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_propertyInfo", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbPropertyInfo")]));

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_dataSource", $.String);

    $.Field({Static:false, Public:false}, "_provider", $.String);

    $.Field({Static:false, Public:false}, "_oleDbServices", $.Int32);

    $.Field({Static:false, Public:false}, "_persistSecurityInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "DataSource", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Data Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_DataSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "FileName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["File Name"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_NamedConnectionString"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_FileName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "OleDbServices", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.OleDb.OleDbConnectionStringBuilder_OleDbServicesConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["OLE DB Services"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_OleDbServices"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "PersistSecurityInfo", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Persist Security Info"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_PersistSecurityInfo"]; });

    $.Property({Static:false, Public:true }, "Provider", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Provider"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.OleDb.OleDbConnectionStringBuilder_OleDbProviderConverter.__Type__]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Provider"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["Provider"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.OleDb.OleDbConnectionStringBuilder_OleDbConnectionStringBuilderConverter.__Type__]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

})();

/* enum System.Data.OleDb.OleDbConnectionStringBuilder+Keywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbConnectionStringBuilder+Keywords", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    FileName: 0, 
    Provider: 1, 
    DataSource: 2, 
    PersistSecurityInfo: 3, 
    OleDbServices: 4, 
  }
);

/* class System.Data.OleDb.OleDbConnectionStringBuilder+OleDbProviderConverter */ 

(function OleDbProviderConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.StringConverter"), 
      Name: "System.Data.OleDb.OleDbConnectionStringBuilder+OleDbProviderConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Constant({Static:true , Public:false}, "DBSOURCETYPE_DATASOURCE_TDP", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBSOURCETYPE_DATASOURCE_MDP", $.Int32, 3);

    $.Field({Static:false, Public:false}, "_standardValues", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.OleDbConnectionStringBuilder+OleDbServiceValues */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbConnectionStringBuilder+OleDbServiceValues", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Default: -13, 
    EnableAll: -1, 
    DisableAll: 0, 
    ResourcePooling: 1, 
    TransactionEnlistment: 2, 
    ClientCursor: 4, 
    AggregationAfterSession: 8, 
  }
);

/* class System.Data.OleDb.OleDbConnectionStringBuilder+OleDbServicesConverter */ 

(function OleDbServicesConverter$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Data.OleDb.OleDbConnectionStringBuilder+OleDbServicesConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object])
    );

    $.Field({Static:false, Public:false}, "_standardValues", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbConnectionStringBuilder+OleDbConnectionStringBuilderConverter */ 

(function OleDbConnectionStringBuilderConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.OleDb.OleDbConnectionStringBuilder+OleDbConnectionStringBuilderConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionStringBuilder")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbDataAdapter */ 

(function OleDbDataAdapter$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataAdapter"), 
      Name: "System.Data.OleDb.OleDbDataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatedEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataTable"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Fill", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Data.DataSet"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillClose", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillDataTable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")])])
    )
      .Parameter(1, "dataTables", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "FillFromADODB", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromRecord", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ADORecordConstruction"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromRecordset", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ADORecordsetConstruction"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSourceTableName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdated", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdating", $.Object);

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Field({Static:false, Public:false}, "_selectCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Property({Static:false, Public:true }, "DeleteCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_DeleteCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.DeleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "InsertCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_InsertCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.InsertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "SelectCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_SelectCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.SelectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "UpdateCommand", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_UpdateCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.UpdateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Event({Static:false, Public:true }, "RowUpdated", $asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdated"]; });

    $.Event({Static:false, Public:true }, "RowUpdating", $asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatingEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdating"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RowUpdated"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.OleDb.OleDbDataReader */ 

(function OleDbDataReader$Members () {
  var $, $thisType;

































































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataReader"), 
      Name: "System.Data.OleDb.OleDbDataReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.OleDb.OleDbConnection"), $asm11.TypeRef("System.Data.OleDb.OleDbCommand"), 
          $.Int32, $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddRecordsAffected", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowDBNullMaybeNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSchemaInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSchemaPrimaryKey", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSchemaUniqueIndexAsKey", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildMetaInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.MetaData")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaTableInfo", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaTableInfoTable", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.IntPtr, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaTableRowset", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseReaderFromConnection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAccessors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBindingsFromMetaData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.Bindings")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeManagedRowset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeNativeMultipleResults", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeNativeRow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeNativeRowset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeOpenResults", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DoColumnDropFilter", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoSequentialCheck", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.ColumnBinding"), [
          $.Int32, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoValueCheck", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.MetaData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpToSchemaTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMetaData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.MetaData"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateSchemaTable", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.MetaData")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnBinding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.ColumnBinding"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "GetDataForReader", 
      new JSIL.MethodSignature($.Type, [
          $.IntPtr, $asm11.TypeRef("System.Data.OleDb.RowBinding"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyOnRowset", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowDataFromHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowHandles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueBinding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.ColumnBinding"), [$asm11.TypeRef("System.Data.OleDb.MetaData")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasRowsRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IAccessor", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Hashtable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeIMultipleResults", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeIRow", 
      new JSIL.MethodSignature(null, [$.Object, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeIRowset", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("System.Data.OleDb.ChapterHandle"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IRowset", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IRowsetInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowsetInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCommandBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFixed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLong", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRowVersion", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "NextResults", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbException"), [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IMultipleResults"), $asm11.TypeRef("System.Data.OleDb.OleDbConnection"), 
          $asm11.TypeRef("System.Data.OleDb.OleDbCommand"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextResultsInfinite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResults", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRow", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRowset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseCurrentRow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseRowHandles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetChapter", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Data.OleDb.RowBinding"), $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_commandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"));

    $.Field({Static:false, Public:false}, "_command", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Field({Static:false, Public:false}, "_parameterBindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Field({Static:false, Public:false}, "_imultipleResults", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IMultipleResults"));

    $.Field({Static:false, Public:false}, "_irowset", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset"));

    $.Field({Static:false, Public:false}, "_irow", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRow"));

    $.Field({Static:false, Public:false}, "_chapterHandle", $asm11.TypeRef("System.Data.OleDb.ChapterHandle"));

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Field({Static:false, Public:false}, "_isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "_isRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasRows", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasRowsReadCheck", $.Boolean);

    $.Field({Static:false, Public:false}, "_sequentialBytesRead", $.Int64);

    $.Field({Static:false, Public:false}, "_sequentialOrdinal", $.Int32);

    $.Field({Static:false, Public:false}, "_bindings", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.Bindings")]));

    $.Field({Static:false, Public:false}, "_nextAccessorForRetrieval", $.Int32);

    $.Field({Static:false, Public:false}, "_nextValueForRetrieval", $.Int32);

    $.Field({Static:false, Public:false}, "_recordsAffected", $.IntPtr);

    $.Field({Static:false, Public:false}, "_useIColumnsRowset", $.Boolean);

    $.Field({Static:false, Public:false}, "_sequentialAccess", $.Boolean);

    $.Field({Static:false, Public:false}, "_singleRow", $.Boolean);

    $.Field({Static:false, Public:false}, "_rowHandleFetchCount", $.IntPtr);

    $.Field({Static:false, Public:false}, "_rowHandleNativeBuffer", $asm11.TypeRef("System.Data.OleDb.RowHandleBuffer"));

    $.Field({Static:false, Public:false}, "_rowFetchedCount", $.IntPtr);

    $.Field({Static:false, Public:false}, "_currentRow", $.Int32);

    $.Field({Static:false, Public:false}, "_dbSchemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_visibleFieldCount", $.Int32);

    $.Field({Static:false, Public:false}, "_metadata", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.MetaData")]));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Property({Static:false, Public:false}, "Command", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "MetaData", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.MetaData")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "VisibleFieldCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.OleDb.MetaData */ 

(function MetaData$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.MetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.IComparable"), "CompareTo");

    $.Field({Static:false, Public:false}, "bindings", $asm11.TypeRef("System.Data.OleDb.Bindings"));

    $.Field({Static:false, Public:false}, "columnBinding", $asm11.TypeRef("System.Data.OleDb.ColumnBinding"));

    $.Field({Static:false, Public:false}, "columnName", $.String);

    $.Field({Static:false, Public:false}, "guid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "kind", $.Int32);

    $.Field({Static:false, Public:false}, "propid", $.IntPtr);

    $.Field({Static:false, Public:false}, "idname", $.String);

    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Data.OleDb.NativeDBType"));

    $.Field({Static:false, Public:false}, "ordinal", $.IntPtr);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "flags", $.Int32);

    $.Field({Static:false, Public:false}, "precision", $.Byte);

    $.Field({Static:false, Public:false}, "scale", $.Byte);

    $.Field({Static:false, Public:false}, "isAutoIncrement", $.Boolean);

    $.Field({Static:false, Public:false}, "isUnique", $.Boolean);

    $.Field({Static:false, Public:false}, "isKeyColumn", $.Boolean);

    $.Field({Static:false, Public:false}, "isHidden", $.Boolean);

    $.Field({Static:false, Public:false}, "baseSchemaName", $.String);

    $.Field({Static:false, Public:false}, "baseCatalogName", $.String);

    $.Field({Static:false, Public:false}, "baseTableName", $.String);

    $.Field({Static:false, Public:false}, "baseColumnName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbEnumerator */ 

(function OleDbEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElements", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorFromType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRootEnumerator", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbDataReader"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbError */ 

(function OleDbError$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbError", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorRecords"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeError", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SQLState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "message", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "source", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "sqlState", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "nativeError", $.Int32);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "NativeError", $.Int32);

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "SQLState", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbErrorCollection */ 

(function OleDbErrorCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbErrorCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbError")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbError"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false, ReadOnly:true }, "items", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.OleDb.OleDbError"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; });

})();

/* class System.Data.OleDb.OleDbException */ 

(function OleDbException$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbException"), 
      Name: "System.Data.OleDb.OleDbException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineExceptions", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo"), $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "oledbErrors", $asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorCode", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.OleDb.OleDbException_ErrorCodeConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbException+ErrorCodeConverter */ 

(function ErrorCodeConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Int32Converter"), 
      Name: "System.Data.OleDb.OleDbException+ErrorCodeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbFactory */ 

(function OleDbFactory$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbProviderFactory"), 
      Name: "System.Data.OleDb.OleDbFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommandBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommandBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.CodeAccessPermission"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.OleDbHResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbHResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    E_NOTIMPL: -2147467263, 
    E_NOINTERFACE: -2147467262, 
    E_POINTER: -2147467261, 
    E_ABORT: -2147467260, 
    E_FAIL: -2147467259, 
    E_UNEXPECTED: -2147418113, 
    STG_E_INVALIDFUNCTION: -2147287039, 
    STG_E_FILENOTFOUND: -2147287038, 
    STG_E_PATHNOTFOUND: -2147287037, 
    STG_E_TOOMANYOPENFILES: -2147287036, 
    STG_E_ACCESSDENIED: -2147287035, 
    STG_E_INVALIDHANDLE: -2147287034, 
    STG_E_INSUFFICIENTMEMORY: -2147287032, 
    STG_E_INVALIDPOINTER: -2147287031, 
    STG_E_NOMOREFILES: -2147287022, 
    STG_E_DISKISWRITEPROTECTED: -2147287021, 
    STG_E_SEEKERROR: -2147287015, 
    STG_E_WRITEFAULT: -2147287011, 
    STG_E_READFAULT: -2147287010, 
    STG_E_SHAREVIOLATION: -2147287008, 
    STG_E_LOCKVIOLATION: -2147287007, 
    STG_E_FILEALREADYEXISTS: -2147286960, 
    STG_E_INVALIDPARAMETER: -2147286953, 
    STG_E_MEDIUMFULL: -2147286928, 
    STG_E_PROPSETMISMATCHED: -2147286800, 
    STG_E_ABNORMALAPIEXIT: -2147286790, 
    STG_E_INVALIDHEADER: -2147286789, 
    STG_E_INVALIDNAME: -2147286788, 
    STG_E_UNKNOWN: -2147286787, 
    STG_E_UNIMPLEMENTEDFUNCTION: -2147286786, 
    STG_E_INVALIDFLAG: -2147286785, 
    STG_E_INUSE: -2147286784, 
    STG_E_NOTCURRENT: -2147286783, 
    STG_E_REVERTED: -2147286782, 
    STG_E_CANTSAVE: -2147286781, 
    STG_E_OLDFORMAT: -2147286780, 
    STG_E_OLDDLL: -2147286779, 
    STG_E_SHAREREQUIRED: -2147286778, 
    STG_E_NOTFILEBASEDSTORAGE: -2147286777, 
    STG_E_EXTANTMARSHALLINGS: -2147286776, 
    STG_E_DOCFILECORRUPT: -2147286775, 
    STG_E_BADBASEADDRESS: -2147286768, 
    STG_E_INCOMPLETE: -2147286527, 
    STG_E_TERMINATED: -2147286526, 
    REGDB_E_CLASSNOTREG: -2147221164, 
    CO_E_NOTINITIALIZED: -2147221008, 
    CO_E_CLASSSTRING: -2147221005, 
    DB_E_BADACCESSORHANDLE: -2147217920, 
    DB_E_ROWLIMITEXCEEDED: -2147217919, 
    DB_E_REOLEDBNLYACCESSOR: -2147217918, 
    DB_E_SCHEMAVIOLATION: -2147217917, 
    DB_E_BADROWHANDLE: -2147217916, 
    DB_E_OBJECTOPEN: -2147217915, 
    DB_E_BADCHAPTER: -2147217914, 
    DB_E_CANTCONVERTVALUE: -2147217913, 
    DB_E_BADBINDINFO: -2147217912, 
    DB_SEC_E_PERMISSIONDENIED: -2147217911, 
    DB_E_NOTAREFERENCECOLUMN: -2147217910, 
    DB_E_LIMITREJECTED: -2147217909, 
    DB_E_NOCOMMAND: -2147217908, 
    DB_E_COSTLIMIT: -2147217907, 
    DB_E_BADBOOKMARK: -2147217906, 
    DB_E_BADLOCKMODE: -2147217905, 
    DB_E_PARAMNOTOPTIONAL: -2147217904, 
    DB_E_BADCOLUMNID: -2147217903, 
    DB_E_BADRATIO: -2147217902, 
    DB_E_BADVALUES: -2147217901, 
    DB_E_ERRORSINCOMMAND: -2147217900, 
    DB_E_CANTCANCEL: -2147217899, 
    DB_E_DIALECTNOTSUPPORTED: -2147217898, 
    DB_E_DUPLICATEDATASOURCE: -2147217897, 
    DB_E_CANNOTRESTART: -2147217896, 
    DB_E_NOTFOUND: -2147217895, 
    DB_E_CANNOTFREE: -2147217894, 
    DB_E_NEWLYINSERTED: -2147217893, 
    DB_E_GOALREJECTED: -2147217892, 
    DB_E_UNSUPPORTEDCONVERSION: -2147217891, 
    DB_E_BADSTARTPOSITION: -2147217890, 
    DB_E_NOQUERY: -2147217889, 
    DB_E_NOTREENTRANT: -2147217888, 
    DB_E_ERRORSOCCURRED: -2147217887, 
    DB_E_NOAGGREGATION: -2147217886, 
    DB_E_DELETEDROW: -2147217885, 
    DB_E_CANTFETCHBACKWARDS: -2147217884, 
    DB_E_ROWSNOTRELEASED: -2147217883, 
    DB_E_BADSTORAGEFLAG: -2147217882, 
    DB_E_BADCOMPAREOP: -2147217881, 
    DB_E_BADSTATUSVALUE: -2147217880, 
    DB_E_CANTSCROLLBACKWARDS: -2147217879, 
    DB_E_BADREGIONHANDLE: -2147217878, 
    DB_E_NONCONTIGUOUSRANGE: -2147217877, 
    DB_E_INVALIDTRANSITION: -2147217876, 
    DB_E_NOTASUBREGION: -2147217875, 
    DB_E_MULTIPLESTATEMENTS: -2147217874, 
    DB_E_INTEGRITYVIOLATION: -2147217873, 
    DB_E_BADTYPENAME: -2147217872, 
    DB_E_ABORTLIMITREACHED: -2147217871, 
    DB_E_ROWSETINCOMMAND: -2147217870, 
    DB_E_CANTTRANSLATE: -2147217869, 
    DB_E_DUPLICATEINDEXID: -2147217868, 
    DB_E_NOINDEX: -2147217867, 
    DB_E_INDEXINUSE: -2147217866, 
    DB_E_NOTABLE: -2147217865, 
    DB_E_CONCURRENCYVIOLATION: -2147217864, 
    DB_E_BADCOPY: -2147217863, 
    DB_E_BADPRECISION: -2147217862, 
    DB_E_BADSCALE: -2147217861, 
    DB_E_BADTABLEID: -2147217860, 
    DB_E_BADTYPE: -2147217859, 
    DB_E_DUPLICATECOLUMNID: -2147217858, 
    DB_E_DUPLICATETABLEID: -2147217857, 
    DB_E_TABLEINUSE: -2147217856, 
    DB_E_NOLOCALE: -2147217855, 
    DB_E_BADRECORDNUM: -2147217854, 
    DB_E_BOOKMARKSKIPPED: -2147217853, 
    DB_E_BADPROPERTYVALUE: -2147217852, 
    DB_E_INVALID: -2147217851, 
    DB_E_BADACCESSORFLAGS: -2147217850, 
    DB_E_BADSTORAGEFLAGS: -2147217849, 
    DB_E_BYREFACCESSORNOTSUPPORTED: -2147217848, 
    DB_E_NULLACCESSORNOTSUPPORTED: -2147217847, 
    DB_E_NOTPREPARED: -2147217846, 
    DB_E_BADACCESSORTYPE: -2147217845, 
    DB_E_WRITEONLYACCESSOR: -2147217844, 
    DB_SEC_E_AUTH_FAILED: -2147217843, 
    DB_E_CANCELED: -2147217842, 
    DB_E_CHAPTERNOTRELEASED: -2147217841, 
    DB_E_BADSOURCEHANDLE: -2147217840, 
    DB_E_PARAMUNAVAILABLE: -2147217839, 
    DB_E_ALREADYINITIALIZED: -2147217838, 
    DB_E_NOTSUPPORTED: -2147217837, 
    DB_E_MAXPENDCHANGESEXCEEDED: -2147217836, 
    DB_E_BADORDINAL: -2147217835, 
    DB_E_PENDINGCHANGES: -2147217834, 
    DB_E_DATAOVERFLOW: -2147217833, 
    DB_E_BADHRESULT: -2147217832, 
    DB_E_BADLOOKUPID: -2147217831, 
    DB_E_BADDYNAMICERRORID: -2147217830, 
    DB_E_PENDINGINSERT: -2147217829, 
    DB_E_BADCONVERTFLAG: -2147217828, 
    DB_E_BADPARAMETERNAME: -2147217827, 
    DB_E_MULTIPLESTORAGE: -2147217826, 
    DB_E_CANTFILTER: -2147217825, 
    DB_E_CANTORDER: -2147217824, 
    MD_E_BADTUPLE: -2147217823, 
    MD_E_BADCOORDINATE: -2147217822, 
    MD_E_INVALIDAXIS: -2147217821, 
    MD_E_INVALIDCELLRANGE: -2147217820, 
    DB_E_NOCOLUMN: -2147217819, 
    DB_E_COMMANDNOTPERSISTED: -2147217817, 
    DB_E_DUPLICATEID: -2147217816, 
    DB_E_OBJECTCREATIONLIMITREACHED: -2147217815, 
    SEC_E_BADTRUSTEEID: -2147217814, 
    SEC_E_NOTRUSTEEID: -2147217813, 
    SEC_E_NOMEMBERSHIPSUPPORT: -2147217812, 
    SEC_E_INVALIDOBJECT: -2147217811, 
    SEC_E_NOOWNER: -2147217810, 
    SEC_E_INVALIDACCESSENTRYLIST: -2147217809, 
    SEC_E_INVALIDOWNER: -2147217808, 
    SEC_E_INVALIDACCESSENTRY: -2147217807, 
    DB_E_BADINDEXID: -2147217806, 
    DB_E_BADINITSTRING: -2147217805, 
    DB_E_NOPROVIDERSREGISTERED: -2147217804, 
    DB_E_MISMATCHEDPROVIDER: -2147217803, 
    DB_E_BADCOMMANDID: -2147217802, 
    DB_E_BADCONSTRAINTTYPE: -2147217801, 
    DB_E_BADCONSTRAINTFORM: -2147217800, 
    DB_E_BADDEFERRABILITY: -2147217799, 
    DB_E_BADMATCHTYPE: -2147217792, 
    DB_E_BADUPDATEDELETERULE: -2147217782, 
    DB_E_BADCONSTRAINTID: -2147217781, 
    DB_E_BADCOMMANDFLAGS: -2147217780, 
    DB_E_OBJECTMISMATCH: -2147217779, 
    DB_E_RESOURCEOUTOFSCOPE: -2147217778, 
    DB_E_DROPRESTRICTED: -2147217776, 
    DB_E_NOSOURCEOBJECT: -2147217775, 
    DB_E_RESOURCELOCKED: -2147217774, 
    DB_E_NOTCOLLECTION: -2147217773, 
    DB_E_REOLEDBNLY: -2147217772, 
    DB_E_ASYNCNOTSUPPORTED: -2147217771, 
    DB_E_CANNOTCONNECT: -2147217770, 
    DB_E_TIMEOUT: -2147217769, 
    DB_E_RESOURCEEXISTS: -2147217768, 
    DB_E_DUPLICATECONSTRAINTID: -2147217767, 
    DB_E_OUTOFSPACE: -2147217766, 
    DB_SEC_E_SAFEMODE_DENIED: -2147217765, 
    XACT_E_FIRST: -2147168256, 
    XACT_E_ALREADYOTHERSINGLEPHASE: -2147168256, 
    XACT_E_CANTRETAIN: -2147168255, 
    XACT_E_COMMITFAILED: -2147168254, 
    XACT_E_COMMITPREVENTED: -2147168253, 
    XACT_E_HEURISTICABORT: -2147168252, 
    XACT_E_HEURISTICCOMMIT: -2147168251, 
    XACT_E_HEURISTICDAMAGE: -2147168250, 
    XACT_E_HEURISTICDANGER: -2147168249, 
    XACT_E_ISOLATIONLEVEL: -2147168248, 
    XACT_E_NOASYNC: -2147168247, 
    XACT_E_NOENLIST: -2147168246, 
    XACT_E_NOISORETAIN: -2147168245, 
    XACT_E_NORESOURCE: -2147168244, 
    XACT_E_NOTCURRENT: -2147168243, 
    XACT_E_NOTRANSACTION: -2147168242, 
    XACT_E_NOTSUPPORTED: -2147168241, 
    XACT_E_UNKNOWNRMGRID: -2147168240, 
    XACT_E_WRONGSTATE: -2147168239, 
    XACT_E_WRONGUOW: -2147168238, 
    XACT_E_XTIONEXISTS: -2147168237, 
    XACT_E_NOIMPORTOBJECT: -2147168236, 
    XACT_E_INVALIDCOOKIE: -2147168235, 
    XACT_E_INDOUBT: -2147168234, 
    XACT_E_NOTIMEOUT: -2147168233, 
    XACT_E_ALREADYINPROGRESS: -2147168232, 
    XACT_E_ABORTED: -2147168231, 
    XACT_E_LOGFULL: -2147168230, 
    XACT_E_TMNOTAVAILABLE: -2147168229, 
    XACT_E_CONNECTION_DOWN: -2147168228, 
    XACT_E_CONNECTION_DENIED: -2147168227, 
    XACT_E_REENLISTTIMEOUT: -2147168226, 
    XACT_E_TIP_CONNECT_FAILED: -2147168225, 
    XACT_E_TIP_PROTOCOL_ERROR: -2147168224, 
    XACT_E_TIP_PULL_FAILED: -2147168223, 
    XACT_E_LAST: -2147168222, 
    XACT_E_DEST_TMNOTAVAILABLE: -2147168222, 
    XACT_E_CLERKNOTFOUND: -2147168128, 
    XACT_E_CLERKEXISTS: -2147168127, 
    XACT_E_RECOVERYINPROGRESS: -2147168126, 
    XACT_E_TRANSACTIONCLOSED: -2147168125, 
    XACT_E_INVALIDLSN: -2147168124, 
    XACT_E_REPLAYREQUEST: -2147168123, 
    E_ACCESSDENIED: -2147024891, 
    E_HANDLE: -2147024890, 
    E_OUTOFMEMORY: -2147024882, 
    E_INVALIDARG: -2147024809, 
    S_OK: 0, 
    S_FALSE: 1, 
    STG_S_CONVERTED: 197120, 
    STG_S_BLOCK: 197121, 
    STG_S_RETRYNOW: 197122, 
    STG_S_MONITORING: 197123, 
    DB_S_ROWLIMITEXCEEDED: 265920, 
    DB_S_COLUMNTYPEMISMATCH: 265921, 
    DB_S_TYPEINFOOVERRIDDEN: 265922, 
    DB_S_BOOKMARKSKIPPED: 265923, 
    DB_S_NONEXTROWSET: 265925, 
    DB_S_ENDOFROWSET: 265926, 
    DB_S_COMMANDREEXECUTED: 265927, 
    DB_S_BUFFERFULL: 265928, 
    DB_S_NORESULT: 265929, 
    DB_S_CANTRELEASE: 265930, 
    DB_S_GOALCHANGED: 265931, 
    DB_S_UNWANTEDOPERATION: 265932, 
    DB_S_DIALECTIGNORED: 265933, 
    DB_S_UNWANTEDPHASE: 265934, 
    DB_S_UNWANTEDREASON: 265935, 
    DB_S_ASYNCHRONOUS: 265936, 
    DB_S_COLUMNSCHANGED: 265937, 
    DB_S_ERRORSRETURNED: 265938, 
    DB_S_BADROWHANDLE: 265939, 
    DB_S_DELETEDROW: 265940, 
    DB_S_TOOMANYCHANGES: 265941, 
    DB_S_STOPLIMITREACHED: 265942, 
    DB_S_NOTSINGLETON: 265943, 
    DB_S_LOCKUPGRADED: 265944, 
    DB_S_PROPERTIESCHANGED: 265945, 
    DB_S_ERRORSOCCURRED: 265946, 
    DB_S_PARAMUNAVAILABLE: 265947, 
    DB_S_MULTIPLECHANGES: 265948, 
    DB_S_NOROWSPECIFICCOLUMNS: 265949, 
    XACT_S_ASYNC: 315392, 
    XACT_S_FIRST: 315392, 
    XACT_S_DEFECT: 315393, 
    XACT_S_REOLEDBNLY: 315394, 
    XACT_S_SOMENORETAIN: 315395, 
    XACT_S_OKINFORM: 315396, 
    XACT_S_MADECHANGESCONTENT: 315397, 
    XACT_S_MADECHANGESINFORM: 315398, 
    XACT_S_ALLNORETAIN: 315399, 
    XACT_S_ABORTING: 315400, 
    XACT_S_LAST: 315401, 
    XACT_S_SINGLEPHASE: 315401, 
  }
);

/* class System.Data.OleDb.OleDbInfoMessageEventArgs */ 

(function OleDbInfoMessageEventArgs$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.OleDb.OleDbInfoMessageEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbException"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "exception", $asm11.TypeRef("System.Data.OleDb.OleDbException"));

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.OleDb.OleDbErrorCollection"));

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "Source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OleDb.OleDbInfoMessageEventHandler */ 

JSIL.MakeDelegate("System.Data.OleDb.OleDbInfoMessageEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.OleDb.OleDbInfoMessageEventArgs")]));

/* enum System.Data.OleDb.OleDbLiteral */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbLiteral", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    Binary_Literal: 1, 
    Catalog_Name: 2, 
    Catalog_Separator: 3, 
    Char_Literal: 4, 
    Column_Alias: 5, 
    Column_Name: 6, 
    Correlation_Name: 7, 
    Cursor_Name: 8, 
    Escape_Percent_Prefix: 9, 
    Escape_Underscore_Prefix: 10, 
    Index_Name: 11, 
    Like_Percent: 12, 
    Like_Underscore: 13, 
    Procedure_Name: 14, 
    Quote_Prefix: 15, 
    Schema_Name: 16, 
    Table_Name: 17, 
    Text_Command: 18, 
    User_Name: 19, 
    View_Name: 20, 
    Cube_Name: 21, 
    Dimension_Name: 22, 
    Hierarchy_Name: 23, 
    Level_Name: 24, 
    Member_Name: 25, 
    Property_Name: 26, 
    Schema_Separator: 27, 
    Quote_Suffix: 28, 
    Escape_Percent_Suffix: 29, 
    Escape_Underscore_Suffix: 30, 
  }
);

/* class System.Data.OleDb.OleDbMetaDataCollectionNames */ 

(function OleDbMetaDataCollectionNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.OleDb.OleDbMetaDataCollectionNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Catalogs", $.String, "Catalogs");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Collations", $.String, "Collations");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Columns", $.String, "Columns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Indexes", $.String, "Indexes");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedures", $.String, "Procedures");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcedureColumns", $.String, "ProcedureColumns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcedureParameters", $.String, "ProcedureParameters");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tables", $.String, "Tables");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Views", $.String, "Views");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbMetaDataColumnNames */ 

(function OleDbMetaDataColumnNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.OleDb.OleDbMetaDataColumnNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanFalseLiteral", $.String, "BooleanFalseLiteral");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanTrueLiteral", $.String, "BooleanTrueLiteral");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NativeDataType", $.String, "NativeDataType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DateTimeDigits", $.String, "DateTimeDigits");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbMetaDataFactory */ 

(function OleDbMetaDataFactory$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), 
      Name: "System.Data.OleDb.OleDbMetaDataFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.SchemaSupport")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRegularExpression", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourceInformationTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnection"), $asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypesTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReservedWordsTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIdentifierCase", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.OleDb.OleDbConnection")
        ])
    );

    $.Constant({Static:true , Public:false}, "_collectionName", $.String, "CollectionName");

    $.Constant({Static:true , Public:false}, "_populationMechanism", $.String, "PopulationMechanism");

    $.Constant({Static:true , Public:false}, "_prepareCollection", $.String, "PrepareCollection");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaMapping", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbMetaDataFactory+SchemaRowsetName")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.OleDbMetaDataFactory+SchemaRowsetName */ 

(function SchemaRowsetName$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.OleDbMetaDataFactory+SchemaRowsetName", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaRowset", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbParameter */ 

(function OleDbParameter$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameter"), 
      Name: "System.Data.OleDb.OleDbParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Boolean, $.Byte, 
          $.Byte, $.String, 
          $asm11.TypeRef("System.Data.DataRowVersion"), $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Byte, $.Byte, 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Boolean, $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "BindParameter", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm11.TypeRef("System.Data.OleDb.Bindings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelper", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelperCore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CoerceValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm11.TypeRef("System.Data.OleDb.NativeDBType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareExchangeParent", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChangeID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OleDbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrecisionInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScaleInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumnNullMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBindDirection", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBindFlags", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBindType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.NativeDBType"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParameterComputed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyTypeChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetOleDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CoercedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OleDbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ParameterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrecisionInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScaleInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumnNullMapping", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeOleDbType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializePrecision", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecision", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecisionCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScale", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScaleCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSize", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSizeCore", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_metaType", $asm11.TypeRef("System.Data.OleDb.NativeDBType"));

    $.Field({Static:false, Public:false}, "_changeID", $.Int32);

    $.Field({Static:false, Public:false}, "_parameterName", $.String);

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_hasScale", $.Boolean);

    $.Field({Static:false, Public:false}, "_coerceMetaType", $asm11.TypeRef("System.Data.OleDb.NativeDBType"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Field({Static:false, Public:false}, "_parent", $.Object);

    $.Field({Static:false, Public:false}, "_direction", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceColumn", $.String);

    $.Field({Static:false, Public:false}, "_sourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Field({Static:false, Public:false}, "_sourceColumnNullMapping", $.Boolean);

    $.Field({Static:false, Public:false}, "_isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValue", $.Object);

    $.Property({Static:false, Public:false}, "ChangeID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:true }, "OleDbType", $asm11.TypeRef("System.Data.OleDb.OleDbType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OleDbParameter_OleDbType"]; })
      .Attribute($asm11.TypeRef("System.Data.Common.DbProviderSpecificTypePropertyAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_ParameterName"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Precision", $.Byte)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Precision"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; });

    $.Property({Static:false, Public:false}, "PrecisionInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Scale", $.Byte)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Scale"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; });

    $.Property({Static:false, Public:false}, "ScaleInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Value"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.StringConverter.__Type__]; });

    $.Property({Static:false, Public:false}, "CoercedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Direction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "Offset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Size"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumn"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumnNullMapping", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceVersion"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.OleDb.OleDbParameter_OleDbParameterConverter.__Type__]; });

})();

/* class System.Data.OleDb.OleDbParameter+OleDbParameterConverter */ 

(function OleDbParameterConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.OleDb.OleDbParameter+OleDbParameterConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbParameterCollection */ 

(function OleDbParameterCollection$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameterCollection"), 
      Name: "System.Data.OleDb.OleDbParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddWithValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChangeID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.IEnumerable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_changeID", $.Int32);

    $.Field({Static:true , Public:false}, "ItemType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm11.System.Data.OleDb.OleDbParameter.__Type__;
      });

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]));

    $.Property({Static:false, Public:false}, "ChangeID", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.OleDb.OleDbParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.OleDb.OleDbParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "InnerList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; });

})();

/* class System.Data.OleDb.OleDbPermission */ 

(function OleDbPermission$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermission"), 
      Name: "System.Data.OleDb.OleDbPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OleDbPermission() has been deprecated.  Use the OleDbPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Permissions.PermissionState"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OleDbPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OleDbPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbPermissionAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_providerRestriction", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_providers", $.String);

    $.Property({Static:false, Public:true }, "Provider", $.String)
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbPermissionAttribute */ 

(function OleDbPermissionAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermissionAttribute"), 
      Name: "System.Data.OleDb.OleDbPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_providers", $.String);

    $.Property({Static:false, Public:true }, "Provider", $.String)
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Struct"
      )]; });

})();

/* class System.Data.OleDb.OleDbPropertySetGuid */ 

(function OleDbPropertySetGuid$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbPropertySetGuid", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Column", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DataSource", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DataSourceInfo", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DBInit", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Index", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "PropertiesInError", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Rowset", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Session", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Stream", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Table", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Trustee", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "View", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DataSourceAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DataSourceInfoAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DBInitAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ColumnAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "IndexAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RowsetAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SessionAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StreamAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TableAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TrusteeAll", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ViewAll", $asm07.TypeRef("System.Guid"));


    function OleDbPropertySetGuid__cctor () {
      $thisType.Column = new $asm07.System.Guid();
      $thisType.DataSource = new $asm07.System.Guid();
      $thisType.DataSourceInfo = new $asm07.System.Guid();
      $thisType.DBInit = new $asm07.System.Guid();
      $thisType.Index = new $asm07.System.Guid();
      $thisType.PropertiesInError = new $asm07.System.Guid();
      $thisType.Rowset = new $asm07.System.Guid();
      $thisType.Session = new $asm07.System.Guid();
      $thisType.Stream = new $asm07.System.Guid();
      $thisType.Table = new $asm07.System.Guid();
      $thisType.Trustee = new $asm07.System.Guid();
      $thisType.View = new $asm07.System.Guid();
      $thisType.DataSourceAll = new $asm07.System.Guid();
      $thisType.DataSourceInfoAll = new $asm07.System.Guid();
      $thisType.DBInitAll = new $asm07.System.Guid();
      $thisType.ColumnAll = new $asm07.System.Guid();
      $thisType.ConstraintAll = new $asm07.System.Guid();
      $thisType.IndexAll = new $asm07.System.Guid();
      $thisType.RowsetAll = new $asm07.System.Guid();
      $thisType.SessionAll = new $asm07.System.Guid();
      $thisType.StreamAll = new $asm07.System.Guid();
      $thisType.TableAll = new $asm07.System.Guid();
      $thisType.TrusteeAll = new $asm07.System.Guid();
      $thisType.ViewAll = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OleDbPropertySetGuid__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.OleDbPropertyStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbPropertyStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ok: 0, 
    NotSupported: 1, 
    BadValue: 2, 
    BadOption: 3, 
    BadColumn: 4, 
    NotAllSettable: 5, 
    NotSettable: 6, 
    NotSet: 7, 
    Conflicting: 8, 
    NotAvailable: 9, 
  }
);

/* class System.Data.OleDb.OleDbReferenceCollection */ 

(function OleDbReferenceCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"), 
      Name: "System.Data.OleDb.OleDbReferenceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NotifyItem", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Constant({Static:true , Public:false}, "Closing", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "Canceling", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "CommandTag", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DataReaderTag", $.Int32, 2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbRowUpdatedEventArgs */ 

(function OleDbRowUpdatedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), 
      Name: "System.Data.OleDb.OleDbRowUpdatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OleDb.OleDbRowUpdatedEventHandler */ 

JSIL.MakeDelegate("System.Data.OleDb.OleDbRowUpdatedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatedEventArgs")]));

/* class System.Data.OleDb.OleDbRowUpdatingEventArgs */ 

(function OleDbRowUpdatingEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), 
      Name: "System.Data.OleDb.OleDbRowUpdatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_BaseCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.OleDb.OleDbCommand"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCommand", $asm11.TypeRef("System.Data.IDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OleDb.OleDbRowUpdatingEventHandler */ 

JSIL.MakeDelegate("System.Data.OleDb.OleDbRowUpdatingEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.OleDb.OleDbRowUpdatingEventArgs")]));

/* class System.Data.OleDb.OleDbSchemaGuid */ 

(function OleDbSchemaGuid$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbSchemaGuid", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTextFromValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Guid")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tables_Info", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Trustee", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Assertions", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Catalogs", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Character_Sets", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Collations", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Columns", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Check_Constraints", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Constraint_Column_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Constraint_Table_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Key_Column_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Referential_Constraints", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Table_Constraints", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Column_Domain_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Indexes", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Column_Privileges", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Table_Privileges", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Usage_Privileges", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedures", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Schemata", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Sql_Languages", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Statistics", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tables", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Translations", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Provider_Types", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Views", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "View_Column_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "View_Table_Usage", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedure_Parameters", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Foreign_Keys", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Primary_Keys", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedure_Columns", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Table_Statistics", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Check_Constraints_By_Table", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemaGuids", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DbInfoKeywords", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DbInfoLiterals", $asm07.TypeRef("System.Guid"));


    function OleDbSchemaGuid__cctor () {
      $thisType.Tables_Info = new $asm07.System.Guid();
      $thisType.Trustee = new $asm07.System.Guid();
      $thisType.Assertions = new $asm07.System.Guid();
      $thisType.Catalogs = new $asm07.System.Guid();
      $thisType.Character_Sets = new $asm07.System.Guid();
      $thisType.Collations = new $asm07.System.Guid();
      $thisType.Columns = new $asm07.System.Guid();
      $thisType.Check_Constraints = new $asm07.System.Guid();
      $thisType.Constraint_Column_Usage = new $asm07.System.Guid();
      $thisType.Constraint_Table_Usage = new $asm07.System.Guid();
      $thisType.Key_Column_Usage = new $asm07.System.Guid();
      $thisType.Referential_Constraints = new $asm07.System.Guid();
      $thisType.Table_Constraints = new $asm07.System.Guid();
      $thisType.Column_Domain_Usage = new $asm07.System.Guid();
      $thisType.Indexes = new $asm07.System.Guid();
      $thisType.Column_Privileges = new $asm07.System.Guid();
      $thisType.Table_Privileges = new $asm07.System.Guid();
      $thisType.Usage_Privileges = new $asm07.System.Guid();
      $thisType.Procedures = new $asm07.System.Guid();
      $thisType.Schemata = new $asm07.System.Guid();
      $thisType.Sql_Languages = new $asm07.System.Guid();
      $thisType.Statistics = new $asm07.System.Guid();
      $thisType.Tables = new $asm07.System.Guid();
      $thisType.Translations = new $asm07.System.Guid();
      $thisType.Provider_Types = new $asm07.System.Guid();
      $thisType.Views = new $asm07.System.Guid();
      $thisType.View_Column_Usage = new $asm07.System.Guid();
      $thisType.View_Table_Usage = new $asm07.System.Guid();
      $thisType.Procedure_Parameters = new $asm07.System.Guid();
      $thisType.Foreign_Keys = new $asm07.System.Guid();
      $thisType.Primary_Keys = new $asm07.System.Guid();
      $thisType.Procedure_Columns = new $asm07.System.Guid();
      $thisType.Table_Statistics = new $asm07.System.Guid();
      $thisType.Check_Constraints_By_Table = new $asm07.System.Guid();
      $thisType.SchemaGuids = new $asm07.System.Guid();
      $thisType.DbInfoKeywords = new $asm07.System.Guid();
      $thisType.DbInfoLiterals = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OleDbSchemaGuid__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.DBBindStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.DBBindStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OK: 0, 
    BADORDINAL: 1, 
    UNSUPPORTEDCONVERSION: 2, 
    BADBINDINFO: 3, 
    BADSTORAGEFLAGS: 4, 
    NOINTERFACE: 5, 
    MULTIPLESTORAGE: 6, 
  }
);

/* struct System.Data.OleDb.tagDBPARAMBINDINFO */ 

(function tagDBPARAMBINDINFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.tagDBPARAMBINDINFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pwszDataSourceType", $.IntPtr);

    $.Field({Static:false, Public:false}, "pwszName", $.IntPtr);

    $.Field({Static:false, Public:false}, "ulParamSize", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwFlags", $.Int32);

    $.Field({Static:false, Public:false}, "bPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "bScale", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBBINDING */ 

(function tagDBBINDING$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBBINDING", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "iOrdinal", $.IntPtr);

    $.Field({Static:false, Public:false}, "obValue", $.IntPtr);

    $.Field({Static:false, Public:false}, "obLength", $.IntPtr);

    $.Field({Static:false, Public:false}, "obStatus", $.IntPtr);

    $.Field({Static:false, Public:false}, "pTypeInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "pObject", $.IntPtr);

    $.Field({Static:false, Public:false}, "pBindExt", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwPart", $.Int32);

    $.Field({Static:false, Public:false}, "dwMemOwner", $.Int32);

    $.Field({Static:false, Public:false}, "eParamIO", $.Int32);

    $.Field({Static:false, Public:false}, "cbMaxLen", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwFlags", $.Int32);

    $.Field({Static:false, Public:false}, "wType", $.Int16);

    $.Field({Static:false, Public:false}, "bPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "bScale", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.tagDBCOLUMNACCESS */ 

(function tagDBCOLUMNACCESS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.tagDBCOLUMNACCESS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "pData", $.IntPtr);

    $.Field({Static:false, Public:false}, "columnid", $asm11.TypeRef("System.Data.OleDb.tagDBIDX"));

    $.Field({Static:false, Public:false}, "cbDataLen", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwStatus", $.Int32);

    $.Field({Static:false, Public:false}, "cbMaxLen", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwReserved", $.IntPtr);

    $.Field({Static:false, Public:false}, "wType", $.Int16);

    $.Field({Static:false, Public:false}, "bPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "bScale", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.tagDBIDX */ 

(function tagDBIDX$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.tagDBIDX", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "uGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "eKind", $.Int32);

    $.Field({Static:false, Public:false}, "ulPropid", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBID */ 

(function tagDBID$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBID", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "uGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "eKind", $.Int32);

    $.Field({Static:false, Public:false}, "ulPropid", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBLITERALINFO */ 

(function tagDBLITERALINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBLITERALINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "pwszLiteralValue", $.String);

    $.Field({Static:false, Public:false}, "pwszInvalidChars", $.String);

    $.Field({Static:false, Public:false}, "pwszInvalidStartingChars", $.String);

    $.Field({Static:false, Public:false}, "it", $.Int32);

    $.Field({Static:false, Public:false}, "fSupported", $.Int32);

    $.Field({Static:false, Public:false}, "cchMaxLen", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBPROPSET */ 

(function tagDBPROPSET$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBPROPSET", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.Field({Static:false, Public:false}, "rgProperties", $.IntPtr);

    $.Field({Static:false, Public:false}, "cProperties", $.Int32);

    $.Field({Static:false, Public:false}, "guidPropertySet", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBPROP */ 

(function tagDBPROP$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBPROP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "dwPropertyID", $.Int32);

    $.Field({Static:false, Public:false}, "dwOptions", $.Int32);

    $.Field({Static:false, Public:false}, "dwStatus", $asm11.TypeRef("System.Data.OleDb.OleDbPropertyStatus"));

    $.Field({Static:false, Public:false}, "columnid", $asm11.TypeRef("System.Data.OleDb.tagDBIDX"));

    $.Field({Static:false, Public:false}, "vValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBPARAMS */ 

(function tagDBPARAMS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBPARAMS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "pData", $.IntPtr);

    $.Field({Static:false, Public:false}, "cParamSets", $.Int32);

    $.Field({Static:false, Public:false}, "hAccessor", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBCOLUMNINFO */ 

(function tagDBCOLUMNINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBCOLUMNINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "pwszName", $.String);

    $.Field({Static:false, Public:false}, "pTypeInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "iOrdinal", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwFlags", $.Int32);

    $.Field({Static:false, Public:false}, "ulColumnSize", $.IntPtr);

    $.Field({Static:false, Public:false}, "wType", $.Int16);

    $.Field({Static:false, Public:false}, "bPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "bScale", $.Byte);

    $.Field({Static:false, Public:false}, "columnid", $asm11.TypeRef("System.Data.OleDb.tagDBIDX"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBPROPINFOSET */ 

(function tagDBPROPINFOSET$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBPROPINFOSET", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "rgPropertyInfos", $.IntPtr);

    $.Field({Static:false, Public:false}, "cPropertyInfos", $.Int32);

    $.Field({Static:false, Public:false}, "guidPropertySet", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.tagDBPROPINFO */ 

(function tagDBPROPINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.tagDBPROPINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "pwszDescription", $.String);

    $.Field({Static:false, Public:false}, "dwPropertyID", $.Int32);

    $.Field({Static:false, Public:false}, "dwFlags", $.Int32);

    $.Field({Static:false, Public:false}, "vtType", $.Int16);

    $.Field({Static:false, Public:false}, "vValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.tagDBPROPIDSET */ 

(function tagDBPROPIDSET$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.tagDBPROPIDSET", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "rgPropertyIDs", $.IntPtr);

    $.Field({Static:false, Public:false}, "cPropertyIDs", $.Int32);

    $.Field({Static:false, Public:false}, "guidPropertySet", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbTransaction */ 

(function OleDbTransaction$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbTransaction"), 
      Name: "System.Data.OleDb.OleDbTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.OleDb.OleDbConnection"), $.Type, 
          $asm11.TypeRef("System.Data.IsolationLevel")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Begin", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginInternal", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ITransactionLocal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CommitInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeManaged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResults", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionLast", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionUpdate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parentTransaction", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Field({Static:false, Public:false}, "_nestedTransaction", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_transaction", $asm11.TypeRef("System.Data.OleDb.OleDbTransaction+WrappedTransaction"));

    $.Field({Static:false, Public:false}, "_parentConnection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.OleDb.OleDbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Parent", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.WrappedIUnknown */ 

(function WrappedIUnknown$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.ProviderBase.WrappedIUnknown", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ComWrapper", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbTransaction+WrappedTransaction */ 

(function WrappedTransaction$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.WrappedIUnknown"), 
      Name: "System.Data.OleDb.OleDbTransaction+WrappedTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ITransactionLocal"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbHResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MustComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_mustComplete", $.Boolean);

    $.Property({Static:false, Public:false}, "MustComplete", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.OleDbType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.OleDbType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    SmallInt: 2, 
    Integer: 3, 
    Single: 4, 
    Double: 5, 
    Currency: 6, 
    Date: 7, 
    BSTR: 8, 
    IDispatch: 9, 
    Error: 10, 
    Boolean: 11, 
    Variant: 12, 
    IUnknown: 13, 
    Decimal: 14, 
    TinyInt: 16, 
    UnsignedTinyInt: 17, 
    UnsignedSmallInt: 18, 
    UnsignedInt: 19, 
    BigInt: 20, 
    UnsignedBigInt: 21, 
    Filetime: 64, 
    Guid: 72, 
    Binary: 128, 
    Char: 129, 
    WChar: 130, 
    Numeric: 131, 
    DBDate: 133, 
    DBTime: 134, 
    DBTimeStamp: 135, 
    PropVariant: 138, 
    VarNumeric: 139, 
    VarChar: 200, 
    LongVarChar: 201, 
    VarWChar: 202, 
    LongVarWChar: 203, 
    VarBinary: 204, 
    LongVarBinary: 205, 
  }
);

/* class System.Data.OleDb.OleDbServicesWrapper */ 

(function OleDbServicesWrapper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.WrappedIUnknown"), 
      Name: "System.Data.OleDb.OleDbServicesWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSource", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.DataSourceWrapper")])])
    );

    $.Field({Static:false, Public:false}, "DangerousIDataInitializeGetDataSource", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDataInitializeGetDataSource"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.DataSourceWrapper */ 

(function DataSourceWrapper$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.WrappedIUnknown"), 
      Name: "System.Data.OleDb.DataSourceWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.IDBInfoWrapper"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBProperties", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.IDBPropertiesWrapper"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeAndCreateSession", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.SessionWrapper")])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.SessionWrapper */ 

(function SessionWrapper$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.WrappedIUnknown"), 
      Name: "System.Data.OleDb.SessionWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IDBSchemaRowset", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.IDBSchemaRowsetWrapper"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOpenRowset", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.IOpenRowsetWrapper"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ITransactionJoin", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.ITransactionJoinWrapper"), [$asm11.TypeRef("System.Data.OleDb.OleDbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryInterfaceIDBCreateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIDBCreateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.OleDb.OleDbConnectionString"))
    );

    $.Field({Static:false, Public:false}, "DangerousIDBCreateCommandCreateCommand", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBCreateCommandCreateCommand"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.IDBInfoWrapper */ 

(function IDBInfoWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.IDBInfoWrapper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBInfo"))
    );

    $.Field({Static:false, Public:false}, "_unknown", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBInfo"));

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBInfo"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.IDBPropertiesWrapper */ 

(function IDBPropertiesWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.IDBPropertiesWrapper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBProperties"))
    );

    $.Field({Static:false, Public:false}, "_unknown", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBProperties"));

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBProperties"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.IDBSchemaRowsetWrapper */ 

(function IDBSchemaRowsetWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.IDBSchemaRowsetWrapper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset"))
    );

    $.Field({Static:false, Public:false}, "_unknown", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset"));

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.IOpenRowsetWrapper */ 

(function IOpenRowsetWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.IOpenRowsetWrapper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IOpenRowset"))
    );

    $.Field({Static:false, Public:false}, "_unknown", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IOpenRowset"));

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IOpenRowset"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OleDb.ITransactionJoinWrapper */ 

(function ITransactionJoinWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OleDb.ITransactionJoinWrapper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.NativeMethods+ITransactionJoin"))
    );

    $.Field({Static:false, Public:false}, "_unknown", $.Object);

    $.Field({Static:false, Public:false}, "_value", $asm11.TypeRef("System.Data.Common.NativeMethods+ITransactionJoin"));

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Data.Common.NativeMethods+ITransactionJoin"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OleDb.DBStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OleDb.DBStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    S_OK: 0, 
    E_BADACCESSOR: 1, 
    E_CANTCONVERTVALUE: 2, 
    S_ISNULL: 3, 
    S_TRUNCATED: 4, 
    E_SIGNMISMATCH: 5, 
    E_DATAOVERFLOW: 6, 
    E_CANTCREATE: 7, 
    E_UNAVAILABLE: 8, 
    E_PERMISSIONDENIED: 9, 
    E_INTEGRITYVIOLATION: 10, 
    E_SCHEMAVIOLATION: 11, 
    E_BADSTATUS: 12, 
    S_DEFAULT: 13, 
    S_CELLEMPTY: 14, 
    S_IGNORE: 15, 
    E_DOESNOTEXIST: 16, 
    E_INVALIDURL: 17, 
    E_RESOURCELOCKED: 18, 
    E_RESOURCEEXISTS: 19, 
    E_CANNOTCOMPLETE: 20, 
    E_VOLUMENOTFOUND: 21, 
    E_OUTOFSPACE: 22, 
    S_CANNOTDELETESOURCE: 23, 
    E_READONLY: 24, 
    E_RESOURCEOUTOFSCOPE: 25, 
    S_ALREADYEXISTS: 26, 
    E_CANCELED: 27, 
    E_NOTCOLLECTION: 28, 
    S_ROWSETCOLUMN: 29, 
  }
);

/* class System.Data.OleDb.NativeDBType */ 

(function NativeDBType$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.NativeDBType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Int32, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.OleDb.OleDbType"), $.Int16, 
          $.String, $asm07.TypeRef("System.Type"), 
          $.Int16, $asm11.TypeRef("System.Data.DbType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDataType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.OleDb.OleDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDbType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDBType", 
      new JSIL.MethodSignature($.Type, [
          $.Int16, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromSystemType", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVariableLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasHighBit", 
      new JSIL.MethodSignature($.Boolean, [$.Int16])
    );

    $.Constant({Static:true , Public:false}, "EMPTY", $.Int16, 0);

    $.Constant({Static:true , Public:false}, "NULL", $.Int16, 1);

    $.Constant({Static:true , Public:false}, "I2", $.Int16, 2);

    $.Constant({Static:true , Public:false}, "I4", $.Int16, 3);

    $.Constant({Static:true , Public:false}, "R4", $.Int16, 4);

    $.Constant({Static:true , Public:false}, "R8", $.Int16, 5);

    $.Constant({Static:true , Public:false}, "CY", $.Int16, 6);

    $.Constant({Static:true , Public:false}, "DATE", $.Int16, 7);

    $.Constant({Static:true , Public:false}, "BSTR", $.Int16, 8);

    $.Constant({Static:true , Public:false}, "IDISPATCH", $.Int16, 9);

    $.Constant({Static:true , Public:false}, "ERROR", $.Int16, 10);

    $.Constant({Static:true , Public:false}, "BOOL", $.Int16, 11);

    $.Constant({Static:true , Public:false}, "VARIANT", $.Int16, 12);

    $.Constant({Static:true , Public:false}, "IUNKNOWN", $.Int16, 13);

    $.Constant({Static:true , Public:false}, "DECIMAL", $.Int16, 14);

    $.Constant({Static:true , Public:false}, "I1", $.Int16, 16);

    $.Constant({Static:true , Public:false}, "UI1", $.Int16, 17);

    $.Constant({Static:true , Public:false}, "UI2", $.Int16, 18);

    $.Constant({Static:true , Public:false}, "UI4", $.Int16, 19);

    $.Constant({Static:true , Public:false}, "I8", $.Int16, 20);

    $.Constant({Static:true , Public:false}, "UI8", $.Int16, 21);

    $.Constant({Static:true , Public:false}, "FILETIME", $.Int16, 64);

    $.Constant({Static:true , Public:false}, "DBUTCDATETIME", $.Int16, 65);

    $.Constant({Static:true , Public:false}, "DBTIME_EX", $.Int16, 66);

    $.Constant({Static:true , Public:false}, "GUID", $.Int16, 72);

    $.Constant({Static:true , Public:false}, "BYTES", $.Int16, 128);

    $.Constant({Static:true , Public:false}, "STR", $.Int16, 129);

    $.Constant({Static:true , Public:false}, "WSTR", $.Int16, 130);

    $.Constant({Static:true , Public:false}, "NUMERIC", $.Int16, 131);

    $.Constant({Static:true , Public:false}, "UDT", $.Int16, 132);

    $.Constant({Static:true , Public:false}, "DBDATE", $.Int16, 133);

    $.Constant({Static:true , Public:false}, "DBTIME", $.Int16, 134);

    $.Constant({Static:true , Public:false}, "DBTIMESTAMP", $.Int16, 135);

    $.Constant({Static:true , Public:false}, "HCHAPTER", $.Int16, 136);

    $.Constant({Static:true , Public:false}, "PROPVARIANT", $.Int16, 138);

    $.Constant({Static:true , Public:false}, "VARNUMERIC", $.Int16, 139);

    $.Constant({Static:true , Public:false}, "XML", $.Int16, 141);

    $.Constant({Static:true , Public:false}, "VECTOR", $.Int16, 4096);

    $.Constant({Static:true , Public:false}, "ARRAY", $.Int16, 8192);

    $.Constant({Static:true , Public:false}, "BYREF", $.Int16, 16384);

    $.Constant({Static:true , Public:false}, "RESERVED", $.Int16, -32768);

    $.Constant({Static:true , Public:false}, "HighMask", $.Int16, -4096);

    $.Constant({Static:true , Public:false}, "S_BINARY", $.String, "DBTYPE_BINARY");

    $.Constant({Static:true , Public:false}, "S_BOOL", $.String, "DBTYPE_BOOL");

    $.Constant({Static:true , Public:false}, "S_BSTR", $.String, "DBTYPE_BSTR");

    $.Constant({Static:true , Public:false}, "S_CHAR", $.String, "DBTYPE_CHAR");

    $.Constant({Static:true , Public:false}, "S_CY", $.String, "DBTYPE_CY");

    $.Constant({Static:true , Public:false}, "S_DATE", $.String, "DBTYPE_DATE");

    $.Constant({Static:true , Public:false}, "S_DBDATE", $.String, "DBTYPE_DBDATE");

    $.Constant({Static:true , Public:false}, "S_DBTIME", $.String, "DBTYPE_DBTIME");

    $.Constant({Static:true , Public:false}, "S_DBTIMESTAMP", $.String, "DBTYPE_DBTIMESTAMP");

    $.Constant({Static:true , Public:false}, "S_DECIMAL", $.String, "DBTYPE_DECIMAL");

    $.Constant({Static:true , Public:false}, "S_ERROR", $.String, "DBTYPE_ERROR");

    $.Constant({Static:true , Public:false}, "S_FILETIME", $.String, "DBTYPE_FILETIME");

    $.Constant({Static:true , Public:false}, "S_GUID", $.String, "DBTYPE_GUID");

    $.Constant({Static:true , Public:false}, "S_I1", $.String, "DBTYPE_I1");

    $.Constant({Static:true , Public:false}, "S_I2", $.String, "DBTYPE_I2");

    $.Constant({Static:true , Public:false}, "S_I4", $.String, "DBTYPE_I4");

    $.Constant({Static:true , Public:false}, "S_I8", $.String, "DBTYPE_I8");

    $.Constant({Static:true , Public:false}, "S_IDISPATCH", $.String, "DBTYPE_IDISPATCH");

    $.Constant({Static:true , Public:false}, "S_IUNKNOWN", $.String, "DBTYPE_IUNKNOWN");

    $.Constant({Static:true , Public:false}, "S_LONGVARBINARY", $.String, "DBTYPE_LONGVARBINARY");

    $.Constant({Static:true , Public:false}, "S_LONGVARCHAR", $.String, "DBTYPE_LONGVARCHAR");

    $.Constant({Static:true , Public:false}, "S_NUMERIC", $.String, "DBTYPE_NUMERIC");

    $.Constant({Static:true , Public:false}, "S_PROPVARIANT", $.String, "DBTYPE_PROPVARIANT");

    $.Constant({Static:true , Public:false}, "S_R4", $.String, "DBTYPE_R4");

    $.Constant({Static:true , Public:false}, "S_R8", $.String, "DBTYPE_R8");

    $.Constant({Static:true , Public:false}, "S_UDT", $.String, "DBTYPE_UDT");

    $.Constant({Static:true , Public:false}, "S_UI1", $.String, "DBTYPE_UI1");

    $.Constant({Static:true , Public:false}, "S_UI2", $.String, "DBTYPE_UI2");

    $.Constant({Static:true , Public:false}, "S_UI4", $.String, "DBTYPE_UI4");

    $.Constant({Static:true , Public:false}, "S_UI8", $.String, "DBTYPE_UI8");

    $.Constant({Static:true , Public:false}, "S_VARBINARY", $.String, "DBTYPE_VARBINARY");

    $.Constant({Static:true , Public:false}, "S_VARCHAR", $.String, "DBTYPE_VARCHAR");

    $.Constant({Static:true , Public:false}, "S_VARIANT", $.String, "DBTYPE_VARIANT");

    $.Constant({Static:true , Public:false}, "S_VARNUMERIC", $.String, "DBTYPE_VARNUMERIC");

    $.Constant({Static:true , Public:false}, "S_WCHAR", $.String, "DBTYPE_WCHAR");

    $.Constant({Static:true , Public:false}, "S_WVARCHAR", $.String, "DBTYPE_WVARCHAR");

    $.Constant({Static:true , Public:false}, "S_WLONGVARCHAR", $.String, "DBTYPE_WLONGVARCHAR");

    $.Constant({Static:true , Public:false}, "S_XML", $.String, "DBTYPE_XML");

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Binary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Boolean", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_BSTR", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Char", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Currency", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Date", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_DBDate", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_DBTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_DBTimeStamp", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Decimal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Error", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Filetime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Guid", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_TinyInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_SmallInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Integer", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_BigInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_IDispatch", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_IUnknown", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_LongVarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_LongVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Numeric", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_PropVariant", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Single", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Double", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_UnsignedTinyInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_UnsignedSmallInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_UnsignedInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_UnsignedBigInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_VarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_VarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Variant", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_VarNumeric", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_WChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_VarWChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_LongVarWChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Chapter", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Empty", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Xml", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "D_Udt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type, function ($pi) {
        return $pi.D_VarWChar;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaximumDecimalPrecision", $.Byte, function ($pi) {
        return $pi.D_Decimal.maxpre;
      });

    $.Constant({Static:true , Public:false}, "FixedDbPart", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "VarblDbPart", $.Int32, 7);

    $.Field({Static:false, Public:false, ReadOnly:true }, "enumOleDbType", $asm11.TypeRef("System.Data.OleDb.OleDbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "enumDbType", $asm11.TypeRef("System.Data.DbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "dbType", $.Int16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "wType", $.Int16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "dbPart", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isfixed", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "islong", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "maxpre", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "fixlen", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataSourceType", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "dbString", $asm11.TypeRef("System.Data.OleDb.StringMemHandle"));

    $.Property({Static:false, Public:false}, "IsVariableLength", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.ODB */ 

(function ODB$Members () {
  var $, $thisType;
















































  JSIL.MakeStaticClass("System.Data.OleDb.ODB", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AsynchronousNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BadAccessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BadStatus_ParamAcc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.OleDb.DBBindStatus")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BadStatusRowAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32, $asm11.TypeRef("System.Data.OleDb.DBBindStatus")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CantConvertValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidCastException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CantCreate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandParameterStatus", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $asm11.TypeRef("System.Data.OleDb.DBStatus")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandParameterStatus", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandTextNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConversionRequired", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidCastException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DataOverflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DBBindingGetVector", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ELookup", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FailedGetDescription", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FailedGetSource", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Fill_EmptyRecord", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Fill_EmptyRecordSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Fill_NotADODB", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorDescription", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo"), $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GVtUnknown", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDBInfoNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOleDbType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.OleDb.OleDbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidProviderSpecified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRestrictionsDbInfoKeywords", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRestrictionsDbInfoLiteral", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRestrictionsSchemaGuids", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ISourcesRowsetNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MDACNotAvailable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MSDASQLNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoErrorInformation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbException"), [
          $.String, $asm11.TypeRef("System.Data.OleDb.OleDbHResult"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoErrorMessage", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoProviderSpecified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoProviderSupportForParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoProviderSupportForSProcResetParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedSchemaTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Guid"), $asm11.TypeRef("System.Data.OleDb.OleDbConnection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PossiblePromptNotUserInteractive", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropsetSetFailure", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm11.TypeRef("System.Data.OleDb.OleDbPropertyStatus")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropsetSetFailure", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProviderUnavailable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SchemaRowsetsNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SignMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SVtUnknown", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThreadApartmentState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionsNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Unavailable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedStatusValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm11.TypeRef("System.Data.OleDb.DBStatus")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UninitializedParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.OleDb.OleDbType")])
    );

    $.Constant({Static:true , Public:false}, "ADODB_AlreadyClosedError", $.Int32, -2146824584);

    $.Constant({Static:true , Public:false}, "ADODB_NextResultError", $.Int32, -2146825037);

    $.Constant({Static:true , Public:false}, "InternalStateExecuting", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "InternalStateFetching", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "InternalStateClosed", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ExecutedIMultipleResults", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ExecutedIRowset", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ExecutedIRow", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PrepareICommandText", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "InternalStateExecutingNot", $.Int32, -5);

    $.Constant({Static:true , Public:false}, "InternalStateFetchingNot", $.Int32, -9);

    $.Constant({Static:true , Public:false}, "InternalStateConnecting", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "InternalStateOpen", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "LargeDataSize", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "CacheIncrement", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DBRESULTFLAG_DEFAULT", $.IntPtr);

    $.Constant({Static:true , Public:false}, "VARIANT_TRUE", $.Int16, -1);

    $.Constant({Static:true , Public:false}, "VARIANT_FALSE", $.Int16, 0);

    $.Constant({Static:true , Public:false}, "CLSCTX_ALL", $.Int32, 23);

    $.Constant({Static:true , Public:false}, "MaxProgIdLength", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "DBLITERAL_CATALOG_SEPARATOR", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DBLITERAL_QUOTE_PREFIX", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "DBLITERAL_QUOTE_SUFFIX", $.Int32, 28);

    $.Constant({Static:true , Public:false}, "DBLITERAL_SCHEMA_SEPARATOR", $.Int32, 27);

    $.Constant({Static:true , Public:false}, "DBLITERAL_TABLE_NAME", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "DBPROP_ACCESSORDER", $.Int32, 231);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_CACHE_AUTHINFO", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_ENCRYPT_PASSWORD", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_INTEGRATED", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_MASK_PASSWORD", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_PASSWORD", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_PERSIST_ENCRYPTED", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "DBPROP_AUTH_USERID", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "DBPROP_CATALOGLOCATION", $.Int32, 22);

    $.Constant({Static:true , Public:false}, "DBPROP_COMMANDTIMEOUT", $.Int32, 34);

    $.Constant({Static:true , Public:false}, "DBPROP_CONNECTIONSTATUS", $.Int32, 244);

    $.Constant({Static:true , Public:false}, "DBPROP_CURRENTCATALOG", $.Int32, 37);

    $.Constant({Static:true , Public:false}, "DBPROP_DATASOURCENAME", $.Int32, 38);

    $.Constant({Static:true , Public:false}, "DBPROP_DBMSNAME", $.Int32, 40);

    $.Constant({Static:true , Public:false}, "DBPROP_DBMSVER", $.Int32, 41);

    $.Constant({Static:true , Public:false}, "DBPROP_GROUPBY", $.Int32, 44);

    $.Constant({Static:true , Public:false}, "DBPROP_HIDDENCOLUMNS", $.Int32, 258);

    $.Constant({Static:true , Public:false}, "DBPROP_IColumnsRowset", $.Int32, 123);

    $.Constant({Static:true , Public:false}, "DBPROP_IDENTIFIERCASE", $.Int32, 46);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_ASYNCH", $.Int32, 200);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_BINDFLAGS", $.Int32, 270);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_CATALOG", $.Int32, 233);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_DATASOURCE", $.Int32, 59);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_GENERALTIMEOUT", $.Int32, 284);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_HWND", $.Int32, 60);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_IMPERSONATION_LEVEL", $.Int32, 61);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_LCID", $.Int32, 186);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_LOCATION", $.Int32, 62);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_LOCKOWNER", $.Int32, 271);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_MODE", $.Int32, 63);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_OLEDBSERVICES", $.Int32, 248);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_PROMPT", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_PROTECTION_LEVEL", $.Int32, 65);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_PROVIDERSTRING", $.Int32, 160);

    $.Constant({Static:true , Public:false}, "DBPROP_INIT_TIMEOUT", $.Int32, 66);

    $.Constant({Static:true , Public:false}, "DBPROP_IRow", $.Int32, 263);

    $.Constant({Static:true , Public:false}, "DBPROP_MAXROWS", $.Int32, 73);

    $.Constant({Static:true , Public:false}, "DBPROP_MULTIPLERESULTS", $.Int32, 196);

    $.Constant({Static:true , Public:false}, "DBPROP_ORDERBYCOLUNSINSELECT", $.Int32, 85);

    $.Constant({Static:true , Public:false}, "DBPROP_PROVIDERFILENAME", $.Int32, 96);

    $.Constant({Static:true , Public:false}, "DBPROP_QUOTEDIDENTIFIERCASE", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "DBPROP_RESETDATASOURCE", $.Int32, 247);

    $.Constant({Static:true , Public:false}, "DBPROP_SQLSUPPORT", $.Int32, 109);

    $.Constant({Static:true , Public:false}, "DBPROP_UNIQUEROWS", $.Int32, 238);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_OK", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_NOTSUPPORTED", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_BADVALUE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_BADOPTION", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_BADCOLUMN", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_NOTALLSETTABLE", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_NOTSETTABLE", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_NOTSET", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_CONFLICTING", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DBPROPSTATUS_NOTAVAILABLE", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "DBPROPOPTIONS_REQUIRED", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBPROPOPTIONS_OPTIONAL", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPFLAGS_WRITE", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "DBPROPFLAGS_SESSION", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_AO_RANDOM", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_CL_END", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_CL_START", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_CS_COMMUNICATIONFAILURE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_CS_INITIALIZED", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_CS_UNINITIALIZED", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_GB_COLLATE", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_GB_CONTAINS_SELECT", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_GB_EQUALS_SELECT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_GB_NO_RELATION", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_GB_NOT_SUPPORTED", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_IC_LOWER", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_IC_MIXED", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_IC_SENSITIVE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_IC_UPPER", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_IN_ALLOWNULL", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_MR_NOTSUPPORTED", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_RD_RESETALL", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_OS_RESOURCEPOOLING", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_OS_TXNENLISTMENT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_OS_CLIENTCURSOR", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_OS_AGR_AFTERSESSION", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_SQL_ODBC_MINIMUM", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPROPVAL_SQL_ESCAPECLAUSES", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "DBKIND_GUID_NAME", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DBKIND_GUID_PROPID", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBKIND_NAME", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBKIND_PGUID_NAME", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DBKIND_PGUID_PROPID", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBKIND_PROPID", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "DBKIND_GUID", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISBOOKMARK", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISLONG", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISFIXEDLENGTH", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISNULLABLE", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISROWSET", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISROW", $.Int32, 2097152);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISROWSET_DBCOLUMNFLAGS_ISROW", $.Int32, 3145728);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISLONG_DBCOLUMNFLAGS_ISSTREAM", $.Int32, 524416);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISROWID_DBCOLUMNFLAGS_ISROWVER", $.Int32, 768);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_WRITE_DBCOLUMNFLAGS_WRITEUNKNOWN", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "DBCOLUMNFLAGS_ISNULLABLE_DBCOLUMNFLAGS_MAYBENULL", $.Int32, 96);

    $.Constant({Static:true , Public:false}, "DBACCESSOR_ROWDATA", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBACCESSOR_PARAMETERDATA", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DBPARAMTYPE_INPUT", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DBPARAMTYPE_INPUTOUTPUT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DBPARAMTYPE_OUTPUT", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DBPARAMTYPE_RETURNVALUE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "ParameterDirectionFlag", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DB_UNSEARCHABLE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "DB_LIKE_ONLY", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "DB_ALL_EXCEPT_LIKE", $.UInt32, 3);

    $.Constant({Static:true , Public:false}, "DB_SEARCHABLE", $.UInt32, 4);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DB_INVALID_HACCESSOR", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DB_NULL_HCHAPTER", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DB_NULL_HROW", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBBINDING", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBCOLUMNINFO", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBLITERALINFO", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBPROPSET", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBPROP", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBPROPINFOSET", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBPROPINFO", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_tagDBPROPIDSET", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_Guid", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf_Variant", $.Int32, function ($pi) {
        return ((8 + Math.imul(2, $asm11.System.Data.Common.ADP.PtrSize)) | 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBPROP_Status", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBPROP_Value", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBPROPSET_Properties", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBPROPINFO_Value", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBPROPIDSET_PropertySet", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBLITERALINFO_it", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBBINDING_obValue", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OffsetOf_tagDBBINDING_wType", $.Int32);

    $.Field({Static:true , Public:false}, "IID_NULL", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IUnknown", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IDBInitialize", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IDBCreateSession", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IDBCreateCommand", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_ICommandText", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IMultipleResults", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IRow", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IRowset", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_ISQLErrorInfo", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "CLSID_DataLinks", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "DBGUID_DEFAULT", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "DBGUID_ROWSET", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "DBGUID_ROW", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "DBGUID_ROWDEFAULTSTREAM", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CLSID_MSDASQL", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DBCOL_SPECIALCOL", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ErrorTrimCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "Asynchronous_Processing", $.String, "asynchronous processing");

    $.Constant({Static:true , Public:false}, "AttachDBFileName", $.String, "attachdbfilename");

    $.Constant({Static:true , Public:false}, "Connect_Timeout", $.String, "connect timeout");

    $.Constant({Static:true , Public:false}, "Data_Source", $.String, "data source");

    $.Constant({Static:true , Public:false}, "File_Name", $.String, "file name");

    $.Constant({Static:true , Public:false}, "Initial_Catalog", $.String, "initial catalog");

    $.Constant({Static:true , Public:false}, "Password", $.String, "password");

    $.Constant({Static:true , Public:false}, "Persist_Security_Info", $.String, "persist security info");

    $.Constant({Static:true , Public:false}, "Provider", $.String, "provider");

    $.Constant({Static:true , Public:false}, "Pwd", $.String, "pwd");

    $.Constant({Static:true , Public:false}, "User_ID", $.String, "user id");

    $.Constant({Static:true , Public:false}, "Current_Catalog", $.String, "current catalog");

    $.Constant({Static:true , Public:false}, "DBMS_Version", $.String, "dbms version");

    $.Constant({Static:true , Public:false}, "Properties", $.String, "Properties");

    $.Constant({Static:true , Public:false}, "DataLinks_CLSID", $.String, "CLSID\\{2206CDB2-19C1-11D1-89E0-00C04FD7A829}\\InprocServer32");

    $.Constant({Static:true , Public:false}, "OLEDB_SERVICES", $.String, "OLEDB_SERVICES");

    $.Constant({Static:true , Public:false}, "DefaultDescription_MSDASQL", $.String, "microsoft ole db provider for odbc drivers");

    $.Constant({Static:true , Public:false}, "MSDASQL", $.String, "msdasql");

    $.Constant({Static:true , Public:false}, "MSDASQLdot", $.String, "msdasql.");

    $.Constant({Static:true , Public:false}, "_Add", $.String, "add");

    $.Constant({Static:true , Public:false}, "_Keyword", $.String, "keyword");

    $.Constant({Static:true , Public:false}, "_Name", $.String, "name");

    $.Constant({Static:true , Public:false}, "_Value", $.String, "value");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_BASECATALOGNAME", $.String, "DBCOLUMN_BASECATALOGNAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_BASECOLUMNNAME", $.String, "DBCOLUMN_BASECOLUMNNAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_BASESCHEMANAME", $.String, "DBCOLUMN_BASESCHEMANAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_BASETABLENAME", $.String, "DBCOLUMN_BASETABLENAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_COLUMNSIZE", $.String, "DBCOLUMN_COLUMNSIZE");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_FLAGS", $.String, "DBCOLUMN_FLAGS");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_GUID", $.String, "DBCOLUMN_GUID");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_IDNAME", $.String, "DBCOLUMN_IDNAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_ISAUTOINCREMENT", $.String, "DBCOLUMN_ISAUTOINCREMENT");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_ISUNIQUE", $.String, "DBCOLUMN_ISUNIQUE");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_KEYCOLUMN", $.String, "DBCOLUMN_KEYCOLUMN");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_NAME", $.String, "DBCOLUMN_NAME");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_NUMBER", $.String, "DBCOLUMN_NUMBER");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_PRECISION", $.String, "DBCOLUMN_PRECISION");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_PROPID", $.String, "DBCOLUMN_PROPID");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_SCALE", $.String, "DBCOLUMN_SCALE");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_TYPE", $.String, "DBCOLUMN_TYPE");

    $.Constant({Static:true , Public:false}, "DBCOLUMN_TYPEINFO", $.String, "DBCOLUMN_TYPEINFO");

    $.Constant({Static:true , Public:false}, "PRIMARY_KEY", $.String, "PRIMARY_KEY");

    $.Constant({Static:true , Public:false}, "UNIQUE", $.String, "UNIQUE");

    $.Constant({Static:true , Public:false}, "COLUMN_NAME", $.String, "COLUMN_NAME");

    $.Constant({Static:true , Public:false}, "NULLS", $.String, "NULLS");

    $.Constant({Static:true , Public:false}, "INDEX_NAME", $.String, "INDEX_NAME");

    $.Constant({Static:true , Public:false}, "PARAMETER_NAME", $.String, "PARAMETER_NAME");

    $.Constant({Static:true , Public:false}, "ORDINAL_POSITION", $.String, "ORDINAL_POSITION");

    $.Constant({Static:true , Public:false}, "PARAMETER_TYPE", $.String, "PARAMETER_TYPE");

    $.Constant({Static:true , Public:false}, "IS_NULLABLE", $.String, "IS_NULLABLE");

    $.Constant({Static:true , Public:false}, "DATA_TYPE", $.String, "DATA_TYPE");

    $.Constant({Static:true , Public:false}, "CHARACTER_MAXIMUM_LENGTH", $.String, "CHARACTER_MAXIMUM_LENGTH");

    $.Constant({Static:true , Public:false}, "NUMERIC_PRECISION", $.String, "NUMERIC_PRECISION");

    $.Constant({Static:true , Public:false}, "NUMERIC_SCALE", $.String, "NUMERIC_SCALE");

    $.Constant({Static:true , Public:false}, "TYPE_NAME", $.String, "TYPE_NAME");

    $.Constant({Static:true , Public:false}, "ORDINAL_POSITION_ASC", $.String, "ORDINAL_POSITION ASC");

    $.Constant({Static:true , Public:false}, "SchemaGuids", $.String, "SchemaGuids");

    $.Constant({Static:true , Public:false}, "Schema", $.String, "Schema");

    $.Constant({Static:true , Public:false}, "RestrictionSupport", $.String, "RestrictionSupport");

    $.Constant({Static:true , Public:false}, "DbInfoKeywords", $.String, "DbInfoKeywords");

    $.Constant({Static:true , Public:false}, "Keyword", $.String, "Keyword");


    function ODB__cctor () {
      $thisType.DBRESULTFLAG_DEFAULT = new $asm07.System.IntPtr();
      $thisType.DB_INVALID_HACCESSOR = new $asm07.System.IntPtr();
      $thisType.DB_NULL_HCHAPTER = new $asm07.System.IntPtr();
      $thisType.DB_NULL_HROW = new $asm07.System.IntPtr();
      $thisType.IID_NULL = new $asm07.System.Guid();
      $thisType.IID_IUnknown = new $asm07.System.Guid();
      $thisType.IID_IDBInitialize = new $asm07.System.Guid();
      $thisType.IID_IDBCreateSession = new $asm07.System.Guid();
      $thisType.IID_IDBCreateCommand = new $asm07.System.Guid();
      $thisType.IID_ICommandText = new $asm07.System.Guid();
      $thisType.IID_IMultipleResults = new $asm07.System.Guid();
      $thisType.IID_IRow = new $asm07.System.Guid();
      $thisType.IID_IRowset = new $asm07.System.Guid();
      $thisType.IID_ISQLErrorInfo = new $asm07.System.Guid();
      $thisType.CLSID_DataLinks = new $asm07.System.Guid();
      $thisType.DBGUID_DEFAULT = new $asm07.System.Guid();
      $thisType.DBGUID_ROWSET = new $asm07.System.Guid();
      $thisType.DBGUID_ROW = new $asm07.System.Guid();
      $thisType.DBGUID_ROWDEFAULTSTREAM = new $asm07.System.Guid();
      $thisType.CLSID_MSDASQL = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ODB__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbBuffer */ 

(function DbBuffer$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.ProviderBase.DbBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringUni", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringUni", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChars", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt16Array", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt32Array", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIntPtr", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNumeric", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StructureToPtr", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCheck", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharArray", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDate", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteGuid", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt16Array", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt32Array", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIntPtr", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNumeric", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Decimal"), 
          $.Byte
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSingle", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ZeroMemory", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "LMEM_FIXED", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "LMEM_MOVEABLE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "LMEM_ZEROINIT", $.Int32, 64);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bufferLength", $.Int32);

    $.Property({Static:false, Public:false}, "BaseOffset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.PropertyIDSet */ 

(function PropertyIDSet$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.OleDb.PropertyIDSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "PropertyIDSetAndValueSize", $.Int32, function ($pi) {
        return ((($asm11.System.Data.OleDb.ODB.SizeOf_tagDBPROPIDSET | 0) + ($asm11.System.Data.Common.ADP.PtrSize | 0)) | 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "PropertyIDSetSize", $.Int32, function ($pi) {
        return $asm11.System.Data.OleDb.ODB.SizeOf_tagDBPROPIDSET;
      });

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.OleDbPropertyInfo */ 

(function OleDbPropertyInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OleDb.OleDbPropertyInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "_propertySet", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "_propertyID", $.Int32);

    $.Field({Static:false, Public:true }, "_description", $.String);

    $.Field({Static:false, Public:true }, "_lowercase", $.String);

    $.Field({Static:false, Public:true }, "_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "_flags", $.Int32);

    $.Field({Static:false, Public:true }, "_vtype", $.Int32);

    $.Field({Static:false, Public:true }, "_supportedValues", $.Object);

    $.Field({Static:false, Public:true }, "_defaultValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.PropertyInfoSet */ 

(function PropertyInfoSet$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.OleDb.PropertyInfoSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBProperties"), $asm11.TypeRef("System.Data.OleDb.PropertyIDSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromVtType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.OleDb.OleDbPropertyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "setCount", $.Int32);

    $.Field({Static:false, Public:false}, "descBuffer", $.IntPtr);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.RowBinding */ 

(function RowBinding$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.OleDb.RowBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AlignDataSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindingCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAccessor", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IAccessor"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.ColumnBinding")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateBuffer", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetAccessorHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetDataPtr", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetDataPtr", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FreeBstr", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "FreeChapter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FreeCoTaskMem", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "FreePropVariant", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "FreeVariant", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "GetVariantValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InterlockedExchangePointer", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetValues", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBindings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.ColumnBinding")]), [
          $asm11.TypeRef("System.Data.OleDb.OleDbDataReader"), $asm11.TypeRef("System.Data.OleDb.Bindings"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.OleDbParameter")]), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBBINDING")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBstrValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetByRefValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetVariantValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartDataBlock", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindingCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_headerLength", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataLength", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_emptyStringOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_iaccessor", $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IAccessor"));

    $.Field({Static:false, Public:false}, "_accessorHandle", $.IntPtr);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_needToReset", $.Boolean);

    $.Field({Static:false, Public:false}, "_haveData", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.DualCoTaskMem */ 

(function DualCoTaskMem$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.OleDb.DualCoTaskMem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBInfo"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IColumnsInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IColumnsRowset"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.OleDbHResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "handle2", $.IntPtr);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.RowHandleBuffer */ 

(function RowHandleBuffer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.OleDb.RowHandleBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.StringMemHandle */ 

(function StringMemHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.OleDb.StringMemHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OleDb.ChapterHandle */ 

(function ChapterHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.WrappedIUnknown"), 
      Name: "System.Data.OleDb.ChapterHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("System.Data.OleDb.RowBinding"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateChapterHandle", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm11.TypeRef("System.Data.OleDb.RowBinding"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateChapterHandle", 
      new JSIL.MethodSignature($.Type, [$.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HChapter", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DB_NULL_HCHAPTER", $.Type);

    $.Field({Static:false, Public:false}, "_chapterHandle", $.IntPtr);

    $.Property({Static:false, Public:false}, "HChapter", $.IntPtr);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.Odbc");
/* class System.Data.Odbc.DbSchemaInfo */ 

(function DbSchemaInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.DbSchemaInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_typename", $.String);

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_dbtype", $asm07.TypeRef("System.Nullable`1", [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE")]));

    $.Field({Static:false, Public:false}, "_scale", $.Object);

    $.Field({Static:false, Public:false}, "_precision", $.Object);

    $.Field({Static:false, Public:false}, "_columnlength", $.Int32);

    $.Field({Static:false, Public:false}, "_valueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_lengthOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_sqlctype", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"));

    $.Field({Static:false, Public:false}, "_sql_type", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.DbCache */ 

(function DbCache$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.DbCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessIndex", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.DbSchemaInfo"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:false}, "_isBadValue", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_schema", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.DbSchemaInfo")]));

    $.Field({Static:false, Public:false}, "_values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_record", $asm11.TypeRef("System.Data.Odbc.OdbcDataReader"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:false, Public:false}, "_randomaccess", $.Boolean);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Values", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Odbc.ODBC */ 

(function ODBC$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("System.Data.Odbc.ODBC", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CantAllocateEnvironmentHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CantEnableConnectionpooling", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CantSetPropertyOnOpenConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionClosed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionStringTooLong", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FailedToGetDescriptorHandle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaRestrictionRequired", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NegativeArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMappingForSqlTransactionLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotInTransaction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedCommandType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.CommandType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedEnumerationValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedIsolationLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenConnectionNoOwner", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ShortStringLength", 
      new JSIL.MethodSignature($.Int16, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceODBC", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownOdbcType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.OdbcType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownSQLType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE")])
    );

    $.Constant({Static:true , Public:false}, "Pwd", $.String, "pwd");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.ODBC32 */ 

(function ODBC32$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Data.Odbc.ODBC32", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDiagErrors", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"), [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDiagErrors", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"), $.String, 
          $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RetcodeToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.Constant({Static:true , Public:false}, "SQL_COMMIT", $.Int16, 0);

    $.Constant({Static:true , Public:false}, "SQL_ROLLBACK", $.Int16, 1);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_AUTOCOMMIT_OFF", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_AUTOCOMMIT_ON", $.IntPtr);

    $.Constant({Static:true , Public:false}, "SIGNED_OFFSET", $.Int32, -20);

    $.Constant({Static:true , Public:false}, "UNSIGNED_OFFSET", $.Int32, -22);

    $.Constant({Static:true , Public:false}, "SQL_ALL_TYPES", $.Int16, 0);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_HANDLE_NULL", $.IntPtr);

    $.Constant({Static:true , Public:false}, "SQL_NULL_DATA", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "SQL_NO_TOTAL", $.Int32, -4);

    $.Constant({Static:true , Public:false}, "SQL_DEFAULT_PARAM", $.Int32, -5);

    $.Constant({Static:true , Public:false}, "COLUMN_NAME", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "COLUMN_TYPE", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "DATA_TYPE", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "COLUMN_SIZE", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "DECIMAL_DIGITS", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "NUM_PREC_RADIX", $.Int32, 11);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_OV_ODBC3", $.IntPtr);

    $.Constant({Static:true , Public:false}, "SQL_NTS", $.Int32, -3);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_CP_OFF", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_CP_ONE_PER_DRIVER", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQL_CP_ONE_PER_HENV", $.IntPtr);

    $.Constant({Static:true , Public:false}, "SQL_CD_TRUE", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "SQL_CD_FALSE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SQL_DTC_DONE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SQL_IS_POINTER", $.Int32, -4);

    $.Constant({Static:true , Public:false}, "SQL_IS_PTR", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "MAX_CONNECTION_STRING_LENGTH", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "SQL_DIAG_SQLSTATE", $.Int16, 4);

    $.Constant({Static:true , Public:false}, "SQL_RESULT_COL", $.Int16, 3);


    function ODBC32__cctor () {
      $thisType.SQL_AUTOCOMMIT_OFF = new $asm07.System.IntPtr();
      $thisType.SQL_AUTOCOMMIT_ON = new $asm07.System.IntPtr();
      $thisType.SQL_HANDLE_NULL = new $asm07.System.IntPtr();
      $thisType.SQL_OV_ODBC3 = new $asm07.System.IntPtr();
      $thisType.SQL_CP_OFF = new $asm07.System.IntPtr();
      $thisType.SQL_CP_ONE_PER_DRIVER = new $asm07.System.IntPtr();
      $thisType.SQL_CP_ONE_PER_HENV = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ODBC32__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Odbc.ODBC32+SQL_HANDLE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_HANDLE", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ENV: 1, 
    DBC: 2, 
    STMT: 3, 
    DESC: 4, 
  }
);

/* enum System.Data.Odbc.ODBC32+RETCODE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+RETCODE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    INVALID_HANDLE: -2, 
    ERROR: -1, 
    SUCCESS: 0, 
    SUCCESS_WITH_INFO: 1, 
    NO_DATA: 100, 
  }
);

/* enum System.Data.Odbc.ODBC32+RetCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+RetCode", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    INVALID_HANDLE: -2, 
    ERROR: -1, 
    SUCCESS: 0, 
    SUCCESS_WITH_INFO: 1, 
    NO_DATA: 100, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_CONVERT */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_CONVERT", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BIGINT: 53, 
    BINARY: 54, 
    BIT: 55, 
    CHAR: 56, 
    DATE: 57, 
    DECIMAL: 58, 
    DOUBLE: 59, 
    FLOAT: 60, 
    INTEGER: 61, 
    LONGVARCHAR: 62, 
    NUMERIC: 63, 
    REAL: 64, 
    SMALLINT: 65, 
    TIME: 66, 
    TIMESTAMP: 67, 
    TINYINT: 68, 
    VARBINARY: 69, 
    VARCHAR: 70, 
    LONGVARBINARY: 71, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_CVT */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_CVT", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    CHAR: 1, 
    NUMERIC: 2, 
    DECIMAL: 4, 
    INTEGER: 8, 
    SMALLINT: 16, 
    FLOAT: 32, 
    REAL: 64, 
    DOUBLE: 128, 
    VARCHAR: 256, 
    LONGVARCHAR: 512, 
    BINARY: 1024, 
    VARBINARY: 2048, 
    BIT: 4096, 
    TINYINT: 8192, 
    BIGINT: 16384, 
    DATE: 32768, 
    TIME: 65536, 
    TIMESTAMP: 131072, 
    LONGVARBINARY: 262144, 
    INTERVAL_YEAR_MONTH: 524288, 
    INTERVAL_DAY_TIME: 1048576, 
    WCHAR: 2097152, 
    WLONGVARCHAR: 4194304, 
    WVARCHAR: 8388608, 
    GUID: 16777216, 
  }
);

/* enum System.Data.Odbc.ODBC32+STMT */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+STMT", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CLOSE: 0, 
    DROP: 1, 
    UNBIND: 2, 
    RESET_PARAMS: 3, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_IS */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_IS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SMALLINT: -8, 
    INTEGER: -6, 
    UINTEGER: -5, 
    POINTER: -4, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_TRANSACTION */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_TRANSACTION", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    READ_UNCOMMITTED: 1, 
    READ_COMMITTED: 2, 
    REPEATABLE_READ: 4, 
    SERIALIZABLE: 8, 
    SNAPSHOT: 32, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_PARAM */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_PARAM", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    INPUT: 1, 
    INPUT_OUTPUT: 2, 
    OUTPUT: 4, 
    RETURN_VALUE: 5, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_API */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_API", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SQLEXECDIRECT: 11, 
    SQLCOLUMNS: 40, 
    SQLGETTYPEINFO: 47, 
    SQLSTATISTICS: 53, 
    SQLTABLES: 54, 
    SQLPROCEDURECOLUMNS: 66, 
    SQLPROCEDURES: 67, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_DESC */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_DESC", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CONCISE_TYPE: 2, 
    DISPLAY_SIZE: 6, 
    UNSIGNED: 8, 
    UPDATABLE: 10, 
    AUTO_UNIQUE_VALUE: 11, 
    TYPE_NAME: 14, 
    TABLE_NAME: 15, 
    SCHEMA_NAME: 16, 
    CATALOG_NAME: 17, 
    BASE_COLUMN_NAME: 22, 
    BASE_TABLE_NAME: 23, 
    COUNT: 1001, 
    TYPE: 1002, 
    LENGTH: 1003, 
    OCTET_LENGTH_PTR: 1004, 
    PRECISION: 1005, 
    SCALE: 1006, 
    DATETIME_INTERVAL_CODE: 1007, 
    NULLABLE: 1008, 
    INDICATOR_PTR: 1009, 
    DATA_PTR: 1010, 
    NAME: 1011, 
    UNNAMED: 1012, 
    OCTET_LENGTH: 1013, 
    ALLOC_TYPE: 1099, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_COLUMN */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_COLUMN", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    COUNT: 0, 
    NAME: 1, 
    TYPE: 2, 
    LENGTH: 3, 
    PRECISION: 4, 
    SCALE: 5, 
    DISPLAY_SIZE: 6, 
    NULLABLE: 7, 
    UNSIGNED: 8, 
    MONEY: 9, 
    UPDATABLE: 10, 
    AUTO_INCREMENT: 11, 
    CASE_SENSITIVE: 12, 
    SEARCHABLE: 13, 
    TYPE_NAME: 14, 
    TABLE_NAME: 15, 
    OWNER_NAME: 16, 
    QUALIFIER_NAME: 17, 
    LABEL: 18, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_SPECIALCOLS */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_SPECIALCOLS", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BEST_ROWID: 1, 
    ROWVER: 2, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_SCOPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_SCOPE", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CURROW: 0, 
    TRANSACTION: 1, 
    SESSION: 2, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_NULLABILITY */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_NULLABILITY", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NO_NULLS: 0, 
    NULLABLE: 1, 
    UNKNOWN: 2, 
  }
);

/* enum System.Data.Odbc.ODBC32+HANDLER */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+HANDLER", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    IGNORE: 0, 
    THROW: 1, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_C */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_C", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ARD_TYPE: -99, 
    UTINYINT: -28, 
    UBIGINT: -27, 
    SBIGINT: -25, 
    SLONG: -16, 
    SSHORT: -15, 
    GUID: -11, 
    WCHAR: -8, 
    BIT: -7, 
    BINARY: -2, 
    CHAR: 1, 
    NUMERIC: 2, 
    REAL: 7, 
    DOUBLE: 8, 
    TIMESTAMP: 11, 
    TYPE_DATE: 91, 
    TYPE_TIME: 92, 
    TYPE_TIMESTAMP: 93, 
    DEFAULT: 99, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_TYPE", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SS_TIME_EX: -154, 
    SS_UTCDATETIME: -153, 
    SS_XML: -152, 
    SS_UDT: -151, 
    SS_VARIANT: -150, 
    GUID: -11, 
    WLONGVARCHAR: -10, 
    WVARCHAR: -9, 
    WCHAR: -8, 
    BIT: -7, 
    TINYINT: -6, 
    BIGINT: -5, 
    LONGVARBINARY: -4, 
    VARBINARY: -3, 
    BINARY: -2, 
    LONGVARCHAR: -1, 
    CHAR: 1, 
    NUMERIC: 2, 
    DECIMAL: 3, 
    INTEGER: 4, 
    SMALLINT: 5, 
    FLOAT: 6, 
    REAL: 7, 
    DOUBLE: 8, 
    TIMESTAMP: 11, 
    VARCHAR: 12, 
    TYPE_DATE: 91, 
    TYPE_TIME: 92, 
    TYPE_TIMESTAMP: 93, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_ATTR */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_ATTR", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    QUERY_TIMEOUT: 0, 
    AUTOCOMMIT: 102, 
    LOGIN_TIMEOUT: 103, 
    TXN_ISOLATION: 108, 
    CURRENT_CATALOG: 109, 
    ODBC_VERSION: 200, 
    CONNECTION_POOLING: 201, 
    SQL_COPT_SS_BASE: 1200, 
    SQL_COPT_SS_ENLIST_IN_DTC: 1207, 
    CONNECTION_DEAD: 1209, 
    SQL_COPT_SS_TXN_ISOLATION: 1227, 
    APP_ROW_DESC: 10010, 
    APP_PARAM_DESC: 10011, 
    IMP_ROW_DESC: 10012, 
    IMP_PARAM_DESC: 10013, 
    METADATA_ID: 10014, 
  }
);

/* enum System.Data.Odbc.ODBC32+SQL_INFO */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.ODBC32+SQL_INFO", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DATA_SOURCE_NAME: 2, 
    DRIVER_NAME: 6, 
    DRIVER_VER: 7, 
    ODBC_VER: 10, 
    SERVER_NAME: 13, 
    SEARCH_PATTERN_ESCAPE: 14, 
    DBMS_NAME: 17, 
    DBMS_VER: 18, 
    IDENTIFIER_CASE: 28, 
    IDENTIFIER_QUOTE_CHAR: 29, 
    CATALOG_NAME_SEPARATOR: 41, 
    DRIVER_ODBC_VER: 77, 
    GROUP_BY: 88, 
    KEYWORDS: 89, 
    ORDER_BY_COLUMNS_IN_SELECT: 90, 
    QUOTED_IDENTIFIER_CASE: 93, 
    SQL_OJ_CAPABILITIES_30: 115, 
    SQL_SQL92_RELATIONAL_JOIN_OPERATORS: 161, 
    SQL_OJ_CAPABILITIES_20: 65003, 
  }
);

/* class System.Data.Odbc.TypeMap */ 

(function TypeMap$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.TypeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcType"), $asm11.TypeRef("System.Data.DbType"), 
          $asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDbType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromOdbcType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.Odbc.OdbcType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromSqlType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromSystemType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpgradeSignedType", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Boolean])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_BigInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Binary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Bit", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Char", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_DateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Date", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Time", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Decimal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Double", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Image", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Int", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_NChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_NText", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Numeric", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_NVarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Real", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_UniqueId", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_SmallDT", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_SmallInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Text", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Timestamp", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_TinyInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_VarBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_VarChar", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_Variant", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_UDT", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_XML", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_odbcType", $asm11.TypeRef("System.Data.Odbc.OdbcType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dbType", $asm11.TypeRef("System.Data.DbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sql_type", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sql_c", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_param_sql_c", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bufferSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_columnSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_signType", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcCommand */ 

(function OdbcCommand$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommand"), 
      Name: "System.Data.Odbc.OdbcCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection"), 
          $asm11.TypeRef("System.Data.Odbc.OdbcTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseCommandWrapper", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseFromDataReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DisconnectFromDataReaderAndConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeDataReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeDeadDataReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteReaderFromSQLMethod", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteReaderObject", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteReaderObject", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), [
          $asm11.TypeRef("System.Data.CommandBehavior"), $.String, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Canceling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DesignTimeVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdatedRowSource", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescriptorHandle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDiagSqlState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStatementHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.CMDWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecoverFromConnection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetCommandTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DesignTimeVisible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdatedRowSource", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCommandTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false}, "TrySetStatementAttribute", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConnectionAndTransaction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateOpenConnection", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_commandText", $.String);

    $.Field({Static:false, Public:false}, "_commandType", $asm11.TypeRef("System.Data.CommandType"));

    $.Field({Static:false, Public:false}, "_commandTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_updatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"));

    $.Field({Static:false, Public:false}, "_designTimeInvisible", $.Boolean);

    $.Field({Static:false, Public:false}, "_isPrepared", $.Boolean);

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Field({Static:false, Public:false}, "_transaction", $asm11.TypeRef("System.Data.Odbc.OdbcTransaction"));

    $.Field({Static:false, Public:false}, "weakDataReaderReference", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_cmdWrapper", $asm11.TypeRef("System.Data.Odbc.CMDWrapper"));

    $.Field({Static:false, Public:false}, "_parameterCollection", $asm11.TypeRef("System.Data.Odbc.OdbcParameterCollection"));

    $.Field({Static:false, Public:false}, "cmdState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Property({Static:false, Public:false}, "Canceling", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CommandText", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandText"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Odbc.Design.OdbcCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandTimeout", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandTimeout"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandType", $asm11.TypeRef("System.Data.CommandType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.CommandType.Text]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_CommandType"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Connection"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Behavior"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbParameterCollection", $asm11.TypeRef("System.Data.Common.DbParameterCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbTransaction", $asm11.TypeRef("System.Data.Common.DbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "DesignTimeVisible", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "HasParameters", $.Boolean);

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Data.Odbc.OdbcParameterCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Parameters"]; });

    $.Property({Static:false, Public:true }, "Transaction", $asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_Transaction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbCommand_UpdatedRowSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.UpdateRowSource.Both]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RecordsAffected"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [true]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OdbcCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.Odbc.CMDWrapper */ 

(function CMDWrapper$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.CMDWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateKeyInfoStatementHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStatementHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeDescriptorHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeKeyInfoStatementHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeStatementHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeKeyInfoStatementHandle", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+STMT"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeStatementHandle", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+STMT"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Canceling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyInfoStatement", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StatementHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescriptorHandle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDiagSqlState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Canceling", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasBoundColumns", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StatementErrorHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UnbindStmtColumns", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_stmt", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));

    $.Field({Static:false, Public:false}, "_keyinfostmt", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));

    $.Field({Static:false, Public:false}, "_hdesc", $asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"));

    $.Field({Static:false, Public:false}, "_nativeParameterBuffer", $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"));

    $.Field({Static:false, Public:false}, "_dataReaderBuf", $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Field({Static:false, Public:false}, "_canceling", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasBoundColumns", $.Boolean);

    $.Field({Static:false, Public:false}, "_ssKeyInfoModeOn", $.Boolean);

    $.Field({Static:false, Public:false}, "_ssKeyInfoModeOff", $.Boolean);

    $.Property({Static:false, Public:false}, "Canceling", $.Boolean);

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Property({Static:false, Public:false}, "HasBoundColumns", $.Boolean);

    $.Property({Static:false, Public:false}, "StatementHandle", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));

    $.Property({Static:false, Public:false}, "KeyInfoStatement", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcCommandBuilder */ 

(function OdbcCommandBuilder$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommandBuilder"), 
      Name: "System.Data.Odbc.OdbcCommandBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyParameterInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeriveParameters", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveParametersFromStoredProcedure", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]), [$asm11.TypeRef("System.Data.Odbc.OdbcConnection"), $asm11.TypeRef("System.Data.Odbc.OdbcCommand")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterPlaceholder", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OdbcRowUpdatingHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatingEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAdapter", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetRowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.Property({Static:false, Public:true }, "DataAdapter", $asm11.TypeRef("System.Data.Odbc.OdbcDataAdapter"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcCommandBuilder_DataAdapter"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcConnection */ 

(function OdbcConnection$Members () {
  var $, $thisType;






























































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnection"), 
      Name: "System.Data.Odbc.OdbcConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "add_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDbTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckState", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionIsAlive", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Get", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateExecutePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.CodeAccessPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStatementHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeMe", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDistributedTransaction", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDistributedTransactionHelper", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EscapeChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlagRestrictedSqlBindType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlagUnsupportedColAttr", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_COLUMN")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlagUnsupportedConnectAttr", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlagUnsupportedStmtAttr", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CloseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Driver", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalState", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsV3Driver", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectAttr", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $asm11.TypeRef("System.Data.Odbc.ODBC32+HANDLER")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectAttrString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDiagSqlState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfoInt16Unhandled", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfoInt32Unhandled", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfoInt32Unhandled", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfoStringUnhandled", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfoStringUnhandled", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactoryInternal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.OdbcHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleErrorNoThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Odbc.OdbcHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Open_BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Open_ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Open_EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Open_GetServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "QuoteChar", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseObjectPool", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_InfoMessage", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackDeadTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConnectionHandle", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LocalTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionEvent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStateExecuting", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"), [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSupportedType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SQLGetFunctions", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false}, "TestRestrictedSqlBindType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TestTypeSupport", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyExecutePermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false}, "connectionTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "infoMessageEventHandler", $asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventHandler"));

    $.Field({Static:false, Public:false}, "weakTransaction", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_connectionHandle", $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"));

    $.Field({Static:false, Public:false}, "_extraState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_connectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), function ($pi) {
        return $asm11.System.Data.Odbc.OdbcConnectionFactory.SingletonInstance;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExecutePermission", $asm07.TypeRef("System.Security.CodeAccessPermission"));

    $.Field({Static:false, Public:false}, "_userConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false}, "_poolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false}, "_innerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Field({Static:false, Public:false}, "_closeCount", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionHandle", $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionString", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Odbc.Design.OdbcConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RecommendedAsConfigurableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_ConnectionString"]; });

    $.Property({Static:false, Public:true }, "ConnectionTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [15]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_ConnectionTimeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Database", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_Database"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSource", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_DataSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_ServerVersion"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_State"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm11.TypeRef("System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo"));

    $.Property({Static:false, Public:false}, "InternalState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Property({Static:false, Public:false}, "IsOpen", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalTransaction", $asm11.TypeRef("System.Data.Odbc.OdbcTransaction"));

    $.Property({Static:false, Public:true }, "Driver", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcConnection_Driver"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "IsV3Driver", $.Boolean);

    $.Property({Static:false, Public:false}, "CloseCount", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "InnerConnection", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "UserConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Event({Static:false, Public:true }, "InfoMessage", $asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_InfoMessage"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnection_InfoMessage"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["InfoMessage"]; });

})();

/* class System.Data.Odbc.OdbcConnectionFactory */ 

(function OdbcConnectionFactory$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
      Name: "System.Data.Odbc.OdbcConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $.Object, $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupProviderInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), [$asm11.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Constant({Static:true , Public:false}, "_MetaData", $.String, ":MetaDataXml");

    $.Constant({Static:true , Public:false}, "_defaultMetaDataXml", $.String, "defaultMetaDataXml");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcHandle */ 

(function OdbcHandle$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.Odbc.OdbcHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HandleType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDiagnosticField", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDiagnosticRecord", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int16, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_handleType", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"));

    $.Field({Static:false, Public:false}, "_parentHandle", $.Type);

    $.Property({Static:false, Public:false}, "HandleType", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcConnectionHandle */ 

(function OdbcConnectionHandle$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
      Name: "System.Data.Odbc.OdbcConnectionHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnection"), $asm11.TypeRef("System.Data.Odbc.OdbcConnectionString"), 
          $asm11.TypeRef("System.Data.Odbc.OdbcEnvironmentHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoCommitOff", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.IsolationLevel")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.Int16, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "Connect", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFunctions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfo1", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfo2", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConnectionAttribute2", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $.IntPtr, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConnectionAttribute3", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConnectionAttribute4", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $asm27.TypeRef("System.Transactions.IDtcTransaction"), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_handleState", $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle+HandleState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Odbc.OdbcConnectionHandle+HandleState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.OdbcConnectionHandle+HandleState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Allocated: 0, 
    Connected: 1, 
    Transacted: 2, 
    TransactionInProgress: 3, 
  }
);

/* class System.Data.Odbc.OdbcConnectionOpen */ 

(function OdbcConnectionOpen$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.Odbc.OdbcConnectionOpen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.OdbcConnection"), $asm11.TypeRef("System.Data.Odbc.OdbcConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginOdbcTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OuterConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "OuterConnection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo */ 

(function OdbcConnectionPoolGroupProviderInfo$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), 
      Name: "System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DriverName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DriverVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EscapeChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEscapeChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasQuoteChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsV3Driver", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoConnectionDead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoCurrentCatalog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoQueryTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoSqlCASSColumnKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoSqlPrimaryKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoSqlSoptSSHiddenColumns", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoSqlSoptSSNoBrowseTable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RestrictedSQLBindTypes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportedSQLTypes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TestedSQLTypes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DriverName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DriverVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EscapeChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsV3Driver", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoConnectionDead", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoCurrentCatalog", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoQueryTimeout", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoSqlCASSColumnKey", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoSqlPrimaryKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoSqlSoptSSHiddenColumns", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NoSqlSoptSSNoBrowseTable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_QuoteChar", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RestrictedSQLBindTypes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SupportedSQLTypes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TestedSQLTypes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_driverName", $.String);

    $.Field({Static:false, Public:false}, "_driverVersion", $.String);

    $.Field({Static:false, Public:false}, "_quoteChar", $.String);

    $.Field({Static:false, Public:false}, "_escapeChar", $.Char);

    $.Field({Static:false, Public:false}, "_hasQuoteChar", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasEscapeChar", $.Boolean);

    $.Field({Static:false, Public:false}, "_isV3Driver", $.Boolean);

    $.Field({Static:false, Public:false}, "_supportedSQLTypes", $.Int32);

    $.Field({Static:false, Public:false}, "_testedSQLTypes", $.Int32);

    $.Field({Static:false, Public:false}, "_restrictedSQLBindTypes", $.Int32);

    $.Field({Static:false, Public:false}, "_noCurrentCatalog", $.Boolean);

    $.Field({Static:false, Public:false}, "_noConnectionDead", $.Boolean);

    $.Field({Static:false, Public:false}, "_noQueryTimeout", $.Boolean);

    $.Field({Static:false, Public:false}, "_noSqlSoptSSNoBrowseTable", $.Boolean);

    $.Field({Static:false, Public:false}, "_noSqlSoptSSHiddenColumns", $.Boolean);

    $.Field({Static:false, Public:false}, "_noSqlCASSColumnKey", $.Boolean);

    $.Field({Static:false, Public:false}, "_noSqlPrimaryKeys", $.Boolean);

    $.Property({Static:false, Public:false}, "DriverName", $.String);

    $.Property({Static:false, Public:false}, "DriverVersion", $.String);

    $.Property({Static:false, Public:false}, "HasQuoteChar", $.Boolean);

    $.Property({Static:false, Public:false}, "HasEscapeChar", $.Boolean);

    $.Property({Static:false, Public:false}, "QuoteChar", $.String);

    $.Property({Static:false, Public:false}, "EscapeChar", $.Char);

    $.Property({Static:false, Public:false}, "IsV3Driver", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportedSQLTypes", $.Int32);

    $.Property({Static:false, Public:false}, "TestedSQLTypes", $.Int32);

    $.Property({Static:false, Public:false}, "RestrictedSQLBindTypes", $.Int32);

    $.Property({Static:false, Public:false}, "NoCurrentCatalog", $.Boolean);

    $.Property({Static:false, Public:false}, "NoConnectionDead", $.Boolean);

    $.Property({Static:false, Public:false}, "NoQueryTimeout", $.Boolean);

    $.Property({Static:false, Public:false}, "NoSqlSoptSSNoBrowseTable", $.Boolean);

    $.Property({Static:false, Public:false}, "NoSqlSoptSSHiddenColumns", $.Boolean);

    $.Property({Static:false, Public:false}, "NoSqlCASSColumnKey", $.Boolean);

    $.Property({Static:false, Public:false}, "NoSqlPrimaryKeys", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcConnectionString */ 

(function OdbcConnectionString$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
      Name: "System.Data.Odbc.OdbcConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Expand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandedConnectionString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcConnectionStringBuilder */ 

(function OdbcConnectionStringBuilder$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"), 
      Name: "System.Data.Odbc.OdbcConnectionStringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Driver", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dsn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAt", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Data.Odbc.OdbcConnectionStringBuilder+Keywords")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnectionStringBuilder+Keywords"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Driver", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Dsn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_validKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_keywords", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnectionStringBuilder+Keywords")]));

    $.Field({Static:false, Public:false}, "_knownKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_dsn", $.String);

    $.Field({Static:false, Public:false}, "_driver", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Driver", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_Driver"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Driver"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true }, "Dsn", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Dsn"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_NamedConnectionString"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbConnectionString_DSN"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["Driver"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.Odbc.OdbcConnectionStringBuilder_OdbcConnectionStringBuilderConverter.__Type__]; });

})();

/* enum System.Data.Odbc.OdbcConnectionStringBuilder+Keywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.OdbcConnectionStringBuilder+Keywords", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Dsn: 0, 
    Driver: 1, 
  }
);

/* class System.Data.Odbc.OdbcConnectionStringBuilder+OdbcConnectionStringBuilderConverter */ 

(function OdbcConnectionStringBuilderConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.Odbc.OdbcConnectionStringBuilder+OdbcConnectionStringBuilderConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm11.TypeRef("System.Data.Odbc.OdbcConnectionStringBuilder")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcDataAdapter */ 

(function OdbcDataAdapter$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataAdapter"), 
      Name: "System.Data.Odbc.OdbcDataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatedEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdated", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdating", $.Object);

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Field({Static:false, Public:false}, "_selectCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Property({Static:false, Public:true }, "DeleteCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_DeleteCommand"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.DeleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "InsertCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_InsertCommand"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.InsertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "SelectCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Fill"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_SelectCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.SelectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "UpdateCommand", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_UpdateCommand"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.UpdateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Event({Static:false, Public:true }, "RowUpdated", $asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatedEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdated"]; });

    $.Event({Static:false, Public:true }, "RowUpdating", $asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatingEventHandler"))
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdating"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OdbcDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RowUpdated"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OdbcDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.Odbc.OdbcDataReader */ 

(function OdbcDataReader$Members () {
  var $, $thisType;


























































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataReader"), 
      Name: "System.Data.Odbc.OdbcDataReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcCommand"), $asm11.TypeRef("System.Data.Odbc.CMDWrapper"), 
          $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildMetaDataInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateRecordsAffected", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FieldCountNoThrow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstResult", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Buffer", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.CNativeBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCancelingCommand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNonCancelingCommand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyInfoStatementHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StatementHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytesOrChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $asm07.TypeRef("System.Array"), $.Boolean, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.SQLLEN"), [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_COLUMN"), $asm11.TypeRef("System.Data.Odbc.ODBC32+HANDLER")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColAttributeStr", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_COLUMN"), $asm11.TypeRef("System.Data.Odbc.ODBC32+HANDLER")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetData", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetData", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescFieldStr", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+HANDLER")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrdinalFromBaseColName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrdinalFromBaseColName", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowCount", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.SQLLEN"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSqlType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.TypeMap"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTableNameFromCommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm11.TypeRef("System.Data.Odbc.TypeMap")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetBoolean", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetByte", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetBytes", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetChar", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetDate", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetDateTime", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetDecimal", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetDouble", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetFloat", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetGuid", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetInt16", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetInt64", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetString", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "internalGetTime", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCommandBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextResult", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryFieldInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "readBytesOrCharsSequentialAccess", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm07.TypeRef("System.Array"), 
          $.Boolean, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveKeyInfo", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $asm11.TypeRef("System.Data.Odbc.OdbcDataReader+QualifiedTableName"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveKeyInfoFromStatistics", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Odbc.OdbcDataReader+QualifiedTableName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SameIndexColumn", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Command", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseTableNames", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcDataReader+QualifiedTableName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCurrentRowColumnInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "command", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Field({Static:false, Public:false}, "recordAffected", $.Int32);

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "dataCache", $asm11.TypeRef("System.Data.Odbc.DbCache"));

    $.Field({Static:false, Public:false}, "_hasRows", $asm11.TypeRef("System.Data.Odbc.OdbcDataReader+HasRowsStatus"));

    $.Field({Static:false, Public:false}, "_isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "_isRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_isValidResult", $.Boolean);

    $.Field({Static:false, Public:false}, "_noMoreResults", $.Boolean);

    $.Field({Static:false, Public:false}, "_noMoreRows", $.Boolean);

    $.Field({Static:false, Public:false}, "_skipReadOnce", $.Boolean);

    $.Field({Static:false, Public:false}, "_hiddenColumns", $.Int32);

    $.Field({Static:false, Public:false}, "_commandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:false}, "_row", $.Int32);

    $.Field({Static:false, Public:false}, "_column", $.Int32);

    $.Field({Static:false, Public:false}, "_sequentialBytesRead", $.Int64);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "metadata", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcDataReader+MetaData")]));

    $.Field({Static:false, Public:false}, "schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_cmdText", $.String);

    $.Field({Static:false, Public:false}, "_cmdWrapper", $asm11.TypeRef("System.Data.Odbc.CMDWrapper"));

    $.Property({Static:false, Public:false}, "Buffer", $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"));

    $.Property({Static:false, Public:false}, "Connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Property({Static:false, Public:false}, "Command", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Property({Static:false, Public:false}, "StatementHandle", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));

    $.Property({Static:false, Public:false}, "KeyInfoStatementHandle", $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"));

    $.Property({Static:false, Public:false}, "IsCancelingCommand", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNonCancelingCommand", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.Odbc.OdbcDataReader+HasRowsStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.OdbcDataReader+HasRowsStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DontKnow: 0, 
    HasRows: 1, 
    HasNoRows: 2, 
  }
);

/* class System.Data.Odbc.OdbcDataReader+QualifiedTableName */ 

(function QualifiedTableName$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.OdbcDataReader+QualifiedTableName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Catalog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QuotedTable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Table", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTable", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Table", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UnQuote", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "_catalogName", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_tableName", $.String);

    $.Field({Static:false, Public:false}, "_quotedTableName", $.String);

    $.Field({Static:false, Public:false}, "_quoteChar", $.String);

    $.Property({Static:false, Public:false}, "Catalog", $.String);

    $.Property({Static:false, Public:false}, "Schema", $.String);

    $.Property({Static:false, Public:false}, "Table", $.String);

    $.Property({Static:false, Public:false}, "QuotedTable", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcDataReader+MetaData */ 

(function MetaData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.OdbcDataReader+MetaData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "typemap", $asm11.TypeRef("System.Data.Odbc.TypeMap"));

    $.Field({Static:false, Public:false}, "size", $asm11.TypeRef("System.Data.Odbc.SQLLEN"));

    $.Field({Static:false, Public:false}, "precision", $.Byte);

    $.Field({Static:false, Public:false}, "scale", $.Byte);

    $.Field({Static:false, Public:false}, "isAutoIncrement", $.Boolean);

    $.Field({Static:false, Public:false}, "isUnique", $.Boolean);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "isRowVersion", $.Boolean);

    $.Field({Static:false, Public:false}, "isLong", $.Boolean);

    $.Field({Static:false, Public:false}, "isKeyColumn", $.Boolean);

    $.Field({Static:false, Public:false}, "baseSchemaName", $.String);

    $.Field({Static:false, Public:false}, "baseCatalogName", $.String);

    $.Field({Static:false, Public:false}, "baseTableName", $.String);

    $.Field({Static:false, Public:false}, "baseColumnName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcEnvironment */ 

(function OdbcEnvironment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.OdbcEnvironment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalEnvironmentHandle", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcEnvironmentHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReleaseObjectPool", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "_globalEnvironmentHandle", $.Object);

    $.Field({Static:true , Public:false}, "_globalEnvironmentHandleLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcEnvironmentHandle */ 

(function OdbcEnvironmentHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
      Name: "System.Data.Odbc.OdbcEnvironmentHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcError */ 

(function OdbcError$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.OdbcError", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeError", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SQLState", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_message", $.String);

    $.Field({Static:false, Public:false}, "_state", $.String);

    $.Field({Static:false, Public:false}, "_nativeerror", $.Int32);

    $.Field({Static:false, Public:false}, "_source", $.String);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "SQLState", $.String);

    $.Property({Static:false, Public:true }, "NativeError", $.Int32);

    $.Property({Static:false, Public:true }, "Source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcErrorCollection */ 

(function OdbcErrorCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.OdbcErrorCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcError"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcError")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcError"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Odbc.OdbcError"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Odbc.OdbcException */ 

(function OdbcException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbException"), 
      Name: "System.Data.Odbc.OdbcException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"), $asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "odbcErrors", $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"));

    $.Field({Static:false, Public:false}, "_retcode", $asm11.TypeRef("System.Data.Odbc.ODBC32+RETCODE"));

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Source", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcFactory */ 

(function OdbcFactory$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbProviderFactory"), 
      Name: "System.Data.Odbc.OdbcFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommandBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommandBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.CodeAccessPermission"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcDescriptorHandle */ 

(function OdbcDescriptorHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
      Name: "System.Data.Odbc.OdbcDescriptorHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescriptionField", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDescriptionField1", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int16, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDescriptionField2", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int16, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), 
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.Odbc.OdbcInfoMessageEventHandler */ 

JSIL.MakeDelegate("System.Data.Odbc.OdbcInfoMessageEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.Odbc.OdbcInfoMessageEventArgs")]));

/* class System.Data.Odbc.OdbcInfoMessageEventArgs */ 

(function OdbcInfoMessageEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.Odbc.OdbcInfoMessageEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_errors", $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"));

    $.Property({Static:false, Public:true }, "Errors", $asm11.TypeRef("System.Data.Odbc.OdbcErrorCollection"));

    $.Property({Static:false, Public:true }, "Message", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcMetaDataCollectionNames */ 

(function OdbcMetaDataCollectionNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Odbc.OdbcMetaDataCollectionNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Columns", $.String, "Columns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Indexes", $.String, "Indexes");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Procedures", $.String, "Procedures");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcedureColumns", $.String, "ProcedureColumns");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcedureParameters", $.String, "ProcedureParameters");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Tables", $.String, "Tables");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Views", $.String, "Views");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcMetaDataColumnNames */ 

(function OdbcMetaDataColumnNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Odbc.OdbcMetaDataColumnNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanFalseLiteral", $.String, "BooleanFalseLiteral");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanTrueLiteral", $.String, "BooleanTrueLiteral");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLType", $.String, "SQLType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcMetaDataFactory */ 

(function OdbcMetaDataFactory$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), 
      Name: "System.Data.Odbc.OdbcMetaDataFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BooleanFromODBC", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableFromDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.IDataReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableFromDataReaderDataTypes", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.Odbc.OdbcDataReader"), 
          $asm11.TypeRef("System.Data.Odbc.OdbcConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableFromDataReaderIndex", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.IDataReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableFromDataReaderProcedureColumns", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.IDataReader"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DataTableFromDataReaderProcedures", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.IDataReader"), $.String, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillOutRestrictions", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnsCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcCommand"), [$asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataSourceInformationCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypesCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProcedureColumnsCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProceduresCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReservedWordsCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTablesCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm11.TypeRef("System.Data.Odbc.OdbcConnection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeIndexRow", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewDataTableFromReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.IDataReader"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.Constant({Static:true , Public:false}, "_collectionName", $.String, "CollectionName");

    $.Constant({Static:true , Public:false}, "_populationMechanism", $.String, "PopulationMechanism");

    $.Constant({Static:true , Public:false}, "_prepareCollection", $.String, "PrepareCollection");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaMapping", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcMetaDataFactory+SchemaFunctionName")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "KeywordSeparatorChar", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Odbc.OdbcMetaDataFactory+SchemaFunctionName */ 

(function SchemaFunctionName$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Odbc.OdbcMetaDataFactory+SchemaFunctionName", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_odbcFunction", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcParameter */ 

(function OdbcParameter$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameter"), 
      Name: "System.Data.Odbc.OdbcParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Boolean, $.Byte, 
          $.Byte, $.String, 
          $asm11.TypeRef("System.Data.DataRowVersion"), $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Byte, $.Byte, 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Boolean, $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.OdbcCommand"), 
          $.Int16, $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearBinding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelper", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelperCore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareExchangeParent", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyParameterInternal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OdbcType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrecisionInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScaleInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumnNullMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserSpecifiedType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumnSize", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputValue", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.CNativeBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterPrecision", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterScale", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterSize", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueSize", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareForBind", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcCommand"), $.Int16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAndGetParameterValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyTypeChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetOdbcType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CoercedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasChanged", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OdbcType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ParameterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrecisionInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScaleInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumnNullMapping", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInputValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.Int32, $.Int32, 
          $.Int32, $asm11.TypeRef("System.Data.Odbc.CNativeBuffer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializePrecision", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SqlDirectionFromParameterDirection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_PARAM"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecision", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecisionCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScale", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScaleCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSize", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSizeCore", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_hasChanged", $.Boolean);

    $.Field({Static:false, Public:false}, "_userSpecifiedType", $.Boolean);

    $.Field({Static:false, Public:false}, "_typemap", $asm11.TypeRef("System.Data.Odbc.TypeMap"));

    $.Field({Static:false, Public:false}, "_bindtype", $asm11.TypeRef("System.Data.Odbc.TypeMap"));

    $.Field({Static:false, Public:false}, "_parameterName", $.String);

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_hasScale", $.Boolean);

    $.Field({Static:false, Public:false}, "_boundSqlCType", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"));

    $.Field({Static:false, Public:false}, "_boundParameterType", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"));

    $.Field({Static:false, Public:false}, "_boundSize", $.Int32);

    $.Field({Static:false, Public:false}, "_boundScale", $.Int32);

    $.Field({Static:false, Public:false}, "_boundBuffer", $.IntPtr);

    $.Field({Static:false, Public:false}, "_boundIntbuffer", $.IntPtr);

    $.Field({Static:false, Public:false}, "_originalbindtype", $asm11.TypeRef("System.Data.Odbc.TypeMap"));

    $.Field({Static:false, Public:false}, "_internalPrecision", $.Byte);

    $.Field({Static:false, Public:false}, "_internalShouldSerializeSize", $.Boolean);

    $.Field({Static:false, Public:false}, "_internalSize", $.Int32);

    $.Field({Static:false, Public:false}, "_internalDirection", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Field({Static:false, Public:false}, "_internalScale", $.Byte);

    $.Field({Static:false, Public:false}, "_internalOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_internalUserSpecifiedType", $.Boolean);

    $.Field({Static:false, Public:false}, "_internalValue", $.Object);

    $.Field({Static:false, Public:false}, "_preparedOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_preparedSize", $.Int32);

    $.Field({Static:false, Public:false}, "_preparedBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_preparedValue", $.Object);

    $.Field({Static:false, Public:false}, "_preparedIntOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_preparedValueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_prepared_Sql_C_Type", $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Field({Static:false, Public:false}, "_parent", $.Object);

    $.Field({Static:false, Public:false}, "_direction", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceColumn", $.String);

    $.Field({Static:false, Public:false}, "_sourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Field({Static:false, Public:false}, "_sourceColumnNullMapping", $.Boolean);

    $.Field({Static:false, Public:false}, "_isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:true }, "OdbcType", $asm11.TypeRef("System.Data.Odbc.OdbcType"))
      .Attribute($asm11.TypeRef("System.Data.Common.DbProviderSpecificTypePropertyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.Odbc.OdbcType.NChar]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["OdbcParameter_OdbcType"]; });

    $.Property({Static:false, Public:false}, "HasChanged", $.Boolean);

    $.Property({Static:false, Public:false}, "UserSpecifiedType", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterName", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_ParameterName"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Precision", $.Byte)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Precision"]; });

    $.Property({Static:false, Public:false}, "PrecisionInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Scale", $.Byte)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbDataParameter_Scale"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "ScaleInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Value"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.StringConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:false}, "CoercedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Direction"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "Offset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_Size"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumn"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumnNullMapping", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DbParameter_SourceVersion"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.Odbc.OdbcParameter_OdbcParameterConverter.__Type__]; });

})();

/* class System.Data.Odbc.OdbcParameter+OdbcParameterConverter */ 

(function OdbcParameterConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.Odbc.OdbcParameter+OdbcParameterConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcParameterCollection */ 

(function OdbcParameterCollection$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameterCollection"), 
      Name: "System.Data.Odbc.OdbcParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [
          $.String, $asm11.TypeRef("System.Data.Odbc.OdbcType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddWithValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcCommand"), $asm11.TypeRef("System.Data.Odbc.CMDWrapper"), 
          $asm11.TypeRef("System.Data.Odbc.CNativeBuffer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalcParameterBufferSize", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Odbc.OdbcCommand")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearBindings", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.OdbcParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RebindCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputValues", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.CMDWrapper"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.IEnumerable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Odbc.OdbcParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RebindCollection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_rebindCollection", $.Boolean);

    $.Field({Static:true , Public:false}, "ItemType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm11.System.Data.Odbc.OdbcParameter.__Type__;
      });

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]));

    $.Property({Static:false, Public:false}, "RebindCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Odbc.OdbcParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Odbc.OdbcParameter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "InnerList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Odbc.OdbcParameter")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Odbc.OdbcPermission */ 

(function OdbcPermission$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermission"), 
      Name: "System.Data.Odbc.OdbcPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OdbcPermission() has been deprecated.  Use the OdbcPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Permissions.PermissionState"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OdbcPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OdbcPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", true]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcPermissionAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcPermissionAttribute */ 

(function OdbcPermissionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DBDataPermissionAttribute"), 
      Name: "System.Data.Odbc.OdbcPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Struct"
      )]; });

})();

/* class System.Data.Odbc.OdbcReferenceCollection */ 

(function OdbcReferenceCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"), 
      Name: "System.Data.Odbc.OdbcReferenceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NotifyItem", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Constant({Static:true , Public:false}, "Closing", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "Recover", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CommandTag", $.Int32, 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.Odbc.OdbcRowUpdatingEventHandler */ 

JSIL.MakeDelegate("System.Data.Odbc.OdbcRowUpdatingEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatingEventArgs")]));

/* delegate System.Data.Odbc.OdbcRowUpdatedEventHandler */ 

JSIL.MakeDelegate("System.Data.Odbc.OdbcRowUpdatedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm11.TypeRef("System.Data.Odbc.OdbcRowUpdatedEventArgs")]));

/* class System.Data.Odbc.OdbcRowUpdatingEventArgs */ 

(function OdbcRowUpdatingEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), 
      Name: "System.Data.Odbc.OdbcRowUpdatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_BaseCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCommand", $asm11.TypeRef("System.Data.IDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcRowUpdatedEventArgs */ 

(function OdbcRowUpdatedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), 
      Name: "System.Data.Odbc.OdbcRowUpdatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm11.TypeRef("System.Data.Odbc.OdbcCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Odbc.SQLLEN */ 

(function SQLLEN$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Odbc.SQLLEN", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "_value", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcStatementHandle */ 

(function OdbcStatementHandle$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
      Name: "System.Data.Odbc.OdbcStatementHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BindColumn2", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindColumn3", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int16, $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_TYPE"), 
          $.IntPtr, $.IntPtr, 
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), $.IntPtr, 
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cancel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseCursor", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ColumnAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int32, $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Odbc.SQLLEN")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Columns", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteDirect", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fetch", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeStatement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+STMT")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStatementAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoreResults", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NumberOfResultColumns", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrimaryKeys", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcedureColumns", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Procedures", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowCount", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Odbc.SQLLEN")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStatementAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), $.IntPtr, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_IS")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SpecialColumns", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Statistics", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String, $.Int16, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Statistics", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Tables", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.OdbcTransaction */ 

(function OdbcTransaction$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbTransaction"), 
      Name: "System.Data.Odbc.OdbcTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnection"), $asm11.TypeRef("System.Data.IsolationLevel"), 
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Odbc.OdbcConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Field({Static:false, Public:false}, "_isolevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Field({Static:false, Public:false}, "_handle", $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"));

    $.Property({Static:false, Public:true }, "Connection", $asm11.TypeRef("System.Data.Odbc.OdbcConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Odbc.OdbcType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Odbc.OdbcType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BigInt: 1, 
    Binary: 2, 
    Bit: 3, 
    Char: 4, 
    DateTime: 5, 
    Decimal: 6, 
    Numeric: 7, 
    Double: 8, 
    Image: 9, 
    Int: 10, 
    NChar: 11, 
    NText: 12, 
    NVarChar: 13, 
    Real: 14, 
    UniqueIdentifier: 15, 
    SmallDateTime: 16, 
    SmallInt: 17, 
    Text: 18, 
    Timestamp: 19, 
    TinyInt: 20, 
    VarBinary: 21, 
    VarChar: 22, 
    Date: 23, 
    Time: 24, 
  }
);

/* class System.Data.Odbc.CNativeBuffer */ 

(function CNativeBuffer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.Odbc.CNativeBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ShortLength", 
      JSIL.MethodSignature.Return($.Int16)
    );

    $.ExternalMethod({Static:false, Public:false}, "MarshalToManaged", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarshalToNative", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteODBCDateTime", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.Property({Static:false, Public:false}, "ShortLength", $.Int16);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Odbc.CStringTokenizer */ 

(function CStringTokenizer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Odbc.CStringTokenizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Char, 
          $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTokenIndex", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenFromBracket", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenFromQuote", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_token", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sqlstatement", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_quote", $.Char);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_escape", $.Char);

    $.Field({Static:false, Public:false}, "_len", $.Int32);

    $.Field({Static:false, Public:false}, "_idx", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentPosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.FieldNameLookup */ 

(function FieldNameLookup$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.FieldNameLookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDataRecord"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLookup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LinearIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm07.TypeRef("System.Globalization.CompareOptions")])
    );

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_fieldNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_compareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:false, Public:false}, "_defaultLocaleID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DataReaderContainer */ 

(function DataReaderContainer$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DataReaderContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDataReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.IDataReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReturnProviderSpecificTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataReader", $asm11.TypeRef("System.Data.IDataReader"));

    $.Field({Static:false, Public:false}, "_fieldCount", $.Int32);

    $.Property({Static:false, Public:false}, "FieldCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ReturnProviderSpecificTypes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "VisibleFieldCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DataReaderContainer+ProviderSpecificDataReader */ 

(function ProviderSpecificDataReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
      Name: "System.Data.ProviderBase.DataReaderContainer+ProviderSpecificDataReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDataReader"), $asm11.TypeRef("System.Data.Common.DbDataReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReturnProviderSpecificTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false}, "_providerSpecificDataReader", $asm11.TypeRef("System.Data.Common.DbDataReader"));

    $.Property({Static:false, Public:false, Virtual:true }, "ReturnProviderSpecificTypes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "VisibleFieldCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DataReaderContainer+CommonLanguageSubsetDataReader */ 

(function CommonLanguageSubsetDataReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
      Name: "System.Data.ProviderBase.DataReaderContainer+CommonLanguageSubsetDataReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReturnProviderSpecificTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VisibleFieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ReturnProviderSpecificTypes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "VisibleFieldCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosed */ 

(function DbConnectionClosed$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.ProviderBase.DbConnectionClosed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ConnectionState"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryOpenConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionBusy */ 

(function DbConnectionBusy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryOpenConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedBusy */ 

(function DbConnectionClosedBusy$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionOpenBusy */ 

(function DbConnectionOpenBusy$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionOpenBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedConnecting */ 

(function DbConnectionClosedConnecting$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedConnecting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryOpenConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryReplaceConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedNeverOpened */ 

(function DbConnectionClosedNeverOpened$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedNeverOpened", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened */ 

(function DbConnectionClosedPreviouslyOpened$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryReplaceConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool */ 

(function DbConnectionPool$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCleanupTimer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Timer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeactivateObject", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DestroyObject", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrorCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticationContexts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorOccurred", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTransactionAffinity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRunning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedToReplenish", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroupOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseLoadBalancing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsingIntegrateSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromGeneralPool", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromTransactedPool", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Transaction")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBlockingPeriodEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PoolCreateRequest", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareConnection", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutNewObject", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PutObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutObjectFromTransactedPool", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolCreateRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReclaimEmancipatedObjects", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceConnection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Startup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCloneCachedException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.UInt32, 
          $.Boolean, $.Boolean, 
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UserCreateRequest", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForPendingOpen", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "PoolerTracePoints", $asm11.TypeRef("Bid+ApiGroup"), 4096);

    $.Constant({Static:true , Public:false}, "MAX_Q_SIZE", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "SEMAPHORE_HANDLE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ERROR_HANDLE", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CREATION_HANDLE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "BOGUS_HANDLE", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "WAIT_OBJECT_0", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "WAIT_TIMEOUT", $.Int32, 258);

    $.Constant({Static:true , Public:false}, "WAIT_ABANDONED", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "WAIT_FAILED", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "ERROR_WAIT_DEFAULT", $.Int32, 5000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_random", $asm07.TypeRef("System.Random"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cleanupWait", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionPoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionPoolGroupOptions", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Field({Static:false, Public:false}, "_connectionPoolProviderInfo", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pooledDbAuthenticationContexts", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext")]));

    $.Field({Static:false, Public:false}, "_state", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool+State"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stackOld", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentStack`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stackNew", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentStack`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pendingOpens", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool+PendingGetConnection")]));

    $.Field({Static:false, Public:false}, "_pendingOpensWaiting", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolCreateRequest", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:false, Public:false}, "_waitCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_waitHandles", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles"));

    $.Field({Static:false, Public:false}, "_resError", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_errorOccurred", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_errorWait", $.Int32);

    $.Field({Static:false, Public:false}, "_errorTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "_cleanupTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transactedConnectionPool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:false}, "_totalObjects", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "CreationTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ErrorOccurred", $.Boolean);

    $.Property({Static:false, Public:false}, "HasTransactionAffinity", $.Boolean);

    $.Property({Static:false, Public:false}, "LoadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "NeedToReplenish", $.Boolean);

    $.Property({Static:false, Public:false}, "Identity", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Property({Static:false, Public:false}, "IsRunning", $.Boolean);

    $.Property({Static:false, Public:false}, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "PoolGroupOptions", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"));

    $.Property({Static:false, Public:false}, "AuthenticationContexts", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolAuthenticationContext")]));

    $.Property({Static:false, Public:false}, "UseLoadBalancing", $.Boolean);

    $.Property({Static:false, Public:false}, "UsingIntegrateSecurity", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.ProviderBase.DbConnectionPool+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ProviderBase.DbConnectionPool+State", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initializing: 0, 
    Running: 1, 
    ShuttingDown: 2, 
  }
);

/* class System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList */ 

(function TransactedConnectionList$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), 
      Name: "System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_transaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+PendingGetConnection */ 

(function PendingGetConnection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Threading.Tasks.TaskCompletionSource$b1.Of($asm11.System.Data.ProviderBase.DbConnectionInternal))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm11.System.Data.Common.DbConnection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm11.System.Data.Common.DbConnectionOptions)) ();
  };



  function PendingGetConnection_get_Completion () {
    return this.PendingGetConnection$Completion$value;
  }; 

  function PendingGetConnection_get_DueTime () {
    return this.PendingGetConnection$DueTime$value;
  }; 

  function PendingGetConnection_get_Owner () {
    return this.PendingGetConnection$Owner$value;
  }; 

  function PendingGetConnection_get_UserOptions () {
    return this.PendingGetConnection$UserOptions$value;
  }; 

  function PendingGetConnection_set_Completion (value) {
    this.PendingGetConnection$Completion$value = value;
  }; 

  function PendingGetConnection_set_DueTime (value) {
    this.PendingGetConnection$DueTime$value = value;
  }; 

  function PendingGetConnection_set_Owner (value) {
    this.PendingGetConnection$Owner$value = value;
  }; 

  function PendingGetConnection_set_UserOptions (value) {
    this.PendingGetConnection$UserOptions$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+PendingGetConnection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm11.TypeRef("System.Data.Common.DbConnection"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), $asm11.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.Method({Static:false, Public:true }, "get_Completion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])), 
      PendingGetConnection_get_Completion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DueTime", 
      JSIL.MethodSignature.Return($.Int64), 
      PendingGetConnection_get_DueTime
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Owner", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection")), 
      PendingGetConnection_get_Owner
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_UserOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions")), 
      PendingGetConnection_get_UserOptions
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Completion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])), 
      PendingGetConnection_set_Completion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DueTime", 
      JSIL.MethodSignature.Action($.Int64), 
      PendingGetConnection_set_DueTime
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Owner", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection")), 
      PendingGetConnection_set_Owner
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_UserOptions", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionOptions")), 
      PendingGetConnection_set_UserOptions
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingGetConnection$DueTime$value", $.Int64)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingGetConnection$Owner$value", $asm11.TypeRef("System.Data.Common.DbConnection"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingGetConnection$Completion$value", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingGetConnection$UserOptions$value", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "DueTime", $.Int64);

    $.Property({Static:false, Public:true }, "Owner", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:true }, "Completion", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Property({Static:false, Public:true }, "UserOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool */ 

(function TransactedConnectionPool$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pool", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransactedObject", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutTransactedObject", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Field({Static:false, Public:false}, "_transactedCxns", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm27.TypeRef("System.Transactions.Transaction"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList")]));

    $.Field({Static:false, Public:false}, "_pool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Pool", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles */ 

(function PoolWaitHandles$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_CreationSemaphore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Threading.Semaphore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolSemaphore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Threading.Semaphore"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_errorEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_errorHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_releaseFlags", $.Int32);

    $.Property({Static:false, Public:false}, "CreationHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Property({Static:false, Public:false}, "CreationSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Property({Static:false, Public:false}, "ErrorEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:false}, "PoolSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolAuthenticationContext */ 

(function DbConnectionPoolAuthenticationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolAuthenticationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChooseAuthenticationContextToUpdate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AccessToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LockToUpdate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseLockToUpdate", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Constant({Static:true , Public:false}, "STATUS_LOCKED", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "STATUS_UNLOCKED", $.Int32, 0);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_accessToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_isUpdateInProgress", $.Int32);

    $.Property({Static:false, Public:false}, "AccessToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "ExpirationTime", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey */ 

(function DbConnectionPoolAuthenticationContextKey$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServicePrincipalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StsAuthority", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stsAuthority", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_servicePrincipalName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32);

    $.Property({Static:false, Public:false}, "StsAuthority", $.String);

    $.Property({Static:false, Public:false}, "ServicePrincipalName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCountersNoCounters */ 

(function DbConnectionPoolCountersNoCounters$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCountersNoCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroup */ 

(function DbConnectionPoolGroup$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"), 
          $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaDataFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroupOptions", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPool", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool"), [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkPoolGroupAsActive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Prune", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MetaDataFactory", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProviderInfo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolKey", $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolGroupOptions", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Field({Static:false, Public:false}, "_poolCollection", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPool")]));

    $.Field({Static:false, Public:false}, "_state", $.Int32);

    $.Field({Static:false, Public:false}, "_providerInfo", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"));

    $.Field({Static:false, Public:false}, "_metaDataFactory", $asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Constant({Static:true , Public:false}, "PoolGroupStateActive", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PoolGroupStateIdle", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PoolGroupStateDisabled", $.Int32, 4);

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm11.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "PoolKey", $asm11.TypeRef("System.Data.Common.DbConnectionPoolKey"));

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"));

    $.Property({Static:false, Public:false}, "IsDisabled", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "PoolGroupOptions", $asm11.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Property({Static:false, Public:false}, "MetaDataFactory", $asm11.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolIdentity */ 

(function DbConnectionPoolIdentity$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolIdentity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWellKnownSid", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Principal.WellKnownSidType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNetwork", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentWindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWindowsIdentityToken", 
      new JSIL.MethodSignature($.IntPtr, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntegratedSecurityError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:false}, "E_NotImpersonationToken", $.Int32, -2147023587);

    $.Constant({Static:true , Public:false}, "Win32_CheckTokenMembership", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Win32_GetTokenInformation_1", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "Win32_GetTokenInformation_2", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "Win32_ConvertSidToStringSidW", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "Win32_CreateWellKnownSid", $.Int32, 5);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NoIdentity", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NetworkSid", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "_lastIdentity", $.Type, null);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sidString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isRestricted", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isNetwork", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32);

    $.Property({Static:false, Public:false}, "IsRestricted", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNetwork", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroupOptions */ 

(function DbConnectionPoolGroupOptions$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroupOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasTransactionAffinity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PoolByIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseLoadBalancing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolByIdentity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_loadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasTransactionAffinity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_useLoadBalancing", $.Boolean);

    $.Property({Static:false, Public:true }, "CreationTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "HasTransactionAffinity", $.Boolean);

    $.Property({Static:false, Public:true }, "LoadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:true }, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:true }, "PoolByIdentity", $.Boolean);

    $.Property({Static:false, Public:true }, "UseLoadBalancing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.SchemaMapping */ 

(function SchemaMapping$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.SchemaMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DataAdapter"), $asm11.TypeRef("System.Data.DataSet"), 
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"), 
          $.Boolean, $asm11.TypeRef("System.Data.SchemaType"), 
          $.String, $.Boolean, 
          $asm11.TypeRef("System.Data.DataColumn"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAdditionalProperties", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddItemToAllowRollback", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Object])]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRelation", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm11.TypeRef("System.Data.DataColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyToDataRow", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateIndexMap", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeDataRowChapters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateFieldNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataReader", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataValues", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappedValues", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataRow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataRowChapters", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataRowWithClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MappedChapter", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MappedChapterIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MappedIndex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MappedValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResizeColumnArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackAddedItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupMapping", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $.Int32, $asm11.TypeRef("System.Data.DataColumnCollection"), 
          $asm11.TypeRef("System.Data.DataColumn"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupSchemaWithKeyInfo", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm11.TypeRef("System.Data.MissingMappingAction"), $asm11.TypeRef("System.Data.MissingSchemaAction"), 
          $.Boolean, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupSchemaWithoutKeyInfo", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm11.TypeRef("System.Data.MissingMappingAction"), $asm11.TypeRef("System.Data.MissingSchemaAction"), 
          $.Boolean, $asm11.TypeRef("System.Data.DataColumn"), 
          $.Object
        ])
    );

    $.Constant({Static:true , Public:false}, "MapExactMatch", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MapDifferentSize", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "MapReorderedValues", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "MapChapters", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "MapChaptersReordered", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "SqlXml", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "XmlDocument", $.Int32, 2);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_adapter", $asm11.TypeRef("System.Data.Common.DataAdapter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataReader", $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tableMapping", $asm11.TypeRef("System.Data.Common.DataTableMapping"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fieldNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_readerDataValues", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_mappedDataValues", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_indexMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_chapterMap", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_xmlMap", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_mappedMode", $.Int32);

    $.Field({Static:false, Public:false}, "_mappedLength", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_loadOption", $asm11.TypeRef("System.Data.LoadOption"));

    $.Property({Static:false, Public:false}, "DataReader", $asm11.TypeRef("System.Data.ProviderBase.DataReaderContainer"));

    $.Property({Static:false, Public:false}, "DataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Property({Static:false, Public:false}, "DataValues", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.TimeoutTimer */ 

(function TimeoutTimer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.TimeoutTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInfinite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LegacyTimerExpire", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MillisecondsRemaining", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeoutSeconds", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "StartMillisecondsTimeout", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartSecondsTimeout", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_timerExpire", $.Int64);

    $.Field({Static:false, Public:false}, "_isInfiniteTimeout", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InfiniteTimeout", $.Int64);

    $.Property({Static:false, Public:false}, "IsExpired", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInfinite", $.Boolean);

    $.Property({Static:false, Public:false}, "LegacyTimerExpire", $.Int64);

    $.Property({Static:false, Public:false}, "MillisecondsRemaining", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.CatalogLocation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.CatalogLocation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Start: 1, 
    End: 2, 
  }
);

/* class System.Data.Common.ADP */ 

(function ADP$Members () {
  var $, $thisType;




























































































































































































































































































































































  JSIL.MakeStaticClass("System.Data.Common.ADP", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AmbigousCollectionName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncOperationPending", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BadParameterName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildQuotedString", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchemaTableInfoTableNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "ByteArrayFromString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentLength", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckVersionMDAC", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassesRootRegistryValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClosedConnectionError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionIndexInt32", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionIndexString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionInvalidType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidCastException"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionNameIsNotUnique", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionNullValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionRemoveInvalidObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionUniqueValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsAddNullAttempt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnSchemaExpression", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnSchemaMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.DataColumn")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnSchemaMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsDataSetColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsIndexInt32", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.IColumnMappingCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsIndexSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsIsNotParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsIsParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnsUniqueSourceColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandAsyncOperationCompleted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandTextRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInsensitiveInvariant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputerNameEx", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigBaseElementsOnly", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigBaseNoChildNodes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigProviderInvalid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigProviderMissing", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigProviderNotFound", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigProviderNotInstalled", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Configuration.ConfigurationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigRequiredAttributeEmpty", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String, $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigRequiredAttributeMissing", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String, $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigSectionsUnique", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigUnableToLoadXmlMetaDataFile", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigUnrecognizedAttributes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigUnrecognizedElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Configuration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Configuration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String, $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigWrongNumberOfValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionAlreadyOpen", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionIsDisabled", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionRequired_Res", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionStateMsg", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionStringSyntax", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatedTaskWithCancellation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatedTaskWithException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm07.TypeRef("System.Exception")], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Data", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataAdapter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataAdapter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DatabaseNameTooLong", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DataMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataReaderClosed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataReaderNoData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DataTableDoesNotExist", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DbRecordReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DbTypeNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm11.TypeRef("System.Data.DbType"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DelegatedTransactionPresent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveParametersNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoubleValuedProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DstCompare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLJoinUnsupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNestedQuote", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNoKeyInfoDelete", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNoKeyInfoRowVersionDelete", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNoKeyInfoRowVersionUpdate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNoKeyInfoUpdate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicSQLNoTableInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EmptyDatabaseName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ErrorReadingFromStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.IOException"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeSpecialCharacters", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvenLengthLiteralValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceedsMaxDataLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionWithStackTrace", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillChapterAutoIncrement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FillRequires", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillRequiresSourceTableName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillSchemaRequiresSourceTableName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBuilder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$asm07.TypeRef("System.MulticastDelegate")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FixUpDecimalSeparator", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateUniqueName", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FalseTask", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TrueTask", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComputerNameDnsFullyQualified", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOletxTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IDtcTransaction"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVersionInfo", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.FileVersionInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlStreamFromValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexDigitLiteralValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectAsyncResult", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfDataSourceInformationRows", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOutOfRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IndexOutOfRangeException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalConnectionError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Common.ADP+ConnectionError")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Common.ADP+InternalErrorCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.Common.ADP+InternalErrorCode"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntPtrOffset", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "IntPtrToInt32", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAcceptRejectRule", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.AcceptRejectRule")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidArgumentLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidArgumentValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidBufferSizeOrIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IndexOutOfRangeException"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidCastException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidCastException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidCastException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCatalogLocation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.Common.CatalogLocation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCommandBehavior", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCommandTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCommandType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.CommandType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConflictOptions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.ConflictOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionValueLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectRetryCountValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectRetryIntervalValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectTimeoutValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataDirectory", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataRowState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.DataRowState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataRowVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDateTimeDigits", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDestinationBufferIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidEnumerationValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidFormatValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidImplicitConversion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidIsolationLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeyname", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeyRestrictionBehavior", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.KeyRestrictionBehavior")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLoadOption", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.LoadOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMaximumScale", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMaxRecords", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaDataValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMinMaxPoolSizeValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMissingMappingAction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.MissingMappingAction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMissingSchemaAction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.MissingSchemaAction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedArgumentOfSecureAndClearCredential", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedArgumentOfSecureCredentialAndContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedArgumentOfSecureCredentialAndIntegratedSecurity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfAccessTokenAndAuthentication", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfAccessTokenAndContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfAccessTokenAndCredential", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfAccessTokenAndIntegratedSecurity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfAccessTokenAndUserIDPassword", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfCredentialAndAccessToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfSecureAndClearCredential", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfSecureCredentialAndContextConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMultipartName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMultipartNameIncorrectUsageOfQuotes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMultipartNameToManyParts", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOffsetValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterDirection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.IDataParameterCollection"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPermissionState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPrefixSuffix", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRestrictionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidRule", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.Rule")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.SchemaType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSeekOrigin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSizeValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSourceBufferIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [
          $.Int32, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSourceColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSourceTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidStartRecord", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidStatementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.StatementType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUDL", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUpdateRowSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.UpdateRowSource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUpdateStatus", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.UpdateStatus")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUserDefinedTypeSerializationFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("Microsoft.SqlServer.Server.Format")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXMLBadVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXmlInvalidValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXmlMissingColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IO", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.IOException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IO", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.IOException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAzureSqlServerEndpoint", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCatchableExceptionType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCatchableOrSecurityExceptionType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.IDataParameter"), $asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmptyArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullOrSqlType", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSysTxEqualSysEsTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "KeywordNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LiteralValueIsInvalid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LocalMachineRegistryValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LocalTransactionPresent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodCalledTwice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotImplemented", 
      new JSIL.MethodSignature($asm07.TypeRef("System.NotImplementedException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MismatchedAsyncResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingColumnMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingConnectionOptionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingDataReaderFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingDataSourceInformationColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingRestrictionColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingRestrictionRow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingSelectCommand", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingSourceCommand", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingSourceCommandConnection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingTableMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingTableMappingDestination", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingTableSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultipleReturnValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.ArgumentException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBeReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedManualEnlistment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "NegativeParameter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoColumns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoConnectionString", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NonPooledOpenTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NonSeqByteAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int64, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonSequentialColumnAccess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoQuoteChange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoStoredProcedureExists", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotADataColumnMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotADataTableMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAPermissionElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      new JSIL.MethodSignature($asm07.TypeRef("System.NotImplementedException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotRowType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.NotSupportedException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.NotSupportedException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedCommandBehavior", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.CommandBehavior"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedEnumerationValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedStatementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("System.Data.StatementType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupportedUserDefinedTypeSerializationFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm11.TypeRef("Microsoft.SqlServer.Server.Format"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NumericToDecimalOverflow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectDisposed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ObjectDisposedException"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OdbcNoTypesFromProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OffsetOutOfRangeException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnlyOneTableForStartRecordOrMaxRecords", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenConnectionPropertySet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenReaderExists", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenReaderExists", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Overflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.OverflowException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Overflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.OverflowException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParallelTransactionsNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbConnection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterConversionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm11.TypeRef("System.Data.IDataParameterCollection"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersIsNotParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersIsParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersMappingIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.IDataParameterCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersSourceIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm11.TypeRef("System.Data.IDataParameterCollection"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterValueOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PermissionTypeMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PooledOpenTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareParameterScale", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbCommand"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareParameterSize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareParameterType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.PlatformNotSupportedException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Provider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuotePrefixNotSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveStringQuotes", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResultsNotAllowedDuringBatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RowUpdatedErrors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RowUpdatingErrors", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectAdapterRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")]), [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetCurrentTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SingleValuedProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SrcCompare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamClosed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringLength", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesAddNullAttempt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesDataSetTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesIndexInt32", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.ITableMappingCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesIsNotParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesIsParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesSourceIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TablesUniqueSourceTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeoutException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerCurrent", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int64]))
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerCurrent", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerFromMilliseconds", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerFromSeconds", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerHasExpired", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerRemaining", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerRemainingMilliseconds", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerRemainingSeconds", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerToMilliseconds", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerToSeconds", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "TooManyRestrictions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionAsReturnValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionForCapture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionWithoutRethrow", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionCompleted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionCompletedButNotDisposed", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionConnectionMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionPresent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionZombied", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbTransaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeLoadException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UdlFileError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnableToBuildCollection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnableToCreateBooleanLiteral", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.InvalidOperationException"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedCollection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedPopulationMechanism", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UninitializedParameterSize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownDataTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedNativeDataTypeOleDb", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnwantedStatementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm11.TypeRef("System.Data.StatementType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateConcurrencyViolation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.StatementType"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataRow")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm11.TypeRef("System.Data.StatementType"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateMismatchRowTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateOpenConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean, 
          $asm11.TypeRef("System.Data.ConnectionState")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateRequiresCommand", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm11.TypeRef("System.Data.StatementType"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateRequiresDataTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateRequiresNonNullDataSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateRequiresSourceTable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateRequiresSourceTableName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCommandBehavior", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandBehavior"))
    );

    $.ExternalMethod({Static:true , Public:false}, "VersionDoesNotSupportDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:false}, "_trueTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), null);

    $.Field({Static:true , Public:false}, "_falseTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]), null);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StackOverflowType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.StackOverflowException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OutOfMemoryType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.OutOfMemoryException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ThreadAbortType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Threading.ThreadAbortException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullReferenceType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.NullReferenceException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "AccessViolationType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.AccessViolationException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SecurityType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Security.SecurityException.__Type__;
      });

    $.Constant({Static:true , Public:false}, "Append", $.String, "Append");

    $.Constant({Static:true , Public:false}, "BeginExecuteNonQuery", $.String, "BeginExecuteNonQuery");

    $.Constant({Static:true , Public:false}, "BeginExecuteReader", $.String, "BeginExecuteReader");

    $.Constant({Static:true , Public:false}, "BeginTransaction", $.String, "BeginTransaction");

    $.Constant({Static:true , Public:false}, "BeginExecuteXmlReader", $.String, "BeginExecuteXmlReader");

    $.Constant({Static:true , Public:false}, "ChangeDatabase", $.String, "ChangeDatabase");

    $.Constant({Static:true , Public:false}, "Cancel", $.String, "Cancel");

    $.Constant({Static:true , Public:false}, "Clone", $.String, "Clone");

    $.Constant({Static:true , Public:false}, "ColumnEncryptionSystemProviderNamePrefix", $.String, "MSSQL_");

    $.Constant({Static:true , Public:false}, "CommitTransaction", $.String, "CommitTransaction");

    $.Constant({Static:true , Public:false}, "CommandTimeout", $.String, "CommandTimeout");

    $.Constant({Static:true , Public:false}, "ConnectionString", $.String, "ConnectionString");

    $.Constant({Static:true , Public:false}, "DataSetColumn", $.String, "DataSetColumn");

    $.Constant({Static:true , Public:false}, "DataSetTable", $.String, "DataSetTable");

    $.Constant({Static:true , Public:false}, "Delete", $.String, "Delete");

    $.Constant({Static:true , Public:false}, "DeleteCommand", $.String, "DeleteCommand");

    $.Constant({Static:true , Public:false}, "DeriveParameters", $.String, "DeriveParameters");

    $.Constant({Static:true , Public:false}, "EndExecuteNonQuery", $.String, "EndExecuteNonQuery");

    $.Constant({Static:true , Public:false}, "EndExecuteReader", $.String, "EndExecuteReader");

    $.Constant({Static:true , Public:false}, "EndExecuteXmlReader", $.String, "EndExecuteXmlReader");

    $.Constant({Static:true , Public:false}, "ExecuteReader", $.String, "ExecuteReader");

    $.Constant({Static:true , Public:false}, "ExecuteRow", $.String, "ExecuteRow");

    $.Constant({Static:true , Public:false}, "ExecuteNonQuery", $.String, "ExecuteNonQuery");

    $.Constant({Static:true , Public:false}, "ExecuteScalar", $.String, "ExecuteScalar");

    $.Constant({Static:true , Public:false}, "ExecuteSqlScalar", $.String, "ExecuteSqlScalar");

    $.Constant({Static:true , Public:false}, "ExecuteXmlReader", $.String, "ExecuteXmlReader");

    $.Constant({Static:true , Public:false}, "Fill", $.String, "Fill");

    $.Constant({Static:true , Public:false}, "FillPage", $.String, "FillPage");

    $.Constant({Static:true , Public:false}, "FillSchema", $.String, "FillSchema");

    $.Constant({Static:true , Public:false}, "GetBytes", $.String, "GetBytes");

    $.Constant({Static:true , Public:false}, "GetChars", $.String, "GetChars");

    $.Constant({Static:true , Public:false}, "GetOleDbSchemaTable", $.String, "GetOleDbSchemaTable");

    $.Constant({Static:true , Public:false}, "GetProperties", $.String, "GetProperties");

    $.Constant({Static:true , Public:false}, "GetSchema", $.String, "GetSchema");

    $.Constant({Static:true , Public:false}, "GetSchemaTable", $.String, "GetSchemaTable");

    $.Constant({Static:true , Public:false}, "GetServerTransactionLevel", $.String, "GetServerTransactionLevel");

    $.Constant({Static:true , Public:false}, "Insert", $.String, "Insert");

    $.Constant({Static:true , Public:false}, "Open", $.String, "Open");

    $.Constant({Static:true , Public:false}, "Parameter", $.String, "Parameter");

    $.Constant({Static:true , Public:false}, "ParameterBuffer", $.String, "buffer");

    $.Constant({Static:true , Public:false}, "ParameterCount", $.String, "count");

    $.Constant({Static:true , Public:false}, "ParameterDestinationType", $.String, "destinationType");

    $.Constant({Static:true , Public:false}, "ParameterIndex", $.String, "index");

    $.Constant({Static:true , Public:false}, "ParameterName", $.String, "ParameterName");

    $.Constant({Static:true , Public:false}, "ParameterOffset", $.String, "offset");

    $.Constant({Static:true , Public:false}, "ParameterSetPosition", $.String, "set_Position");

    $.Constant({Static:true , Public:false}, "ParameterService", $.String, "Service");

    $.Constant({Static:true , Public:false}, "ParameterTimeout", $.String, "Timeout");

    $.Constant({Static:true , Public:false}, "ParameterUserData", $.String, "UserData");

    $.Constant({Static:true , Public:false}, "Prepare", $.String, "Prepare");

    $.Constant({Static:true , Public:false}, "QuoteIdentifier", $.String, "QuoteIdentifier");

    $.Constant({Static:true , Public:false}, "Read", $.String, "Read");

    $.Constant({Static:true , Public:false}, "ReadAsync", $.String, "ReadAsync");

    $.Constant({Static:true , Public:false}, "Remove", $.String, "Remove");

    $.Constant({Static:true , Public:false}, "RollbackTransaction", $.String, "RollbackTransaction");

    $.Constant({Static:true , Public:false}, "SaveTransaction", $.String, "SaveTransaction");

    $.Constant({Static:true , Public:false}, "SetProperties", $.String, "SetProperties");

    $.Constant({Static:true , Public:false}, "SourceColumn", $.String, "SourceColumn");

    $.Constant({Static:true , Public:false}, "SourceVersion", $.String, "SourceVersion");

    $.Constant({Static:true , Public:false}, "SourceTable", $.String, "SourceTable");

    $.Constant({Static:true , Public:false}, "UnquoteIdentifier", $.String, "UnquoteIdentifier");

    $.Constant({Static:true , Public:false}, "Update", $.String, "Update");

    $.Constant({Static:true , Public:false}, "UpdateCommand", $.String, "UpdateCommand");

    $.Constant({Static:true , Public:false}, "UpdateRows", $.String, "UpdateRows");

    $.Constant({Static:true , Public:false}, "compareOptions", $asm07.TypeRef("System.Globalization.CompareOptions"), 25);

    $.Constant({Static:true , Public:false}, "DecimalMaxPrecision", $.Int32, 29);

    $.Constant({Static:true , Public:false}, "DecimalMaxPrecision28", $.Int32, 28);

    $.Constant({Static:true , Public:false}, "DefaultCommandTimeout", $.Int32, 30);

    $.Constant({Static:true , Public:false}, "DefaultConnectionTimeout", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "FailoverTimeoutStep", $.Single, 0.08);

    $.Constant({Static:true , Public:false}, "FailoverTimeoutStepForTnir", $.Single, 0.125);

    $.Constant({Static:true , Public:false}, "MinimumTimeoutForTnirMs", $.Int32, 500);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StrEmpty", $.String, "");

    $.Field({Static:true , Public:false, ReadOnly:true }, "PtrZero", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "PtrSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidPtr", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "RecordsUnaffected", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullHandleRef", $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"));

    $.Constant({Static:true , Public:false}, "CharSize", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsWindowsNT", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsPlatformNT5", $.Boolean);

    $.Constant({Static:true , Public:false}, "hexDigits", $.String, "0123456789abcdef");

    $.Field({Static:true , Public:false}, "_systemDataVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AzureSqlServerEndpoints", $jsilcore.TypeRef("System.Array", [$.String]));


    function ADP__cctor () {
      $thisType.PtrZero = new $asm07.System.IntPtr();
      $thisType.InvalidPtr = new $asm07.System.IntPtr();
      $thisType.RecordsUnaffected = new $asm07.System.IntPtr();
      $thisType.NullHandleRef = new $asm07.System.Runtime.InteropServices.HandleRef();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ADP__cctor
    );

    $.Property({Static:true , Public:false}, "TrueTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]));

    $.Property({Static:true , Public:false}, "FalseTask", $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.ADP+ConnectionError */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.ADP+ConnectionError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BeginGetConnectionReturnsNull: 0, 
    GetConnectionReturnsNull: 1, 
    ConnectionOptionsMissing: 2, 
    CouldNotSwitchToClosedPreviouslyOpenedState: 3, 
  }
);

/* enum System.Data.Common.ADP+InternalErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.ADP+InternalErrorCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UnpooledObjectHasOwner: 0, 
    UnpooledObjectHasWrongOwner: 1, 
    PushingObjectSecondTime: 2, 
    PooledObjectHasOwner: 3, 
    PooledObjectInPoolMoreThanOnce: 4, 
    CreateObjectReturnedNull: 5, 
    NewObjectCannotBePooled: 6, 
    NonPooledObjectUsedMoreThanOnce: 7, 
    AttemptingToPoolOnRestrictedToken: 8, 
    ConvertSidToStringSidWReturnedNull: 10, 
    AttemptingToConstructReferenceCollectionOnStaticObject: 12, 
    AttemptingToEnlistTwice: 13, 
    CreateReferenceCollectionReturnedNull: 14, 
    PooledObjectWithoutPool: 15, 
    UnexpectedWaitAnyResult: 16, 
    SynchronousConnectReturnedPending: 17, 
    CompletedConnectReturnedPending: 18, 
    NameValuePairNext: 20, 
    InvalidParserState1: 21, 
    InvalidParserState2: 22, 
    InvalidParserState3: 23, 
    InvalidBuffer: 30, 
    UnimplementedSMIMethod: 40, 
    InvalidSmiCall: 41, 
    SqlDependencyObtainProcessDispatcherFailureObjectHandle: 50, 
    SqlDependencyProcessDispatcherFailureCreateInstance: 51, 
    SqlDependencyProcessDispatcherFailureAppDomain: 52, 
    SqlDependencyCommandHashIsNotAssociatedWithNotification: 53, 
    UnknownTransactionFailure: 60, 
  }
);

/* class System.Data.Common.DataStorage */ 

(function DataStorage$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DataStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type"), 
          $.Object, $asm11.TypeRef("System.Data.Common.StorageType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type"), 
          $.Object, $.Object, 
          $asm11.TypeRef("System.Data.Common.StorageType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type"), 
          $.Object, $.Object, 
          $.Boolean, $asm11.TypeRef("System.Data.Common.StorageType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AggregateCount", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareBits", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyBits", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyValueInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateStorage", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.Common.StorageType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetermineIfValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTimeMode", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataSetDateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IFormatProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBits", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEmptyStorageInternal", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetQualifiedName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStorageType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.StorageType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStringLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeStorage", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasValue", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImplementsInterfaces", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.StorageType"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImplementsINullableValue", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InspectTypeForInterfaces", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Tuple`4", [
            $.Boolean, $.Boolean, 
            $.Boolean, $.Boolean
          ]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsObjectNull", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsObjectSqlNull", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSqlType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSqlType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeCustomType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeCustomType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.StorageType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNullBit", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNullStorage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.BitArray"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStorageInternal", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "StorageClassType", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Column", $asm11.TypeRef("System.Data.DataColumn"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Table", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "DataType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "StorageTypeCode", $asm11.TypeRef("System.Data.Common.StorageType"));

    $.Field({Static:false, Public:false}, "dbNullBits", $asm07.TypeRef("System.Collections.BitArray"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "DefaultValue", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "NullValue", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsCloneable", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsCustomDefinedType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsStringType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsValueType", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_inspectTypeForInterfaces", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Tuple`4", [
            $.Boolean, $.Boolean, 
            $.Boolean, $.Boolean
          ])]), function ($pi) {
        return $asm07.System.Func$b2.Of($asm07.System.Type, $asm07.System.Tuple$b4.Of(
              $asm07.System.Boolean, $asm07.System.Boolean, 
              $asm07.System.Boolean, $asm07.System.Boolean
          )).New(null, null, new JSIL.MethodPointerInfo($thisType, "InspectTypeForInterfaces", new JSIL.MethodSignature($asm07.TypeRef("System.Tuple`4", [
                  $.Boolean, $.Boolean, 
                  $.Boolean, $.Boolean
                ]), [$asm07.TypeRef("System.Type")]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "_typeImplementsInterface", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Tuple`4", [
            $.Boolean, $.Boolean, 
            $.Boolean, $.Boolean
          ])]));

    $.Property({Static:false, Public:false}, "DateTimeMode", $asm11.TypeRef("System.Data.DataSetDateTime"));

    $.Property({Static:false, Public:false}, "FormatProvider", $asm07.TypeRef("System.IFormatProvider"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.BooleanStorage */ 

(function BooleanStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.BooleanStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Boolean, false);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.ByteStorage */ 

(function ByteStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.ByteStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Byte, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.CharStorage */ 

(function CharStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.CharStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Char, "\x00");

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.LoadAdapter */ 

(function LoadAdapter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataAdapter"), 
      Name: "System.Data.Common.LoadAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromReader", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataTable")]), $asm11.TypeRef("System.Data.IDataReader"), 
          $.Int32, $.Int32
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DataColumnMapping */ 

(function DataColumnMapping$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DataColumnMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDataColumnBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSetColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDataColumnBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "GetDataColumnBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.DataTable"), $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataSetColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Parent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "parent", $asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"));

    $.Field({Static:false, Public:false}, "_dataSetColumnName", $.String);

    $.Field({Static:false, Public:false}, "_sourceColumnName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DataSetColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMapping_DataSetColumn"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:false}, "Parent", $asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMapping_SourceColumn"]; });

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IColumnMapping"), 
      /* 1 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.Common.DataColumnMapping_DataColumnMappingConverter.__Type__]; });

})();

/* class System.Data.Common.DataColumnMapping+DataColumnMappingConverter */ 

(function DataColumnMappingConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.Common.DataColumnMapping+DataColumnMappingConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DataColumnMappingCollection */ 

(function DataColumnMappingCollection$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DataColumnMappingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEnumerableRange", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.IEnumerable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DataColumnMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWithoutEvents", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataColumnMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Common.DataColumnMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWithoutEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DataColumnMapping")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByDataSetColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetColumnMappingBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [
          $.Type, $.String, 
          $asm11.TypeRef("System.Data.MissingMappingAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:true , Public:true }, "GetDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.Type, $.String, 
          $asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.DataTable"), 
          $asm11.TypeRef("System.Data.MissingMappingAction"), $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfDataSetColumn", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataColumnMapping"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IColumnMappingCollection.Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IColumnMapping"), [$.String, $.String])
    )
      .Overrides($asm11.TypeRef("System.Data.IColumnMappingCollection"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IColumnMappingCollection.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm11.TypeRef("System.Data.IColumnMappingCollection"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IColumnMappingCollection.GetByDataSetColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IColumnMapping"), [$.String])
    )
      .Overrides($asm11.TypeRef("System.Data.IColumnMappingCollection"), "GetByDataSetColumn");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IColumnMappingCollection.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm11.TypeRef("System.Data.IColumnMappingCollection"), "set_Item");

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataColumnMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSourceColumn", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Common.DataColumnMapping")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IColumnMappingCollection.Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMappings_Count"]; });

    $.Property({Static:false, Public:false}, "ItemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DataColumnMapping"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMappings_Item"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DataColumnMapping"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataColumnMappings_Item"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.IColumnMappingCollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 2 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Data.Common.StorageType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.StorageType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Object: 1, 
    DBNull: 2, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    TimeSpan: 17, 
    String: 18, 
    Guid: 19, 
    ByteArray: 20, 
    CharArray: 21, 
    Type: 22, 
    DateTimeOffset: 23, 
    BigInteger: 24, 
    Uri: 25, 
    SqlBinary: 26, 
    SqlBoolean: 27, 
    SqlByte: 28, 
    SqlBytes: 29, 
    SqlChars: 30, 
    SqlDateTime: 31, 
    SqlDecimal: 32, 
    SqlDouble: 33, 
    SqlGuid: 34, 
    SqlInt16: 35, 
    SqlInt32: 36, 
    SqlInt64: 37, 
    SqlMoney: 38, 
    SqlSingle: 39, 
    SqlString: 40, 
  }
);

/* class System.Data.Common.DataTableMapping */ 

(function DataTableMapping$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DataTableMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DataColumnMapping")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSetTable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DataTableMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceTable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetColumnMappingBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataColumnMapping"), [$.String, $asm11.TypeRef("System.Data.MissingMappingAction")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Data.DataTable"), $asm11.TypeRef("System.Data.MissingMappingAction"), 
          $asm11.TypeRef("System.Data.MissingSchemaAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetDataTableBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataSet"), $asm11.TypeRef("System.Data.MissingSchemaAction")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataSetTable", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Parent", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataTableMappingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceTable", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.ITableMapping.get_ColumnMappings", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IColumnMappingCollection"))
    )
      .Overrides($asm11.TypeRef("System.Data.ITableMapping"), "get_ColumnMappings");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "parent", $asm11.TypeRef("System.Data.Common.DataTableMappingCollection"));

    $.Field({Static:false, Public:false}, "_columnMappings", $asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"));

    $.Field({Static:false, Public:false}, "_dataSetTableName", $.String);

    $.Field({Static:false, Public:false}, "_sourceTableName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.ITableMapping.ColumnMappings", $asm11.TypeRef("System.Data.IColumnMappingCollection"));

    $.Property({Static:false, Public:true }, "ColumnMappings", $asm11.TypeRef("System.Data.Common.DataColumnMappingCollection"))
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMapping_ColumnMappings"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSetTable", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMapping_DataSetTable"]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.Property({Static:false, Public:false}, "Parent", $asm11.TypeRef("System.Data.Common.DataTableMappingCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "SourceTable", $.String)
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMapping_SourceTable"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm11.TypeRef("System.Data.ResCategoryAttribute"), function () { return ["DataCategory_Mapping"]; });

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.ITableMapping"), 
      /* 1 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Data.Common.DataTableMapping_DataTableMappingConverter.__Type__]; });

})();

/* class System.Data.Common.DataTableMapping+DataTableMappingConverter */ 

(function DataTableMappingConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.Common.DataTableMapping+DataTableMappingConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DataTableMappingCollection */ 

(function DataTableMappingCollection$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Data.Common.DataTableMappingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEnumerableRange", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.IEnumerable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DataTableMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWithoutEvents", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataTableMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Common.DataTableMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWithoutEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DataTableMapping")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByDataSetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTableMappingBySchemaAction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DataTableMapping"), [
          $.Type, $.String, 
          $.String, $asm11.TypeRef("System.Data.MissingMappingAction")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOfDataSetTable", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DataTableMapping"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.ITableMappingCollection.Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ITableMapping"), [$.String, $.String])
    )
      .Overrides($asm11.TypeRef("System.Data.ITableMappingCollection"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.ITableMappingCollection.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm11.TypeRef("System.Data.ITableMappingCollection"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.ITableMappingCollection.GetByDataSetTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.ITableMapping"), [$.String])
    )
      .Overrides($asm11.TypeRef("System.Data.ITableMappingCollection"), "GetByDataSetTable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.ITableMappingCollection.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm11.TypeRef("System.Data.ITableMappingCollection"), "set_Item");

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DataTableMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSourceTable", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Data.Common.DataTableMapping")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.ITableMappingCollection.Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMappings_Count"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "ItemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DataTableMapping"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMappings_Item"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Data.Common.DataTableMapping"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm11.TypeRef("System.Data.ResDescriptionAttribute"), function () { return ["DataTableMappings_Item"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Data.ITableMappingCollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 2 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DataTableMappingCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; });

})();

/* class System.Data.Common.DateTimeStorage */ 

(function DateTimeStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.DateTimeStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValue", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTime")]));


    function DateTimeStorage__cctor () {
      $thisType.defaultValue = new $asm07.System.DateTime();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DateTimeStorage__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DBConnectionString */ 

(function DBConnectionString$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DBConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbConnectionOptions"), $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Behavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyChain", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.NameValuePair"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Restrictions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRestrictedKeyword", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewRestrictionAllowOnly", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewRestrictionIntersect", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoDuplicateUnion", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseRestrictions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveDuplicates", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCombinedSet", 
      new JSIL.MethodSignature(null, [$.Type, $.Type])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Verify", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptedUsersConnectionString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parsetable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keychain", $asm11.TypeRef("System.Data.Common.NameValuePair"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasPassword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictionValues", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictions", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptedActualConnectionString", $.String);

    $.Property({Static:false, Public:false}, "Behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:false}, "ConnectionString", $.String);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "KeyChain", $asm11.TypeRef("System.Data.Common.NameValuePair"));

    $.Property({Static:false, Public:false}, "Restrictions", $.String);

    $.Property({Static:false, Public:false}, "Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Common.DbConnectionStringBuilderDescriptor */ 

(function DbConnectionStringBuilderDescriptor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.Common.DbConnectionStringBuilderDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RefreshOnChange", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RefreshOnChange", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_componentType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_propertyType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_refreshOnChange", $.Boolean);

    $.Property({Static:false, Public:false}, "RefreshOnChange", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.ReadOnlyCollection`1 */ 

(function ReadOnlyCollection$b1$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.ReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Common.ReadOnlyCollection`1+Enumerator`1 */ 

(function Enumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Common.ReadOnlyCollection`1+Enumerator`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T", "K"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("K"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("K")]));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("K"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("K")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnectionStringBuilderUtil */ 

(function DbConnectionStringBuilderUtil$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("System.Data.Common.DbConnectionStringBuilderUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ApplicationIntentToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.ApplicationIntent")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AuthenticationTypeToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ColumnEncryptionSettingToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToApplicationIntent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToAuthenticationType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToColumnEncryptionSetting", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntegratedSecurity", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToPoolBlockingPeriod", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidApplicationIntentValue", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.ApplicationIntent")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidAuthenticationTypeValue", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidColumnEncryptionSetting", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidPoolBlockingPeriodValue", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolBlockingPeriodToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertToApplicationIntent", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.ApplicationIntent")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertToAuthenticationType", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertToColumnEncryptionSetting", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertToPoolBlockingPeriod", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod")])])
    );

    $.Constant({Static:true , Public:false}, "PoolBlockingPeriodAutoString", $.String, "Auto");

    $.Constant({Static:true , Public:false}, "PoolBlockingPeriodAlwaysBlockString", $.String, "AlwaysBlock");

    $.Constant({Static:true , Public:false}, "PoolBlockingPeriodNeverBlockString", $.String, "NeverBlock");

    $.Constant({Static:true , Public:false}, "ApplicationIntentReadWriteString", $.String, "ReadWrite");

    $.Constant({Static:true , Public:false}, "ApplicationIntentReadOnlyString", $.String, "ReadOnly");

    $.Constant({Static:true , Public:false}, "SqlPasswordString", $.String, "Sql Password");

    $.Constant({Static:true , Public:false}, "ActiveDirectoryPasswordString", $.String, "Active Directory Password");

    $.Constant({Static:true , Public:false}, "ActiveDirectoryIntegratedString", $.String, "Active Directory Integrated");

    $.Constant({Static:true , Public:false}, "ColumnEncryptionSettingEnabledString", $.String, "Enabled");

    $.Constant({Static:true , Public:false}, "ColumnEncryptionSettingDisabledString", $.String, "Disabled");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnectionStringDefaults */ 

(function DbConnectionStringDefaults$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Common.DbConnectionStringDefaults", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Driver", $.String, "");

    $.Constant({Static:true , Public:false}, "Dsn", $.String, "");

    $.Constant({Static:true , Public:false}, "AdoNetPooler", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "FileName", $.String, "");

    $.Constant({Static:true , Public:false}, "OleDbServices", $.Int32, -13);

    $.Constant({Static:true , Public:false}, "Provider", $.String, "");

    $.Constant({Static:true , Public:false}, "Unicode", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "OmitOracleConnectionName", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "ApplicationIntent", $asm11.TypeRef("System.Data.SqlClient.ApplicationIntent"), 0);

    $.Constant({Static:true , Public:false}, "ApplicationName", $.String, ".Net SqlClient Data Provider");

    $.Constant({Static:true , Public:false}, "AsynchronousProcessing", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "AttachDBFilename", $.String, "");

    $.Constant({Static:true , Public:false}, "ConnectTimeout", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "ConnectionReset", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "ContextConnection", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "CurrentLanguage", $.String, "");

    $.Constant({Static:true , Public:false}, "DataSource", $.String, "");

    $.Constant({Static:true , Public:false}, "Encrypt", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Enlist", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "FailoverPartner", $.String, "");

    $.Constant({Static:true , Public:false}, "InitialCatalog", $.String, "");

    $.Constant({Static:true , Public:false}, "IntegratedSecurity", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "LoadBalanceTimeout", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "MultipleActiveResultSets", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "MultiSubnetFailover", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "TransparentNetworkIPResolution", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "MaxPoolSize", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "MinPoolSize", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "NetworkLibrary", $.String, "");

    $.Constant({Static:true , Public:false}, "PacketSize", $.Int32, 8000);

    $.Constant({Static:true , Public:false}, "Password", $.String, "");

    $.Constant({Static:true , Public:false}, "PersistSecurityInfo", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Pooling", $.Boolean, true);

    $.Constant({Static:true , Public:false}, "TrustServerCertificate", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "TypeSystemVersion", $.String, "Latest");

    $.Constant({Static:true , Public:false}, "UserID", $.String, "");

    $.Constant({Static:true , Public:false}, "UserInstance", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "Replication", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "WorkstationID", $.String, "");

    $.Constant({Static:true , Public:false}, "TransactionBinding", $.String, "Implicit Unbind");

    $.Constant({Static:true , Public:false}, "ConnectRetryCount", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ConnectRetryInterval", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Authentication", $asm11.TypeRef("System.Data.SqlClient.SqlAuthenticationMethod"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ColumnEncryptionSetting", $asm11.TypeRef("System.Data.SqlClient.SqlConnectionColumnEncryptionSetting"));

    $.Constant({Static:true , Public:false}, "PoolBlockingPeriod", $asm11.TypeRef("System.Data.SqlClient.PoolBlockingPeriod"), 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbDataRecord */ 

(function DbDataRecord$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbDataRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetAttributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetAttributes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetClassName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetClassName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetComponentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetComponentName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetConverter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEditor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEditor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetPropertyOwner");

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), 
      /* 1 */ $asm11.TypeRef("System.Data.IDataRecord")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.Common.DbEnumerator */ 

(function DbEnumerator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDataReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbDataReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "_reader", $asm11.TypeRef("System.Data.IDataReader"));

    $.Field({Static:false, Public:false}, "_current", $asm11.TypeRef("System.Data.Common.DbDataRecord"));

    $.Field({Static:false, Public:false}, "_schemaInfo", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.SchemaInfo")]));

    $.Field({Static:false, Public:false}, "_descriptors", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "closeReader", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbEnumerator+DbColumnDescriptor */ 

(function DbColumnDescriptor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.Common.DbEnumerator+DbColumnDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderConfigurationHandler */ 

(function DbProviderConfigurationHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbProviderConfigurationHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneParent", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), [$asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateStatic", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveAttribute", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.Constant({Static:true , Public:false}, "settings", $.String, "settings");

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.Configuration.IConfigurationSectionHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderConfigurationHandler+DbProviderDictionarySectionHandler */ 

(function DbProviderDictionarySectionHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbProviderConfigurationHandler+DbProviderDictionarySectionHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateStatic", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), [
          $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleAdd", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleClear", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleRemove", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderFactories */ 

(function DbProviderFactories$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Data.Common.DbProviderFactories", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbProviderFactory"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbProviderFactory"), [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFactory", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbProviderFactory"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFactoryClasses", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProviderTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeFrameworkFactoryClasses", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "AssemblyQualifiedName", $.String, "AssemblyQualifiedName");

    $.Constant({Static:true , Public:false}, "Instance", $.String, "Instance");

    $.Constant({Static:true , Public:false}, "InvariantName", $.String, "InvariantName");

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Description");

    $.Field({Static:true , Public:false}, "_initState", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Field({Static:true , Public:false}, "_providerTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:true , Public:false}, "_lockobj", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderFactoryConfigSection */ 

(function DbProviderFactoryConfigSection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbProviderFactoryConfigSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyQualifiedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvariantName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "factType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "invariantName", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "assemblyQualifiedName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "InvariantName", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "AssemblyQualifiedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderFactoriesConfigurationHandler */ 

(function DbProviderFactoriesConfigurationHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbProviderFactoriesConfigurationHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateProviderDataTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateStatic", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleProviders", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataSet"), $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "sectionName", $.String, "system.data");

    $.Constant({Static:true , Public:false}, "providerGroup", $.String, "DbProviderFactories");

    $.Constant({Static:true , Public:false}, "odbcProviderName", $.String, "Odbc Data Provider");

    $.Constant({Static:true , Public:false}, "odbcProviderDescription", $.String, ".Net Framework Data Provider for Odbc");

    $.Constant({Static:true , Public:false}, "oledbProviderName", $.String, "OleDb Data Provider");

    $.Constant({Static:true , Public:false}, "oledbProviderDescription", $.String, ".Net Framework Data Provider for OleDb");

    $.Constant({Static:true , Public:false}, "oracleclientProviderName", $.String, "OracleClient Data Provider");

    $.Constant({Static:true , Public:false}, "oracleclientProviderNamespace", $.String, "System.Data.OracleClient");

    $.Constant({Static:true , Public:false}, "oracleclientProviderDescription", $.String, ".Net Framework Data Provider for Oracle");

    $.Constant({Static:true , Public:false}, "sqlclientProviderName", $.String, "SqlClient Data Provider");

    $.Constant({Static:true , Public:false}, "sqlclientProviderDescription", $.String, ".Net Framework Data Provider for SqlServer");

    $.Constant({Static:true , Public:false}, "sqlclientPartialAssemblyQualifiedName", $.String, "System.Data.SqlClient.SqlClientFactory, System.Data,");

    $.Constant({Static:true , Public:false}, "oracleclientPartialAssemblyQualifiedName", $.String, "System.Data.OracleClient.OracleClientFactory, System.Data.OracleClient,");

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.Configuration.IConfigurationSectionHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderFactoriesConfigurationHandler+DbProviderDictionarySectionHandler */ 

(function DbProviderDictionarySectionHandler$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Data.Common.DbProviderFactoriesConfigurationHandler+DbProviderDictionarySectionHandler", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateStatic", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataTable"), $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleAdd", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleClear", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataTable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleRemove", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm11.TypeRef("System.Data.DataTable")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbProviderSpecificTypePropertyAttribute */ 

(function DbProviderSpecificTypePropertyAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Data.Common.DbProviderSpecificTypePropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsProviderSpecificTypeProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_isProviderSpecificTypeProperty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsProviderSpecificTypeProperty", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Property]; });

})();

/* class System.Data.Common.DbSchemaRow */ 

(function DbSchemaRow$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbSchemaRow", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbSchemaTable"), $asm11.TypeRef("System.Data.DataRow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowDBNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseCatalogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseSchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseTableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataRow", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRow"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAutoIncrement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExpression", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHidden", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLong", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRowVersion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnique", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnsortedIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSortedSchemaRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.Constant({Static:true , Public:false}, "SchemaMappingUnsortedIndex", $.String, "SchemaMapping Unsorted Index");

    $.Field({Static:false, Public:false}, "schemaTable", $asm11.TypeRef("System.Data.Common.DbSchemaTable"));

    $.Field({Static:false, Public:false}, "dataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "DataRow", $asm11.TypeRef("System.Data.DataRow"));

    $.Property({Static:false, Public:false}, "ColumnName", $.String);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.Property({Static:false, Public:false}, "BaseColumnName", $.String);

    $.Property({Static:false, Public:false}, "BaseServerName", $.String);

    $.Property({Static:false, Public:false}, "BaseCatalogName", $.String);

    $.Property({Static:false, Public:false}, "BaseSchemaName", $.String);

    $.Property({Static:false, Public:false}, "BaseTableName", $.String);

    $.Property({Static:false, Public:false}, "IsAutoIncrement", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnique", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRowVersion", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKey", $.Boolean);

    $.Property({Static:false, Public:false}, "IsExpression", $.Boolean);

    $.Property({Static:false, Public:false}, "IsHidden", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLong", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "DataType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "AllowDBNull", $.Boolean);

    $.Property({Static:false, Public:false}, "UnsortedIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbSchemaTable */ 

(function DbSchemaTable$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbSchemaTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachedDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.Common.DbSchemaTable+ColumnEnum")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachedDataColumn", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataColumn"), [$asm11.TypeRef("System.Data.Common.DbSchemaTable+ColumnEnum"), $asm11.TypeRef("System.Data.Common.DbSchemaTable+ColumnEnum")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowDBNull", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseCatalogName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseColumnName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseSchemaName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseServerName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseTableName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnName", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAutoIncrement", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExpression", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHidden", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKey", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLong", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRowVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnique", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnsortedIndex", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DBCOLUMN_NAME", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "dataTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "columns", $asm11.TypeRef("System.Data.DataColumnCollection"));

    $.Field({Static:false, Public:false}, "columnCache", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]));

    $.Field({Static:false, Public:false}, "_returnProviderSpecificTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "ColumnName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "Size", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "BaseServerName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "BaseColumnName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "BaseTableName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "BaseCatalogName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "BaseSchemaName", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsAutoIncrement", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsUnique", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsKey", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsRowVersion", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "AllowDBNull", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsExpression", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsHidden", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsLong", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "IsReadOnly", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "UnsortedIndex", $asm11.TypeRef("System.Data.DataColumn"));

    $.Property({Static:false, Public:false}, "DataType", $asm11.TypeRef("System.Data.DataColumn"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.DbSchemaTable+ColumnEnum */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.DbSchemaTable+ColumnEnum", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ColumnName: 0, 
    ColumnOrdinal: 1, 
    ColumnSize: 2, 
    BaseServerName: 3, 
    BaseCatalogName: 4, 
    BaseColumnName: 5, 
    BaseSchemaName: 6, 
    BaseTableName: 7, 
    IsAutoIncrement: 8, 
    IsUnique: 9, 
    IsKey: 10, 
    IsRowVersion: 11, 
    DataType: 12, 
    ProviderSpecificDataType: 13, 
    AllowDBNull: 14, 
    ProviderType: 15, 
    IsExpression: 16, 
    IsHidden: 17, 
    IsLong: 18, 
    IsReadOnly: 19, 
    SchemaMappingUnsortedIndex: 20, 
  }
);

/* class System.Data.Common.DecimalStorage */ 

(function DecimalStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.DecimalStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValue", $asm07.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Decimal")]));


    function DecimalStorage__cctor () {
      $thisType.defaultValue = 0;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DecimalStorage__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DoubleStorage */ 

(function DoubleStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.DoubleStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Double, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Double]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.GroupByBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.GroupByBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    NotSupported: 1, 
    Unrelated: 2, 
    MustContainAll: 3, 
    ExactMatch: 4, 
  }
);

/* class System.Data.Common.HandlerBase */ 

(function HandlerBase$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Data.Common.HandlerBase", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckForChildNodes", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForNonElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForUnrecognizedAttributes", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneParent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataSet"), [$asm11.TypeRef("System.Data.DataSet"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIgnorableAlsoCheckForNonElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveAttribute", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.Boolean, $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.IdentifierCase */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.IdentifierCase", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    Insensitive: 1, 
    Sensitive: 2, 
  }
);

/* class System.Data.Common.Int16Storage */ 

(function Int16Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.Int16Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Int16, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Int16]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.Int32Storage */ 

(function Int32Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.Int32Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Int32, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.Int64Storage */ 

(function Int64Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.Int64Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Int64, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Int64]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.MultipartIdentifier */ 

(function MultipartIdentifier$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.MultipartIdentifier", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IncrementStringCount", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMultipartIdentifier", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMultipartIdentifier", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.String, $.Char, 
          $.Int32, $.Boolean, 
          $.String, $.Boolean
        ])
    );

    $.Constant({Static:true , Public:false}, "MaxParts", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "ServerIndex", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "CatalogIndex", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "SchemaIndex", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "TableIndex", $.Int32, 3);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.MultipartIdentifier+MPIState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.MultipartIdentifier+MPIState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    MPI_Value: 0, 
    MPI_ParseNonQuote: 1, 
    MPI_LookForSeparator: 2, 
    MPI_LookForNextCharOrSeparator: 3, 
    MPI_ParseQuote: 4, 
    MPI_RightQuote: 5, 
  }
);

/* class System.Data.Common.NameValuePair */ 

(function NameValuePair$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.NameValuePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_length", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "_next", $.Type);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.NameValuePermission */ 

(function NameValuePermission$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.NameValuePermission", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DBConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "AddEntry", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm07.TypeRef("System.Collections.ArrayList"), 
          $asm11.TypeRef("System.Data.Common.DBConnectionString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckKeyForValue", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueForKeyPermit", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.Common.DBConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyNameValue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Intersect", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.IComparable"), "CompareTo");

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Field({Static:false, Public:false}, "_entry", $asm11.TypeRef("System.Data.Common.DBConnectionString"));

    $.Field({Static:false, Public:false}, "_tree", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("System.Data.Common.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "AddAccessAllowedAce", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.UInt32, $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AddAccessDeniedAce", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AllocateAndInitializeSid", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Byte, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateFileMappingA", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeSid", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetLengthSid", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "InitializeAcl", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "InitializeSecurityDescriptor", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "MapViewOfFile", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenFileMappingA", 
      new JSIL.MethodSignature($.IntPtr, [
          $.Int32, $.Boolean, 
          $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetSecurityDescriptorDacl", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Boolean, 
          $.IntPtr, $.Boolean
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "UnmapViewOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Data.Common.NativeMethods+ISourcesRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.NativeMethods+ISourcesRowset", false, [], function ($) {
    $.Method({}, "GetSourcesRowset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $asm07.TypeRef("System.Guid"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0c733a1e-2a1c-11ce-ade5-00aa0044773d"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface System.Data.Common.NativeMethods+ITransactionJoin */ 

JSIL.MakeInterface(
  "System.Data.Common.NativeMethods+ITransactionJoin", false, [], function ($) {
    $.Method({}, "GetOptionsObject", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "JoinTransaction", new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Int32, $.IntPtr
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A5E-2A1C-11CE-ADE5-00AA0044773D"]; });

/* class System.Data.Common.ObjectStorage */ 

(function ObjectStorage$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.ObjectStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareWithFamilies", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFamily", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.ObjectStorage+Families"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlSerializer", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlSerializer", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyIDynamicMetaObjectProvider", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValue", $.Object, null);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "implementsIXmlSerializable", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_tempAssemblyCacheLock", $.Object);

    $.Field({Static:true , Public:false}, "_tempAssemblyCache", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")]), $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_serializerFactory", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializerFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.ObjectStorage+Families */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.ObjectStorage+Families", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DATETIME: 0, 
    NUMBER: 1, 
    STRING: 2, 
    BOOLEAN: 3, 
    ARRAY: 4, 
  }
);

/* class System.Data.Common.ObjectStorage+TempAssemblyComparer */ 

(function TempAssemblyComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.ObjectStorage+TempAssemblyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")]), $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Data.Common.SafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CoTaskMemAlloc", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "ole32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "CoTaskMemFree", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "ole32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "GetComputerNameEx", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        EntryPoint: "GetComputerNameExW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentProcessId", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetModuleHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPTStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetUserDefaultLCID", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "InterlockedExchangePointer", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32, $.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "LocalFree", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "PropVariantClear", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "ole32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "ReleaseSemaphore", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr]), 
      {
        Module: "oleaut32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SysAllocStringLen", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $.Int32]), 
      {
        Module: "oleaut32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SysFreeString", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "oleaut32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "VariantClear", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "oleaut32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "WaitForMultipleObjectsEx", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.IntPtr, 
          $.Boolean, $.UInt32, 
          $.Boolean
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "WaitForSingleObjectEx", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.UInt32, 
          $.Boolean
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "ZeroMemory", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Data.Common.SafeNativeMethods+Wrapper */ 

(function Wrapper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.SafeNativeMethods+Wrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ClearErrorInfo", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SByteStorage */ 

(function SByteStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SByteStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.SByte, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.SByte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SchemaTableColumn */ 

(function SchemaTableColumn$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Common.SchemaTableColumn", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColumnName", $.String, "ColumnName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColumnOrdinal", $.String, "ColumnOrdinal");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColumnSize", $.String, "ColumnSize");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NumericPrecision", $.String, "NumericPrecision");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NumericScale", $.String, "NumericScale");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataType", $.String, "DataType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProviderType", $.String, "ProviderType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NonVersionedProviderType", $.String, "NonVersionedProviderType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsLong", $.String, "IsLong");

    $.Field({Static:true , Public:true , ReadOnly:true }, "AllowDBNull", $.String, "AllowDBNull");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsAliased", $.String, "IsAliased");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsExpression", $.String, "IsExpression");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsKey", $.String, "IsKey");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsUnique", $.String, "IsUnique");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseSchemaName", $.String, "BaseSchemaName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseTableName", $.String, "BaseTableName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseColumnName", $.String, "BaseColumnName");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SchemaTableOptionalColumn */ 

(function SchemaTableOptionalColumn$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Common.SchemaTableOptionalColumn", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProviderSpecificDataType", $.String, "ProviderSpecificDataType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsAutoIncrement", $.String, "IsAutoIncrement");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsHidden", $.String, "IsHidden");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsReadOnly", $.String, "IsReadOnly");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsRowVersion", $.String, "IsRowVersion");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseServerName", $.String, "BaseServerName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseCatalogName", $.String, "BaseCatalogName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "AutoIncrementSeed", $.String, "AutoIncrementSeed");

    $.Field({Static:true , Public:true , ReadOnly:true }, "AutoIncrementStep", $.String, "AutoIncrementStep");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultValue", $.String, "DefaultValue");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Expression", $.String, "Expression");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseTableNamespace", $.String, "BaseTableNamespace");

    $.Field({Static:true , Public:true , ReadOnly:true }, "BaseColumnNamespace", $.String, "BaseColumnNamespace");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColumnMapping", $.String, "ColumnMapping");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SingleStorage */ 

(function SingleStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SingleStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.Single, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Single]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlConvert */ 

(function SqlConvert$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Data.Common.SqlConvert", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ChangeType2", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm11.TypeRef("System.Data.Common.StorageType"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeTypeForDefaultValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeTypeForXML", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertStringToDateTimeOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTimeOffset"), [$.String, $asm07.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlBinary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBinary"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlBoolean", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBoolean"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlByte", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlByte"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlBytes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlBytes"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlChars", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlChars"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlDateTime", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDateTime"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlDecimal", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDecimal"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlDouble", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlDouble"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlGuid", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlGuid"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlInt16", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt16"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlInt32", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt32"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlInt64", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlInt64"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlMoney", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlMoney"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlSingle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlSingle"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSqlString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.SqlTypes.SqlString"), [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlBinaryStorage */ 

(function SqlBinaryStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlBinaryStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlBinary")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlBooleanStorage */ 

(function SqlBooleanStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlBooleanStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlBoolean")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlBytesStorage */ 

(function SqlBytesStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlBytesStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlBytes")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlByteStorage */ 

(function SqlByteStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlByteStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlByte")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlCharsStorage */ 

(function SqlCharsStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlCharsStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlChars")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlDateTimeStorage */ 

(function SqlDateTimeStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlDateTimeStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlDateTime")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlDecimalStorage */ 

(function SqlDecimalStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlDecimalStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlDecimal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlDoubleStorage */ 

(function SqlDoubleStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlDoubleStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlDouble")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlGuidStorage */ 

(function SqlGuidStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlGuidStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlGuid")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlInt16Storage */ 

(function SqlInt16Storage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlInt16Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlInt16")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlInt32Storage */ 

(function SqlInt32Storage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlInt32Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlInt32")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlInt64Storage */ 

(function SqlInt64Storage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlInt64Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlInt64")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlMoneyStorage */ 

(function SqlMoneyStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlMoneyStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlMoney")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlSingleStorage */ 

(function SqlSingleStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlSingleStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlSingle")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlStringStorage */ 

(function SqlStringStorage$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlStringStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.SqlTypes.SqlString"), $asm11.TypeRef("System.Data.SqlTypes.SqlString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStringLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlString")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlUdtStorage */ 

(function SqlUdtStorage$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlUdtStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataColumn"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStaticNullForUdtType", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "implementsIXmlSerializable", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "implementsIComparable", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeToNull", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.SqlXmlStorage */ 

(function SqlXmlStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.SqlXmlStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.SqlTypes.SqlXml")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.StringStorage */ 

(function StringStorage$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.StringStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStringLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.SupportedJoinOperators */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.SupportedJoinOperators", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Inner: 1, 
    LeftOuter: 2, 
    RightOuter: 4, 
    FullOuter: 8, 
  }
);

/* class System.Data.Common.TimeSpanStorage */ 

(function TimeSpanStorage$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.TimeSpanStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValue", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.TimeSpan")]));


    function TimeSpanStorage__cctor () {
      $thisType.defaultValue = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TimeSpanStorage__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.UInt16Storage */ 

(function UInt16Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.UInt16Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.UInt16, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.UInt16]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.UInt32Storage */ 

(function UInt32Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.UInt32Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.UInt32, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.UInt32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.UInt64Storage */ 

(function UInt64Storage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.UInt64Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Constant({Static:true , Public:false}, "defaultValue", $.UInt64, 0);

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$.UInt64]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;





















































  JSIL.MakeStaticClass("System.Data.Common.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CheckTokenMembership", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ConvertSidToStringSidW", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateWellKnownSid", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetEffectiveRightsFromAclW", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+Trustee")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetErrorInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo")])]), 
      {
        Module: "oleaut32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "IntF", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetTokenInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "lstrlenW", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLAllocHandle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLAllocHandle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLBindCol", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.UInt16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLBindCol", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.UInt16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $.IntPtr, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLBindParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.UInt16, 
          $.Int16, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), 
          $.Int16, $.IntPtr, 
          $.IntPtr, $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.IntPtr, $asm07.TypeRef("System.Runtime.InteropServices.HandleRef")
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLCancel", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLCloseCursor", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLColAttributeW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.Int16, 
          $.Int16, $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), 
          $.Int16, $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLColumnsW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLDisconnect", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$.IntPtr]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLDriverConnectW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $.IntPtr, 
          $.String, $.Int16, 
          $.IntPtr, $.Int16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLEndTran", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $.IntPtr, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLExecDirectW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLExecute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLFetch", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLFreeHandle", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $.IntPtr]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLFreeStmt", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+STMT")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetConnectAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.UInt16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_C"), $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetDescFieldW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"), $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), $asm11.TypeRef("System.Data.Odbc.CNativeBuffer"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetDiagFieldW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
          $.Int16, $.Int16, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetDiagRecW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_HANDLE"), $asm11.TypeRef("System.Data.Odbc.OdbcHandle"), 
          $.Int16, $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int16, $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetFunctions", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_API"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetInfoW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int16, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int16])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetInfoW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_INFO"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int16, 
          $.IntPtr
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetStmtAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLGetTypeInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.Int16]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLMoreResults", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle")]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLNumResultCols", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16])]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLPrepareW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLPrimaryKeysW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLProcedureColumnsW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLProceduresW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLRowCount", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [$asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetConnectAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $asm27.TypeRef("System.Transactions.IDtcTransaction"), $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetConnectAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $.String, $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetConnectAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcConnectionHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetConnectAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $.IntPtr, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetDescFieldW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"), $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetDescFieldW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcDescriptorHandle"), $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_DESC"), $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetEnvAttr", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcEnvironmentHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_ATTR"), 
          $.IntPtr, $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_IS")
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSetStmtAttrW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.Int32, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "odbc32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLSpecialColumnsW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_SPECIALCOLS"), 
          $.String, $.Int16, 
          $.String, $.Int16, 
          $.String, $.Int16, 
          $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_SCOPE"), $asm11.TypeRef("System.Data.Odbc.ODBC32+SQL_NULLABILITY")
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLStatisticsW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16, $.Int16, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SQLTablesW", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Odbc.ODBC32+RetCode"), [
          $asm11.TypeRef("System.Data.Odbc.OdbcStatementHandle"), $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16, $.String, 
          $.Int16
        ]), 
      {
        Module: "odbc32.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* interface System.Data.Common.UnsafeNativeMethods+ADORecordConstruction */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ADORecordConstruction", false, [], function ($) {
    $.Method({}, "get_Row", JSIL.MethodSignature.Return($.Object));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00000567-0000-0010-8000-00AA006D2EA4"]; });

/* interface System.Data.Common.UnsafeNativeMethods+ADORecordsetConstruction */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ADORecordsetConstruction", false, [], function ($) {
    $.Method({}, "get_Rowset", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "put_Rowset", JSIL.MethodSignature.Void);
    $.Method({}, "get_Chapter", JSIL.MethodSignature.Return($.IntPtr));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00000283-0000-0010-8000-00AA006D2EA4"]; });

/* interface System.Data.Common.UnsafeNativeMethods+Recordset15 */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+Recordset15", false, [], function ($) {
    $.Method({}, "get_Properties", JSIL.MethodSignature.Void);
    $.Method({}, "get_AbsolutePosition", JSIL.MethodSignature.Void);
    $.Method({}, "put_AbsolutePosition", JSIL.MethodSignature.Void);
    $.Method({}, "putref_ActiveConnection", JSIL.MethodSignature.Void);
    $.Method({}, "put_ActiveConnection", JSIL.MethodSignature.Void);
    $.Method({}, "get_ActiveConnection", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "get_BOF", JSIL.MethodSignature.Void);
    $.Method({}, "get_Bookmark", JSIL.MethodSignature.Void);
    $.Method({}, "put_Bookmark", JSIL.MethodSignature.Void);
    $.Method({}, "get_CacheSize", JSIL.MethodSignature.Void);
    $.Method({}, "put_CacheSize", JSIL.MethodSignature.Void);
    $.Method({}, "get_CursorType", JSIL.MethodSignature.Void);
    $.Method({}, "put_CursorType", JSIL.MethodSignature.Void);
    $.Method({}, "get_EOF", JSIL.MethodSignature.Void);
    $.Method({}, "get_Fields", JSIL.MethodSignature.Void);
    $.Method({}, "get_LockType", JSIL.MethodSignature.Void);
    $.Method({}, "put_LockType", JSIL.MethodSignature.Void);
    $.Method({}, "get_MaxRecords", JSIL.MethodSignature.Void);
    $.Method({}, "put_MaxRecords", JSIL.MethodSignature.Void);
    $.Method({}, "get_RecordCount", JSIL.MethodSignature.Void);
    $.Method({}, "putref_Source", JSIL.MethodSignature.Void);
    $.Method({}, "put_Source", JSIL.MethodSignature.Void);
    $.Method({}, "get_Source", JSIL.MethodSignature.Void);
    $.Method({}, "AddNew", JSIL.MethodSignature.Void);
    $.Method({}, "CancelUpdate", JSIL.MethodSignature.Void);
    $.Method({}, "Close", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbHResult")));
    $.Method({}, "Delete", JSIL.MethodSignature.Void);
    $.Method({}, "GetRows", JSIL.MethodSignature.Void);
    $.Method({}, "Move", JSIL.MethodSignature.Void);
    $.Method({}, "MoveNext", JSIL.MethodSignature.Void);
    $.Method({}, "MovePrevious", JSIL.MethodSignature.Void);
    $.Method({}, "MoveFirst", JSIL.MethodSignature.Void);
    $.Method({}, "MoveLast", JSIL.MethodSignature.Void);
    $.Method({}, "Open", JSIL.MethodSignature.Void);
    $.Method({}, "Requery", JSIL.MethodSignature.Void);
    $.Method({}, "_xResync", JSIL.MethodSignature.Void);
    $.Method({}, "Update", JSIL.MethodSignature.Void);
    $.Method({}, "get_AbsolutePage", JSIL.MethodSignature.Void);
    $.Method({}, "put_AbsolutePage", JSIL.MethodSignature.Void);
    $.Method({}, "get_EditMode", JSIL.MethodSignature.Void);
    $.Method({}, "get_Filter", JSIL.MethodSignature.Void);
    $.Method({}, "put_Filter", JSIL.MethodSignature.Void);
    $.Method({}, "get_PageCount", JSIL.MethodSignature.Void);
    $.Method({}, "get_PageSize", JSIL.MethodSignature.Void);
    $.Method({}, "put_PageSize", JSIL.MethodSignature.Void);
    $.Method({}, "get_Sort", JSIL.MethodSignature.Void);
    $.Method({}, "put_Sort", JSIL.MethodSignature.Void);
    $.Method({}, "get_Status", JSIL.MethodSignature.Void);
    $.Method({}, "get_State", JSIL.MethodSignature.Void);
    $.Method({}, "_xClone", JSIL.MethodSignature.Void);
    $.Method({}, "UpdateBatch", JSIL.MethodSignature.Void);
    $.Method({}, "CancelBatch", JSIL.MethodSignature.Void);
    $.Method({}, "get_CursorLocation", JSIL.MethodSignature.Void);
    $.Method({}, "put_CursorLocation", JSIL.MethodSignature.Void);
    $.Method({}, "NextRecordset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0000050E-0000-0010-8000-00AA006D2EA4"]; });

/* interface System.Data.Common.UnsafeNativeMethods+_ADORecord */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+_ADORecord", false, [], function ($) {
    $.Method({}, "get_Properties", JSIL.MethodSignature.Void);
    $.Method({}, "get_ActiveConnection", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "put_ActiveConnection", JSIL.MethodSignature.Void);
    $.Method({}, "putref_ActiveConnection", JSIL.MethodSignature.Void);
    $.Method({}, "get_State", JSIL.MethodSignature.Void);
    $.Method({}, "get_Source", JSIL.MethodSignature.Void);
    $.Method({}, "put_Source", JSIL.MethodSignature.Void);
    $.Method({}, "putref_Source", JSIL.MethodSignature.Void);
    $.Method({}, "get_Mode", JSIL.MethodSignature.Void);
    $.Method({}, "put_Mode", JSIL.MethodSignature.Void);
    $.Method({}, "get_ParentURL", JSIL.MethodSignature.Void);
    $.Method({}, "MoveRecord", JSIL.MethodSignature.Void);
    $.Method({}, "CopyRecord", JSIL.MethodSignature.Void);
    $.Method({}, "DeleteRecord", JSIL.MethodSignature.Void);
    $.Method({}, "Open", JSIL.MethodSignature.Void);
    $.Method({}, "Close", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbHResult")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00000562-0000-0010-8000-00AA006D2EA4"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IAccessor */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IAccessor", false, [], function ($) {
    $.Method({}, "AddRefAccessor", JSIL.MethodSignature.Void);
    $.Method({}, "CreateAccessor", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $.IntPtr, 
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.Int32])
        ]));
    $.Method({}, "GetBindings", JSIL.MethodSignature.Void);
    $.Method({}, "ReleaseAccessor", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A8C-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IChapteredRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IChapteredRowset", false, [], function ($) {
    $.Method({}, "AddRefChapter", JSIL.MethodSignature.Void);
    $.Method({}, "ReleaseChapter", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A93-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+IColumnsInfo */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IColumnsInfo", false, [], function ($) {
    $.Method({}, "GetColumnInfo", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A11-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+IColumnsRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IColumnsRowset", false, [], function ($) {
    $.Method({}, "GetAvailableColumns", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetColumnsRowset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $.IntPtr, 
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset")])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A10-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+ICommandPrepare */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ICommandPrepare", false, [], function ($) {
    $.Method({}, "Prepare", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.Int32]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A26-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+ICommandProperties */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ICommandProperties", false, [], function ($) {
    $.Method({}, "GetProperties", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "SetProperties", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A79-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+ICommandText */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ICommandText", false, [], function ($) {
    $.Method({}, "Cancel", JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.OleDb.OleDbHResult")));
    $.Method({}, "Execute", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $asm11.TypeRef("System.Data.OleDb.tagDBPARAMS"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
    $.Method({}, "GetDBSession", JSIL.MethodSignature.Void);
    $.Method({}, "GetCommandText", JSIL.MethodSignature.Void);
    $.Method({}, "SetCommandText", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.String]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A27-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+ICommandWithParameters */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ICommandWithParameters", false, [], function ($) {
    $.Method({}, "GetParameterInfo", JSIL.MethodSignature.Void);
    $.Method({}, "MapParameterNames", JSIL.MethodSignature.Void);
    $.Method({}, "SetParameterInfo", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBPARAMBINDINFO")])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A64-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IDataInitialize */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IDataInitialize", false, [], function ($) {
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["2206CCB1-19C1-11D1-89E0-00C04FD7A829"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IDBInfo */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IDBInfo", false, [], function ($) {
    $.Method({}, "GetKeywords", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])]));
    $.Method({}, "GetLiteralInfo", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A89-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+IDBProperties */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IDBProperties", false, [], function ($) {
    $.Method({}, "GetProperties", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "GetPropertyInfo", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "SetProperties", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A8A-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IDBSchemaRowset", false, [], function ($) {
    $.Method({}, "GetRowset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset")])
        ]));
    $.Method({}, "GetSchemas", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A7B-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Data.Common.UnsafeNativeMethods+IErrorInfo */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IErrorInfo", false, [], function ($) {
    $.Method({}, "GetGUID", JSIL.MethodSignature.Void);
    $.Method({}, "GetSource", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])]));
    $.Method({}, "GetDescription", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1CF2B120-547D-101B-8E65-08002B2BD119"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IErrorRecords */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IErrorRecords", false, [], function ($) {
    $.Method({}, "AddErrorRecord", JSIL.MethodSignature.Void);
    $.Method({}, "GetBasicErrorInfo", JSIL.MethodSignature.Void);
    $.Method({}, "GetCustomErrorObject", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+ISQLErrorInfo")])
        ]));
    $.Method({}, "GetErrorInfo", new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IErrorInfo"), [$.Int32, $.Int32]));
    $.Method({}, "GetErrorParameters", JSIL.MethodSignature.Void);
    $.Method({}, "GetRecordCount", JSIL.MethodSignature.Return($.Int32));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A67-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IMultipleResults */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IMultipleResults", false, [], function ($) {
    $.Method({}, "GetResult", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A90-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IOpenRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IOpenRowset", false, [], function ($) {
    $.Method({}, "OpenRowset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $asm11.TypeRef("System.Data.OleDb.tagDBID"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A69-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IRow */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IRow", false, [], function ($) {
    $.Method({}, "GetColumns", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$.IntPtr, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.OleDb.tagDBCOLUMNACCESS")])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733AB4-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IRowset */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IRowset", false, [], function ($) {
    $.Method({}, "AddRefRows", JSIL.MethodSignature.Void);
    $.Method({}, "GetData", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]));
    $.Method({}, "GetNextRows", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "ReleaseRows", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]));
    $.Method({}, "RestartPosition", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A7C-2A1C-11CE-ADE5-00AA0044773D"]; });

/* interface System.Data.Common.UnsafeNativeMethods+IRowsetInfo */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+IRowsetInfo", false, [], function ($) {
    $.Method({}, "GetProperties", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "GetReferencedRowset", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.Common.UnsafeNativeMethods+IRowset")])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A55-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface System.Data.Common.UnsafeNativeMethods+ISQLErrorInfo */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ISQLErrorInfo", false, [], function ($) {
    $.Method({}, "GetSQLInfo", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.String])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A74-2A1C-11CE-ADE5-00AA0044773D"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface System.Data.Common.UnsafeNativeMethods+ITransactionLocal */ 

JSIL.MakeInterface(
  "System.Data.Common.UnsafeNativeMethods+ITransactionLocal", false, [], function ($) {
    $.Method({}, "Commit", JSIL.MethodSignature.Void);
    $.Method({}, "Abort", JSIL.MethodSignature.Void);
    $.Method({}, "GetTransactionInfo", JSIL.MethodSignature.Void);
    $.Method({}, "GetOptionsObject", JSIL.MethodSignature.Void);
    $.Method({}, "StartTransaction", new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0C733A5F-2A1C-11CE-ADE5-00AA0044773D"]; });

/* delegate System.Data.Common.UnsafeNativeMethods+IUnknownQueryInterface */ 

JSIL.MakeDelegate("System.Data.Common.UnsafeNativeMethods+IUnknownQueryInterface", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]));

/* delegate System.Data.Common.UnsafeNativeMethods+IDataInitializeGetDataSource */ 

JSIL.MakeDelegate("System.Data.Common.UnsafeNativeMethods+IDataInitializeGetDataSource", false, [], 
  new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.String"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.DataSourceWrapper")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null

    ]
  }
);

/* delegate System.Data.Common.UnsafeNativeMethods+IDBInitializeInitialize */ 

JSIL.MakeDelegate("System.Data.Common.UnsafeNativeMethods+IDBInitializeInitialize", false, [], 
  new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [$asm07.TypeRef("System.IntPtr")]));

/* delegate System.Data.Common.UnsafeNativeMethods+IDBCreateSessionCreateSession */ 

JSIL.MakeDelegate("System.Data.Common.UnsafeNativeMethods+IDBCreateSessionCreateSession", false, [], 
  new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Data.OleDb.SessionWrapper")])
    ]));

/* delegate System.Data.Common.UnsafeNativeMethods+IDBCreateCommandCreateCommand */ 

JSIL.MakeDelegate("System.Data.Common.UnsafeNativeMethods+IDBCreateCommandCreateCommand", false, [], 
  new JSIL.MethodSignature($asm11.TypeRef("System.Data.OleDb.OleDbHResult"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Object")])
    ]), {
    Parameters: [
      {
        NativeType: "IntF"
      }
    ]
  }
);

/* struct System.Data.Common.UnsafeNativeMethods+Trustee */ 

(function Trustee$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Common.UnsafeNativeMethods+Trustee", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_pMultipleTrustee", $.IntPtr);

    $.Field({Static:false, Public:false}, "_MultipleTrusteeOperation", $.Int32);

    $.Field({Static:false, Public:false}, "_TrusteeForm", $.Int32);

    $.Field({Static:false, Public:false}, "_TrusteeType", $.Int32);

    $.Field({Static:false, Public:false}, "_name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbMetaDataCollectionNames */ 

(function DbMetaDataCollectionNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Common.DbMetaDataCollectionNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "MetaDataCollections", $.String, "MetaDataCollections");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataSourceInformation", $.String, "DataSourceInformation");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataTypes", $.String, "DataTypes");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Restrictions", $.String, "Restrictions");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ReservedWords", $.String, "ReservedWords");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbMetaDataColumnNames */ 

(function DbMetaDataColumnNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.Common.DbMetaDataColumnNames", true, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "CollectionName", $.String, "CollectionName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ColumnSize", $.String, "ColumnSize");

    $.Field({Static:true , Public:true , ReadOnly:true }, "CompositeIdentifierSeparatorPattern", $.String, "CompositeIdentifierSeparatorPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "CreateFormat", $.String, "CreateFormat");

    $.Field({Static:true , Public:true , ReadOnly:true }, "CreateParameters", $.String, "CreateParameters");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataSourceProductName", $.String, "DataSourceProductName");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataSourceProductVersion", $.String, "DataSourceProductVersion");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataType", $.String, "DataType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataSourceProductVersionNormalized", $.String, "DataSourceProductVersionNormalized");

    $.Field({Static:true , Public:true , ReadOnly:true }, "GroupByBehavior", $.String, "GroupByBehavior");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IdentifierCase", $.String, "IdentifierCase");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IdentifierPattern", $.String, "IdentifierPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsAutoIncrementable", $.String, "IsAutoIncrementable");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsBestMatch", $.String, "IsBestMatch");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsCaseSensitive", $.String, "IsCaseSensitive");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsConcurrencyType", $.String, "IsConcurrencyType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsFixedLength", $.String, "IsFixedLength");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsFixedPrecisionScale", $.String, "IsFixedPrecisionScale");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsLiteralSupported", $.String, "IsLiteralSupported");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsLong", $.String, "IsLong");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsNullable", $.String, "IsNullable");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsSearchable", $.String, "IsSearchable");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsSearchableWithLike", $.String, "IsSearchableWithLike");

    $.Field({Static:true , Public:true , ReadOnly:true }, "IsUnsigned", $.String, "IsUnsigned");

    $.Field({Static:true , Public:true , ReadOnly:true }, "LiteralPrefix", $.String, "LiteralPrefix");

    $.Field({Static:true , Public:true , ReadOnly:true }, "LiteralSuffix", $.String, "LiteralSuffix");

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaximumScale", $.String, "MaximumScale");

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinimumScale", $.String, "MinimumScale");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NumberOfIdentifierParts", $.String, "NumberOfIdentifierParts");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NumberOfRestrictions", $.String, "NumberOfRestrictions");

    $.Field({Static:true , Public:true , ReadOnly:true }, "OrderByColumnsInSelect", $.String, "OrderByColumnsInSelect");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ParameterMarkerFormat", $.String, "ParameterMarkerFormat");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ParameterMarkerPattern", $.String, "ParameterMarkerPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ParameterNameMaxLength", $.String, "ParameterNameMaxLength");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ParameterNamePattern", $.String, "ParameterNamePattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProviderDbType", $.String, "ProviderDbType");

    $.Field({Static:true , Public:true , ReadOnly:true }, "QuotedIdentifierCase", $.String, "QuotedIdentifierCase");

    $.Field({Static:true , Public:true , ReadOnly:true }, "QuotedIdentifierPattern", $.String, "QuotedIdentifierPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ReservedWord", $.String, "ReservedWord");

    $.Field({Static:true , Public:true , ReadOnly:true }, "StatementSeparatorPattern", $.String, "StatementSeparatorPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "StringLiteralPattern", $.String, "StringLiteralPattern");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SupportedJoinOperators", $.String, "SupportedJoinOperators");

    $.Field({Static:true , Public:true , ReadOnly:true }, "TypeName", $.String, "TypeName");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DataRecordInternal */ 

(function DataRecordInternal$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataRecord"), 
      Name: "System.Data.Common.DataRecordInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.SchemaInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), 
          $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.SchemaInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetAttributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.AttributeCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetAttributes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetClassName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetClassName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetComponentName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetComponentName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetConverter");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetDefaultProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEditor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEditor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetEvents", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.EventDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetEvents");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetProperties", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetProperties");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ICustomTypeDescriptor"), "GetPropertyOwner");

    $.Field({Static:false, Public:false}, "_schemaInfo", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.SchemaInfo")]));

    $.Field({Static:false, Public:false}, "_values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "_propertyDescriptors", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptorCollection"));

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm11.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Data.Common.SchemaInfo */ 

(function SchemaInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Common.SchemaInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "typeName", $.String);

    $.Field({Static:false, Public:true }, "type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.GreenMethods */ 

(function GreenMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Data.Common.GreenMethods", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "SystemDataSqlClientSqlProviderServices_Instance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "SystemDataSqlClientSqlProviderServices_Instance_GetValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Constant({Static:true , Public:false}, "ExtensionAssemblyRef", $.String, "System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataCommonDbProviderServices_TypeName", $.String, "System.Data.Common.DbProviderServices, System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Field({Static:true , Public:false}, "SystemDataCommonDbProviderServices_Type", $asm07.TypeRef("System.Type"));

    $.Constant({Static:true , Public:false}, "SystemDataSqlClientSqlProviderServices_TypeName", $.String, "System.Data.SqlClient.SqlProviderServices, System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Field({Static:true , Public:false}, "SystemDataSqlClientSqlProviderServices_Instance_FieldInfo", $asm07.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.BigIntegerStorage */ 

(function BigIntegerStorage$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.BigIntegerStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromBigInteger", 
      new JSIL.MethodSignature($.Object, [
          $asm1E.TypeRef("System.Numerics.BigInteger"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBigInteger", 
      new JSIL.MethodSignature($asm1E.TypeRef("System.Numerics.BigInteger"), [$.Object, $asm07.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm1E.TypeRef("System.Numerics.BigInteger")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DateTimeOffsetStorage */ 

(function DateTimeOffsetStorage$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DataStorage"), 
      Name: "System.Data.Common.DateTimeOffsetStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataColumn"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aggregate", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Data.AggregateType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareValueTo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertObjectToXml", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertXmlToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Collections.BitArray"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEmptyStorage", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStorage", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.BitArray")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValue", $asm07.TypeRef("System.DateTimeOffset"));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTimeOffset")]));


    function DateTimeOffsetStorage__cctor () {
      $thisType.defaultValue = new $asm07.System.DateTimeOffset();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DateTimeOffsetStorage__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.ActivityCorrelator */ 

(function ActivityCorrelator$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Data.Common.ActivityCorrelator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Current", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.ActivityCorrelator+ActivityId"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Next", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.ActivityCorrelator+ActivityId"))
    );

    $.Constant({Static:true , Public:false}, "CorrelationTracePoints", $asm11.TypeRef("Bid+ApiGroup"), 262144);

    $.Field({Static:true , Public:false}, "tlsActivity", $asm11.TypeRef("System.Data.Common.ActivityCorrelator+ActivityId"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Property({Static:true , Public:false}, "Current", $asm11.TypeRef("System.Data.Common.ActivityCorrelator+ActivityId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.ActivityCorrelator+ActivityId */ 

(function ActivityId$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.UInt32)) ();
  };




  function ActivityId_get_Id () {
    return this.ActivityId$Id$value;
  }; 

  function ActivityId_get_Sequence () {
    return this.ActivityId$Sequence$value;
  }; 


  function ActivityId_set_Id (value) {
    this.ActivityId$Id$value = value.MemberwiseClone();
  }; 

  function ActivityId_set_Sequence (value) {
    this.ActivityId$Sequence$value = (value >>> 0);
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.ActivityCorrelator+ActivityId", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:false}, "get_Id", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid")), 
      ActivityId_get_Id
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Sequence", 
      JSIL.MethodSignature.Return($.UInt32), 
      ActivityId_get_Sequence
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Increment", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "set_Id", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid")), 
      ActivityId_set_Id
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Sequence", 
      JSIL.MethodSignature.Action($.UInt32), 
      ActivityId_set_Sequence
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "ActivityId$Id$value", $asm07.TypeRef("System.Guid"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ActivityId$Sequence$value", $.UInt32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Id", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "Sequence", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SNI_Conn */ 

(function SNI_Conn$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "SNI_Conn", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SNI_Packet */ 

(function SNI_Packet$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "SNI_Packet", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

