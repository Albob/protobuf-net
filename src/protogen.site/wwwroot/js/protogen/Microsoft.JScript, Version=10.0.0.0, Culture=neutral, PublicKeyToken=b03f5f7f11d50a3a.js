/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm03 = JSIL.DeclareAssembly("Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "Microsoft.JScript.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Microsoft.JScript.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "Microsoft.JScript.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation. All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "14.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "14.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "2046");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 2046);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Net");
/* class System.Net.VsaWebProxyScript */ 

(function VsaWebProxyScript$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Net.VsaWebProxyScript", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CallMethod", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileScript", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAssembly", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "RootNamespace", $.String, "__WebProxyScript");

    $.Field({Static:true , Public:false, ReadOnly:true }, "IntranetZone", $asm07.TypeRef("System.Security.Policy.Zone"));

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "scriptInstance", $.Object);

    $.Field({Static:false, Public:false}, "startupInstance", $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaStartup"));

    $.Constant({Static:true , Public:false}, "NetScriptSource_v4", $.String, "import System.Security;\r\n[assembly:System.Security.SecurityTransparent()]\r\nfunction isPlainHostName(hostName: String): Boolean { return __om.isPlainHostName(hostName); }\r\nfunction dnsDomainIs(host: String, domain: String): Boolean { return __om.dnsDomainIs(host, domain); }\r\nfunction localHostOrDomainIs(host: String, hostdom: String): Boolean { return __om.localHostOrDomainIs(host, hostdom); }\r\nfunction isResolvable(host: String): Boolean { return __om.isResolvable(host); }\r\nfunction isInNet(host: String, pattern: String, mask: String): Boolean { return __om.isInNet(host, pattern, mask); }\r\nfunction dnsResolve(host: String): String { return __om.dnsResolve(host); }\r\nfunction myIpAddress(): String { return __om.myIpAddress(); }\r\nfunction dnsDomainLevels(host: String): int { return __om.dnsDomainLevels(host); }\r\nfunction shExpMatch(str: String, pattern: String): Boolean { return __om.shExpMatch(str, pattern); }\r\nfunction weekdayRange(wd1: String, wd2: String, gmt: String): Boolean { return __om.weekdayRange(wd1, wd2, gmt); }\r\nfunction dateRange(day1, month1, year1, day2, month2, year2, gmt): Boolean { return true; }\r\nfunction timeRange(hour1, min1, sec1, hour2, min2, sec2, gmt): Boolean { return true; }\r\n");

    $.Constant({Static:true , Public:false}, "NetScriptSource_v6ExtClass", $.String, "function getClientVersion(): String { return __om.getClientVersion(); }\r\nfunction sortIpAddressList(IPAddressList:String): String { return __om.sortIpAddressList(IPAddressList); }\r\nfunction isInNetEx(ipAddress:String, ipPrefix:String): Boolean { return __om.isInNetEx(ipAddress, ipPrefix); }\r\nfunction myIpAddressEx(): String { return __om.myIpAddressEx(); }\r\nfunction dnsResolveEx(host:String): String { return __om.dnsResolveEx(host); }\r\nfunction isResolvableEx(host:String): Boolean { return __om.isResolvableEx(host); }\r\nvar __RefereceOfFindProxyForURLEx = this[\"FindProxyForURLEx\"];\r\nvar bFindProxyForURLExFound : Boolean = __RefereceOfFindProxyForURLEx != null && typeof(__RefereceOfFindProxyForURLEx) == \"function\";\r\nclass __WebProxyScript { \t\r\n\t\t\t     \tfunction ExecuteFindProxyForURL(url, host): String { \r\n\t\t         \t\tif(bFindProxyForURLExFound) {\r\n\t\t         \t\t\treturn String(FindProxyForURLEx(url, host)); \r\n\t\t         \t\t}\r\n\t\t         \t\telse {\r\n\t\t\t         \t\treturn String(FindProxyForURL(url, host)); \r\n\t\t         \t\t}\r\n\t\t\t       \t} \r\n\t\t\t       }\r\n\t\t\t         ");

    $.Constant({Static:true , Public:false}, "NetScriptSource_v4Class", $.String, "class __WebProxyScript { function ExecuteFindProxyForURL(url, host): String { return String(FindProxyForURL(url, host)); } }\r\n");

    $.Constant({Static:true , Public:false}, "NetScriptSource_bindings", $.String, "var ProxyConfig = { bindings:{} };\r\n");

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.Net.IWebProxyScript")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.VsaWebProxyScript+VsaEngineSite */ 

(function VsaEngineSite$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.VsaWebProxyScript+VsaEngineSite", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEventSourceInstance", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalInstance", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Notify", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_GlobalType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.JScript");
/* class Microsoft.JScript.BuildVersionInfo */ 

(function BuildVersionInfo$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.JScript.BuildVersionInfo", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "MajorVersion", $.Int32, 14);

    $.Constant({Static:true , Public:true }, "MinorVersion", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "Build", $.Int32, 2046);

    $.Constant({Static:true , Public:true }, "Revision", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScriptObject */ 

(function ScriptObject$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ScriptObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(0, "pars", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingSystemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethods", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvokeMember", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Double, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Parameter(0, "pars", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$asm07.TypeRef("System.Reflection.MemberInfo"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.MemberInfo"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.SimpleHashtable")
        ])
    );

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "wrappedMemberCache", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:true }, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingSystemType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Reflection.IReflect")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.ActivationObject */ 

(function ActivationObject$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.ActivationObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClassesExcluding", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ClassScope"), $.String, 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddFieldOrUseExistingField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNewField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDefaultThisObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetLocalField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "isKnownAtCompileTime", $.Boolean);

    $.Field({Static:false, Public:false}, "fast", $.Boolean);

    $.Field({Static:false, Public:false}, "name_table", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "field_table", $asm07.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IActivationObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.JSObject */ 

(function JSObject$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.JSObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.SimpleHashtable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetLocalMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHiddenMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetMemberValue2", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SwapValues", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.AddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm07.TypeRef("System.Delegate")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "AddMethod");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.AddProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "AddProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.RemoveMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "RemoveMember");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "isASubClass", $.Boolean);

    $.Field({Static:false, Public:false}, "subClassIR", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "memberCache", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "noExpando", $.Boolean);

    $.Field({Static:false, Public:false}, "name_table", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "field_table", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "outer_class_instance", $.Type);

    $.Property({Static:false, Public:false}, "NameTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScriptFunction */ 

(function ScriptFunction$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ScriptFunction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm03.TypeRef("Microsoft.JScript.Closure"), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_$length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_prototype", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNumberOfFormalParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrototypeForConstructedObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasInstance", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs")]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvokeMember", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_$length", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_prototype", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "ilength", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "proto", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "$length", $.Int32);

    $.Property({Static:false, Public:true }, "prototype", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ActiveXObjectConstructor */ 

(function ActiveXObjectConstructor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.ActiveXObjectConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasInstance", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.AST */ 

(function AST$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.AST", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Delete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitILToLoadEngine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsLateBinding", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LateBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsWrappedNamespace", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.WrappedNamespace"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_compilerGlobals", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CompilerGlobals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Engine", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Globals", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Globals"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InvalidateInferredTypes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OkToUseAsType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsCallable", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCall", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCustomAttribute", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetPartialValue", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILDelete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILReference", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Type])
    );

    $.Field({Static:false, Public:false}, "context", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Property({Static:false, Public:false}, "compilerGlobals", $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"));

    $.Property({Static:false, Public:false}, "Engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:false}, "Globals", $asm03.TypeRef("Microsoft.JScript.Globals"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.UnaryOp */ 

(function UnaryOp$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.UnaryOp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.AddressOf */ 

(function AddressOf$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.AddressOf", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILReference", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArgumentsObject */ 

(function ArgumentsObject$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ArgumentsObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm03.TypeRef("Microsoft.JScript.FunctionObject"), $asm03.TypeRef("Microsoft.JScript.Closure"), 
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "$arguments", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "formal_names", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("Microsoft.JScript.ScriptObject"));

    $.Field({Static:false, Public:true }, "callee", $.Object);

    $.Field({Static:false, Public:true }, "$caller", $.Object);

    $.Field({Static:false, Public:true }, "$length", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayConstructor */ 

(function ArrayConstructor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.ArrayConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientArrayPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConstructArray", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructImplicitWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$asm07.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructWrapper", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$asm07.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.ArrayPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayEnumerator */ 

(function ArrayEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ArrayEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ArrayObject"), $asm07.TypeRef("System.Collections.IEnumerator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "curr", $.Int32);

    $.Field({Static:false, Public:false}, "doDenseEnum", $.Boolean);

    $.Field({Static:false, Public:false}, "didDenseEnum", $.Boolean);

    $.Field({Static:false, Public:false}, "arrayOb", $asm03.TypeRef("Microsoft.JScript.ArrayObject"));

    $.Field({Static:false, Public:false}, "denseEnum", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayLiteral */ 

(function ArrayLiteral$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ArrayLiteral", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignmentCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOkToUseInCustomAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILArray", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "elements", $asm03.TypeRef("Microsoft.JScript.ASTList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayObject */ 

(function ArrayObject$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ArrayObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Array_index_for", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Array_index_for", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DebugGetEnumerator", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DebugArrayFieldEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DebugGetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DebugSetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteRange", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteValueAtIndex", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_$length", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Realloc", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_$length", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLength", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Shift", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptFunction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Splice", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Type, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SpliceSlowly", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Type, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SwapValues", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToNativeArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unshift", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Constant({Static:true , Public:false}, "MaxIndex", $.Int32, 100000);

    $.Constant({Static:true , Public:false}, "MinDenseSize", $.Int32, 128);

    $.Field({Static:false, Public:false}, "len", $.UInt32);

    $.Field({Static:false, Public:false}, "denseArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "denseArrayLength", $.UInt32);

    $.Property({Static:false, Public:true , Virtual:true }, "$length", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.QuickSort */ 

(function QuickSort$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.QuickSort", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.JScript.ScriptFunction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SortArray", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SortObject", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "Swap", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "compareFn", $asm03.TypeRef("Microsoft.JScript.ScriptFunction"));

    $.Field({Static:false, Public:false}, "obj", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayPrototype */ 

(function ArrayPrototype$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ArrayObject"), 
      Name: "Microsoft.JScript.ArrayPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:true , Public:true }, "concat", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.Array_concat]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "join", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_join]; });

    $.ExternalMethod({Static:true , Public:false}, "Join", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "pop", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_pop]; });

    $.ExternalMethod({Static:true , Public:true }, "push", 
      new JSIL.MethodSignature($.Int64, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.Array_push]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "reverse", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_reverse]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "shift", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_shift]; });

    $.ExternalMethod({Static:true , Public:true }, "slice", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Double, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject"), $asm03.Microsoft.JScript.JSBuiltin.Array_slice]; });

    $.ExternalMethod({Static:true , Public:true }, "sort", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_sort]; });

    $.ExternalMethod({Static:true , Public:true }, "splice", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Double, $.Double, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.Array_splice]; })
      .Parameter(4, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_toLocaleString]; });

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Array_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "unshift", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.Array_unshift]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayWrapper */ 

(function ArrayWrapper$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ArrayObject"), 
      Name: "Microsoft.JScript.ArrayWrapper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Array"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ArrayObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_$length", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_$length", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Shift", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptFunction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Splice", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm03.TypeRef("Microsoft.JScript.ArrayObject"), 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SwapValues", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToNativeArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unshift", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Array"));

    $.Field({Static:false, Public:false}, "implicitWrapper", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "$length", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ArrayWrapper+SortComparer */ 

(function SortComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ArrayWrapper+SortComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptFunction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "compareFn", $asm03.TypeRef("Microsoft.JScript.ScriptFunction"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.AssemblyCustomAttributeList */ 

(function AssemblyCustomAttributeList$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.AssemblyCustomAttributeList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.CustomAttributeList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Process", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "list", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Field({Static:false, Public:false}, "okToUse", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Assign */ 

(function Assign$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Assign", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "lhside", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "rhside", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ASTList */ 

(function ASTList$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ASTList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateAsArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.AST")]));

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:false}, "Item", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* interface Microsoft.JScript.IAuthorServices */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IAuthorServices", true, [], function ($) {
    $.Method({}, "GetColorizer", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IColorizeText")));
    $.Method({}, "GetCodeSense", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IParseText")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["9E2B453C-6EAA-4329-A619-62E4889C8C8A"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IColorizeText */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IColorizeText", true, [], function ($) {
    $.Method({}, "Colorize", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ITokenEnumerator"), [$.String, $asm03.TypeRef("Microsoft.JScript.SourceState")]));
    $.Method({}, "GetStateForText", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.SourceState"), [$.String, $asm03.TypeRef("Microsoft.JScript.SourceState")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["DB283E60-7ADB-4cf6-9758-2931893A12FC"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* enum Microsoft.JScript.SourceState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.SourceState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    STATE_COLOR_NORMAL: 0, 
    STATE_COLOR_COMMENT: 1, 
    STATE_COLOR_STRING: 2, 
  }
);

/* enum Microsoft.JScript.TokenColor */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.TokenColor", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    COLOR_TEXT: 0, 
    COLOR_IDENTIFIER: 1, 
    COLOR_KEYWORD: 2, 
    COLOR_COMMENT: 3, 
    COLOR_OPERATOR: 4, 
    COLOR_NUMBER: 5, 
    COLOR_STRING: 6, 
    COLOR_CONDITIONAL_COMP: 7, 
  }
);

/* interface Microsoft.JScript.ITokenEnumerator */ 

JSIL.MakeInterface(
  "Microsoft.JScript.ITokenEnumerator", true, [], function ($) {
    $.Method({}, "GetNext", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ITokenColorInfo")));
    $.Method({}, "Reset", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["556BA9E0-BD6A-4837-89F0-C79B14759181"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.ITokenColorInfo */ 

JSIL.MakeInterface(
  "Microsoft.JScript.ITokenColorInfo", true, [], function ($) {
    $.Method({}, "get_StartPosition", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_EndPosition", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Color", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TokenColor")));
    $.Property({}, "StartPosition");
    $.Property({}, "EndPosition");
    $.Property({}, "Color");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0F20D5C8-CBDB-4b64-AB7F-10B158407323"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IParseText */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IParseText", true, [], function ($) {
    $.Method({}, "Parse", new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.IErrorHandler")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C1468187-3DA1-49df-ADF8-5F8600E59EA8"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IErrorHandler */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IErrorHandler", true, [], function ($) {
    $.Method({}, "OnCompilerError", new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.IVsaFullErrorInfo")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E93D012C-56BB-4f32-864F-7C75EDA17B14"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IObjectCompletionInfo */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IObjectCompletionInfo", true, [], function ($) {
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["052019B5-704B-4b99-AEF8-25A11A922B2E"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IMethodsCompletionInfo */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IMethodsCompletionInfo", true, [], function ($) {
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E0BCF37B-1C24-451c-AC43-40FF86839117"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.BinaryOp */ 

(function BinaryOp$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.BinaryOp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand1", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operand2", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operatorTok", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "type1", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "type2", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "operatorMeth", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Binding */ 

(function Binding$Members () {
  var $, $thisType;































































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Binding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Accessible", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessibleConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessibleField", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessibleMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessibleMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AccessibleProperty", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArrayAssignmentCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssignmentCompatible", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.IReflect"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm07.TypeRef("System.Reflection.IReflect"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDeletable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfUseless", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckParameters", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckParameters", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $asm03.TypeRef("Microsoft.JScript.Context"), 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Delete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllEligibleClasses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllKnownInstanceBindingsForThisName", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.MemberInfoList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodInfoMetadata", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleNoSuchMemberError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferTypeOfCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsideClassThatExtends", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidateBinding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCompatibleWithDelegate", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsMissing", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookForParameterlessPropertyGetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OkToUseAsType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParameterlessPropertyValueIsCallable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm03.TypeRef("Microsoft.JScript.ASTList"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PlaceArgumentsOnStack", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Int32, 
          $.Int32, $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PlaceValuesForHiddenParametersOnStack", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefersToMemoryLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCall", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCustomAttribute", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveLHValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveOtherKindOfCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveRHValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetPartialValue", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPartialValue", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILDelete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILObject", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILReference", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILWithDupOfThisOb", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateToLdelem", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToSpeculativeEarlyBindings", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToSpeculativeEarlyBoundCalls", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToSpeculativeEarlyBoundSet", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateToStelem", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WarnIfNotFullyResolved", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WarnIfObsolete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WarnIfObsolete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MemberInfo"), $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.Field({Static:false, Public:false}, "argIRs", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]));

    $.Field({Static:false, Public:false}, "defaultMember", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "defaultMemberReturnIR", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "isArrayElementAccess", $.Boolean);

    $.Field({Static:false, Public:false}, "isArrayConstructor", $.Boolean);

    $.Field({Static:false, Public:false}, "isAssignmentToDefaultIndexedProperty", $.Boolean);

    $.Field({Static:false, Public:false}, "isFullyResolved", $.Boolean);

    $.Field({Static:false, Public:false}, "isNonVirtual", $.Boolean);

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Field({Static:false, Public:false}, "member", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "giveErrors", $.Boolean);

    $.Field({Static:true , Public:false}, "ReflectionMissingCW", $asm03.TypeRef("Microsoft.JScript.ConstantWrapper"));

    $.Field({Static:true , Public:false}, "JScriptMissingCW", $asm03.TypeRef("Microsoft.JScript.ConstantWrapper"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BitwiseBinary */ 

(function BitwiseBinary$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.BitwiseBinary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluateBitwiseBinary", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EvaluateBitwiseBinary", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Operand2Type", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm03.TypeRef("Microsoft.JScript.JSToken"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResultType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateToBitCountMask", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BitwiseBinaryAssign */ 

(function BitwiseBinaryAssign$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.BitwiseBinaryAssign", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILForNoOverloadCase", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "binOp", $asm03.TypeRef("Microsoft.JScript.BitwiseBinary"));

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Block */ 

(function Block$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Block", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ComplainAboutAnythingOtherThanClassOrPackage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateInstanceVariableInitializers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateStaticVariableInitializers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkSuperOKIfIsFirstStatement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAssemblyAttributeLists", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ToExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILInitOnlyInitializers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILInstanceInitializers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILStaticInitializers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BlockScope */ 

(function BlockScope$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.BlockScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFieldForLocalScopeDebugInfo", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSLocalField"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLocalInfoForFields", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:true , Public:false}, "counter", $.Int32);

    $.Field({Static:false, Public:false}, "catchHanderScope", $.Boolean);

    $.Field({Static:false, Public:false}, "scopeId", $.Int32);

    $.Field({Static:false, Public:false}, "localFieldsForDebugInfo", $asm07.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BooleanConstructor */ 

(function BooleanConstructor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.BooleanConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientBooleanPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.BooleanObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructImplicitWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.BooleanObject"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.BooleanObject"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.BooleanObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.BooleanPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BooleanObject */ 

(function BooleanObject$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.BooleanObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "value", $.Boolean);

    $.Field({Static:false, Public:false}, "implicitWrapper", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BooleanPrototype */ 

(function BooleanPrototype$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BooleanObject"), 
      Name: "Microsoft.JScript.BooleanPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ObjectPrototype"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.BooleanConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Boolean_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "valueOf", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Boolean_valueOf]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Break */ 

(function Break$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Break", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "leavesFinally", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.BreakOutOfFinally */ 

(function BreakOutOfFinally$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.JScript.BreakOutOfFinally", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:true }, "target", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.JSBuiltin */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.JSBuiltin", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Array_concat: 1, 
    Array_join: 2, 
    Array_pop: 3, 
    Array_push: 4, 
    Array_reverse: 5, 
    Array_shift: 6, 
    Array_slice: 7, 
    Array_sort: 8, 
    Array_splice: 9, 
    Array_toLocaleString: 10, 
    Array_toString: 11, 
    Array_unshift: 12, 
    Boolean_toString: 13, 
    Boolean_valueOf: 14, 
    Date_getDate: 15, 
    Date_getDay: 16, 
    Date_getFullYear: 17, 
    Date_getHours: 18, 
    Date_getMilliseconds: 19, 
    Date_getMinutes: 20, 
    Date_getMonth: 21, 
    Date_getSeconds: 22, 
    Date_getTime: 23, 
    Date_getTimezoneOffset: 24, 
    Date_getUTCDate: 25, 
    Date_getUTCDay: 26, 
    Date_getUTCFullYear: 27, 
    Date_getUTCHours: 28, 
    Date_getUTCMilliseconds: 29, 
    Date_getUTCMinutes: 30, 
    Date_getUTCMonth: 31, 
    Date_getUTCSeconds: 32, 
    Date_getVarDate: 33, 
    Date_getYear: 34, 
    Date_parse: 35, 
    Date_setDate: 36, 
    Date_setFullYear: 37, 
    Date_setHours: 38, 
    Date_setMinutes: 39, 
    Date_setMilliseconds: 40, 
    Date_setMonth: 41, 
    Date_setSeconds: 42, 
    Date_setTime: 43, 
    Date_setUTCDate: 44, 
    Date_setUTCFullYear: 45, 
    Date_setUTCHours: 46, 
    Date_setUTCMinutes: 47, 
    Date_setUTCMilliseconds: 48, 
    Date_setUTCMonth: 49, 
    Date_setUTCSeconds: 50, 
    Date_setYear: 51, 
    Date_toDateString: 52, 
    Date_toGMTString: 53, 
    Date_toLocaleDateString: 54, 
    Date_toLocaleString: 55, 
    Date_toLocaleTimeString: 56, 
    Date_toString: 57, 
    Date_toTimeString: 58, 
    Date_toUTCString: 59, 
    Date_UTC: 60, 
    Date_valueOf: 61, 
    Enumerator_atEnd: 62, 
    Enumerator_item: 63, 
    Enumerator_moveFirst: 64, 
    Enumerator_moveNext: 65, 
    Error_toString: 66, 
    Function_apply: 67, 
    Function_call: 68, 
    Function_toString: 69, 
    Global_CollectGarbage: 70, 
    Global_decodeURI: 71, 
    Global_decodeURIComponent: 72, 
    Global_encodeURI: 73, 
    Global_encodeURIComponent: 74, 
    Global_escape: 75, 
    Global_eval: 76, 
    Global_GetObject: 77, 
    Global_isNaN: 78, 
    Global_isFinite: 79, 
    Global_parseFloat: 80, 
    Global_parseInt: 81, 
    Global_ScriptEngine: 82, 
    Global_ScriptEngineBuildVersion: 83, 
    Global_ScriptEngineMajorVersion: 84, 
    Global_ScriptEngineMinorVersion: 85, 
    Global_unescape: 86, 
    Math_abs: 87, 
    Math_acos: 88, 
    Math_asin: 89, 
    Math_atan: 90, 
    Math_atan2: 91, 
    Math_ceil: 92, 
    Math_cos: 93, 
    Math_exp: 94, 
    Math_floor: 95, 
    Math_log: 96, 
    Math_max: 97, 
    Math_min: 98, 
    Math_pow: 99, 
    Math_random: 100, 
    Math_round: 101, 
    Math_sin: 102, 
    Math_sqrt: 103, 
    Math_tan: 104, 
    Number_toExponential: 105, 
    Number_toFixed: 106, 
    Number_toLocaleString: 107, 
    Number_toPrecision: 108, 
    Number_toString: 109, 
    Number_valueOf: 110, 
    Object_hasOwnProperty: 111, 
    Object_isPrototypeOf: 112, 
    Object_propertyIsEnumerable: 113, 
    Object_toLocaleString: 114, 
    Object_toString: 115, 
    Object_valueOf: 116, 
    RegExp_compile: 117, 
    RegExp_exec: 118, 
    RegExp_test: 119, 
    RegExp_toString: 120, 
    String_anchor: 121, 
    String_big: 122, 
    String_blink: 123, 
    String_bold: 124, 
    String_charAt: 125, 
    String_charCodeAt: 126, 
    String_concat: 127, 
    String_fixed: 128, 
    String_fontcolor: 129, 
    String_fontsize: 130, 
    String_fromCharCode: 131, 
    String_indexOf: 132, 
    String_italics: 133, 
    String_lastIndexOf: 134, 
    String_link: 135, 
    String_localeCompare: 136, 
    String_match: 137, 
    String_replace: 138, 
    String_search: 139, 
    String_slice: 140, 
    String_small: 141, 
    String_split: 142, 
    String_strike: 143, 
    String_sub: 144, 
    String_substr: 145, 
    String_substring: 146, 
    String_sup: 147, 
    String_toLocaleLowerCase: 148, 
    String_toLocaleUpperCase: 149, 
    String_toLowerCase: 150, 
    String_toString: 151, 
    String_toUpperCase: 152, 
    String_valueOf: 153, 
    VBArray_dimensions: 154, 
    VBArray_getItem: 155, 
    VBArray_lbound: 156, 
    VBArray_toArray: 157, 
    VBArray_ubound: 158, 
  }
);

/* class Microsoft.JScript.BuiltinFunction */ 

(function BuiltinFunction$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.BuiltinFunction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm03.TypeRef("Microsoft.JScript.ScriptFunction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArg", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuickCall", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.JSBuiltin"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "VarArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "biFunc", $asm03.TypeRef("Microsoft.JScript.JSBuiltin"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Call */ 

(function Call$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Call", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllParamsAreMissing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ArgIRs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CanBeFunctionDeclaration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Delete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateIndices", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IdentifierLiteral"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameters", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LocalsThatWereOutParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDeletable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetPartialValue", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToCustomAttribute", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CustomAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILDelete", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "args", $asm03.TypeRef("Microsoft.JScript.ASTList"));

    $.Field({Static:false, Public:false}, "argValues", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "outParameterCount", $.Int32);

    $.Field({Static:false, Public:false}, "isConstructor", $.Boolean);

    $.Field({Static:false, Public:false}, "inBrackets", $.Boolean);

    $.Field({Static:false, Public:false}, "enclosingFunctionScope", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));

    $.Field({Static:false, Public:false}, "alreadyPartiallyEvaluated", $.Boolean);

    $.Field({Static:false, Public:false}, "isAssignmentToDefaultIndexedProperty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CallableExpression */ 

(function CallableExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Binding"), 
      Name: "Microsoft.JScript.CallableExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsLateBinding", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LateBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObject2", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleNoSuchMemberError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILObject", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILWithDupOfThisOb", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "expressionInferredType", $asm07.TypeRef("System.Reflection.IReflect"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CallContext */ 

(function CallContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.CallContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.LateBinding"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FunctionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "sourceContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "callee", $asm03.TypeRef("Microsoft.JScript.LateBinding"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "actual_parameters", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Class */ 

(function Class$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Class", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.TypeExpression")]), 
          $asm03.TypeRef("Microsoft.JScript.Block"), $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImplicitInterfaces", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.IReflect"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateImplicitDefaultConstructor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CanSee", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckFieldDeclarationConsistency", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSMemberField"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfOKToGenerateCodeForExpando", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfValidExtensionOfSuperType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMatchingMethodForConsistency", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm03.TypeRef("Microsoft.JScript.FunctionObject"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMemberNamesForCLSCompliance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMethodDeclarationConsistency", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.FunctionObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckThatAllAbstractSuperClassMethodsAreImplemented", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckThatMethodIsNotMarkedWithOverrideOrHide", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.FunctionObject"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DefinedOnInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitILForINeedEngineMethods", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInitialCalls", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.MethodBase"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $asm03.TypeRef("Microsoft.JScript.ASTList"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUsingNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterNameIntoEnclosingScopeAndGetOwnField", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.AST"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetEnumerator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsStatic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoDeleteMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoFieldGetter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoIndexerGetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoIndexerSetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFullNameFor", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInterfaceMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIRForSuperType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStartIndexForEachName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSuperConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSuperTypeMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTypeBuilderOrEnumBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnimplementedInferfaceMembers", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.SuperTypeMembersSorter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnimplementedInferfaceMembersFor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm03.TypeRef("Microsoft.JScript.SuperTypeMembersSorter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplementsInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsASubClassOf", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCustomAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsExpando", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInTheSameCompilationUnit", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInTheSamePackage", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedsToBeCheckedForCLSCompliance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersMatch", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveEnum", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.Object, $asm07.TypeRef("System.ResolveEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAccessibility", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupConstructors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToCOMPlusClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToCreateTypeCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "superTypeExpression", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "interfaces", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.TypeExpression")]));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.Block"));

    $.Field({Static:false, Public:false}, "enclosingScope", $asm03.TypeRef("Microsoft.JScript.ScriptObject"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Reflection.TypeAttributes"));

    $.Field({Static:false, Public:false}, "hasAlreadyBeenAskedAboutExpando", $.Boolean);

    $.Field({Static:false, Public:false}, "isAbstract", $.Boolean);

    $.Field({Static:false, Public:false}, "isAlreadyPartiallyEvaluated", $.Boolean);

    $.Field({Static:false, Public:false}, "isCooked", $.Boolean);

    $.Field({Static:false, Public:false}, "cookedType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "isExpando", $.Boolean);

    $.Field({Static:false, Public:false}, "isInterface", $.Boolean);

    $.Field({Static:false, Public:false}, "isStatic", $.Boolean);

    $.Field({Static:false, Public:false}, "needsEngine", $.Boolean);

    $.Field({Static:false, Public:false}, "validOn", $asm07.TypeRef("System.AttributeTargets"));

    $.Field({Static:false, Public:false}, "allowMultiple", $.Boolean);

    $.Field({Static:false, Public:false}, "classob", $asm03.TypeRef("Microsoft.JScript.ClassScope"));

    $.Field({Static:false, Public:false}, "implicitDefaultConstructor", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "ownField", $asm03.TypeRef("Microsoft.JScript.JSVariableField"));

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSMemberField")]));

    $.Field({Static:false, Public:false}, "superClass", $.Type);

    $.Field({Static:false, Public:false}, "superIR", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "superMembers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "firstIndex", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "fieldInitializer", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "customAttributes", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Field({Static:false, Public:false}, "clsCompliance", $asm03.TypeRef("Microsoft.JScript.CLSComplianceSpec"));

    $.Field({Static:false, Public:false}, "generateCodeForExpando", $.Boolean);

    $.Field({Static:false, Public:false}, "expandoItemProp", $asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"));

    $.Field({Static:false, Public:false}, "getHashTableMethod", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:false}, "getItem", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:false}, "setItem", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:false}, "deleteOpMethod", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:true , Public:false}, "badTypeNameCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsStatic", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ClassScope */ 

(function ClassScope$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.ClassScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.GlobalScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClassesFromInheritanceChain", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FakeCallToTypeMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBakedSuperType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetConstructors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSMemberField")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSuperType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeBuilderOrEnumBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnderlyingTypeIfEnum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasInstance", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplementsInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCLSCompliant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNestedIn", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPromotableTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSameOrDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSameOrDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentIsInSamePackage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeOfClassMemberInitializer", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("Microsoft.JScript.ScriptObject")])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "classwriter", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "owner", $asm03.TypeRef("Microsoft.JScript.Class"));

    $.Field({Static:false, Public:false}, "constructors", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]));

    $.Field({Static:false, Public:false}, "noExpando", $.Boolean);

    $.Field({Static:false, Public:false}, "$package", $asm03.TypeRef("Microsoft.JScript.PackageScope"));

    $.Field({Static:false, Public:false}, "itemProp", $asm03.TypeRef("Microsoft.JScript.JSProperty"));

    $.Field({Static:false, Public:false}, "outerClassField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "inStaticInitializerCode", $.Boolean);

    $.Field({Static:false, Public:false}, "staticInitializerUsesEval", $.Boolean);

    $.Field({Static:false, Public:false}, "instanceInitializerUsesEval", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Closure */ 

(function Closure$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.Closure", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.FunctionObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.FunctionObject"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConvertToDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "enclosing_scope", $asm03.TypeRef("Microsoft.JScript.ScriptObject"));

    $.Field({Static:false, Public:false}, "declaringObject", $.Object);

    $.Field({Static:false, Public:true }, "$arguments", $.Object);

    $.Field({Static:false, Public:true }, "$caller", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.CLSComplianceSpec */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.CLSComplianceSpec", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotAttributed: 0, 
    CLSCompliant: 1, 
    NonCLSCompliant: 2, 
  }
);

/* enum Microsoft.JScript.CmdLineError */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.CmdLineError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoError: 0, 
    AssemblyNotFound: 2001, 
    CannotCreateEngine: 2002, 
    CompilerConstant: 2003, 
    DuplicateFileAsSourceAndAssembly: 2004, 
    DuplicateResourceFile: 2005, 
    DuplicateResourceName: 2006, 
    DuplicateSourceFile: 2007, 
    ErrorSavingCompiledState: 2008, 
    InvalidAssembly: 2009, 
    InvalidCodePage: 2010, 
    InvalidDefinition: 2011, 
    InvalidLocaleID: 2012, 
    InvalidTarget: 2013, 
    InvalidSourceFile: 2014, 
    InvalidWarningLevel: 2015, 
    MultipleOutputNames: 2016, 
    MultipleTargets: 2017, 
    MissingDefineArgument: 2018, 
    MissingExtension: 2019, 
    MissingLibArgument: 2020, 
    MissingVersionInfo: 2021, 
    ManagedResourceNotFound: 2022, 
    NestedResponseFiles: 2023, 
    NoCodePage: 2024, 
    NoFileName: 2025, 
    NoInputSourcesSpecified: 2026, 
    NoLocaleID: 2027, 
    NoWarningLevel: 2028, 
    ResourceNotFound: 2029, 
    UnknownOption: 2030, 
    InvalidVersion: 2031, 
    SourceFileTooBig: 2032, 
    MultipleWin32Resources: 2033, 
    MissingReference: 2034, 
    SourceNotFound: 2035, 
    InvalidCharacters: 2036, 
    InvalidForCompilerOptions: 2037, 
    IncompatibleTargets: 2038, 
    LAST: 2039, 
    InvalidPlatform: 2039, 
    Unspecified: 2999, 
  }
);

/* class Microsoft.JScript.CmdLineException */ 

(function CmdLineException$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.JScript.CmdLineException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.CmdLineError"), $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.CmdLineError"), $.String, 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ResourceKey", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("Microsoft.JScript.CmdLineError")])
    );

    $.Field({Static:false, Public:false}, "errorCode", $asm03.TypeRef("Microsoft.JScript.CmdLineError"));

    $.Field({Static:false, Public:false}, "context", $.String);

    $.Field({Static:false, Public:false}, "culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Constant({Static:true , Public:false}, "LOCALE_USER_DEFAULT", $.Int32, 1024);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CmdLineOptionParser */ 

(function CmdLineOptionParser$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.CmdLineOptionParser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "IsArgumentOption", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsArgumentOption", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBooleanOption", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBooleanOption", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSimpleOption", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.MemberInfoInitializer */ 

JSIL.MakeInterface(
  "Microsoft.JScript.MemberInfoInitializer", true, [], function ($) {
    $.Method({}, "Initialize", new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.COMMemberInfo")]));
    $.Method({}, "GetCOMMemberInfo", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.COMMemberInfo")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["98A3BF0A-1B56-4f32-ACE0-594FEB27EC48"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.COMMemberInfo */ 

JSIL.MakeInterface(
  "Microsoft.JScript.COMMemberInfo", true, [], function ($) {
    $.Method({}, "Call", new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ]));
    $.Method({}, "GetValue", new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ]));
    $.Method({}, "SetValue", new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["84BCEB62-16EB-4e1c-975C-FCB40D331043"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.COMFieldInfo */ 

(function COMFieldInfo$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.FieldInfo"), 
      Name: "Microsoft.JScript.COMFieldInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeFieldHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCOMMemberInfo", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.COMMemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.COMMemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "_comObject", $asm03.TypeRef("Microsoft.JScript.COMMemberInfo"));

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldHandle", $asm07.TypeRef("System.RuntimeFieldHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.MemberInfoInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["CA0F511A-FAF2-4942-B9A8-17D5E46514E8"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.COMPropertyInfo */ 

(function COMPropertyInfo$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.PropertyInfo"), 
      Name: "Microsoft.JScript.COMPropertyInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAccessors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCOMMemberInfo", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.COMMemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIndexParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.COMMemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "_comObject", $asm03.TypeRef("Microsoft.JScript.COMMemberInfo"));

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.PropertyAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.MemberInfoInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["6A02951C-B129-4d26-AB92-B9CA19BDCA26"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.JSMethod */ 

(function JSMethod$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.MethodInfo"), 
      Name: "Microsoft.JScript.JSMethod", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeMethodHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnTypeCustomAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseDefinition", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethodImplementationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodImplAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "obj", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodHandle", $asm07.TypeRef("System.RuntimeMethodHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnTypeCustomAttributes", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["561AC104-8869-4368-902F-4E0D7DDEDDDD"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.COMMethodInfo */ 

(function COMMethodInfo$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.COMMethodInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeMethodHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnTypeCustomAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseDefinition", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCOMMemberInfo", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.COMMemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethodImplementationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodImplAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.COMMemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Reflection.ParameterInfo, 0);
      });

    $.Field({Static:false, Public:false}, "_comObject", $asm03.TypeRef("Microsoft.JScript.COMMemberInfo"));

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodHandle", $asm07.TypeRef("System.RuntimeMethodHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnTypeCustomAttributes", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.ImplementInterfaces(
      /* 4 */ $asm03.TypeRef("Microsoft.JScript.MemberInfoInitializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C7B9C313-2FD4-4384-8571-7ABC08BD17E5"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.COMGetterMethod */ 

(function COMGetterMethod$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.COMMethodInfo"), 
      Name: "Microsoft.JScript.COMGetterMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.COMSetterMethod */ 

(function COMSetterMethod$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.COMMethodInfo"), 
      Name: "Microsoft.JScript.COMSetterMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Comma */ 

(function Comma$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Comma", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CompilerGlobals */ 

(function CompilerGlobals$Members () {
  var $, $thisType;





























































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.CompilerGlobals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $.String, $asm07.TypeRef("System.Reflection.Emit.PEFileKinds"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Version"), $asm03.TypeRef("Microsoft.JScript.Globals")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_bitwiseBinaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_breakOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_callMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_callValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_callValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_changeTypeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_checkIfDoubleIsIntegerMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_checkIfSingleIsIntegerMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_closureConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_closureInstanceField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_clsCompliantAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_coerce2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_coerceTMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_compilerGlobalScopeAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_constructArrayMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_constructObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_contextEngineField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_contextStaticAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_continueOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_convertCharToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_createVsaEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_createVsaEngineWithType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_dateTimeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_dateTimeToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_dateTimeToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_debugBreak", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_debuggerHiddenAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_debuggerStepThroughAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalCompare", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToDoubleMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToUInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalToUInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_decimalZeroField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_defaultMemberAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_deleteMemberMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_deleteMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_doubleToBooleanMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_doubleToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_doubleToInt64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_doubleToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_engineField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_equalityConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_equalsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluateBitwiseBinaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluateEqualityMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluateNumericBinaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluatePlusMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluatePostOrPrefixOperatorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluateRelationalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_evaluateUnaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_fastConstructArrayLiteralMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getCurrentMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getDefaultThisObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getEngineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getFieldMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getFieldValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getGlobalScopeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getLenientGlobalObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getMemberValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getMethodMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getNamespaceMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getNonMissingValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getOriginalArrayConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getOriginalObjectConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getOriginalRegExpConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getParentMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getTypeFromHandleMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getTypeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_getValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_globalScopeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_hashtableCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_hashTableGetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_hashtableGetItem", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_hashtableRemove", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_hashtableSetItem", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_int32ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_int32ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_int64ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_int64ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_isMissingMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptCompareMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptEvaluateMethod1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptEvaluateMethod2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptExceptionValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptFunctionDeclarationMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptFunctionExpressionMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptGetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptImportMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptInMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptInstanceofMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptPackageMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptStrictEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptThrowMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptTypeofMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jScriptWithMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jsFunctionAttributeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_jsLocalFieldConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_lateBindingConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_lateBindingConstructor2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_localVarsField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_missingField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_moveNextMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_numericBinaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_numericbinaryDoOpMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_numericUnaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_objectField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_plusConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_plusDoOpMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_popScriptObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_postOrPrefixConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_pushScriptObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_pushStackFrameForMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_pushStackFrameForStaticMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_referenceAttributeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_regExpConstructMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_relationalConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_returnOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_scriptExceptionConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_scriptObjectStackTopMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_setEngineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_setFieldValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_setIndexedPropertyValueStaticMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_setMemberValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_setValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringConcat2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringConcat3Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringConcat4Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringConcatArrMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_stringLengthMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_systemReflectionMissingField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_throwTypeMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toBooleanMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toForInObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toNativeArrayMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toNumberMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toObject2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_toStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_uint32ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_uint32ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_uint64ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_uint64ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_uncheckedDecimalToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_undefinedField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_vsaEngineConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_writeLineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_writeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Field({Static:false, Public:false}, "BreakLabelStack", $asm03.TypeRef("Microsoft.JScript.Stack"));

    $.Field({Static:false, Public:false}, "ContinueLabelStack", $asm03.TypeRef("Microsoft.JScript.Stack"));

    $.Field({Static:false, Public:false}, "InsideProtectedRegion", $.Boolean);

    $.Field({Static:false, Public:false}, "InsideFinally", $.Boolean);

    $.Field({Static:false, Public:false}, "FinallyStackTop", $.Int32);

    $.Field({Static:false, Public:false}, "module", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Field({Static:false, Public:false}, "assemblyBuilder", $asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder"));

    $.Field({Static:false, Public:false}, "classwriter", $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"));

    $.Field({Static:false, Public:false}, "globalScopeClassWriter", $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"));

    $.Field({Static:false, Public:false}, "documents", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "usedNames", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "compilationEvidence", $asm07.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:true , Public:false}, "constructArrayMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "isMissingMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "bitwiseBinaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "evaluateBitwiseBinaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "breakOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "closureConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "continueOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "checkIfDoubleIsIntegerMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "checkIfSingleIsIntegerMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "coerce2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "coerceTMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "throwTypeMismatch", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "doubleToBooleanMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toBooleanMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toForInObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toNativeArrayMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toNumberMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toObject2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "doubleToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "toStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "undefinedField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "equalityConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "evaluateEqualityMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptEvaluateMethod1", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptEvaluateMethod2", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptGetEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptFunctionDeclarationMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptFunctionExpressionMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "contextEngineField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "fastConstructArrayLiteralMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "globalScopeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "getDefaultThisObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getFieldMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getGlobalScopeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getMemberValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptImportMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptInMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getEngineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "setEngineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptInstanceofMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "scriptExceptionConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "jsFunctionAttributeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "jsLocalFieldConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "setMemberValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "lateBindingConstructor2", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "lateBindingConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "objectField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "callMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "callValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "callValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "deleteMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "deleteMemberMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getNonMissingValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "setIndexedPropertyValueStaticMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "setValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "missingField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "getNamespaceMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "numericBinaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "numericbinaryDoOpMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "evaluateNumericBinaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "numericUnaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "evaluateUnaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "constructObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptPackageMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "plusConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "plusDoOpMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "evaluatePlusMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "postOrPrefixConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "evaluatePostOrPrefixOperatorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "referenceAttributeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "regExpConstructMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "relationalConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "evaluateRelationalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptCompareMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "returnOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "doubleToInt64", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "uncheckedDecimalToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "engineField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "getParentMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "writeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "writeLineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "hashtableCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "hashtableGetItem", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "hashTableGetEnumerator", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "hashtableRemove", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "hashtableSetItem", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "closureInstanceField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "localVarsField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "pushStackFrameForMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "pushStackFrameForStaticMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptStrictEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptThrowMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptExceptionValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptTypeofMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "vsaEngineConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "createVsaEngine", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "createVsaEngineWithType", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getOriginalArrayConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getOriginalObjectConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getOriginalRegExpConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "popScriptObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "pushScriptObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "scriptObjectStackTopMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getLenientGlobalObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "jScriptWithMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "clsCompliantAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "getEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "moveNextMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getCurrentMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "contextStaticAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "changeTypeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "convertCharToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "dateTimeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "dateTimeToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "dateTimeToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "decimalZeroField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "decimalCompare", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "doubleToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "int32ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "int64ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "uint32ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "uint64ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToDoubleMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToUInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "decimalToUInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "debugBreak", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "debuggerHiddenAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "debuggerStepThroughAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "int32ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "int64ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "equalsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "defaultMemberAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "getFieldValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "setFieldValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "systemReflectionMissingField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "compilerGlobalScopeAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "stringConcatArrMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "stringConcat4Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "stringConcat3Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "stringConcat2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "stringEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "stringLengthMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getMethodMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getTypeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "getTypeFromHandleMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "uint32ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "uint64ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Completion */ 

(function Completion$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Completion", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Continue", $.Int32);

    $.Field({Static:false, Public:false}, "Exit", $.Int32);

    $.Field({Static:false, Public:false}, "Return", $.Boolean);

    $.Field({Static:false, Public:true }, "value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ConcatString */ 

(function ConcatString$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ConcatString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.GetTypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TypeCode"))
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "GetTypeCode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToBoolean");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToByte", 
      new JSIL.MethodSignature($.Byte, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToByte");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToChar", 
      new JSIL.MethodSignature($.Char, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToChar");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDateTime");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDecimal");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDouble");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt16", 
      new JSIL.MethodSignature($.Int16, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt16");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt32");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt64");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToSByte", 
      new JSIL.MethodSignature($.SByte, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToSByte");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToSingle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToString");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToType", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt16");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt32");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt64");

    $.ExternalMethod({Static:false, Public:false}, "ToIConvertible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IConvertible"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "buf", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "isOwner", $.Boolean);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IConvertible")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Conditional */ 

(function Conditional$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Conditional", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "condition", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operand1", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operand2", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Constant */ 

(function Constant$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Constant", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.Lookup"), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILInitOnlyInitializers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "customAttributes", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Field({Static:false, Public:false}, "field", $asm03.TypeRef("Microsoft.JScript.JSVariableField"));

    $.Field({Static:false, Public:false}, "valueField", $asm07.TypeRef("System.Reflection.Emit.FieldBuilder"));

    $.Field({Static:false, Public:false}, "identifier", $asm03.TypeRef("Microsoft.JScript.Lookup"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ConstantListItem */ 

(function ConstantListItem$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ConstantListItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Type])
    );

    $.Field({Static:false, Public:false}, "prev", $.Type);

    $.Field({Static:false, Public:false}, "term", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ConstantWrapper */ 

(function ConstantWrapper$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ConstantWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAssignableTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateToILInt", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "isNumericLiteral", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ConstructorCall */ 

(function ConstructorCall$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ConstructorCall", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.ASTList"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "isOK", $.Boolean);

    $.Field({Static:false, Public:false}, "isSuperConstructorCall", $.Boolean);

    $.Field({Static:false, Public:false}, "$arguments", $asm03.TypeRef("Microsoft.JScript.ASTList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Context */ 

(function Context$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Context", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.DocumentContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.DocumentContext"), $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineWith", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitFirstLineInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLineInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetToken", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.JSToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.JSError"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSourceContext", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.DocumentContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateWith", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "document", $asm03.TypeRef("Microsoft.JScript.DocumentContext"));

    $.Field({Static:false, Public:false}, "source_string", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "startLinePos", $.Int32);

    $.Field({Static:false, Public:false}, "startPos", $.Int32);

    $.Field({Static:false, Public:false}, "endLineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "endLinePos", $.Int32);

    $.Field({Static:false, Public:false}, "endPos", $.Int32);

    $.Field({Static:false, Public:false}, "token", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "errorReported", $.Int32);

    $.Property({Static:false, Public:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true }, "EndPosition", $.Int32);

    $.Property({Static:false, Public:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true }, "StartPosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Continue */ 

(function Continue$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Continue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "leavesFinally", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ContinueOutOfFinally */ 

(function ContinueOutOfFinally$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.JScript.ContinueOutOfFinally", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:true }, "target", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.PreferredType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.PreferredType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Either: 0, 
    Number: 1, 
    String: 2, 
    LocaleString: 3, 
  }
);

/* class Microsoft.JScript.Convert */ 

(function Convert$Members () {
  var $, $thisType;



























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Convert", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckIfDoubleIsInteger", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckIfSingleIsInteger", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coerce", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Coerce", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coerce2", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.TypeCode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Coerce2WithNoTrunctation", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Coerce2WithTruncationPermitted", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoerceT", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CoerceT", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoubleParse", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimalToIntegerTruncatedConversion", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.Emit.OpCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitDoubleToIntegerTruncatedConversion", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.Emit.OpCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitLdarg", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitLdloca", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitSingleToIntegerTruncatedConversion", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.Emit.OpCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmittedCallToConversionMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitUnbox", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArrayElementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArrayRank", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIConvertible", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IConvertible"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetToXXXXMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [$.Object, $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArray", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArrayElementTypeKnown", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArrayRankKnown", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArrayType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBadIndex", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsJScriptArray", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveIntegerType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveNumericType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveNumericTypeCode", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveNumericTypeFitForDouble", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveSignedIntegerType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveSignedNumericType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimitiveUnsignedIntegerType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPromotableTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPromotableTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPromotableToArray", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpaceTrailer", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LiteralToNumber", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LiteralToNumber", 
      new JSIL.MethodSignature($.Object, [$.String, $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedsWrapper", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "parseRadix", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.UInt32, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RadixDigit", 
      new JSIL.MethodSignature($.Int32, [$.Char, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTypeMismatch", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm07.TypeRef("System.IConvertible")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDigit", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToForInObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object, $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
      new JSIL.MethodSignature($.Double, [$.Object, $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToIReflect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm07.TypeRef("System.Type"), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToLocaleString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToNativeArray", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToNumber", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToNumber", 
      new JSIL.MethodSignature($.Double, [$.Object, $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToNumber", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToNumber", 
      new JSIL.MethodSignature($.Double, [
          $.String, $.Boolean, 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToObject2", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToObject3", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToPrimitive", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.PreferredType")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToPrimitive", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.PreferredType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IConvertible")])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToPrimitive", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.PreferredType"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.IConvertible")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.PreferredType"), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.PreferredType"), 
          $asm07.TypeRef("System.IConvertible"), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm03.TypeRef("Microsoft.JScript.TypeReferences"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTypeName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToUint32", 
      new JSIL.MethodSignature($.UInt32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToUint32", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $asm07.TypeRef("System.IConvertible")])
    );

    $.Field({Static:true , Public:false}, "promotable", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false}, "rgcchSig", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CustomAttribute */ 

(function CustomAttribute$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.CustomAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForCustomAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")]), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfTargetOK", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertClassScopesAndEnumWrappers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFieldAndPropertyInfos", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DaysSince2000", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtractCustomAttribute", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")]), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCLSComplianceValue", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CLSComplianceSpec"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCustomAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.CustomAttributeBuilder"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.Assembly"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.Module"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributeValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.CustomAttributeTypedArgument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeIfAttributeHasToBeUnique", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsExpandoAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SecondsSinceMidnight", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTarget", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeOfArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$.Object])
    );

    $.Field({Static:false, Public:false}, "ctor", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "args", $asm03.TypeRef("Microsoft.JScript.ASTList"));

    $.Field({Static:false, Public:false}, "target", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "type", $.Object);

    $.Field({Static:false, Public:false}, "positionalArgValues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namedArgFields", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namedArgFieldValues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namedArgProperties", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namedArgPropertyValues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "raiseToPropertyLevel", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.CustomAttributeList */ 

(function CustomAttributeList$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.CustomAttributeList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.CustomAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsExpandoAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.CustomAttribute"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCustomAttributeBuilders", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.Emit.CustomAttributeBuilder")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.CustomAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTarget", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "customAttributes", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "alreadyPartiallyEvaluated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DateConstructor */ 

(function DateConstructor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.DateConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientDatePrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.DateObject"), [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.DateObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "parse", 
      new JSIL.MethodSignature($.Double, [$.String])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Date_parse]; });

    $.ExternalMethod({Static:true , Public:true }, "UTC", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Date_UTC]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.DatePrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DateObject */ 

(function DateObject$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.DateObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Double])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.Field({Static:false, Public:false}, "value", $.Double);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.Ps */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Ps", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initial: 0, 
    Minutes: 1, 
    Seconds: 2, 
    AddOffset: 3, 
    SubOffset: 4, 
    Date: 5, 
    Year: 6, 
  }
);

/* enum Microsoft.JScript.Tk */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Tk", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Dummy: 0, 
    BcAd: 1, 
    AmPm: 2, 
    Zone: 3, 
    Day: 4, 
    Month: 5, 
  }
);

/* class Microsoft.JScript.DatePrototype */ 

(function DatePrototype$Members () {
  var $, $thisType;





















































































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.DateObject"), 
      Name: "Microsoft.JScript.DatePrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendTime", 
      new JSIL.MethodSignature(null, [$.Double, $asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToDateString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToLocaleDateString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToLocaleString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToLocaleTimeString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToTimeString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "Day", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DayFromYear", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DaylightSavingsTime", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DaysInYear", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DayWithinYear", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DateConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "getDate", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getDate]; });

    $.ExternalMethod({Static:true , Public:true }, "getDay", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getDay]; });

    $.ExternalMethod({Static:true , Public:true }, "getFullYear", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getFullYear]; });

    $.ExternalMethod({Static:true , Public:true }, "getHours", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getHours]; });

    $.ExternalMethod({Static:true , Public:true }, "getMilliseconds", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getMilliseconds]; });

    $.ExternalMethod({Static:true , Public:true }, "getMinutes", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getMinutes]; });

    $.ExternalMethod({Static:true , Public:true }, "getMonth", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getMonth]; });

    $.ExternalMethod({Static:true , Public:true }, "getSeconds", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getSeconds]; });

    $.ExternalMethod({Static:true , Public:true }, "getTime", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getTime]; });

    $.ExternalMethod({Static:true , Public:true }, "getTimezoneOffset", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getTimezoneOffset]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCDate", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCDate]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCDay", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCDay]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCFullYear", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCFullYear]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCHours", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCHours]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCMilliseconds", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCMilliseconds]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCMinutes", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCMinutes]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCMonth", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCMonth]; });

    $.ExternalMethod({Static:true , Public:true }, "getUTCSeconds", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getUTCSeconds]; });

    $.ExternalMethod({Static:true , Public:true }, "getVarDate", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getVarDate]; });

    $.ExternalMethod({Static:true , Public:true }, "getYear", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["getYear"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_getYear]; });

    $.ExternalMethod({Static:true , Public:false}, "HourFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "InLeapYear", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "isalpha", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "isASCII", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "isdigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "LocalTime", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDate", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDay", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeTime", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MinFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "MonthFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "msFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSpecified", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDate", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SecFromTime", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "setDate", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setDate]; });

    $.ExternalMethod({Static:true , Public:true }, "setFullYear", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setFullYear]; });

    $.ExternalMethod({Static:true , Public:true }, "setHours", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setHours]; });

    $.ExternalMethod({Static:true , Public:true }, "setMilliseconds", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setMilliseconds]; });

    $.ExternalMethod({Static:true , Public:true }, "setMinutes", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setMinutes]; });

    $.ExternalMethod({Static:true , Public:true }, "setMonth", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setMonth]; });

    $.ExternalMethod({Static:true , Public:true }, "setSeconds", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setSeconds]; });

    $.ExternalMethod({Static:true , Public:true }, "setTime", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setTime]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCDate", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCDate]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCFullYear", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCFullYear]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCHours", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCHours]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCMilliseconds", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCMilliseconds]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCMinutes", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCMinutes]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCMonth", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCMonth]; });

    $.ExternalMethod({Static:true , Public:true }, "setUTCSeconds", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setUTCSeconds]; });

    $.ExternalMethod({Static:true , Public:true }, "setYear", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["setYear"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_setYear]; });

    $.ExternalMethod({Static:true , Public:false}, "TimeClip", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeFromYear", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeWithinDay", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeZoneID", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "toDateString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toDateString]; });

    $.ExternalMethod({Static:true , Public:true }, "toGMTString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["toGMTString"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toGMTString]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleDateString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toLocaleDateString]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toLocaleString]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleTimeString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toLocaleTimeString]; });

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "toTimeString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toTimeString]; });

    $.ExternalMethod({Static:true , Public:true }, "toUTCString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_toUTCString]; });

    $.ExternalMethod({Static:true , Public:false}, "UTC", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "UTCDateToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "valueOf", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Date_valueOf]; });

    $.ExternalMethod({Static:true , Public:false}, "WeekDay", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "YearFromTime", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "YearString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.Constant({Static:true , Public:false}, "HoursPerDay", $.Double, 24);

    $.Constant({Static:true , Public:false}, "MinutesPerHour", $.Double, 60);

    $.Constant({Static:true , Public:false}, "SecondsPerMinute", $.Double, 60);

    $.Constant({Static:true , Public:false}, "msPerSecond", $.Double, 1000);

    $.Constant({Static:true , Public:false}, "msPerMinute", $.Double, 60000);

    $.Constant({Static:true , Public:false}, "msPerHour", $.Double, 3600000);

    $.Constant({Static:true , Public:false}, "msPerDay", $.Double, 86400000);

    $.Constant({Static:true , Public:false}, "msTo1970", $.Double, 62135596800000);

    $.Constant({Static:true , Public:false}, "ticksPerMillisecond", $.Double, 10000);

    $.Constant({Static:true , Public:false}, "maxDate", $.Double, 8.64E+15);

    $.Constant({Static:true , Public:false}, "minDate", $.Double, -8.64E+15);

    $.Field({Static:true , Public:false, ReadOnly:true }, "daysToMonthEnd", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "leapDaysToMonthEnd", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "localStandardTZA", $.Double);

    $.Field({Static:true , Public:false, ReadOnly:true }, "localDaylightTZA", $.Double);

    $.Field({Static:true , Public:false, ReadOnly:true }, "useDST", $.Boolean, function ($pi) {
        return !(+$pi.localStandardTZA === +$pi.localDaylightTZA);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "WeekDayName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MonthName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Strings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Tokens", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.Tk")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Values", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Debug */ 

(function Debug$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("Microsoft.JScript.Debug", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "NotImplemented", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "PostCondition", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "PostCondition", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "PreCondition", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "PreCondition", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["ASSERTION"]; });

    $.ExternalMethod({Static:true , Public:true }, "Print", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["LOGGING"]; });

    $.ExternalMethod({Static:true , Public:false}, "PrintLine", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["LOGGING"]; });

    $.ExternalMethod({Static:true , Public:true }, "PrintStack", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["LOGGING"]; });

    $.ExternalMethod({Static:true , Public:true }, "PrintStack", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["LOGGING"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.AssertException */ 

(function AssertException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.JScript.AssertException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.PreConditionException */ 

(function PreConditionException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AssertException"), 
      Name: "Microsoft.JScript.PreConditionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.PostConditionException */ 

(function PostConditionException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AssertException"), 
      Name: "Microsoft.JScript.PostConditionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DebugBreak */ 

(function DebugBreak$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.DebugBreak", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DebugArrayFieldEnumerator */ 

(function DebugArrayFieldEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.DebugArrayFieldEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObjectPropertyEnumerator"), $asm03.TypeRef("Microsoft.JScript.ArrayObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Next", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.DynamicFieldInfo")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Skip", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "enumerator", $asm03.TypeRef("Microsoft.JScript.ScriptObjectPropertyEnumerator"));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "arrayObject", $asm03.TypeRef("Microsoft.JScript.ArrayObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.IDebugConvert */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebugConvert", true, [], function ($) {
    $.Method({}, "ToPrimitive", new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.TypeCode"), 
          $.Boolean
        ]));
    $.Method({}, "ByteToString", new JSIL.MethodSignature($.String, [$.Byte, $.Int32]));
    $.Method({}, "SByteToString", new JSIL.MethodSignature($.String, [$.SByte, $.Int32]));
    $.Method({}, "Int16ToString", new JSIL.MethodSignature($.String, [$.Int16, $.Int32]));
    $.Method({}, "UInt16ToString", new JSIL.MethodSignature($.String, [$.UInt16, $.Int32]));
    $.Method({}, "Int32ToString", new JSIL.MethodSignature($.String, [$.Int32, $.Int32]));
    $.Method({}, "UInt32ToString", new JSIL.MethodSignature($.String, [$.UInt32, $.Int32]));
    $.Method({}, "Int64ToString", new JSIL.MethodSignature($.String, [$.Int64, $.Int32]));
    $.Method({}, "UInt64ToString", new JSIL.MethodSignature($.String, [$.UInt64, $.Int32]));
    $.Method({}, "SingleToString", new JSIL.MethodSignature($.String, [$.Single]));
    $.Method({}, "DoubleToString", new JSIL.MethodSignature($.String, [$.Double]));
    $.Method({}, "BooleanToString", new JSIL.MethodSignature($.String, [$.Boolean]));
    $.Method({}, "DoubleToDateString", new JSIL.MethodSignature($.String, [$.Double]));
    $.Method({}, "RegexpToString", new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ]));
    $.Method({}, "StringToPrintable", new JSIL.MethodSignature($.String, [$.String]));
    $.Method({}, "GetManagedObject", new JSIL.MethodSignature($.Object, [$.Object]));
    $.Method({}, "GetManagedInt64Object", new JSIL.MethodSignature($.Object, [$.Int64]));
    $.Method({}, "GetManagedUInt64Object", new JSIL.MethodSignature($.Object, [$.UInt64]));
    $.Method({}, "GetManagedCharObject", new JSIL.MethodSignature($.Object, [$.UInt16]));
    $.Method({}, "GetErrorMessageForHR", new JSIL.MethodSignature($.String, [$.Int32, $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["AA51516D-C0F2-49fe-9D38-61D20456904C"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IDebugConvert2 */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebugConvert2", true, [], function ($) {
    $.Method({}, "DecimalToString", new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["B370D709-72BD-4696-9825-C4EBADBF98CB"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.DebugConvert */ 

(function DebugConvert$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.DebugConvert", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BooleanToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ByteToString", 
      new JSIL.MethodSignature($.String, [$.Byte, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecimalToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DoubleToDateString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DoubleToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetErrorMessageForHR", 
      new JSIL.MethodSignature($.String, [$.Int32, $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetManagedCharObject", 
      new JSIL.MethodSignature($.Object, [$.UInt16])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetManagedInt64Object", 
      new JSIL.MethodSignature($.Object, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetManagedObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetManagedUInt64Object", 
      new JSIL.MethodSignature($.Object, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Int16ToString", 
      new JSIL.MethodSignature($.String, [$.Int16, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Int32ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Int64ToString", 
      new JSIL.MethodSignature($.String, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RegexpToString", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SByteToString", 
      new JSIL.MethodSignature($.String, [$.SByte, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SingleToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StringToPrintable", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToPrimitive", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.TypeCode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UInt16ToString", 
      new JSIL.MethodSignature($.String, [$.UInt16, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UInt32ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UInt64ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64, $.Int32])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.IDebugConvert"), 
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IDebugConvert2")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["432D76CE-8C9E-4eed-ADDD-91737F27A8CB"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* interface Microsoft.JScript.IDebugType */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebugType", true, [], function ($) {
    $.Method({}, "HasInstance", new JSIL.MethodSignature($.Boolean, [$.Object]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["613CC05D-05F4-4969-B369-5AEEF56E32D0"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IDebuggerObject */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebuggerObject", true, [], function ($) {
    $.Method({}, "IsCOMObject", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "IsEqual", new JSIL.MethodSignature($.Boolean, [$.Type]));
    $.Method({}, "HasEnumerableMember", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsScriptFunction", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "IsScriptObject", JSIL.MethodSignature.Return($.Boolean));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["8E93D770-6168-4b68-B896-A71B74C7076A"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.DynamicFieldInfo */ 

(function DynamicFieldInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.DynamicFieldInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "value", $.Object);

    $.Field({Static:false, Public:true }, "fieldTypeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DebuggingHelper */ 

(function DebuggingHelper$Members () {
  var $, $thisType;
































  JSIL.MakeStaticClass("Microsoft.JScript.DebuggingHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "BooleanToObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ByteToObject", 
      new JSIL.MethodSignature($.Object, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "CallConstructor", 
      new JSIL.MethodSignature($.Object, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CallMethod", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CallStaticMethod", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngine", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DoubleToObject", 
      new JSIL.MethodSignature($.Object, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClosureInstance", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultIndexedPropertyValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExpandoObjectFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.DynamicFieldInfo")]), [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHashTableFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.DynamicFieldInfo")]), [$asm03.TypeRef("Microsoft.JScript.SimpleHashtable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInCurrentAppDomain", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int16ToObject", 
      new JSIL.MethodSignature($.Object, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int32ToObject", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int64ToObject", 
      new JSIL.MethodSignature($.Object, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvokeCOMObject", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "InvokeMethodInfo", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Print", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SByteToObject", 
      new JSIL.MethodSignature($.Object, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultIndexedPropertyValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetIndexedPropertyValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetStaticIndexedPropertyValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SingleToObject", 
      new JSIL.MethodSignature($.Object, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "StringToObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToNativeArray", 
      new JSIL.MethodSignature($.Object, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "UInt16ToObject", 
      new JSIL.MethodSignature($.Object, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "UInt32ToObject", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "UInt64ToObject", 
      new JSIL.MethodSignature($.Object, [$.UInt64])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Delete */ 

(function Delete$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.Delete", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DocumentContext */ 

(function DocumentContext$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.DocumentContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.VsaItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $asm03.TypeRef("Microsoft.JScript.VsaItem")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitFirstLineInfo", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLineInfo", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_compilerGlobals", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CompilerGlobals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JScriptException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasAlreadySeenErrorFor", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "documentName", $.String);

    $.Field({Static:false, Public:false}, "documentWriter", $asm07.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"));

    $.Field({Static:false, Public:false}, "startLine", $.Int32);

    $.Field({Static:false, Public:false}, "startCol", $.Int32);

    $.Field({Static:false, Public:false}, "lastLineInSource", $.Int32);

    $.Field({Static:false, Public:false}, "sourceItem", $asm03.TypeRef("Microsoft.JScript.VsaItem"));

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "debugOn", $.Boolean);

    $.Field({Static:false, Public:false}, "_compilerGlobals", $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"));

    $.Field({Static:false, Public:false}, "reportedVariables", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "checkForFirst", $.Boolean);

    $.Field({Static:false, Public:false}, "firstStartLine", $.Int32);

    $.Field({Static:false, Public:false}, "firstStartCol", $.Int32);

    $.Field({Static:false, Public:false}, "firstEndLine", $.Int32);

    $.Field({Static:false, Public:false}, "firstEndCol", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "language", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "vendor", $asm07.TypeRef("System.Guid"));


    function DocumentContext__cctor () {
      $thisType.language = new $asm07.System.Guid();
      $thisType.vendor = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DocumentContext__cctor
    );

    $.Property({Static:false, Public:false}, "compilerGlobals", $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DoWhile */ 

(function DoWhile$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.DoWhile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "condition", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Empty */ 

(function Empty$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Empty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Value", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EmptyLiteral */ 

(function EmptyLiteral$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ConstantWrapper"), 
      Name: "Microsoft.JScript.EmptyLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EnumDeclaration */ 

(function EnumDeclaration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Class"), 
      Name: "Microsoft.JScript.EnumDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.IdentifierLiteral"), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.Block"), 
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTypeBuilderOrEnumBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.Field({Static:false, Public:false}, "baseType", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EnumeratorConstructor */ 

(function EnumeratorConstructor$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.EnumeratorConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientEnumeratorPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.EnumeratorObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.EnumeratorPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EnumeratorObject */ 

(function EnumeratorObject$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.EnumeratorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.EnumeratorPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.EnumeratorPrototype"), $asm07.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "atEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "item", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "moveFirst", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "moveNext", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "collection", $asm07.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:false}, "obj", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EnumeratorPrototype */ 

(function EnumeratorPrototype$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.EnumeratorPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:true , Public:true }, "atEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Enumerator_atEnd]; });

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Enumerator_item]; });

    $.ExternalMethod({Static:true , Public:true }, "moveFirst", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Enumerator_moveFirst]; });

    $.ExternalMethod({Static:true , Public:true }, "moveNext", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Enumerator_moveNext]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EnumWrapper */ 

(function EnumWrapper$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.EnumWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_classScopeOrType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_$name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.GetTypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TypeCode"))
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "GetTypeCode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToBoolean");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToByte", 
      new JSIL.MethodSignature($.Byte, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToByte");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToChar", 
      new JSIL.MethodSignature($.Char, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToChar");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDateTime");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDecimal");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToDouble");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt16", 
      new JSIL.MethodSignature($.Int16, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt16");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt32");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToInt64");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToSByte", 
      new JSIL.MethodSignature($.SByte, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToSByte");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToSingle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToString");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToType", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt16");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt32");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IConvertible.ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm07.TypeRef("System.IFormatProvider")])
    )
      .Overrides($asm07.TypeRef("System.IConvertible"), "ToUInt64");

    $.ExternalMethod({Static:false, Public:false}, "ToNumericValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false, Virtual:true }, "value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "$name", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "classScopeOrType", $asm07.TypeRef("System.Reflection.IReflect"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IConvertible")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.DeclaredEnumValue */ 

(function DeclaredEnumValue$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.EnumWrapper"), 
      Name: "Microsoft.JScript.DeclaredEnumValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $asm03.TypeRef("Microsoft.JScript.ClassScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CoerceToBaseType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_classScopeOrType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_$name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_classScope", $asm03.TypeRef("Microsoft.JScript.ClassScope"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "$name", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "classScopeOrType", $asm07.TypeRef("System.Reflection.IReflect"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.MetadataEnumValue */ 

(function MetadataEnumValue$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.EnumWrapper"), 
      Name: "Microsoft.JScript.MetadataEnumValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_$name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "$name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Equality */ 

(function Equality$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Equality", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluateEquality", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EvaluateEquality", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptEquals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "JScriptEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible"), 
          $asm07.TypeRef("System.TypeCode"), $asm07.TypeRef("System.TypeCode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.ErrorType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.ErrorType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    OtherError: 0, 
    EvalError: 1, 
    RangeError: 2, 
    ReferenceError: 3, 
    SyntaxError: 4, 
    TypeError: 5, 
    URIError: 6, 
  }
);

/* class Microsoft.JScript.ErrorConstructor */ 

(function ErrorConstructor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.ErrorConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientErrorPrototype"), 
          $asm03.TypeRef("Microsoft.JScript.GlobalObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.ErrorType")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("Microsoft.JScript.ErrorType"), 
          $.Type, $asm03.TypeRef("Microsoft.JScript.GlobalObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ErrorObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ErrorObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "evalOb", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "rangeOb", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "referenceOb", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "syntaxOb", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "typeOb", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "uriOb", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.ErrorPrototype"));

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.ErrorType"));

    $.Field({Static:false, Public:false}, "globalObject", $asm03.TypeRef("Microsoft.JScript.GlobalObject"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ErrorObject */ 

(function ErrorObject$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type])
    );

    $.Field({Static:false, Public:true }, "message", $.Object);

    $.Field({Static:false, Public:true }, "number", $.Object);

    $.Field({Static:false, Public:true }, "description", $.Object);

    $.Field({Static:false, Public:false}, "exception", $.Object);

    $.Property({Static:false, Public:false}, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ErrorPrototype */ 

(function ErrorPrototype$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ErrorPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Error_toString]; });

    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Eval */ 

(function Eval$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Eval", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DoEvaluate", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptEvaluate", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptEvaluate", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "unsafeOption", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "enclosingFunctionScope", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EvalErrorObject */ 

(function EvalErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.EvalErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Expando */ 

(function Expando$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.Expando", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Method")]; });

})();

/* class Microsoft.JScript.Expression */ 

(function Expression$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Expression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FieldAccessor */ 

(function FieldAccessor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.FieldAccessor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessorFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SpitAndInstantiateClassFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.Field({Static:true , Public:false}, "accessorFor", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:true , Public:false}, "count", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.For */ 

(function For$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.For", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "initializer", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "condition", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "incrementer", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ForIn */ 

(function ForIn$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ForIn", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptGetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "$var", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "initializer", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "collection", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "inExpressionContext", $asm03.TypeRef("Microsoft.JScript.Context"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionConstructor */ 

(function FunctionConstructor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.FunctionConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ScriptFunction"), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ScriptFunction"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ScriptFunction"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.FunctionPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionDeclaration */ 

(function FunctionDeclaration$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.FunctionDeclaration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.IdentifierLiteral"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.ParameterDeclaration")]), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.Block"), 
          $asm03.TypeRef("Microsoft.JScript.FunctionScope"), $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptFunctionDeclaration", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Closure"), [
          $asm07.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), $.Boolean, 
          $.Boolean, $.String, 
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILClosure", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILSourceTextProvider", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "declaringObject", $asm03.TypeRef("Microsoft.JScript.Member"));

    $.Field({Static:false, Public:false}, "ifaceId", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "isMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "inFastScope", $.Boolean);

    $.Field({Static:false, Public:false}, "field", $asm03.TypeRef("Microsoft.JScript.JSVariableField"));

    $.Field({Static:false, Public:false}, "enclosingProperty", $asm03.TypeRef("Microsoft.JScript.JSProperty"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionExpression */ 

(function FunctionExpression$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.FunctionExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.ParameterDeclaration")]), $asm03.TypeRef("Microsoft.JScript.TypeExpression"), 
          $asm03.TypeRef("Microsoft.JScript.Block"), $asm03.TypeRef("Microsoft.JScript.FunctionScope"), 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNameTo", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptFunctionExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.FunctionObject"), [
          $asm07.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), $.Boolean, 
          $.Boolean, $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "field", $asm03.TypeRef("Microsoft.JScript.JSVariableField"));

    $.Field({Static:false, Public:false}, "func_local", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:true , Public:false}, "uniqueNumber", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionObject */ 

(function FunctionObject$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.FunctionObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.ParameterDeclaration")]), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.Block"), 
          $asm03.TypeRef("Microsoft.JScript.FunctionScope"), $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm07.TypeRef("System.Reflection.MethodAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.ParameterDeclaration")]), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.Block"), 
          $asm03.TypeRef("Microsoft.JScript.FunctionScope"), $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm07.TypeRef("System.Reflection.MethodAttributes"), 
          $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), $.Boolean, 
          $.Boolean, $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm03.TypeRef("Microsoft.JScript.Closure"), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CallASTFunc", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm03.TypeRef("Microsoft.JScript.Closure"), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCLSCompliance", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.JSObject"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConvertArguments", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyToNewParamArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.IReflect"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyToNewParamArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [
          $asm07.TypeRef("System.Type"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLastLineInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Must_save_stack_locals", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructorInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodBase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNumberOfFormalParameters", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNestedFunctionField", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSLocalField")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPresentIn", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.FieldInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PartiallyEvaluate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateBodyToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.CompilerGlobals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToCopyLocalsFromNestedScope", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.FunctionScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToCopyLocalsToNestedScope", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.FunctionScope"), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToCopyOuterScopeLocals", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToLoadEngine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToLoadEngine", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToRestoreLocals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToRestoreLocals", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILToSaveLocals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToMethodWithStackFrame", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "parameter_declarations", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.ParameterDeclaration")]));

    $.Field({Static:false, Public:false}, "formal_parameters", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "return_type_expr", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.Block"));

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "parameterInfos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "funcContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "argumentsSlotNumber", $.Int32);

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]));

    $.Field({Static:false, Public:false}, "own_scope", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));

    $.Field({Static:false, Public:false}, "enclosing_scope", $asm03.TypeRef("Microsoft.JScript.ScriptObject"));

    $.Field({Static:false, Public:false}, "must_save_stack_locals", $.Boolean);

    $.Field({Static:false, Public:false}, "hasArgumentsObject", $.Boolean);

    $.Field({Static:false, Public:false}, "implementedIface", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "implementedIfaceMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "isMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "isExpandoMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "isConstructor", $.Boolean);

    $.Field({Static:false, Public:false}, "isImplicitCtor", $.Boolean);

    $.Field({Static:false, Public:false}, "isStatic", $.Boolean);

    $.Field({Static:false, Public:false}, "noVersionSafeAttributeSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "suppressIL", $.Boolean);

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "mb", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:false}, "cb", $asm07.TypeRef("System.Reflection.Emit.ConstructorBuilder"));

    $.Field({Static:false, Public:false}, "classwriter", $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Field({Static:false, Public:false}, "globals", $asm03.TypeRef("Microsoft.JScript.Globals"));

    $.Field({Static:false, Public:false}, "superConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "superConstructorCall", $asm03.TypeRef("Microsoft.JScript.ConstructorCall"));

    $.Field({Static:false, Public:false}, "customAttributes", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Field({Static:false, Public:false}, "clsCompliance", $asm03.TypeRef("Microsoft.JScript.CLSComplianceSpec"));

    $.Field({Static:false, Public:false}, "engineLocal", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "partiallyEvaluated", $.Boolean);

    $.Field({Static:false, Public:false}, "returnLabel", $asm07.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "Must_save_stack_locals", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionPrototype */ 

(function FunctionPrototype$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.FunctionPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:true , Public:true }, "$apply", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Function_apply]; });

    $.ExternalMethod({Static:true , Public:true }, "$call", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.Function_call]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.FunctionConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Function_toString]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionScope */ 

(function FunctionScope$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.FunctionScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNewField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $asm03.TypeRef("Microsoft.JScript.FunctionObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOuterScopeField", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.JSLocalField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReturnValueField", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseNestedFunctions", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.StackFrame"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefinedFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.BitArray"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocalFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextSlotNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOuterLocalField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSLocalField"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GiveOuterFunctionsTheBadNews", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnitializedVariables", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DefinedFlags", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.BitArray"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemberValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.StackFrame")
        ])
    );

    $.Field({Static:false, Public:false}, "isMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "isStatic", $.Boolean);

    $.Field({Static:false, Public:false}, "mustSaveStackLocals", $.Boolean);

    $.Field({Static:false, Public:false}, "returnVar", $asm03.TypeRef("Microsoft.JScript.JSLocalField"));

    $.Field({Static:false, Public:false}, "owner", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "nested_functions", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "fields_for_nested_functions", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "ProvidesOuterScopeLocals", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "closuresMightEscape", $.Boolean);

    $.Property({Static:false, Public:false}, "DefinedFlags", $asm07.TypeRef("System.Collections.BitArray"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.FunctionWrapper */ 

(function FunctionWrapper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.FunctionWrapper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConvertToDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "obj", $.Object);

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.GlobalObject */ 

(function GlobalObject$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.GlobalObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendInHex", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CollectGarbage", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_CollectGarbage]; });

    $.ExternalMethod({Static:true , Public:false}, "Decode", 
      new JSIL.MethodSignature($.String, [$.Object, $asm03.TypeRef("Microsoft.JScript.GlobalObject+URISetType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "decodeURI", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_decodeURI]; });

    $.ExternalMethod({Static:true , Public:true }, "decodeURIComponent", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_decodeURIComponent]; });

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.String, [$.Object, $asm03.TypeRef("Microsoft.JScript.GlobalObject+URISetType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "encodeURI", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_encodeURI]; });

    $.ExternalMethod({Static:true , Public:true }, "encodeURIComponent", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_encodeURIComponent]; });

    $.ExternalMethod({Static:true , Public:true }, "escape", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["escape"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_escape]; });

    $.ExternalMethod({Static:true , Public:true }, "$eval", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_eval]; });

    $.ExternalMethod({Static:true , Public:true }, "get_ActiveXObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Array", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_boolean", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Boolean", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.BooleanConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_byte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_char", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DateConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_decimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_double", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Enumerator", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Error", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EvalError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_float", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Function", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.FunctionConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_int", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_long", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Math", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.MathObject"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.NumberConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalActiveXObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalArray", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalBoolean", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.BooleanConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalDate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DateConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalEnumerator", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalEvalError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalFunction", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.FunctionConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalNumber", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.NumberConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalObjectPrototype", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalRangeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalReferenceError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalRegExp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.RegExpConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalString", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.StringConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalSyntaxError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalTypeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalURIError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalVBArray", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RangeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ReferenceError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RegExp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.RegExpConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_sbyte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_short", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_String", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.StringConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SyntaxError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TypeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_uint", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ulong", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_URIError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ushort", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_VBArray", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_void", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_GetObject]; });

    $.ExternalMethod({Static:true , Public:false}, "HexDigit", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexValue", 
      new JSIL.MethodSignature($.Byte, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "InURISet", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $asm03.TypeRef("Microsoft.JScript.GlobalObject+URISetType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "isFinite", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_isFinite]; });

    $.ExternalMethod({Static:true , Public:true }, "isNaN", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_isNaN]; });

    $.ExternalMethod({Static:true , Public:true }, "parseFloat", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_parseFloat]; });

    $.ExternalMethod({Static:true , Public:true }, "parseInt", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_parseInt]; });

    $.ExternalMethod({Static:true , Public:true }, "ScriptEngine", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_ScriptEngine]; });

    $.ExternalMethod({Static:true , Public:true }, "ScriptEngineBuildVersion", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_ScriptEngineBuildVersion]; });

    $.ExternalMethod({Static:true , Public:true }, "ScriptEngineMajorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_ScriptEngineMajorVersion]; });

    $.ExternalMethod({Static:true , Public:true }, "ScriptEngineMinorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_ScriptEngineMinorVersion]; });

    $.ExternalMethod({Static:true , Public:true }, "unescape", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["unescape"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Global_unescape]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "commonInstance", $.Type);

    $.Constant({Static:true , Public:true }, "Infinity", $.Double, Infinity);

    $.Constant({Static:true , Public:true }, "NaN", $.Double, NaN);

    $.Field({Static:true , Public:true , ReadOnly:true }, "undefined", $asm03.TypeRef("Microsoft.JScript.Empty"), null);

    $.Field({Static:false, Public:false}, "originalActiveXObjectField", $asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"));

    $.Field({Static:false, Public:false}, "originalArrayField", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.Field({Static:false, Public:false}, "originalBooleanField", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.Field({Static:false, Public:false}, "originalDateField", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.Field({Static:false, Public:false}, "originalEnumeratorField", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.Field({Static:false, Public:false}, "originalErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalEvalErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalFunctionField", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.Field({Static:false, Public:false}, "originalNumberField", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.Field({Static:false, Public:false}, "originalObjectField", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.Field({Static:false, Public:false}, "originalObjectPrototypeField", $asm03.TypeRef("Microsoft.JScript.ObjectPrototype"));

    $.Field({Static:false, Public:false}, "originalRangeErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalReferenceErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalRegExpField", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Field({Static:false, Public:false}, "originalStringField", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.Field({Static:false, Public:false}, "originalSyntaxErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalTypeErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Field({Static:false, Public:false}, "originalVBArrayField", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.Field({Static:false, Public:false}, "originalURIErrorField", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "ActiveXObject", $asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"));

    $.Property({Static:true , Public:true }, "Array", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.Property({Static:true , Public:true }, "Boolean", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.Property({Static:true , Public:true }, "boolean", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "byte", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "char", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "Date", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.Property({Static:true , Public:true }, "decimal", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "double", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "Enumerator", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.Property({Static:true , Public:true }, "Error", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "EvalError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "float", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "Function", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.Property({Static:true , Public:true }, "int", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "long", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "Math", $asm03.TypeRef("Microsoft.JScript.MathObject"));

    $.Property({Static:true , Public:true }, "Number", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.Property({Static:true , Public:true }, "Object", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalActiveXObject", $asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalArray", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalBoolean", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalDate", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalEnumerator", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalEvalError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalFunction", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalNumber", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalObject", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalObjectPrototype", $asm03.TypeRef("Microsoft.JScript.ObjectPrototype"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalRangeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalReferenceError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalRegExp", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalString", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalSyntaxError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalTypeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalURIError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalVBArray", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.Property({Static:true , Public:true }, "RangeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "ReferenceError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "RegExp", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Property({Static:true , Public:true }, "sbyte", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "short", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "String", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.Property({Static:true , Public:true }, "SyntaxError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "TypeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "URIError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:true , Public:true }, "VBArray", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.Property({Static:true , Public:true }, "$void", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "uint", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "ulong", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "ushort", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.GlobalObject+URISetType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.GlobalObject+URISetType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Reserved: 1, 
    Unescaped: 2, 
  }
);

/* class Microsoft.JScript.Globals */ 

(function Globals$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Globals", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuiltinFunctionFor", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.BuiltinFunction"), [$.Object, $asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConstructArray", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ConstructArrayLiteral", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallContextStack", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Stack"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RegExpTable", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.SimpleHashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScopeStack", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Stack"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeRefs", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TypeReferences"))
    );

    $.ExternalMethod({Static:true , Public:false}, "set_TypeRefs", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.TypeReferences"))
    );

    $.Field({Static:true , Public:false}, "_typeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:false, Public:false}, "callContextStack", $asm03.TypeRef("Microsoft.JScript.Stack"));

    $.Field({Static:false, Public:false}, "scopeStack", $asm03.TypeRef("Microsoft.JScript.Stack"));

    $.Field({Static:false, Public:false}, "$caller", $.Object);

    $.Field({Static:false, Public:false}, "regExpTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "globalObject", $asm03.TypeRef("Microsoft.JScript.GlobalObject"));

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "assemblyDelaySign", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "assemblyFlags", $asm03.TypeRef("Microsoft.JScript.AssemblyFlags"));

    $.Field({Static:false, Public:false}, "assemblyHashAlgorithm", $asm07.TypeRef("System.Configuration.Assemblies.AssemblyHashAlgorithm"));

    $.Field({Static:false, Public:false}, "assemblyKeyFileName", $.String);

    $.Field({Static:false, Public:false}, "assemblyKeyFileNameContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "assemblyKeyName", $.String);

    $.Field({Static:false, Public:false}, "assemblyKeyNameContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "assemblyVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "assemblyVersionCompatibility", $asm07.TypeRef("System.Configuration.Assemblies.AssemblyVersionCompatibility"));

    $.Field({Static:true , Public:false}, "BuiltinFunctionTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:true , Public:true }, "contextEngine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
      .Attribute($asm07.TypeRef("System.ContextStaticAttribute"));

    $.Property({Static:true , Public:false}, "TypeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"));

    $.Property({Static:false, Public:false}, "CallContextStack", $asm03.TypeRef("Microsoft.JScript.Stack"));

    $.Property({Static:false, Public:false}, "RegExpTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Property({Static:false, Public:false}, "ScopeStack", $asm03.TypeRef("Microsoft.JScript.Stack"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.AssemblyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.AssemblyFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SideBySideCompatible: 0, 
    PublicKey: 1, 
    NonSideBySideAppDomain: 16, 
    NonSideBySideProcess: 32, 
    NonSideBySideMachine: 48, 
    CompatibilityMask: 112, 
    DisableJITcompileOptimizer: 16384, 
    EnableJITcompileTracking: 32768, 
  }
);

/* class Microsoft.JScript.GlobalScope */ 

(function GlobalScope$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.GlobalScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddComponentScope", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNewField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDefaultThisObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSField")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetLocalField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethods", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFast", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.AddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm07.TypeRef("System.Delegate")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "AddMethod");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.AddProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "AddProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.Expando.IExpando.RemoveMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando"), "RemoveMember");

    $.Field({Static:false, Public:false}, "componentScopes", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "globalObject", $asm03.TypeRef("Microsoft.JScript.GlobalObject"));

    $.Field({Static:false, Public:false}, "recursive", $.Boolean);

    $.Field({Static:false, Public:false}, "evilScript", $.Boolean);

    $.Field({Static:false, Public:false}, "thisObject", $.Object);

    $.Field({Static:false, Public:false}, "isComponentScope", $.Boolean);

    $.Field({Static:false, Public:false}, "globalObjectTR", $asm03.TypeRef("Microsoft.JScript.TypeReflector"));

    $.Field({Static:false, Public:false}, "typeReflector", $asm03.TypeRef("Microsoft.JScript.TypeReflector"));

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Runtime.InteropServices.Expando.IExpando")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* interface Microsoft.JScript.IActivationObject */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IActivationObject", true, [], function ($) {
    $.Method({}, "GetDefaultThisObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "GetGlobalScope", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope")));
    $.Method({}, "GetLocalField", new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String]));
    $.Method({}, "GetMemberValue", new JSIL.MethodSignature($.Object, [$.String, $.Int32]));
    $.Method({}, "GetField", new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32]));
  }, []);

/* class Microsoft.JScript.IdentifierLiteral */ 

(function IdentifierLiteral$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.IdentifierLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "identifier", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.If */ 

(function If$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.If", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "condition", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operand1", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "operand2", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Import */ 

(function Import$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Import", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptImport", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.In */ 

(function In$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.In", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptIn", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.INeedEngine */ 

JSIL.MakeInterface(
  "Microsoft.JScript.INeedEngine", true, [], function ($) {
    $.Method({}, "GetEngine", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")));
    $.Method({}, "SetEngine", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")));
  }, []);

/* class Microsoft.JScript.Instanceof */ 

(function Instanceof$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Instanceof", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptInstanceof", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.IWrappedMember */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IWrappedMember", true, [], function ($) {
    $.Method({}, "GetWrappedObject", JSIL.MethodSignature.Return($.Object));
  }, []);

/* class Microsoft.JScript.JSAuthor */ 

(function JSAuthor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSAuthor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCodeSense", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IParseText"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetColorizer", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IColorizeText"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.IAuthorServices")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0E4EFFC0-2387-11d3-B372-00105A98B7CE"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Microsoft.JScript.JSColorizer */ 

(function JSColorizer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSColorizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Colorize", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ITokenEnumerator"), [$.String, $asm03.TypeRef("Microsoft.JScript.SourceState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStateForText", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.SourceState"), [$.String, $asm03.TypeRef("Microsoft.JScript.SourceState")])
    );

    $.Field({Static:false, Public:false}, "_scanner", $asm03.TypeRef("Microsoft.JScript.JSScanner"));

    $.Field({Static:false, Public:false}, "_state", $asm03.TypeRef("Microsoft.JScript.SourceState"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.IColorizeText")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TokenColorInfoList */ 

(function TokenColorInfoList$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.TokenColorInfoList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ITokenColorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_head", $asm03.TypeRef("Microsoft.JScript.TokenColorInfo"));

    $.Field({Static:false, Public:false}, "_current", $asm03.TypeRef("Microsoft.JScript.TokenColorInfo"));

    $.Field({Static:false, Public:false}, "_atEnd", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.ITokenEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TokenColorInfo */ 

(function TokenColorInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.TokenColorInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ColorFromToken", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.TokenColor"), [$asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Color", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TokenColor"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateToken", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.Field({Static:false, Public:false}, "_token", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "_color", $asm03.TypeRef("Microsoft.JScript.TokenColor"));

    $.Field({Static:false, Public:false}, "_next", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Color", $asm03.TypeRef("Microsoft.JScript.TokenColor"));

    $.Property({Static:false, Public:true , Virtual:true }, "EndPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartPosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.ITokenColorInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSCodeSense */ 

(function JSCodeSense$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSCodeSense", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEventSourceInstance", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalInstance", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Notify", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Parse", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.IErrorHandler")])
    );

    $.Field({Static:false, Public:false}, "_engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "_codeBlock", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaCodeItem"));

    $.Field({Static:false, Public:false}, "_errorHandler", $asm03.TypeRef("Microsoft.JScript.IErrorHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"), 
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IParseText")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSBinder */ 

(function JSBinder$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.Binder"), 
      Name: "Microsoft.JScript.JSBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ArrangeNamedArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm07.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindToField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), 
          $.Object, $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindToMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormalParamTypeIsObject", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm03.TypeRef("Microsoft.JScript.TypeReferences"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultPropertyForArrayIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.Int32, 
          $asm07.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInterfaceMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleCoClassAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReorderArgumentArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm07.TypeRef("System.Reflection.MemberTypes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm07.TypeRef("System.Reflection.MemberTypes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectBest", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])]), $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectCallableMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMethodBase", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDistance", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $asm07.TypeRef("System.Reflection.IReflect"), 
          $asm07.TypeRef("System.Reflection.IReflect")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDistance", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDistance", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.JScript.TypeReferences"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $.Int32
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSField */ 

(function JSField$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.FieldInfo"), 
      Name: "Microsoft.JScript.JSField", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeFieldHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetaData", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldHandle", $asm07.TypeRef("System.RuntimeFieldHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSVariableField */ 

(function JSVariableField$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSField"), 
      Name: "Microsoft.JScript.JSVariableField", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCLSCompliance", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAsMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInferredType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetaData", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCustomAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "obj", $asm03.TypeRef("Microsoft.JScript.ScriptObject"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "debuggerName", $.String);

    $.Field({Static:false, Public:false}, "metaData", $.Object);

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "attributeFlags", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "customAttributes", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Field({Static:false, Public:false}, "originalContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "clsCompliance", $asm03.TypeRef("Microsoft.JScript.CLSComplianceSpec"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSClosureField */ 

(function JSClosureField$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSVariableField"), 
      Name: "Microsoft.JScript.JSClosureField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInferredType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetaData", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSClosureMethod */ 

(function JSClosureMethod$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.JSClosureMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSWrappedProperty */ 

(function JSWrappedProperty$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.PropertyInfo"), 
      Name: "Microsoft.JScript.JSWrappedProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.PropertyInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAccessors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIndexParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetWrappedObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "obj", $.Object);

    $.Field({Static:false, Public:false}, "property", $asm07.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.PropertyAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.IWrappedMember")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSClosureProperty */ 

(function JSClosureProperty$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSWrappedProperty"), 
      Name: "Microsoft.JScript.JSClosureProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "getMeth", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "setMeth", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JScriptCodeProvider */ 

(function JScriptCodeProvider$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
      Name: "Microsoft.JScript.JScriptCodeProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCompiler", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.Compiler.ICodeCompiler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateGenerator", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.Compiler.ICodeGenerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FileExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "generator", $asm03.TypeRef("Microsoft.JScript.JSCodeGenerator"));

    $.Property({Static:false, Public:true , Virtual:true }, "FileExtension", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerCategoryAttribute"), function () { return ["code"]; });

})();

/* class Microsoft.JScript.JSCodeGenerator */ 

(function JSCodeGenerator$Members () {
  var $, $thisType;
























































































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.CodeDom.Compiler.CodeCompiler"), 
      Name: "Microsoft.JScript.JSCodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CmdArgsFromParameters", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEscapedIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValidIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FromFileBatch", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateArgumentReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeArgumentReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateArrayCreateExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeArrayCreateExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateArrayIndexerExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeArrayIndexerExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAssemblyAttributes", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateAssignStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAssignStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateAttachEventStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttachEventStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateAttributeDeclarationsEnd", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateAttributeDeclarationsStart", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateBaseReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeBaseReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCastExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeCastExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateComment", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeComment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCompileUnitStart", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConditionStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeConditionStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateConstructor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeConstructor"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateDelegateCreateExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeDelegateCreateExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateDelegateInvokeExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeDelegateInvokeExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateEntryPointMethod", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeEntryPointMethod"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateEvent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeMemberEvent"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateEventReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeEventReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateExpressionStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeExpressionStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateField", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeMemberField"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFieldReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeFieldReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateGotoStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeGotoStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateIndexerExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeIndexerExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateIterationStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeIterationStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateLabeledStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeLabeledStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateLinePragmaEnd", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeLinePragma"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateLinePragmaStart", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeLinePragma"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethodInvokeExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeMethodInvokeExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethodReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeMethodReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethodReturnStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeMethodReturnStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateNamespace", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateNamespaceEnd", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateNamespaceImport", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeNamespaceImport"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateNamespaceStart", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateObjectCreateExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeObjectCreateExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateParameterDeclarationExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrimitiveChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GeneratePrimitiveExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodePrimitiveExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateProperty", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GeneratePropertyReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodePropertyReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GeneratePropertySetValueReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodePropertySetValueReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateRemoveEventStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeRemoveEventStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateSingleFloatValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateSnippetExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeSnippetExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateSnippetMember", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeSnippetTypeMember"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateSnippetStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeSnippetStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateThisReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeThisReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateThrowExceptionStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeThrowExceptionStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateTryCatchFinallyStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTryCatchFinallyStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateTypeConstructor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateTypeEnd", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateTypeOfExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeOfExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateTypeStart", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateVariableDeclarationStatement", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeVariableDeclarationStatement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateVariableReferenceExpression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeVariableReferenceExpression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CompilerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FileExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NullToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseTypeOutput", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTypeOutput", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.CodeDom.CodeTypeReference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKeyword", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSurrogateEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSurrogateStart", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputAttributeDeclarations", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputDirection", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.FieldDirection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputIdentifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputMemberAccessModifier", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.MemberAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputMemberScopeModifier", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.MemberAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputMemberVTableModifier", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.MemberAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputParameters", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeParameterDeclarationExpressionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputStartingBrace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputType", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeReference"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputTypeAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.TypeAttributes"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutputTypeNamePair", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeTypeReference"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputTypeVisibility", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.TypeAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCompilerOutputLine", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "QuoteSnippetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuoteSnippetStringCStyle", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Supports", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.CodeDom.Compiler.GeneratorSupport")])
    );

    $.Constant({Static:true , Public:false}, "MaxLineLength", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "LanguageSupport", $asm0A.TypeRef("System.CodeDom.Compiler.GeneratorSupport"), 267579);

    $.Field({Static:false, Public:false}, "forLoopHack", $.Boolean);

    $.Field({Static:false, Public:false}, "isArgumentList", $.Boolean);

    $.Field({Static:true , Public:false}, "keywords", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "mainClassName", $.String);

    $.Field({Static:false, Public:false}, "mainMethodName", $.String);

    $.Field({Static:true , Public:false}, "outputReg", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:false, Virtual:true }, "CompilerName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "FileExtension", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "NullToken", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerCategoryAttribute"), function () { return ["code"]; });

})();

/* class Microsoft.JScript.JSConstructor */ 

(function JSConstructor$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.ConstructorInfo"), 
      Name: "Microsoft.JScript.JSConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.FunctionObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeMethodHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClassScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ClassScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructorInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethodImplementationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodImplAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsAccessibleFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.ScriptObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OuterClassType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "cons", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodHandle", $asm07.TypeRef("System.RuntimeMethodHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JScriptException */ 

(function JScriptException$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.JScript.JScriptException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Column", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Line", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Severity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceItem", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StackTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Localize", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Localize", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.Vsa.IJSVsaError.get_Description", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError"), "get_Description");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.Vsa.IJSVsaError.get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError"), "get_Number");

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "context", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "isError", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ContextStringDelimiter", $.String, ";;");

    $.Field({Static:false, Public:false}, "code", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceMoniker", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true }, "Column", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.Vsa.IJSVsaError.Description", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.Vsa.IJSVsaError.Number", $.Int32);

    $.Property({Static:false, Public:true }, "Number", $.Int32);

    $.Property({Static:false, Public:true }, "ErrorNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Line", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LineText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Severity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceItem", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"));

    $.Property({Static:false, Public:true , Virtual:true }, "StackTrace", $.String);

    $.ImplementInterfaces(
      /* 2 */ $asm03.TypeRef("Microsoft.JScript.IVsaFullErrorInfo"), 
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NoContextException */ 

(function NoContextException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.JScript.NoContextException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.JSError */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.JSError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoError: 0, 
    InvalidCall: 5, 
    OutOfMemory: 7, 
    TypeMismatch: 13, 
    OutOfStack: 28, 
    InternalError: 51, 
    FileNotFound: 53, 
    NeedObject: 424, 
    CantCreateObject: 429, 
    OLENoPropOrMethod: 438, 
    ActionNotSupported: 445, 
    NotCollection: 451, 
    SyntaxError: 1002, 
    NoColon: 1003, 
    NoSemicolon: 1004, 
    NoLeftParen: 1005, 
    NoRightParen: 1006, 
    NoRightBracket: 1007, 
    NoLeftCurly: 1008, 
    NoRightCurly: 1009, 
    NoIdentifier: 1010, 
    NoEqual: 1011, 
    IllegalChar: 1014, 
    UnterminatedString: 1015, 
    NoCommentEnd: 1016, 
    BadReturn: 1018, 
    BadBreak: 1019, 
    BadContinue: 1020, 
    BadHexDigit: 1023, 
    NoWhile: 1024, 
    BadLabel: 1025, 
    NoLabel: 1026, 
    DupDefault: 1027, 
    NoMemberIdentifier: 1028, 
    NoCcEnd: 1029, 
    CcOff: 1030, 
    NotConst: 1031, 
    NoAt: 1032, 
    NoCatch: 1033, 
    InvalidElse: 1034, 
    NoComma: 1100, 
    DupVisibility: 1101, 
    IllegalVisibility: 1102, 
    BadSwitch: 1103, 
    CcInvalidEnd: 1104, 
    CcInvalidElse: 1105, 
    CcInvalidElif: 1106, 
    ErrEOF: 1107, 
    IncompatibleVisibility: 1108, 
    ClassNotAllowed: 1109, 
    NeedCompileTimeConstant: 1110, 
    DuplicateName: 1111, 
    NeedType: 1112, 
    NotInsideClass: 1113, 
    InvalidPositionDirective: 1114, 
    MustBeEOL: 1115, 
    WrongDirective: 1118, 
    CannotNestPositionDirective: 1119, 
    CircularDefinition: 1120, 
    Deprecated: 1121, 
    IllegalUseOfThis: 1122, 
    NotAccessible: 1123, 
    CannotUseNameOfClass: 1124, 
    MustImplementMethod: 1128, 
    NeedInterface: 1129, 
    UnreachableCatch: 1133, 
    TypeCannotBeExtended: 1134, 
    UndeclaredVariable: 1135, 
    VariableLeftUninitialized: 1136, 
    KeywordUsedAsIdentifier: 1137, 
    NotAllowedInSuperConstructorCall: 1140, 
    NotMeantToBeCalledDirectly: 1141, 
    GetAndSetAreInconsistent: 1142, 
    InvalidCustomAttribute: 1143, 
    InvalidCustomAttributeArgument: 1144, 
    InvalidCustomAttributeClassOrCtor: 1146, 
    TooManyParameters: 1148, 
    AmbiguousBindingBecauseOfWith: 1149, 
    AmbiguousBindingBecauseOfEval: 1150, 
    NoSuchMember: 1151, 
    ItemNotAllowedOnExpandoClass: 1152, 
    MethodNotAllowedOnExpandoClass: 1153, 
    MethodClashOnExpandoSuperClass: 1155, 
    BaseClassIsExpandoAlready: 1156, 
    AbstractCannotBePrivate: 1157, 
    NotIndexable: 1158, 
    StaticMissingInStaticInit: 1159, 
    MissingConstructForAttributes: 1160, 
    OnlyClassesAllowed: 1161, 
    ExpandoClassShouldNotImpleEnumerable: 1162, 
    NonCLSCompliantMember: 1163, 
    NotDeletable: 1164, 
    PackageExpected: 1165, 
    UselessExpression: 1169, 
    HidesParentMember: 1170, 
    CannotChangeVisibility: 1171, 
    HidesAbstractInBase: 1172, 
    NewNotSpecifiedInMethodDeclaration: 1173, 
    MethodInBaseIsNotVirtual: 1174, 
    NoMethodInBaseToNew: 1175, 
    DifferentReturnTypeFromBase: 1176, 
    ClashWithProperty: 1177, 
    OverrideAndHideUsedTogether: 1178, 
    InvalidLanguageOption: 1179, 
    NoMethodInBaseToOverride: 1180, 
    NotValidForConstructor: 1181, 
    CannotReturnValueFromVoidFunction: 1182, 
    AmbiguousMatch: 1183, 
    AmbiguousConstructorCall: 1184, 
    SuperClassConstructorNotAccessible: 1185, 
    OctalLiteralsAreDeprecated: 1186, 
    VariableMightBeUnitialized: 1187, 
    NotOKToCallSuper: 1188, 
    IllegalUseOfSuper: 1189, 
    BadWayToLeaveFinally: 1190, 
    NoCommaOrTypeDefinitionError: 1191, 
    AbstractWithBody: 1192, 
    NoRightParenOrComma: 1193, 
    NoRightBracketOrComma: 1194, 
    ExpressionExpected: 1195, 
    UnexpectedSemicolon: 1196, 
    TooManyTokensSkipped: 1197, 
    BadVariableDeclaration: 1198, 
    BadFunctionDeclaration: 1199, 
    BadPropertyDeclaration: 1200, 
    DoesNotHaveAnAddress: 1203, 
    TooFewParameters: 1204, 
    UselessAssignment: 1205, 
    SuspectAssignment: 1206, 
    SuspectSemicolon: 1207, 
    ImpossibleConversion: 1208, 
    FinalPrecludesAbstract: 1209, 
    NeedInstance: 1210, 
    CannotBeAbstract: 1212, 
    InvalidBaseTypeForEnum: 1213, 
    CannotInstantiateAbstractClass: 1214, 
    ArrayMayBeCopied: 1215, 
    AbstractCannotBeStatic: 1216, 
    StaticIsAlreadyFinal: 1217, 
    StaticMethodsCannotOverride: 1218, 
    StaticMethodsCannotHide: 1219, 
    ExpandoPrecludesOverride: 1220, 
    IllegalParamArrayAttribute: 1221, 
    ExpandoPrecludesAbstract: 1222, 
    ShouldBeAbstract: 1223, 
    BadModifierInInterface: 1224, 
    VarIllegalInInterface: 1226, 
    InterfaceIllegalInInterface: 1227, 
    NoVarInEnum: 1228, 
    InvalidImport: 1229, 
    EnumNotAllowed: 1230, 
    InvalidCustomAttributeTarget: 1231, 
    PackageInWrongContext: 1232, 
    ConstructorMayNotHaveReturnType: 1233, 
    OnlyClassesAndPackagesAllowed: 1234, 
    InvalidDebugDirective: 1235, 
    CustomAttributeUsedMoreThanOnce: 1236, 
    NestedInstanceTypeCannotBeExtendedByStatic: 1237, 
    PropertyLevelAttributesMustBeOnGetter: 1238, 
    BadThrow: 1239, 
    ParamListNotLast: 1240, 
    NoSuchType: 1241, 
    BadOctalLiteral: 1242, 
    InstanceNotAccessibleFromStatic: 1243, 
    StaticRequiresTypeName: 1244, 
    NonStaticWithTypeName: 1245, 
    NoSuchStaticMember: 1246, 
    SuspectLoopCondition: 1247, 
    ExpectedAssembly: 1248, 
    AssemblyAttributesMustBeGlobal: 1249, 
    ExpandoPrecludesStatic: 1250, 
    DuplicateMethod: 1251, 
    NotAnExpandoFunction: 1252, 
    NotValidVersionString: 1253, 
    ExecutablesCannotBeLocalized: 1254, 
    StringConcatIsSlow: 1255, 
    CcInvalidInDebugger: 1256, 
    ExpandoMustBePublic: 1257, 
    DelegatesShouldNotBeExplicitlyConstructed: 1258, 
    ImplicitlyReferencedAssemblyNotFound: 1259, 
    PossibleBadConversion: 1260, 
    PossibleBadConversionFromString: 1261, 
    InvalidResource: 1262, 
    WrongUseOfAddressOf: 1263, 
    NonCLSCompliantType: 1264, 
    MemberTypeCLSCompliantMismatch: 1265, 
    TypeAssemblyCLSCompliantMismatch: 1266, 
    IncompatibleAssemblyReference: 1267, 
    InvalidAssemblyKeyFile: 1268, 
    TypeNameTooLong: 1269, 
    MemberInitializerCannotContainFuncExpr: 1270, 
    CantAssignThis: 5000, 
    NumberExpected: 5001, 
    FunctionExpected: 5002, 
    CannotAssignToFunctionResult: 5003, 
    StringExpected: 5005, 
    DateExpected: 5006, 
    ObjectExpected: 5007, 
    IllegalAssignment: 5008, 
    UndefinedIdentifier: 5009, 
    BooleanExpected: 5010, 
    VBArrayExpected: 5013, 
    EnumeratorExpected: 5015, 
    RegExpExpected: 5016, 
    RegExpSyntax: 5017, 
    UncaughtException: 5022, 
    InvalidPrototype: 5023, 
    URIEncodeError: 5024, 
    URIDecodeError: 5025, 
    FractionOutOfRange: 5026, 
    PrecisionOutOfRange: 5027, 
    ArrayLengthConstructIncorrect: 5029, 
    ArrayLengthAssignIncorrect: 5030, 
    NeedArrayObject: 5031, 
    NoConstructor: 5032, 
    IllegalEval: 5033, 
    NotYetImplemented: 5034, 
    MustProvideNameForNamedParameter: 5035, 
    DuplicateNamedParameter: 5036, 
    MissingNameParameter: 5037, 
    MoreNamedParametersThanArguments: 5038, 
    NonSupportedInDebugger: 5039, 
    AssignmentToReadOnly: 5040, 
    WriteOnlyProperty: 5041, 
    IncorrectNumberOfIndices: 5042, 
    RefParamsNonSupportedInDebugger: 5043, 
    CannotCallSecurityMethodLateBound: 5044, 
    CannotUseStaticSecurityAttribute: 5045, 
    NonClsException: 5046, 
    FuncEvalAborted: 6000, 
    FuncEvalTimedout: 6001, 
    FuncEvalThreadSuspended: 6002, 
    FuncEvalThreadSleepWaitJoin: 6003, 
    FuncEvalBadThreadState: 6004, 
    FuncEvalBadThreadNotStarted: 6005, 
    NoFuncEvalAllowed: 6006, 
    FuncEvalBadLocation: 6007, 
    FuncEvalWebMethod: 6008, 
    StaticVarNotAvailable: 6009, 
    TypeObjectNotAvailable: 6010, 
    ExceptionFromHResult: 6011, 
    SideEffectsDisallowed: 6012, 
  }
);

/* class Microsoft.JScript.JSExpandoField */ 

(function JSExpandoField$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSField"), 
      Name: "Microsoft.JScript.JSExpandoField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSExpandoIndexerMethod */ 

(function JSExpandoIndexerMethod$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.JSExpandoIndexerMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ClassScope"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "classScope", $asm03.TypeRef("Microsoft.JScript.ClassScope"));

    $.Field({Static:false, Public:false}, "isGetter", $.Boolean);

    $.Field({Static:false, Public:false}, "token", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "GetterParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "SetterParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSFieldInfo */ 

(function JSFieldInfo$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.FieldInfo"), 
      Name: "Microsoft.JScript.JSFieldInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeFieldHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Field({Static:false, Public:false}, "declaringType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "fieldType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "fieldAccessor", $asm03.TypeRef("Microsoft.JScript.FieldAccessor"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldHandle", $asm07.TypeRef("System.RuntimeFieldHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSFieldMethod */ 

(function JSFieldMethod$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.JSFieldMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.FieldInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnclosingScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsAccessibleFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.ScriptObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnIR", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.Field({Static:false, Public:false}, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Reflection.ParameterInfo, 0);
      });

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSFunctionAttribute */ 

(function JSFunctionAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.JSFunctionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSFunctionAttributeEnum"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSFunctionAttributeEnum"), $asm03.TypeRef("Microsoft.JScript.JSBuiltin")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeValue", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.JSFunctionAttributeEnum"))
    );

    $.Field({Static:false, Public:false}, "attributeValue", $asm03.TypeRef("Microsoft.JScript.JSFunctionAttributeEnum"));

    $.Field({Static:false, Public:false}, "builtinFunction", $asm03.TypeRef("Microsoft.JScript.JSBuiltin"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* enum Microsoft.JScript.JSFunctionAttributeEnum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.JSFunctionAttributeEnum", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    HasArguments: 1, 
    HasThisObject: 2, 
    IsNested: 4, 
    HasStackFrame: 8, 
    HasVarArgs: 16, 
    HasEngine: 32, 
    ClassicFunction: 35, 
    NestedFunction: 44, 
    ClassicNestedFunction: 47, 
    IsExpandoMethod: 64, 
    IsInstanceNestedClassConstructor: 128, 
  }
);

/* class Microsoft.JScript.JSGlobalField */ 

(function JSGlobalField$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSVariableField"), 
      Name: "Microsoft.JScript.JSGlobalField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String, 
          $.Object, $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "ILField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSInProcCompiler */ 

(function JSInProcCompiler$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSInProcCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyReference", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefinition", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResourceFile", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.ResInfo"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSourceFile", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAndInitEngine", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), [
          $asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $asm07.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllDefines", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArgumentSeparatorIndex", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCompilerOptions", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $asm0A.TypeRef("System.Collections.Specialized.StringCollection"), 
          $asm07.TypeRef("System.IO.TextWriter"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintBanner", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $asm07.TypeRef("System.IO.TextWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintOptions", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SplitCmdLineArguments", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.StringCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateOptions", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.Field({Static:false, Public:false}, "codeItemCounter", $.Int32);

    $.Field({Static:false, Public:false}, "debugCommandLine", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.JScript.Vsa");
/* class Microsoft.JScript.Vsa.BaseVsaSite */ 

(function BaseVsaSite$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Vsa.BaseVsaSite", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Assembly", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DebugInfo", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEventSourceInstance", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalInstance", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Notify", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Assembly", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "DebugInfo", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; });

})();

/* class Microsoft.JScript.VsaSite */ 

(function VsaSite$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaSite"), 
      Name: "Microsoft.JScript.VsaSite", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintError", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Boolean, 
          $.Int32, $.String
        ])
    );

    $.Field({Static:false, Public:true }, "warningLevel", $.Int32);

    $.Field({Static:false, Public:true }, "treatWarningsAsErrors", $.Boolean);

    $.Field({Static:false, Public:true }, "output", $asm07.TypeRef("System.IO.TextWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSKeyword */ 

(function JSKeyword$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSKeyword", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSToken"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.JSToken"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanBeIdentifier", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyword", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSToken"), [$asm03.TypeRef("Microsoft.JScript.Context"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitKeywords", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:false, Public:false}, "token", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "$length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSLocalField */ 

(function JSLocalField$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSVariableField"), 
      Name: "Microsoft.JScript.JSLocalField", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.RuntimeTypeHandle"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("Microsoft.JScript.FunctionScope"), 
          $.Int32, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInferredType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInferredType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.IReflect"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "slotNumber", $.Int32);

    $.Field({Static:false, Public:false}, "inferred_type", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "dependents", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "debugOn", $.Boolean);

    $.Field({Static:false, Public:false}, "outerField", $.Type);

    $.Field({Static:false, Public:false}, "isDefined", $.Boolean);

    $.Field({Static:false, Public:false}, "isUsedBeforeDefinition", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSMemberField */ 

(function JSMemberField$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSVariableField"), 
      Name: "Microsoft.JScript.JSMemberField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ClassScope"), $.String, 
          $.Object, $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOverload", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("Microsoft.JScript.FunctionObject"), $asm07.TypeRef("System.Reflection.FieldAttributes")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOverloadedMembers", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.MemberInfoList"), $asm03.TypeRef("Microsoft.JScript.ClassScope"), 
          $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOverloadsForDuplicates", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAsConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetaData", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.ScriptObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAccessibleFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.ScriptObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $asm03.TypeRef("Microsoft.JScript.ScriptObject")
        ])
    );

    $.Field({Static:false, Public:false}, "expandoValue", $.Object);

    $.Field({Static:false, Public:false}, "nextOverload", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSMethodInfo */ 

(function JSMethodInfo$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.MethodInfo"), 
      Name: "Microsoft.JScript.JSMethodInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.RuntimeMethodHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnTypeCustomAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseDefinition", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethodImplementationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodImplAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "methAttributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "declaringType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "methodInvoker", $asm03.TypeRef("Microsoft.JScript.MethodInvoker"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodHandle", $asm07.TypeRef("System.RuntimeMethodHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnTypeCustomAttributes", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSNativeMethod */ 

(function JSNativeMethod$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.JSNativeMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $.Object, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertParams", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "formalParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "hasThis", $.Boolean);

    $.Field({Static:false, Public:false}, "hasVarargs", $.Boolean);

    $.Field({Static:false, Public:false}, "hasEngine", $.Boolean);

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSParameterInfo */ 

(function JSParameterInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.ParameterInfo"), 
      Name: "Microsoft.JScript.JSParameterInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ParameterInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "parameter", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Field({Static:false, Public:false}, "parameterType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSParser */ 

(function JSParser$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSParser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForReturnFromFinally", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateExpressionNode", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.JSToken"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CurrentPositionContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EOFError", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceReportInfo", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceReportInfo", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.JSError")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceReportInfo", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromASTListToCustomAttributeList", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.CustomAttributeList"), [$asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAborted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextToken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GuessIfAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]), $asm03.TypeRef("Microsoft.JScript.RecoveryTokenException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]), $asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MemberExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MemberExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MemberExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributes", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.AST"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBlock", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Block"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBlock", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Block"), [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.JScript.Context")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBreakStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Break"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseClass", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.Context"), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseClassBody", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Block"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseClassMember", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseConstructorCall", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseContinueStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Continue"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCustomAttributeList", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CustomAttributeList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDoStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DoWhile"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $asm03.TypeRef("Microsoft.JScript.Context"), 
          $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEnumMember", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseEvalBody", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Block"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$.Boolean, $asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.AST"), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpressionItem", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptBlock"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpressionList", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ASTList"), [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseForStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFunction", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.Context"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFunction", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.Context"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"), 
          $asm03.TypeRef("Microsoft.JScript.Call")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFunctionExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseIdentifierInitializer", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.JSToken"), $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseIfStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.If"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseImportStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Import"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLeftHandSideExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLeftHandSideExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLeftHandSideExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNamedBreakpoint", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePackage", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePostfixExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.AST"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePostfixExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm03.TypeRef("Microsoft.JScript.AST"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQualifiedIdentifier", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.JSError")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseReturnStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Return"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseScopeSequence", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSError")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStatements", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Block"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStaticInitializer", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSwitchStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseThrowStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTryStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTypeExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TypeExpression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseVariableStatement", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.AST"), [
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"), 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWhileStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.While"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWithStatement", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.With"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSError"), $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.JSError"), $asm03.TypeRef("Microsoft.JScript.Context"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipTokensAndThrow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipTokensAndThrow", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TokenInList", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]), $asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TokenInList", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]), $asm03.TypeRef("Microsoft.JScript.RecoveryTokenException")])
    );

    $.Field({Static:false, Public:false}, "demandFullTrustOnFunctionCreation", $.Boolean);

    $.Field({Static:false, Public:false}, "sourceContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "scanner", $asm03.TypeRef("Microsoft.JScript.JSScanner"));

    $.Field({Static:false, Public:false}, "currentToken", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "errorToken", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "tokensSkipped", $.Int32);

    $.Constant({Static:true , Public:false}, "c_MaxSkippedTokenNumber", $.Int32, 50);

    $.Field({Static:false, Public:false}, "noSkipTokenSet", $asm03.TypeRef("Microsoft.JScript.NoSkipTokenSet"));

    $.Field({Static:false, Public:false}, "goodTokensProcessed", $.Int64);

    $.Field({Static:false, Public:false}, "program", $asm03.TypeRef("Microsoft.JScript.Block"));

    $.Field({Static:false, Public:false}, "blockType", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "labelTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "finallyEscaped", $.Int32);

    $.Field({Static:false, Public:false}, "breakRecursion", $.Int32);

    $.Field({Static:true , Public:false}, "s_cDummyName", $.Int32);

    $.Field({Static:false, Public:false}, "Globals", $asm03.TypeRef("Microsoft.JScript.Globals"));

    $.Field({Static:false, Public:false}, "Severity", $.Int32);

    $.Property({Static:false, Public:false}, "HasAborted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.JSParser+BlockType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.JSParser+BlockType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Block: 0, 
    Loop: 1, 
    Switch: 2, 
    Finally: 3, 
  }
);

/* class Microsoft.JScript.AstListItem */ 

(function AstListItem$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.AstListItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.AST"), $.Type])
    );

    $.Field({Static:false, Public:false}, "_prev", $.Type);

    $.Field({Static:false, Public:false}, "_term", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.OpListItem */ 

(function OpListItem$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.OpListItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.JSToken"), $asm03.TypeRef("Microsoft.JScript.OpPrec"), 
          $.Type
        ])
    );

    $.Field({Static:false, Public:false}, "_prev", $.Type);

    $.Field({Static:false, Public:false}, "_operator", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "_prec", $asm03.TypeRef("Microsoft.JScript.OpPrec"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ParserException */ 

(function ParserException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.JScript.ParserException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RecoveryTokenException */ 

(function RecoveryTokenException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ParserException"), 
      Name: "Microsoft.JScript.RecoveryTokenException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.JSToken"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.Field({Static:false, Public:false}, "_token", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "_partiallyComputedNode", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.EndOfFile */ 

(function EndOfFile$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ParserException"), 
      Name: "Microsoft.JScript.EndOfFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NoSkipTokenSet */ 

(function NoSkipTokenSet$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.NoSkipTokenSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasToken", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]))
    );

    $.Field({Static:false, Public:false}, "_tokenSet", $asm03.TypeRef("Microsoft.JScript.NoSkipTokenSet+TokenSetListItem"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ArrayInitNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_BlockConditionNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_BlockNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_BracketToken", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_CaseNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ClassBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_InterfaceBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ClassExtendsNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ClassImplementsNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_DoWhileBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EndOfLineToken", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EndOfStatementNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EnumBaseTypeNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_EnumBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ExpressionListNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_FunctionDeclNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_IfBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_MemberExprNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_NoTrySkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ObjectInitNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_PackageBodyNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ParenExpressionNoSkipToken", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_ParenToken", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_PostfixExpressionNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_StartBlockNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_StartStatementNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_SwitchNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_TopLevelNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_VariableDeclNoSkipTokenSet", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NoSkipTokenSet+TokenSetListItem */ 

(function TokenSetListItem$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.NoSkipTokenSet+TokenSetListItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]), $.Type])
    );

    $.Field({Static:false, Public:false}, "_next", $.Type);

    $.Field({Static:false, Public:false}, "_tokens", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSToken")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSProperty */ 

(function JSProperty$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.PropertyInfo"), 
      Name: "Microsoft.JScript.JSProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberTypes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAccessors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIndexParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetterAndSetterAreConsistent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyIR", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Object, 
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "formal_parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "metaData", $asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"));

    $.Field({Static:false, Public:false}, "getter", $asm03.TypeRef("Microsoft.JScript.JSMethod"));

    $.Field({Static:false, Public:false}, "setter", $asm03.TypeRef("Microsoft.JScript.JSMethod"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.PropertyAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Reflection.MemberTypes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSPropertyField */ 

(function JSPropertyField$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSField"), 
      Name: "Microsoft.JScript.JSPropertyField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.PropertyInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "wrappedProperty", $asm07.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false}, "wrappedObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSPropertyInfo */ 

(function JSPropertyInfo$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.PropertyInfo"), 
      Name: "Microsoft.JScript.JSPropertyInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAccessors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIndexParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "property", $asm07.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false}, "declaringType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "getter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "setter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.PropertyAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSPrototypeField */ 

(function JSPrototypeField$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSField"), 
      Name: "Microsoft.JScript.JSPrototypeField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "prototypeObject", $.Object);

    $.Field({Static:false, Public:false}, "prototypeField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSPrototypeObject */ 

(function JSPrototypeObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.JSPrototypeObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm03.TypeRef("Microsoft.JScript.ScriptFunction")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSScanner */ 

(function JSScanner$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.JSScanner", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CanParseAsExpression", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanStartStatement", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCurrentLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCurrentPosition", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHexValue", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextToken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorPrecedence", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.OpPrec"), [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPPOperatorPrecedence", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.OpPrec"), [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreProcessorValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSourceCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStartLinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStringLiteral", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GotEndOfLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleError", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitOperatorsPrec", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.OpPrec")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitPPOperatorsPrec", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.OpPrec")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsciiLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssignmentOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBlankSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndLineOrEOF", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHexDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIdentifierPartChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIdentifierStartChar", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsKeyword", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLineTerminator", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPPOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsProcessableOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRightAssociativeOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JSToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnicodeLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekToken", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.JSToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PPDebugDirective", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PPGetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("Microsoft.JScript.JSToken"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PPLanguageOption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PPRemapPositionInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PPScanConstant", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PPScanExpr", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PPScanSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PPSkipToNextCondition", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PPTestCond", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanIdentifier", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanKeyword", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSToken"), [$asm03.TypeRef("Microsoft.JScript.JSKeyword")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNumber", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSToken"), [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanRegExp", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanRegExpFlags", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanString", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuthoringMode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPreProcessorOn", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSource", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipBlanks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipMultiLineComment", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipSingleLineComment", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "strSourceCode", $.String);

    $.Field({Static:false, Public:false}, "startPos", $.Int32);

    $.Field({Static:false, Public:false}, "endPos", $.Int32);

    $.Field({Static:false, Public:false}, "currentPos", $.Int32);

    $.Field({Static:false, Public:false}, "currentLine", $.Int32);

    $.Field({Static:false, Public:false}, "startLinePos", $.Int32);

    $.Field({Static:false, Public:false}, "currentToken", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "escapedString", $.String);

    $.Field({Static:false, Public:false}, "identifier", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "idLastPosOnBuilder", $.Int32);

    $.Field({Static:false, Public:false}, "gotEndOfLine", $.Boolean);

    $.Field({Static:false, Public:false}, "IsAuthoring", $.Boolean);

    $.Field({Static:false, Public:false}, "peekModeOn", $.Boolean);

    $.Field({Static:false, Public:false}, "scanForDebugger", $.Boolean);

    $.Field({Static:false, Public:false}, "keywords", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSKeyword")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_Keywords", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSKeyword")]));

    $.Field({Static:false, Public:false}, "preProcessorOn", $.Boolean);

    $.Field({Static:false, Public:false}, "matchIf", $.Int32);

    $.Field({Static:false, Public:false}, "preProcessorValue", $.Object);

    $.Field({Static:false, Public:false}, "ppTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "currentDocument", $asm03.TypeRef("Microsoft.JScript.DocumentContext"));

    $.Field({Static:false, Public:false}, "globals", $asm03.TypeRef("Microsoft.JScript.Globals"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_OperatorsPrec", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.OpPrec")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_PPOperatorsPrec", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.OpPrec")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.JSToken */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.JSToken", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    EndOfFile: 0, 
    If: 1, 
    For: 2, 
    Do: 3, 
    While: 4, 
    Continue: 5, 
    Break: 6, 
    Return: 7, 
    Import: 8, 
    With: 9, 
    Switch: 10, 
    Throw: 11, 
    Try: 12, 
    Package: 13, 
    Internal: 14, 
    Abstract: 15, 
    Public: 16, 
    Static: 17, 
    Private: 18, 
    Protected: 19, 
    Final: 20, 
    Event: 21, 
    Var: 22, 
    Const: 23, 
    Class: 24, 
    Function: 25, 
    LeftCurly: 26, 
    Semicolon: 27, 
    Null: 28, 
    True: 29, 
    False: 30, 
    This: 31, 
    Identifier: 32, 
    StringLiteral: 33, 
    IntegerLiteral: 34, 
    NumericLiteral: 35, 
    LeftParen: 36, 
    LeftBracket: 37, 
    AccessField: 38, 
    FirstOp: 39, 
    LogicalNot: 39, 
    BitwiseNot: 40, 
    Delete: 41, 
    Void: 42, 
    Typeof: 43, 
    Increment: 44, 
    Decrement: 45, 
    FirstBinaryOp: 46, 
    Plus: 46, 
    Minus: 47, 
    LogicalOr: 48, 
    LogicalAnd: 49, 
    BitwiseOr: 50, 
    BitwiseXor: 51, 
    BitwiseAnd: 52, 
    Equal: 53, 
    NotEqual: 54, 
    StrictEqual: 55, 
    StrictNotEqual: 56, 
    GreaterThan: 57, 
    LessThan: 58, 
    LessThanEqual: 59, 
    GreaterThanEqual: 60, 
    LeftShift: 61, 
    RightShift: 62, 
    UnsignedRightShift: 63, 
    Multiply: 64, 
    Divide: 65, 
    Modulo: 66, 
    LastPPOperator: 66, 
    Instanceof: 67, 
    In: 68, 
    Assign: 69, 
    PlusAssign: 70, 
    MinusAssign: 71, 
    MultiplyAssign: 72, 
    DivideAssign: 73, 
    BitwiseAndAssign: 74, 
    BitwiseOrAssign: 75, 
    BitwiseXorAssign: 76, 
    ModuloAssign: 77, 
    LeftShiftAssign: 78, 
    RightShiftAssign: 79, 
    UnsignedRightShiftAssign: 80, 
    LastAssign: 80, 
    LastBinaryOp: 80, 
    ConditionalIf: 81, 
    Colon: 82, 
    Comma: 83, 
    LastOp: 83, 
    Case: 84, 
    Catch: 85, 
    Debugger: 86, 
    Default: 87, 
    Else: 88, 
    Export: 89, 
    Extends: 90, 
    Finally: 91, 
    Get: 92, 
    Implements: 93, 
    Interface: 94, 
    New: 95, 
    Set: 96, 
    Super: 97, 
    RightParen: 98, 
    RightCurly: 99, 
    RightBracket: 100, 
    PreProcessorConstant: 101, 
    Comment: 102, 
    UnterminatedComment: 103, 
    Assert: 104, 
    Boolean: 105, 
    Byte: 106, 
    Char: 107, 
    Decimal: 108, 
    Double: 109, 
    DoubleColon: 110, 
    Enum: 111, 
    Ensure: 112, 
    Float: 113, 
    Goto: 114, 
    Int: 115, 
    Invariant: 116, 
    Long: 117, 
    Namespace: 118, 
    Native: 119, 
    Require: 120, 
    Sbyte: 121, 
    Short: 122, 
    Synchronized: 123, 
    Transient: 124, 
    Throws: 125, 
    ParamArray: 126, 
    Volatile: 127, 
    Ushort: 128, 
    Uint: 129, 
    Ulong: 130, 
    Use: 131, 
    EndOfLine: 132, 
    PreProcessDirective: 133, 
  }
);

/* class Microsoft.JScript.JSWrappedField */ 

(function JSWrappedField$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSField"), 
      Name: "Microsoft.JScript.JSWrappedField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.FieldInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetaData", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetWrappedObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "wrappedField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "wrappedObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.FieldAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.IWrappedMember")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSWrappedMethod */ 

(function JSWrappedMethod$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSMethod"), 
      Name: "Microsoft.JScript.JSWrappedMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPackage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetWrappedObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "pars", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Reflection.MethodAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 4 */ $asm03.TypeRef("Microsoft.JScript.IWrappedMember")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.JSWrappedPropertyAndMethod */ 

(function JSWrappedPropertyAndMethod$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSWrappedProperty"), 
      Name: "Microsoft.JScript.JSWrappedPropertyAndMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true }, "Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LateBinding */ 

(function LateBinding$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.LateBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Call", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CallCOMObject", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.IReflect"), $.String, 
          $.Object, $asm07.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean, $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CallMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object, $asm07.TypeRef("System.Reflection.Binder"), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CallOneOfTheMembers", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CallOneOfTheMembers", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CallValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CallValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.Object, 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CallValue2", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Change64bitIntegersToDouble", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteValueAtIndex", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIRForObjectThatRequiresInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIRForObjectThatRequiresInvokeMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [
          $.Object, $.Boolean, 
          $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $asm07.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMemberValue2", 
      new JSIL.MethodSignature($.Object, [$.Object, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetNonMissingValue", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetValue2", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.Object, $.UInt64])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LickArgumentsIntoShape", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIndexedDefaultPropertyValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetIndexedPropertyValue", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SetIndexedPropertyValueStatic", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetMember", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Reflection.MemberInfo")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetMemberValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetMemberValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.Object, $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [
          $.Object, $.UInt64, 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SwapValues", 
      new JSIL.MethodSignature(null, [
          $.Object, $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToIndices", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false}, "last_ir", $.Object);

    $.Field({Static:false, Public:false}, "last_member", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "last_members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Field({Static:false, Public:false}, "last_object", $.Object);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:true }, "obj", $.Object);

    $.Field({Static:false, Public:false}, "checkForDebugger", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientArrayPrototype */ 

(function LenientArrayPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ArrayPrototype"), 
      Name: "Microsoft.JScript.LenientArrayPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.FunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.ObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "concat", $.Object);

    $.Field({Static:false, Public:true }, "join", $.Object);

    $.Field({Static:false, Public:true }, "pop", $.Object);

    $.Field({Static:false, Public:true }, "push", $.Object);

    $.Field({Static:false, Public:true }, "reverse", $.Object);

    $.Field({Static:false, Public:true }, "shift", $.Object);

    $.Field({Static:false, Public:true }, "slice", $.Object);

    $.Field({Static:false, Public:true }, "sort", $.Object);

    $.Field({Static:false, Public:true }, "splice", $.Object);

    $.Field({Static:false, Public:true }, "unshift", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleString", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientBooleanPrototype */ 

(function LenientBooleanPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BooleanPrototype"), 
      Name: "Microsoft.JScript.LenientBooleanPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.Field({Static:false, Public:true }, "valueOf", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientDateConstructor */ 

(function LenientDateConstructor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.DateConstructor"), 
      Name: "Microsoft.JScript.LenientDateConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientDatePrototype")])
    );

    $.Field({Static:false, Public:true }, "parse", $.Object);

    $.Field({Static:false, Public:true }, "UTC", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientDatePrototype */ 

(function LenientDatePrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.DatePrototype"), 
      Name: "Microsoft.JScript.LenientDatePrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "getTime", $.Object);

    $.Field({Static:false, Public:true }, "getYear", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["getYear"]; });

    $.Field({Static:false, Public:true }, "getFullYear", $.Object);

    $.Field({Static:false, Public:true }, "getUTCFullYear", $.Object);

    $.Field({Static:false, Public:true }, "getMonth", $.Object);

    $.Field({Static:false, Public:true }, "getUTCMonth", $.Object);

    $.Field({Static:false, Public:true }, "getDate", $.Object);

    $.Field({Static:false, Public:true }, "getUTCDate", $.Object);

    $.Field({Static:false, Public:true }, "getDay", $.Object);

    $.Field({Static:false, Public:true }, "getUTCDay", $.Object);

    $.Field({Static:false, Public:true }, "getHours", $.Object);

    $.Field({Static:false, Public:true }, "getUTCHours", $.Object);

    $.Field({Static:false, Public:true }, "getMinutes", $.Object);

    $.Field({Static:false, Public:true }, "getUTCMinutes", $.Object);

    $.Field({Static:false, Public:true }, "getSeconds", $.Object);

    $.Field({Static:false, Public:true }, "getUTCSeconds", $.Object);

    $.Field({Static:false, Public:true }, "getMilliseconds", $.Object);

    $.Field({Static:false, Public:true }, "getUTCMilliseconds", $.Object);

    $.Field({Static:false, Public:true }, "getVarDate", $.Object);

    $.Field({Static:false, Public:true }, "getTimezoneOffset", $.Object);

    $.Field({Static:false, Public:true }, "setTime", $.Object);

    $.Field({Static:false, Public:true }, "setMilliseconds", $.Object);

    $.Field({Static:false, Public:true }, "setUTCMilliseconds", $.Object);

    $.Field({Static:false, Public:true }, "setSeconds", $.Object);

    $.Field({Static:false, Public:true }, "setUTCSeconds", $.Object);

    $.Field({Static:false, Public:true }, "setMinutes", $.Object);

    $.Field({Static:false, Public:true }, "setUTCMinutes", $.Object);

    $.Field({Static:false, Public:true }, "setHours", $.Object);

    $.Field({Static:false, Public:true }, "setUTCHours", $.Object);

    $.Field({Static:false, Public:true }, "setDate", $.Object);

    $.Field({Static:false, Public:true }, "setUTCDate", $.Object);

    $.Field({Static:false, Public:true }, "setMonth", $.Object);

    $.Field({Static:false, Public:true }, "setUTCMonth", $.Object);

    $.Field({Static:false, Public:true }, "setFullYear", $.Object);

    $.Field({Static:false, Public:true }, "setUTCFullYear", $.Object);

    $.Field({Static:false, Public:true }, "setYear", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["setYear"]; });

    $.Field({Static:false, Public:true }, "toGMTString", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["toGMTString"]; });

    $.Field({Static:false, Public:true }, "toDateString", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleDateString", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleString", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleTimeString", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.Field({Static:false, Public:true }, "toTimeString", $.Object);

    $.Field({Static:false, Public:true }, "toUTCString", $.Object);

    $.Field({Static:false, Public:true }, "valueOf", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientEnumeratorPrototype */ 

(function LenientEnumeratorPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.EnumeratorPrototype"), 
      Name: "Microsoft.JScript.LenientEnumeratorPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "atEnd", $.Object);

    $.Field({Static:false, Public:true }, "item", $.Object);

    $.Field({Static:false, Public:true }, "moveFirst", $.Object);

    $.Field({Static:false, Public:true }, "moveNext", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientErrorPrototype */ 

(function LenientErrorPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), 
      Name: "Microsoft.JScript.LenientErrorPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "$name", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientFunctionPrototype */ 

(function LenientFunctionPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.FunctionPrototype"), 
      Name: "Microsoft.JScript.LenientFunctionPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "$apply", $.Object);

    $.Field({Static:false, Public:true }, "$call", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientGlobalObject */ 

(function LenientGlobalObject$Members () {
  var $, $thisType;






























































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.GlobalObject"), 
      Name: "Microsoft.JScript.LenientGlobalObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveXObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Array", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_arrayPrototype", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LenientArrayPrototype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Boolean", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enumerator", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Error", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EvalError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Function", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_functionPrototype", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Math", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_objectPrototype", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalActiveXObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalArray", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalBoolean", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.BooleanConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalDate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.DateConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalEnumerator", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalEvalError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalFunction", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.FunctionConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalNumber", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.NumberConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalObjectPrototype", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalRangeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalReferenceError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalRegExp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.RegExpConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalString", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.StringConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalSyntaxError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalTypeError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalURIError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ErrorConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_originalVBArray", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RangeError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegExp", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SyntaxError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_URIError", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VBArray", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActiveXObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Array", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Boolean", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Date", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enumerator", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Error", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EvalError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Function", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Math", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Number", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Object", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RangeError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RegExp", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_String", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SyntaxError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_URIError", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VBArray", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:true }, "Infinity", $.Object);

    $.Field({Static:false, Public:false}, "MathField", $.Object);

    $.Field({Static:false, Public:true }, "NaN", $.Object);

    $.Field({Static:false, Public:true }, "undefined", $.Object);

    $.Field({Static:false, Public:false}, "ActiveXObjectField", $.Object);

    $.Field({Static:false, Public:false}, "ArrayField", $.Object);

    $.Field({Static:false, Public:false}, "BooleanField", $.Object);

    $.Field({Static:false, Public:false}, "DateField", $.Object);

    $.Field({Static:false, Public:false}, "EnumeratorField", $.Object);

    $.Field({Static:false, Public:false}, "ErrorField", $.Object);

    $.Field({Static:false, Public:false}, "EvalErrorField", $.Object);

    $.Field({Static:false, Public:false}, "FunctionField", $.Object);

    $.Field({Static:false, Public:false}, "NumberField", $.Object);

    $.Field({Static:false, Public:false}, "ObjectField", $.Object);

    $.Field({Static:false, Public:false}, "RangeErrorField", $.Object);

    $.Field({Static:false, Public:false}, "ReferenceErrorField", $.Object);

    $.Field({Static:false, Public:false}, "RegExpField", $.Object);

    $.Field({Static:false, Public:false}, "StringField", $.Object);

    $.Field({Static:false, Public:false}, "SyntaxErrorField", $.Object);

    $.Field({Static:false, Public:false}, "TypeErrorField", $.Object);

    $.Field({Static:false, Public:false}, "VBArrayField", $.Object);

    $.Field({Static:false, Public:false}, "URIErrorField", $.Object);

    $.Field({Static:false, Public:true }, "decodeURI", $.Object);

    $.Field({Static:false, Public:true }, "decodeURIComponent", $.Object);

    $.Field({Static:false, Public:true }, "encodeURI", $.Object);

    $.Field({Static:false, Public:true }, "encodeURIComponent", $.Object);

    $.Field({Static:false, Public:true }, "escape", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["escape"]; });

    $.Field({Static:false, Public:true }, "$eval", $.Object);

    $.Field({Static:false, Public:true }, "isNaN", $.Object);

    $.Field({Static:false, Public:true }, "isFinite", $.Object);

    $.Field({Static:false, Public:true }, "parseInt", $.Object);

    $.Field({Static:false, Public:true }, "parseFloat", $.Object);

    $.Field({Static:false, Public:true }, "GetObject", $.Object);

    $.Field({Static:false, Public:true }, "ScriptEngine", $.Object);

    $.Field({Static:false, Public:true }, "ScriptEngineBuildVersion", $.Object);

    $.Field({Static:false, Public:true }, "ScriptEngineMajorVersion", $.Object);

    $.Field({Static:false, Public:true }, "ScriptEngineMinorVersion", $.Object);

    $.Field({Static:false, Public:true }, "unescape", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["unescape"]; });

    $.Field({Static:false, Public:true }, "boolean", $.Object);

    $.Field({Static:false, Public:true }, "byte", $.Object);

    $.Field({Static:false, Public:true }, "char", $.Object);

    $.Field({Static:false, Public:true }, "decimal", $.Object);

    $.Field({Static:false, Public:true }, "double", $.Object);

    $.Field({Static:false, Public:true }, "float", $.Object);

    $.Field({Static:false, Public:true }, "int", $.Object);

    $.Field({Static:false, Public:true }, "long", $.Object);

    $.Field({Static:false, Public:true }, "sbyte", $.Object);

    $.Field({Static:false, Public:true }, "short", $.Object);

    $.Field({Static:false, Public:true }, "$void", $.Object);

    $.Field({Static:false, Public:true }, "uint", $.Object);

    $.Field({Static:false, Public:true }, "ulong", $.Object);

    $.Field({Static:false, Public:true }, "ushort", $.Object);

    $.Field({Static:false, Public:false}, "arrayPrototypeField", $asm03.TypeRef("Microsoft.JScript.LenientArrayPrototype"));

    $.Field({Static:false, Public:false}, "functionPrototypeField", $asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"));

    $.Field({Static:false, Public:false}, "objectPrototypeField", $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype"));

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:false}, "arrayPrototype", $asm03.TypeRef("Microsoft.JScript.LenientArrayPrototype"));

    $.Property({Static:false, Public:false}, "functionPrototype", $asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"));

    $.Property({Static:false, Public:false}, "objectPrototype", $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalActiveXObject", $asm03.TypeRef("Microsoft.JScript.ActiveXObjectConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalArray", $asm03.TypeRef("Microsoft.JScript.ArrayConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalBoolean", $asm03.TypeRef("Microsoft.JScript.BooleanConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalDate", $asm03.TypeRef("Microsoft.JScript.DateConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalEnumerator", $asm03.TypeRef("Microsoft.JScript.EnumeratorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalEvalError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalFunction", $asm03.TypeRef("Microsoft.JScript.FunctionConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalNumber", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalObject", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalObjectPrototype", $asm03.TypeRef("Microsoft.JScript.ObjectPrototype"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalRangeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalReferenceError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalRegExp", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalString", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalSyntaxError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalTypeError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalURIError", $asm03.TypeRef("Microsoft.JScript.ErrorConstructor"));

    $.Property({Static:false, Public:false, Virtual:true }, "originalVBArray", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.Property({Static:false, Public:true }, "ActiveXObject", $.Object);

    $.Property({Static:false, Public:true }, "Array", $.Object);

    $.Property({Static:false, Public:true }, "Boolean", $.Object);

    $.Property({Static:false, Public:true }, "Date", $.Object);

    $.Property({Static:false, Public:true }, "Enumerator", $.Object);

    $.Property({Static:false, Public:true }, "Error", $.Object);

    $.Property({Static:false, Public:true }, "EvalError", $.Object);

    $.Property({Static:false, Public:true }, "Function", $.Object);

    $.Property({Static:false, Public:true }, "Math", $.Object);

    $.Property({Static:false, Public:true }, "Number", $.Object);

    $.Property({Static:false, Public:true }, "Object", $.Object);

    $.Property({Static:false, Public:true }, "RangeError", $.Object);

    $.Property({Static:false, Public:true }, "ReferenceError", $.Object);

    $.Property({Static:false, Public:true }, "RegExp", $.Object);

    $.Property({Static:false, Public:true }, "String", $.Object);

    $.Property({Static:false, Public:true }, "SyntaxError", $.Object);

    $.Property({Static:false, Public:true }, "TypeError", $.Object);

    $.Property({Static:false, Public:true }, "URIError", $.Object);

    $.Property({Static:false, Public:true }, "VBArray", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.MathObject */ 

(function MathObject$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.MathObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:true , Public:true }, "abs", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_abs]; });

    $.ExternalMethod({Static:true , Public:true }, "acos", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_acos]; });

    $.ExternalMethod({Static:true , Public:true }, "asin", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_asin]; });

    $.ExternalMethod({Static:true , Public:true }, "atan", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_atan]; });

    $.ExternalMethod({Static:true , Public:true }, "atan2", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_atan2]; });

    $.ExternalMethod({Static:true , Public:true }, "ceil", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_ceil]; });

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "cos", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_cos]; });

    $.ExternalMethod({Static:true , Public:true }, "exp", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_exp]; });

    $.ExternalMethod({Static:true , Public:true }, "floor", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_floor]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "log", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_log]; });

    $.ExternalMethod({Static:true , Public:true }, "max", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs, $asm03.Microsoft.JScript.JSBuiltin.Math_max]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "maxv", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "min", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs, $asm03.Microsoft.JScript.JSBuiltin.Math_min]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "minv", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "pow", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_pow]; });

    $.ExternalMethod({Static:true , Public:true }, "random", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_random]; });

    $.ExternalMethod({Static:true , Public:true }, "round", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_round]; });

    $.ExternalMethod({Static:true , Public:true }, "sin", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_sin]; });

    $.ExternalMethod({Static:true , Public:true }, "sqrt", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_sqrt]; });

    $.ExternalMethod({Static:true , Public:true }, "tan", 
      new JSIL.MethodSignature($.Double, [$.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.None, $asm03.Microsoft.JScript.JSBuiltin.Math_tan]; });

    $.Constant({Static:true , Public:true }, "E", $.Double, 2.7182818284590451);

    $.Constant({Static:true , Public:true }, "LN10", $.Double, 2.3025850929940459);

    $.Constant({Static:true , Public:true }, "LN2", $.Double, 0.69314718055994529);

    $.Constant({Static:true , Public:true }, "LOG2E", $.Double, 1.4426950408889634);

    $.Constant({Static:true , Public:true }, "LOG10E", $.Double, 0.43429448190325182);

    $.Constant({Static:true , Public:true }, "PI", $.Double, 3.1415926535897931);

    $.Constant({Static:true , Public:true }, "SQRT1_2", $.Double, 0.70710678118654757);

    $.Constant({Static:true , Public:true }, "SQRT2", $.Double, 1.4142135623730952);

    $.Field({Static:true , Public:false, ReadOnly:true }, "internalRandom", $asm07.TypeRef("System.Random"));

    $.Field({Static:true , Public:false}, "ob", $.Type, null);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientMathObject */ 

(function LenientMathObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.MathObject"), 
      Name: "Microsoft.JScript.LenientMathObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm03.TypeRef("Microsoft.JScript.FunctionPrototype")])
    );

    $.Constant({Static:true , Public:true }, "E", $.Double, 2.7182818284590451);

    $.Constant({Static:true , Public:true }, "LN10", $.Double, 2.3025850929940459);

    $.Constant({Static:true , Public:true }, "LN2", $.Double, 0.69314718055994529);

    $.Constant({Static:true , Public:true }, "LOG2E", $.Double, 1.4426950408889634);

    $.Constant({Static:true , Public:true }, "LOG10E", $.Double, 0.43429448190325182);

    $.Constant({Static:true , Public:true }, "PI", $.Double, 3.1415926535897931);

    $.Constant({Static:true , Public:true }, "SQRT1_2", $.Double, 0.70710678118654757);

    $.Constant({Static:true , Public:true }, "SQRT2", $.Double, 1.4142135623730952);

    $.Field({Static:false, Public:true }, "abs", $.Object);

    $.Field({Static:false, Public:true }, "acos", $.Object);

    $.Field({Static:false, Public:true }, "asin", $.Object);

    $.Field({Static:false, Public:true }, "atan", $.Object);

    $.Field({Static:false, Public:true }, "atan2", $.Object);

    $.Field({Static:false, Public:true }, "ceil", $.Object);

    $.Field({Static:false, Public:true }, "cos", $.Object);

    $.Field({Static:false, Public:true }, "exp", $.Object);

    $.Field({Static:false, Public:true }, "floor", $.Object);

    $.Field({Static:false, Public:true }, "log", $.Object);

    $.Field({Static:false, Public:true }, "max", $.Object);

    $.Field({Static:false, Public:true }, "min", $.Object);

    $.Field({Static:false, Public:true }, "pow", $.Object);

    $.Field({Static:false, Public:true }, "random", $.Object);

    $.Field({Static:false, Public:true }, "round", $.Object);

    $.Field({Static:false, Public:true }, "sin", $.Object);

    $.Field({Static:false, Public:true }, "sqrt", $.Object);

    $.Field({Static:false, Public:true }, "tan", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumberObject */ 

(function NumberObject$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.NumberObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "baseType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "implicitWrapper", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumberPrototype */ 

(function NumberPrototype$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.NumberObject"), 
      Name: "Microsoft.JScript.NumberPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.NumberConstructor"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ThisobToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "toExponential", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_toExponential]; });

    $.ExternalMethod({Static:true , Public:true }, "toFixed", 
      new JSIL.MethodSignature($.String, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_toFixed]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_toLocaleString]; });

    $.ExternalMethod({Static:true , Public:true }, "toPrecision", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_toPrecision]; });

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "valueOf", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Number_valueOf]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.NumberConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientNumberPrototype */ 

(function LenientNumberPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.NumberPrototype"), 
      Name: "Microsoft.JScript.LenientNumberPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "toExponential", $.Object);

    $.Field({Static:false, Public:true }, "toFixed", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleString", $.Object);

    $.Field({Static:false, Public:true }, "toPrecision", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.Field({Static:false, Public:true }, "valueOf", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ObjectPrototype */ 

(function ObjectPrototype$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.ObjectPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CommonInstance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "hasOwnProperty", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_hasOwnProperty]; });

    $.ExternalMethod({Static:true , Public:true }, "isPrototypeOf", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_isPrototypeOf]; });

    $.ExternalMethod({Static:true , Public:true }, "propertyIsEnumerable", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_propertyIsEnumerable]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_toLocaleString]; });

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "valueOf", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.Object_valueOf]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.ObjectConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientObjectPrototype */ 

(function LenientObjectPrototype$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ObjectPrototype"), 
      Name: "Microsoft.JScript.LenientObjectPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"))
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "hasOwnProperty", $.Object);

    $.Field({Static:false, Public:true }, "isPrototypeOf", $.Object);

    $.Field({Static:false, Public:true }, "propertyIsEnumerable", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleString", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.Field({Static:false, Public:true }, "valueOf", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RegExpPrototype */ 

(function RegExpPrototype$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.RegExpPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ObjectPrototype"))
    );

    $.ExternalMethod({Static:true , Public:true }, "compile", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.RegExpObject"), [
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.RegExp_compile]; });

    $.ExternalMethod({Static:true , Public:true }, "exec", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.RegExp_exec]; });

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.RegExpConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "test", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.RegExp_test]; });

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.RegExp_toString]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientRegExpPrototype */ 

(function LenientRegExpPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.RegExpPrototype"), 
      Name: "Microsoft.JScript.LenientRegExpPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "compile", $.Object);

    $.Field({Static:false, Public:true }, "exec", $.Object);

    $.Field({Static:false, Public:true }, "test", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StringConstructor */ 

(function StringConstructor$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.StringConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.FunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientStringPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.StringObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructImplicitWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.StringObject"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.StringObject"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.StringObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "fromCharCode", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs, $asm03.Microsoft.JScript.JSBuiltin.String_fromCharCode]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.StringPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientStringConstructor */ 

(function LenientStringConstructor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.StringConstructor"), 
      Name: "Microsoft.JScript.LenientStringConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientStringPrototype")])
    );

    $.Field({Static:false, Public:true }, "fromCharCode", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StringObject */ 

(function StringObject$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.StringObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_$length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.JScript.PreferredType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "implicitWrapper", $.Boolean);

    $.Property({Static:false, Public:true }, "$length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StringPrototype */ 

(function StringPrototype$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.StringObject"), 
      Name: "Microsoft.JScript.StringPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.FunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.ObjectPrototype")])
    );

    $.ExternalMethod({Static:true , Public:true }, "anchor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_anchor]; });

    $.ExternalMethod({Static:true , Public:true }, "big", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_big]; });

    $.ExternalMethod({Static:true , Public:true }, "blink", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_blink]; });

    $.ExternalMethod({Static:true , Public:true }, "bold", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_bold]; });

    $.ExternalMethod({Static:true , Public:true }, "charAt", 
      new JSIL.MethodSignature($.String, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_charAt]; });

    $.ExternalMethod({Static:true , Public:true }, "charCodeAt", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Double])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_charCodeAt]; });

    $.ExternalMethod({Static:true , Public:true }, "concat", 
      new JSIL.MethodSignature($.String, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.String_concat]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "fixed", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_fixed]; });

    $.ExternalMethod({Static:true , Public:true }, "fontcolor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_fontcolor]; });

    $.ExternalMethod({Static:true , Public:true }, "fontsize", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_fontsize]; });

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.StringConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "indexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $.Double
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_indexOf]; });

    $.ExternalMethod({Static:true , Public:true }, "italics", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_italics]; });

    $.ExternalMethod({Static:true , Public:true }, "lastIndexOf", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $.Double
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_lastIndexOf]; });

    $.ExternalMethod({Static:true , Public:true }, "link", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_link]; });

    $.ExternalMethod({Static:true , Public:true }, "localeCompare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_localeCompare]; });

    $.ExternalMethod({Static:true , Public:true }, "match", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject"), $asm03.Microsoft.JScript.JSBuiltin.String_match]; });

    $.ExternalMethod({Static:true , Public:true }, "replace", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_replace]; });

    $.ExternalMethod({Static:true , Public:false}, "ReplaceWithRegExp", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("Microsoft.JScript.RegExpObject"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReplaceWithString", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "search", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject"), $asm03.Microsoft.JScript.JSBuiltin.String_search]; });

    $.ExternalMethod({Static:true , Public:true }, "slice", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_slice]; });

    $.ExternalMethod({Static:true , Public:true }, "small", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_small]; });

    $.ExternalMethod({Static:true , Public:true }, "split", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Object, $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject"), $asm03.Microsoft.JScript.JSBuiltin.String_split]; });

    $.ExternalMethod({Static:true , Public:false}, "SplitWithRegExp", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $asm03.TypeRef("Microsoft.JScript.RegExpObject"), $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitWithString", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [
          $.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.String, $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "strike", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_strike]; });

    $.ExternalMethod({Static:true , Public:true }, "sub", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_sub]; });

    $.ExternalMethod({Static:true , Public:true }, "substr", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["substr"]; })
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_substr]; });

    $.ExternalMethod({Static:true , Public:true }, "substring", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Double, 
          $.Object
        ])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_substring]; });

    $.ExternalMethod({Static:true , Public:true }, "sup", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_sup]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleLowerCase", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_toLocaleLowerCase]; });

    $.ExternalMethod({Static:true , Public:true }, "toLocaleUpperCase", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_toLocaleUpperCase]; });

    $.ExternalMethod({Static:true , Public:true }, "toLowerCase", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_toLowerCase]; });

    $.ExternalMethod({Static:true , Public:false}, "ToRegExpObject", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.RegExpObject"), [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:true , Public:true }, "toString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_toString]; });

    $.ExternalMethod({Static:true , Public:true }, "toUpperCase", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_toUpperCase]; });

    $.ExternalMethod({Static:true , Public:true }, "valueOf", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.String_valueOf]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.StringConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientStringPrototype */ 

(function LenientStringPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.StringPrototype"), 
      Name: "Microsoft.JScript.LenientStringPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "anchor", $.Object);

    $.Field({Static:false, Public:true }, "big", $.Object);

    $.Field({Static:false, Public:true }, "blink", $.Object);

    $.Field({Static:false, Public:true }, "bold", $.Object);

    $.Field({Static:false, Public:true }, "charAt", $.Object);

    $.Field({Static:false, Public:true }, "charCodeAt", $.Object);

    $.Field({Static:false, Public:true }, "concat", $.Object);

    $.Field({Static:false, Public:true }, "fixed", $.Object);

    $.Field({Static:false, Public:true }, "fontcolor", $.Object);

    $.Field({Static:false, Public:true }, "fontsize", $.Object);

    $.Field({Static:false, Public:true }, "indexOf", $.Object);

    $.Field({Static:false, Public:true }, "italics", $.Object);

    $.Field({Static:false, Public:true }, "lastIndexOf", $.Object);

    $.Field({Static:false, Public:true }, "link", $.Object);

    $.Field({Static:false, Public:true }, "localeCompare", $.Object);

    $.Field({Static:false, Public:true }, "match", $.Object);

    $.Field({Static:false, Public:true }, "replace", $.Object);

    $.Field({Static:false, Public:true }, "search", $.Object);

    $.Field({Static:false, Public:true }, "slice", $.Object);

    $.Field({Static:false, Public:true }, "small", $.Object);

    $.Field({Static:false, Public:true }, "split", $.Object);

    $.Field({Static:false, Public:true }, "strike", $.Object);

    $.Field({Static:false, Public:true }, "sub", $.Object);

    $.Field({Static:false, Public:true }, "substr", $.Object)
      .Attribute($asm03.TypeRef("Microsoft.JScript.NotRecommended"), function () { return ["substr"]; });

    $.Field({Static:false, Public:true }, "substring", $.Object);

    $.Field({Static:false, Public:true }, "sup", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleLowerCase", $.Object);

    $.Field({Static:false, Public:true }, "toLocaleUpperCase", $.Object);

    $.Field({Static:false, Public:true }, "toLowerCase", $.Object);

    $.Field({Static:false, Public:true }, "toString", $.Object);

    $.Field({Static:false, Public:true }, "toUpperCase", $.Object);

    $.Field({Static:false, Public:true }, "valueOf", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VBArrayPrototype */ 

(function VBArrayPrototype$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.VBArrayPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.FunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.ObjectPrototype")])
    );

    $.ExternalMethod({Static:true , Public:true }, "dimensions", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.VBArray_dimensions]; });

    $.ExternalMethod({Static:true , Public:true }, "get_$constructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"))
    );

    $.ExternalMethod({Static:true , Public:true }, "getItem", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasThisObject", "HasVarArgs"), $asm03.Microsoft.JScript.JSBuiltin.VBArray_getItem]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "lbound", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.VBArray_lbound]; });

    $.ExternalMethod({Static:true , Public:true }, "toArray", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.$Flags("HasEngine", "HasThisObject"), $asm03.Microsoft.JScript.JSBuiltin.VBArray_toArray]; });

    $.ExternalMethod({Static:true , Public:true }, "ubound", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject, $asm03.Microsoft.JScript.JSBuiltin.VBArray_ubound]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:true , Public:false}, "_constructor", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.Property({Static:true , Public:true }, "$constructor", $asm03.TypeRef("Microsoft.JScript.VBArrayConstructor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.LenientVBArrayPrototype */ 

(function LenientVBArrayPrototype$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VBArrayPrototype"), 
      Name: "Microsoft.JScript.LenientVBArrayPrototype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.Field({Static:false, Public:true }, "$constructor", $.Object);

    $.Field({Static:false, Public:true }, "dimensions", $.Object);

    $.Field({Static:false, Public:true }, "getItem", $.Object);

    $.Field({Static:false, Public:true }, "lbound", $.Object);

    $.Field({Static:false, Public:true }, "toArray", $.Object);

    $.Field({Static:false, Public:true }, "ubound", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ListEnumerator */ 

(function ListEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ListEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "curr", $.Int32);

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Logical_and */ 

(function Logical_and$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Logical_and", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Logical_or */ 

(function Logical_or$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Logical_or", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Lookup */ 

(function Lookup$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Binding"), 
      Name: "Microsoft.JScript.Lookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Context")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CanPlaceAppropriateObjectOnStack", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsLateBinding", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LateBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsWrappedNamespace", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.WrappedNamespace"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleNoSuchMemberError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InFunctionNestedInsideInstanceMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InStaticCode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsBoundToMethodInfos", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsCallable", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCustomAttribute", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetPartialValue", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWithValue", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.WithObject"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILDefaultThisObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILDefaultThisObject", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILObject", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILObjectForMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $asm07.TypeRef("System.Reflection.MemberInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILPreSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSetPlusGet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILWithDupOfThisOb", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToLateBinding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "lexLevel", $.Int32);

    $.Field({Static:false, Public:false}, "evalLexLevel", $.Int32);

    $.Field({Static:false, Public:false}, "fieldLoc", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "refLoc", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "lateBinding", $asm03.TypeRef("Microsoft.JScript.LateBinding"));

    $.Field({Static:false, Public:false}, "thereIsAnObjectOnTheStack", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Member */ 

(function Member$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Binding"), 
      Name: "Microsoft.JScript.Member", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindName", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSField"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsLateBinding", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LateBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateAsType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EvaluateAsWrappedNamespace", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.WrappedNamespace"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleNoSuchMemberError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferTypeOfCall", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsCallable", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProvideWrapperForPrototypeProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCustomAttribute", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILObject", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILWithDupOfThisOb", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToLateBinding", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "fast", $.Boolean);

    $.Field({Static:false, Public:false}, "isImplicitWrapper", $.Boolean);

    $.Field({Static:false, Public:false}, "lateBinding", $asm03.TypeRef("Microsoft.JScript.LateBinding"));

    $.Field({Static:false, Public:false}, "memberNameContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "rootObject", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "rootObjectInferredType", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "refLoc", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "temp", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.MemberInfoList */ 

(function MemberInfoList$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.MemberInfoList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.JScript.MethodInvoker */ 

(function MethodInvoker$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.MethodInvoker", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DoesCallerRequireFullTrust", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInvokerFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SafeToCall", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpitAndInstantiateClassFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.MethodInfo"), $.Boolean])
    );

    $.Field({Static:true , Public:false}, "invokerFor", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:true , Public:false}, "count", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Missing */ 

(function Missing$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Missing", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Value", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Namespace */ 

(function Namespace$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Namespace", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNamespace", 
      new JSIL.MethodSignature($.Type, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:false}, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NotRecommended */ 

(function NotRecommended$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.NotRecommended", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Property({Static:false, Public:true }, "IsError", $.Boolean);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Method")]; });

})();

/* class Microsoft.JScript.NullLiteral */ 

(function NullLiteral$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ConstantWrapper"), 
      Name: "Microsoft.JScript.NullLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Context"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumberConstructor */ 

(function NumberConstructor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.NumberConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientNumberPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.NumberObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructImplicitWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.NumberObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructWrapper", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.NumberObject"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.NumberObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.Constant({Static:true , Public:true }, "MAX_VALUE", $.Double, 1.7976931348623157E+308);

    $.Constant({Static:true , Public:true }, "MIN_VALUE", $.Double, 4.94065645841247E-324);

    $.Constant({Static:true , Public:true }, "NaN", $.Double, NaN);

    $.Constant({Static:true , Public:true }, "NEGATIVE_INFINITY", $.Double, -Infinity);

    $.Constant({Static:true , Public:true }, "POSITIVE_INFINITY", $.Double, Infinity);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.NumberPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumericBinary */ 

(function NumericBinary$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.NumericBinary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible"), 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.UInt32, $.UInt32, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Int64, $.Int64, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.UInt64, $.UInt64, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [
          $.Double, $.Double, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluateNumericBinary", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EvaluateNumericBinary", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumericBinaryAssign */ 

(function NumericBinaryAssign$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.NumericBinaryAssign", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILForNoOverloadCase", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "binOp", $asm03.TypeRef("Microsoft.JScript.NumericBinary"));

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.NumericUnary */ 

(function NumericUnary$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.NumericUnary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluateUnary", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);

    $.Field({Static:false, Public:false}, "operatorTok", $asm03.TypeRef("Microsoft.JScript.JSToken"));

    $.Field({Static:false, Public:false}, "operatorMeth", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ObjectConstructor */ 

(function ObjectConstructor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.ObjectConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientObjectPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConstructObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.JSObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.ObjectPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ObjectLiteral */ 

(function ObjectLiteral$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ObjectLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.AST")]));

    $.Field({Static:false, Public:false}, "values", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.AST")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.OpPrec */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.OpPrec", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    precNone: 0, 
    precSeqEval: 1, 
    precAssignment: 2, 
    precConditional: 3, 
    precLogicalOr: 4, 
    precLogicalAnd: 5, 
    precBitwiseOr: 6, 
    precBitwiseXor: 7, 
    precBitwiseAnd: 8, 
    precEquality: 9, 
    precRelational: 10, 
    precShift: 11, 
    precAdditive: 12, 
    precMultiplicative: 13, 
  }
);

/* class Microsoft.JScript.Package */ 

(function Package$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Package", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptPackage", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeWith", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "classList", $asm03.TypeRef("Microsoft.JScript.ASTList"));

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("Microsoft.JScript.PackageScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.PackageScope */ 

(function PackageScope$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.PackageScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNewField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOwnName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $asm07.TypeRef("System.Reflection.FieldAttributes"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeWith", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "owner", $asm03.TypeRef("Microsoft.JScript.Package"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ParameterDeclaration */ 

(function ParameterDeclaration$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.ParameterInfo"), 
      Name: "Microsoft.JScript.ParameterDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterIReflect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PartiallyEvaluate", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "identifier", $.String);

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "context", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "customAttributes", $asm03.TypeRef("Microsoft.JScript.CustomAttributeList"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "ParameterIReflect", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Plus */ 

(function Plus$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Plus", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluatePlus", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EvaluatePlus2", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILArrayOfStrings", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateToStringWithSpecialCaseForNull", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.PlusAssign */ 

(function PlusAssign$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.PlusAssign", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILForNoOverloadCase", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "binOp", $asm03.TypeRef("Microsoft.JScript.Plus"));

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.PostOrPrefix */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.PostOrPrefix", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PostfixDecrement: 0, 
    PostfixIncrement: 1, 
    PrefixDecrement: 2, 
    PrefixIncrement: 3, 
  }
);

/* class Microsoft.JScript.PostOrPrefixOperator */ 

(function PostOrPrefixOperator$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.PostOrPrefixOperator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.PostOrPrefix")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.UInt64])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoOp", 
      new JSIL.MethodSignature($.Object, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluatePostOrPrefix", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILForNoOverloadCase", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operatorMeth", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "operatorTok", $asm03.TypeRef("Microsoft.JScript.PostOrPrefix"));

    $.Field({Static:false, Public:false}, "metaData", $.Object);

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Print */ 

(function Print$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Print", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.ASTList"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RangeEnumerator */ 

(function RangeEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.RangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "curr", $.Int32);

    $.Field({Static:false, Public:false}, "start", $.Int32);

    $.Field({Static:false, Public:false}, "stop", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RangeErrorObject */ 

(function RangeErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.RangeErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.IRedirectOutput */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IRedirectOutput", true, [], function ($) {
    $.Method({}, "SetOutputStream", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.IMessageReceiver")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["5B807FA1-00CD-46ee-A493-FD80AC944715"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IMessageReceiver */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IMessageReceiver", true, [], function ($) {
    $.Method({}, "Message", JSIL.MethodSignature.Action($.String));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["F062C7FB-53BF-4f0d-B0F6-D66C5948E63F"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.COMCharStream */ 

(function COMCharStream$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.JScript.COMCharStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.IMessageReceiver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "messageReceiver", $asm03.TypeRef("Microsoft.JScript.IMessageReceiver"));

    $.Field({Static:false, Public:false}, "buffer", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ReferenceErrorObject */ 

(function ReferenceErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.ReferenceErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ReferenceAttribute */ 

(function ReferenceAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.ReferenceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:true }, "reference", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Assembly]; });

})();

/* class Microsoft.JScript.RegExpConstructor */ 

(function RegExpConstructor$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.RegExpConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientRegExpPrototype"), 
          $asm03.TypeRef("Microsoft.JScript.LenientArrayPrototype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructNew", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.RegExpObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.RegExpObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "get_index", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_input", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastIndex", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastMatch", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastParen", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_leftContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_rightContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInput", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastIndex", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastMatch", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastParen", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLeftContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRightContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.RegExpObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "set_input", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInput", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateConstructor", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), $asm0A.TypeRef("System.Text.RegularExpressions.Match"), 
          $.String
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.RegExpPrototype"));

    $.Field({Static:false, Public:false}, "arrayPrototype", $asm03.TypeRef("Microsoft.JScript.ArrayPrototype"));

    $.Field({Static:false, Public:false}, "regex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "lastRegexMatch", $asm0A.TypeRef("System.Text.RegularExpressions.Match"));

    $.Field({Static:false, Public:false}, "inputString", $.Object);

    $.Field({Static:false, Public:false}, "lastInput", $.String);

    $.Property({Static:false, Public:true }, "index", $.Object);

    $.Property({Static:false, Public:true }, "input", $.Object);

    $.Property({Static:false, Public:true }, "lastIndex", $.Object);

    $.Property({Static:false, Public:true }, "lastMatch", $.Object);

    $.Property({Static:false, Public:true }, "lastParen", $.Object);

    $.Property({Static:false, Public:true }, "leftContext", $.Object);

    $.Property({Static:false, Public:true }, "rightContext", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RegExpLiteral */ 

(function RegExpLiteral$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.RegExpLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "ignoreCase", $.Boolean);

    $.Field({Static:false, Public:false}, "global", $.Boolean);

    $.Field({Static:false, Public:false}, "multiline", $.Boolean);

    $.Field({Static:false, Public:false}, "regExpVar", $asm03.TypeRef("Microsoft.JScript.JSGlobalField"));

    $.Field({Static:true , Public:false}, "counter", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RegExpMatch */ 

(function RegExpMatch$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ArrayObject"), 
      Name: "Microsoft.JScript.RegExpMatch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ArrayPrototype"), $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), 
          $asm0A.TypeRef("System.Text.RegularExpressions.Match"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ArrayPrototype"), $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), 
          $asm0A.TypeRef("System.Text.RegularExpressions.MatchCollection"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ArrayObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Concat", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeleteValueAtIndex", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValueAtIndex", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Hydrate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValueAtIndex", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Shift", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptFunction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Splice", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm03.TypeRef("Microsoft.JScript.ArrayObject"), 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SwapValues", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unshift", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:false}, "hydrated", $.Boolean);

    $.Field({Static:false, Public:false}, "regex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "matches", $asm0A.TypeRef("System.Text.RegularExpressions.MatchCollection"));

    $.Field({Static:false, Public:false}, "match", $asm0A.TypeRef("System.Text.RegularExpressions.Match"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RegExpObject */ 

(function RegExpObject$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.RegExpObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.RegExpPrototype"), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.RegExpConstructor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "compile", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "exec", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_global", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ignoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastIndex", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_multiline", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_lastIndex", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "test", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "regExpConst", $asm03.TypeRef("Microsoft.JScript.RegExpConstructor"));

    $.Field({Static:false, Public:false}, "sourceInt", $.String);

    $.Field({Static:false, Public:false}, "ignoreCaseInt", $.Boolean);

    $.Field({Static:false, Public:false}, "globalInt", $.Boolean);

    $.Field({Static:false, Public:false}, "multilineInt", $.Boolean);

    $.Field({Static:false, Public:false}, "regex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "lastIndexInt", $.Object);

    $.Property({Static:false, Public:true }, "source", $.String);

    $.Property({Static:false, Public:true }, "ignoreCase", $.Boolean);

    $.Property({Static:false, Public:true }, "global", $.Boolean);

    $.Property({Static:false, Public:true }, "multiline", $.Boolean);

    $.Property({Static:false, Public:true }, "lastIndex", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.RegExpReplace */ 

(function RegExpReplace$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.RegExpReplace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Text.RegularExpressions.Match")])
    );

    $.Field({Static:false, Public:false}, "lastMatch", $asm0A.TypeRef("System.Text.RegularExpressions.Match"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ReplaceUsingFunction */ 

(function ReplaceUsingFunction$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.RegExpReplace"), 
      Name: "Microsoft.JScript.ReplaceUsingFunction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Text.RegularExpressions.Match")])
    );

    $.Field({Static:false, Public:false}, "$function", $asm03.TypeRef("Microsoft.JScript.ScriptFunction"));

    $.Field({Static:false, Public:false}, "cArgs", $.Int32);

    $.Field({Static:false, Public:false}, "groupNumbers", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ReplaceWithString */ 

(function ReplaceWithString$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.RegExpReplace"), 
      Name: "Microsoft.JScript.ReplaceWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Text.RegularExpressions.Match")])
    );

    $.Field({Static:false, Public:false}, "replaceString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Relational */ 

(function Relational$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.Relational", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "EvaluateRelational", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptCompare", 
      new JSIL.MethodSignature($.Double, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "JScriptCompare2", 
      new JSIL.MethodSignature($.Double, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible"), 
          $asm07.TypeRef("System.TypeCode"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "metaData", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Return */ 

(function Return$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Return", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "enclosingFunctionScope", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));

    $.Field({Static:false, Public:false}, "leavesFinally", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ReturnOutOfFinally */ 

(function ReturnOutOfFinally$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.JScript.ReturnOutOfFinally", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Runtime */ 

(function Runtime$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.JScript.Runtime", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateThunkModuleBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DoubleToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ThunkModuleBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeRefs", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TypeReferences"))
    );

    $.ExternalMethod({Static:true , Public:true }, "UncheckedDecimalToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.Decimal")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalTwoToThe64", $asm07.TypeRef("System.Decimal"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.DecimalConstantAttribute"), function () { return [0, 0, 1, 0, 0]; });

    $.Field({Static:true , Public:false}, "_typeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"));

    $.Field({Static:true , Public:false}, "_thunkModuleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));


    function Runtime__cctor () {
      $thisType.DecimalTwoToThe64 = 0;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Runtime__cctor
    );

    $.Property({Static:true , Public:false}, "TypeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"));

    $.Property({Static:true , Public:false}, "ThunkModuleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScannerException */ 

(function ScannerException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.JScript.ScannerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.JSError"))
    );

    $.Field({Static:false, Public:false}, "m_errorId", $asm03.TypeRef("Microsoft.JScript.JSError"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScriptBlock */ 

(function ScriptBlock$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ScriptBlock", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.Block")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAssemblyAttributeLists", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILClass", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToILClass", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), [$asm03.TypeRef("Microsoft.JScript.CompilerGlobals"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "statement_block", $asm03.TypeRef("Microsoft.JScript.Block"));

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSField")]));

    $.Field({Static:false, Public:false}, "own_scope", $asm03.TypeRef("Microsoft.JScript.GlobalScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScriptObjectPropertyEnumerator */ 

(function ScriptObjectPropertyEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ScriptObjectPropertyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "enumerators", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "objects", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "visited_names", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ScriptStream */ 

(function ScriptStream$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.ScriptStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "PrintStackTrace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "PrintStackTrace", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:true }, "Out", $asm07.TypeRef("System.IO.TextWriter"));

    $.Field({Static:true , Public:true }, "Error", $asm07.TypeRef("System.IO.TextWriter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.HashtableEntry */ 

(function HashtableEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.HashtableEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.UInt32, $.Type
        ])
    );

    $.Field({Static:false, Public:false}, "key", $.Object);

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Field({Static:false, Public:false}, "hashCode", $.UInt32);

    $.Field({Static:false, Public:false}, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.SimpleHashtable */ 

(function SimpleHashtable$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.SimpleHashtable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashtableEntry", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.HashtableEntry"), [$.Object, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IgnoreCaseGet", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rehash", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "table", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.HashtableEntry")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "threshold", $.UInt32);

    $.Property({Static:false, Public:true }, "Item", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.JScript.SimpleHashtableEnumerator */ 

(function SimpleHashtableEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.SimpleHashtableEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.HashtableEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "table", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.HashtableEntry")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "currentEntry", $asm03.TypeRef("Microsoft.JScript.HashtableEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Stack */ 

(function Stack$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Stack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GuardedPush", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrimToSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "top", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StackFrame */ 

(function StackFrame$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.StackFrame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNewField", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSVariableField"), [
          $.String, $.Object, 
          $asm07.TypeRef("System.Reflection.FieldAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateFunctionScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDefaultThisObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPropertyEnumerator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.IActivationObject.GetLocalField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    )
      .Overrides($asm03.TypeRef("Microsoft.JScript.IActivationObject"), "GetLocalField");

    $.ExternalMethod({Static:true , Public:true }, "PushStackFrameForMethod", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PushStackFrameForStaticMethod", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.RuntimeTypeHandle"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "caller_arguments", $asm03.TypeRef("Microsoft.JScript.ArgumentsObject"));

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.JSLocalField")]));

    $.Field({Static:false, Public:true }, "localVars", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "nestedFunctionScope", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));

    $.Field({Static:false, Public:false}, "thisObject", $.Object);

    $.Field({Static:false, Public:true }, "closureInstance", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IActivationObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StaticInitializer */ 

(function StaticInitializer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.StaticInitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.Block"), 
          $asm03.TypeRef("Microsoft.JScript.FunctionScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("Microsoft.JScript.FunctionObject"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.StrictEquality */ 

(function StrictEquality$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.BinaryOp"), 
      Name: "Microsoft.JScript.StrictEquality", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.JSToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptStrictEquals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "JScriptStrictEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "JScriptStrictEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible"), 
          $asm07.TypeRef("System.TypeCode"), $asm07.TypeRef("System.TypeCode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.Emit.Label"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.SuperTypeMembersSorter */ 

(function SuperTypeMembersSorter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.SuperTypeMembersSorter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMembers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "members", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "names", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Switch */ 

(function Switch$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Switch", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "cases", $asm03.TypeRef("Microsoft.JScript.ASTList"));

    $.Field({Static:false, Public:false}, "default_case", $.Int32);

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.SwitchCase */ 

(function SwitchCase$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.SwitchCase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Completion"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToConditionalBranch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $asm07.TypeRef("System.Reflection.Emit.Label"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "case_value", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "statements", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.SyntaxErrorObject */ 

(function SyntaxErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.SyntaxErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.ThisLiteral */ 

(function ThisLiteral$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.ThisLiteral", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfOKToUseInSuperConstructorCall", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluateAsReference", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssignmentToDefaultIndexedProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveCall", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.IReflect")]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILCall", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $asm03.TypeRef("Microsoft.JScript.ASTList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILPreSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.ASTList")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.Field({Static:false, Public:false}, "isSuper", $.Boolean);

    $.Field({Static:false, Public:false}, "method", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Throw */ 

(function Throw$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Throw", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HasReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("Microsoft.JScript.AST"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Try */ 

(function Try$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.Try", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.TypeExpression"), 
          $asm03.TypeRef("Microsoft.JScript.AST"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $.Boolean, $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptExceptionValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:true , Public:true }, "PushHandlerScope", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "handler", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "finally_block", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "handler_scope", $asm03.TypeRef("Microsoft.JScript.BlockScope"));

    $.Field({Static:false, Public:false}, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "fieldName", $.String);

    $.Field({Static:false, Public:false}, "finallyHasControlFlowOutOfIt", $.Boolean);

    $.Field({Static:false, Public:false}, "tryEndContext", $asm03.TypeRef("Microsoft.JScript.Context"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TypedArray */ 

(function TypedArray$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.TypedArray", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.IReflect"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingSystemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMethods", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InvokeMember", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Reflection.Binder"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToRankString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "elementType", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "rank", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingSystemType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Reflection.IReflect")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TypeErrorObject */ 

(function TypeErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.TypeErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TypeExpression */ 

(function TypeExpression$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.TypeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCLSCompliant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToIReflect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.IReflect"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsCLSCompliant", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "isArray", $.Boolean);

    $.Field({Static:false, Public:false}, "rank", $.Int32);

    $.Field({Static:false, Public:false}, "recursive", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedIR", $asm07.TypeRef("System.Reflection.IReflect"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Typeob */ 

(function Typeob$Members () {
  var $, $thisType;












































































































































  JSIL.MakeStaticClass("Microsoft.JScript.Typeob", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_AllowPartiallyTrustedCallersAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentsObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Array", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayOfObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayOfString", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayWrapper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Attribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AttributeUsageAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BaseVsaStartup", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Binding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BitwiseBinary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Boolean", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BooleanObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BreakOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BuiltinFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Byte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Char", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Closure", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CLSCompliantAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoClassAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CodeAccessSecurityAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CompilerGlobalScopeAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ContextStaticAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ContinueOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Convert", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DateObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DebuggableAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Debugger", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DebuggerHiddenAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DebuggerStepThroughAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Decimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultMemberAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Delegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Double", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Enum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnumeratorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Equality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Eval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EvalErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Exception", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Expando", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FieldAccessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FieldInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ForIn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FunctionDeclaration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FunctionExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FunctionObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FunctionWrapper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GlobalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Globals", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GlobalScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hide", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IActivationObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IConvertible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IEnumerable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IExpando", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Import", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_In", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_INeedEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instanceof", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Int16", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Int32", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Int64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IntPtr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JScriptException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JSError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JSFunctionAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JSFunctionAttributeEnum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JSLocalField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_JSObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LateBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LenientGlobalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MathObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodInvoker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Missing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotRecommended", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Null", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NumberObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NumericBinary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NumericUnary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ObsoleteAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Override", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Package", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParamArrayAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Plus", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PostOrPrefixOperator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RangeErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReferenceAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReferenceErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReflectionMissing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RegExpConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RegExpObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Relational", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequiredAttributeAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReturnOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Runtime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RuntimeTypeHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SByte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScriptFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScriptObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScriptStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SimpleHashtable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Single", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StackFrame", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_STAThreadAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StrictEquality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_String", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SyntaxErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SystemConvert", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Throw", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Try", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypedArray", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Typeof", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UInt16", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UInt32", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UInt64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UIntPtr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_URIErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VBArrayObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Void", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VsaEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_With", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Property({Static:true , Public:false}, "ArgumentsObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ArrayConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ArrayObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ArrayWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "BaseVsaStartup", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Binding", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "BitwiseBinary", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "BooleanObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "BreakOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "BuiltinFunction", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ClassScope", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Closure", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ContinueOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Convert", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DateObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Empty", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "EnumeratorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Equality", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Eval", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "EvalErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Expando", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FieldAccessor", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ForIn", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FunctionDeclaration", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FunctionExpression", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FunctionObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FunctionWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "GlobalObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "GlobalScope", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Globals", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Hide", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IActivationObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "INeedEngine", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Import", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "In", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Instanceof", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JSError", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JSFunctionAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JSFunctionAttributeEnum", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JSLocalField", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JSObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "JScriptException", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "LateBinding", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "LenientGlobalObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "MathObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "MethodInvoker", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Missing", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Namespace", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "NotRecommended", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "NumberObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "NumericBinary", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "NumericUnary", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ObjectConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Override", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Package", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Plus", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "PostOrPrefixOperator", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "RangeErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ReferenceAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ReferenceErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "RegExpConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "RegExpObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Relational", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ReturnOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Runtime", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ScriptFunction", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ScriptObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ScriptStream", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "SimpleHashtable", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "StackFrame", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "StrictEquality", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "StringObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "SyntaxErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Throw", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Try", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypedArray", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Typeof", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "URIErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "VBArrayObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "With", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "VsaEngine", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Array", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Attribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "AttributeUsageAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Byte", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Boolean", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Char", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "CLSCompliantAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ContextStaticAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DateTime", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Null", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Delegate", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Decimal", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Double", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Enum", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Exception", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IConvertible", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IntPtr", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Int16", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Int32", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Int64", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Object", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ObsoleteAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ParamArrayAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "RuntimeTypeHandle", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "SByte", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Single", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "STAThreadAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "String", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeCode", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "UIntPtr", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "UInt16", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "UInt32", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "UInt64", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Void", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IEnumerable", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IEnumerator", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IList", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "Debugger", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DebuggableAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DebuggerHiddenAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DebuggerStepThroughAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DefaultMemberAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "EventInfo", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "FieldInfo", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "CompilerGlobalScopeAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "RequiredAttributeAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "CoClassAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "IExpando", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "CodeAccessSecurityAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "AllowPartiallyTrustedCallersAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ArrayOfObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ArrayOfString", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "SystemConvert", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ReflectionMissing", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Typeof */ 

(function Typeof$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.Typeof", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptTypeof", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "JScriptTypeof", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TypeReflector */ 

(function TypeReflector$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.TypeReflector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultMembers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewMemberArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeReflectorFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplementsIReflect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Is__ComObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapMembers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.Field({Static:false, Public:false}, "defaultMembers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Field({Static:false, Public:false}, "staticMembers", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "instanceMembers", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "memberInfos", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])]));

    $.Field({Static:false, Public:false}, "memberLookupTable", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "implementsIReflect", $.Object);

    $.Field({Static:false, Public:false}, "is__ComObject", $.Object);

    $.Field({Static:false, Public:false}, "hashCode", $.UInt32);

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:true , Public:false}, "EmptyMembers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Reflection.MemberInfo, 0);
      });

    $.Field({Static:true , Public:false}, "Table", $asm03.TypeRef("Microsoft.JScript.TRHashtable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.TRHashtable */ 

(function TRHashtable$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.TRHashtable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.TypeReflector"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rehash", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm03.TypeRef("Microsoft.JScript.TypeReflector")])
    );

    $.Field({Static:false, Public:false}, "table", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.JScript.TypeReflector")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "threshold", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm03.TypeRef("Microsoft.JScript.TypeReflector"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.JScript.TypeReferences */ 

(function TypeReferences$Members () {
  var $, $thisType;































































































































































































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.TypeReferences", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Module"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowPartiallyTrustedCallersAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArgumentsObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Array", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayOfObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayOfString", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayWrapper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeUsageAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseVsaStartup", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Binding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BitwiseBinary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_bitwiseBinaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Boolean", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BooleanObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BreakOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_breakOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BuiltinFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Byte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_callMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_callValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_callValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_changeTypeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Char", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_checkIfDoubleIsIntegerMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_checkIfSingleIsIntegerMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClassScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Closure", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_closureConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_closureInstanceField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CLSCompliantAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_clsCompliantAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoClassAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeAccessSecurityAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_coerce2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_coerceTMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilerGlobalScopeAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_compilerGlobalScopeAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_constructArrayMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_constructObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_contextEngineField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContextStaticAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_contextStaticAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContinueOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_continueOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Convert", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_convertCharToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_createVsaEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_createVsaEngineWithType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_dateTimeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_dateTimeToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_dateTimeToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DBNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debugBreak", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebuggableAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Debugger", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebuggerHiddenAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerHiddenAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebuggerStepThroughAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerStepThroughAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Decimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalCompare", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToDoubleMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToUInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalToUInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_decimalZeroField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultMemberAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_defaultMemberAttributeCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Delegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_deleteMemberMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_deleteMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Double", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_doubleToBooleanMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_doubleToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_doubleToInt64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_doubleToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_engineField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnumeratorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Equality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_equalityConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_equalsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Eval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EvalErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluateBitwiseBinaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluateEqualityMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluateNumericBinaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluatePlusMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluatePostOrPrefixOperatorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluateRelationalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_evaluateUnaryMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exception", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Expando", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_fastConstructArrayLiteralMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldAccessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ForIn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FunctionDeclaration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FunctionExpression", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FunctionObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FunctionWrapper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getCurrentMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getDefaultThisObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getEngineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getFieldMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getFieldValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getGlobalScopeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getLenientGlobalObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getMemberValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getMethodMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getNamespaceMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getNonMissingValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getOriginalArrayConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getOriginalObjectConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getOriginalRegExpConstructorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getParentMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getTypeFromHandleMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getTypeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_getValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GlobalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Globals", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GlobalScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_globalScopeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_hashtableCtor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_hashTableGetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_hashtableGetItem", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_hashtableRemove", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_hashtableSetItem", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hide", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IActivationObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IConvertible", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IEnumerable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IExpando", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Import", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_In", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_INeedEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Instanceof", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int16", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int32", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_int32ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_int32ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Int64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_int64ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_int64ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IntPtr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_isMissingMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptCompareMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptEvaluateMethod1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptEvaluateMethod2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JScriptException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptExceptionValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptFunctionDeclarationMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptFunctionExpressionMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptGetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptImportMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptInMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptInstanceofMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptPackageMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JScriptReferenceModule", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Module"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptStrictEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptThrowMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptTypeofMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jScriptWithMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JSError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JSFunctionAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jsFunctionAttributeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JSFunctionAttributeEnum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JSLocalField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_jsLocalFieldConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JSObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LateBinding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_lateBindingConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_lateBindingConstructor2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LenientGlobalObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_localVarsField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MathObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodInvoker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Missing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_missingField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_moveNextMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NotRecommended", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NumberObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NumericBinary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_numericBinaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_numericbinaryDoOpMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NumericUnary", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_numericUnaryConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Object", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_objectField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObsoleteAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Override", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Package", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParamArrayAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Plus", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_plusConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_plusDoOpMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_popScriptObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_postOrPrefixConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PostOrPrefixOperator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_pushScriptObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_pushStackFrameForMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_pushStackFrameForStaticMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RangeErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_referenceAttributeConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReflectionMissing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_regExpConstructMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RegExpConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RegExpObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Relational", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_relationalConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequiredAttributeAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReturnOutOfFinally", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_returnOutOfFinallyConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Runtime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RuntimeTypeHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SByte", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_scriptExceptionConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScriptFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScriptObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_scriptObjectStackTopMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScriptStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_setEngineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_setFieldValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_setIndexedPropertyValueStaticMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_setMemberValue2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_setValueMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SimpleHashtable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Single", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StackFrame", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_STAThreadAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrictEquality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_String", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringConcat2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringConcat3Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringConcat4Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringConcatArrMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringEqualsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_stringLengthMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StringObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyntaxErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemConvert", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_systemReflectionMissingField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Throw", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_throwTypeMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toBooleanMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toForInObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toInt32Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toNativeArrayMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toNumberMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toObject2Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toObjectMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_toStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Try", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypedArray", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Typeof", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UInt16", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UInt32", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_uint32ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_uint32ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UInt64", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_uint64ToDecimalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_uint64ToStringMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UIntPtr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_uncheckedDecimalToInt64Method", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_undefinedField", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_URIErrorObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VBArrayObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Void", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VsaEngine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_vsaEngineConstructor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_With", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_writeLineMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_writeMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstantValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultParameterValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPredefinedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeReference", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm03.TypeRef("Microsoft.JScript.TypeReferences+TypeReference")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InExecutionContext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InReferenceContext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InReferenceContext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InReferenceContext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapMemberInfoToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapMemberInfoToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$asm07.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToExecutionContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$asm07.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm07.TypeRef("System.Reflection.IReflect")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$asm07.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToReferenceContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$asm07.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_predefinedTypeTable", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "_typeTable", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "_jscriptReferenceModule", $asm07.TypeRef("System.Reflection.Module"));

    $.Constant({Static:true , Public:false}, "TypeReferenceStartOfSpecialCases", $.Int32, 81);

    $.Constant({Static:true , Public:false}, "TypeReferenceArrayLength", $.Int32, 83);

    $.Property({Static:false, Public:false}, "JScriptReferenceModule", $asm07.TypeRef("System.Reflection.Module"));

    $.Property({Static:false, Public:false}, "ArgumentsObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArrayConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArrayObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArrayWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BaseVsaStartup", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Binding", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BitwiseBinary", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BooleanObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BreakOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BuiltinFunction", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ClassScope", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Closure", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ContinueOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Convert", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DateObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Empty", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "EnumeratorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Equality", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Eval", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "EvalErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Expando", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FieldAccessor", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ForIn", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FunctionDeclaration", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FunctionExpression", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FunctionObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FunctionWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "GlobalObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "GlobalScope", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Globals", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Hide", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IActivationObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "INeedEngine", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Import", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "In", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Instanceof", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JSError", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JSFunctionAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JSFunctionAttributeEnum", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JSLocalField", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JSObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "JScriptException", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "LateBinding", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "LenientGlobalObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MathObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MethodInvoker", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Missing", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Namespace", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "NotRecommended", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "NumberObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "NumericBinary", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "NumericUnary", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ObjectConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Override", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Package", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Plus", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "PostOrPrefixOperator", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RangeErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ReferenceAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ReferenceErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RegExpConstructor", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RegExpObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Relational", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ReturnOutOfFinally", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Runtime", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ScriptFunction", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ScriptObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ScriptStream", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "SimpleHashtable", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "StackFrame", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "StrictEquality", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "StringObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "SyntaxErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Throw", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Try", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TypedArray", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TypeErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Typeof", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "URIErrorObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "VBArrayObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "With", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "VsaEngine", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Array", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Attribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "AttributeUsageAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Byte", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Boolean", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Char", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CLSCompliantAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ContextStaticAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DateTime", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DBNull", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Delegate", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Decimal", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Double", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Enum", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Exception", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IConvertible", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IntPtr", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Int16", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Int32", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Int64", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Object", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ObsoleteAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ParamArrayAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RuntimeTypeHandle", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "SByte", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Single", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "STAThreadAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "String", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "TypeCode", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "UIntPtr", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "UInt16", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "UInt32", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "UInt64", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Void", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IEnumerable", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IEnumerator", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IList", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Debugger", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DebuggableAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DebuggerHiddenAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DebuggerStepThroughAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "DefaultMemberAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "EventInfo", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FieldInfo", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CompilerGlobalScopeAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RequiredAttributeAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CoClassAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IExpando", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CodeAccessSecurityAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "AllowPartiallyTrustedCallersAttribute", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArrayOfObject", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ArrayOfString", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "SystemConvert", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ReflectionMissing", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "constructArrayMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "isMissingMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "bitwiseBinaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "evaluateBitwiseBinaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "breakOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "closureConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "continueOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "checkIfDoubleIsIntegerMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "checkIfSingleIsIntegerMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "coerce2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "coerceTMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "throwTypeMismatch", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "doubleToBooleanMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toBooleanMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toForInObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toNativeArrayMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toNumberMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toObject2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "doubleToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "toStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "undefinedField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "equalityConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "evaluateEqualityMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptEvaluateMethod1", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptEvaluateMethod2", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptGetEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptFunctionDeclarationMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptFunctionExpressionMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "contextEngineField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "fastConstructArrayLiteralMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "globalScopeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "getDefaultThisObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getFieldMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getGlobalScopeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getMemberValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptImportMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptInMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getEngineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "setEngineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptInstanceofMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "scriptExceptionConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "jsFunctionAttributeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "jsLocalFieldConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "setMemberValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "lateBindingConstructor2", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "lateBindingConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "objectField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "callMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "callValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "callValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "deleteMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "deleteMemberMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getNonMissingValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getValue2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "setIndexedPropertyValueStaticMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "setValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "missingField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "getNamespaceMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "numericBinaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "numericbinaryDoOpMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "evaluateNumericBinaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "numericUnaryConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "evaluateUnaryMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "constructObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptPackageMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "plusConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "plusDoOpMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "evaluatePlusMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "postOrPrefixConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "evaluatePostOrPrefixOperatorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "referenceAttributeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "regExpConstructMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "relationalConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "evaluateRelationalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptCompareMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "returnOutOfFinallyConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "doubleToInt64", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "uncheckedDecimalToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "engineField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "getParentMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "writeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "writeLineMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "hashtableCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "hashtableGetItem", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "hashTableGetEnumerator", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "hashtableRemove", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "hashtableSetItem", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "closureInstanceField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "localVarsField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "pushStackFrameForMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "pushStackFrameForStaticMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptStrictEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptThrowMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptExceptionValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptTypeofMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "vsaEngineConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "createVsaEngine", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "createVsaEngineWithType", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getOriginalArrayConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getOriginalObjectConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getOriginalRegExpConstructorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "popScriptObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "pushScriptObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "scriptObjectStackTopMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getLenientGlobalObjectMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "jScriptWithMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "clsCompliantAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "getEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "moveNextMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getCurrentMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "contextStaticAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "changeTypeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "convertCharToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "dateTimeConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "dateTimeToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "dateTimeToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalConstructor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "decimalZeroField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "decimalCompare", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "doubleToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "int32ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "int64ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "uint32ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "uint64ToDecimalMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToDoubleMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToUInt32Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "decimalToUInt64Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "debugBreak", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "debuggerHiddenAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "debuggerStepThroughAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "int32ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "int64ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "equalsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "defaultMemberAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "getFieldValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "setFieldValueMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "systemReflectionMissingField", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "compilerGlobalScopeAttributeCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "stringConcatArrMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "stringConcat4Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "stringConcat3Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "stringConcat2Method", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "stringEqualsMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "stringLengthMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getMethodMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getTypeMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "getTypeFromHandleMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "uint32ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "uint64ToStringMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.JScript.TypeReferences+TypeReference */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.TypeReferences+TypeReference", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ArgumentsObject: 0, 
    ArrayConstructor: 1, 
    ArrayObject: 2, 
    ArrayWrapper: 3, 
    Binding: 4, 
    BitwiseBinary: 5, 
    BooleanObject: 6, 
    BreakOutOfFinally: 7, 
    BuiltinFunction: 8, 
    ClassScope: 9, 
    Closure: 10, 
    ContinueOutOfFinally: 11, 
    Convert: 12, 
    DateObject: 13, 
    Empty: 14, 
    EnumeratorObject: 15, 
    Equality: 16, 
    ErrorObject: 17, 
    Eval: 18, 
    EvalErrorObject: 19, 
    Expando: 20, 
    FieldAccessor: 21, 
    ForIn: 22, 
    FunctionDeclaration: 23, 
    FunctionExpression: 24, 
    FunctionObject: 25, 
    FunctionWrapper: 26, 
    GlobalObject: 27, 
    GlobalScope: 28, 
    Globals: 29, 
    Hide: 30, 
    IActivationObject: 31, 
    INeedEngine: 32, 
    Import: 33, 
    In: 34, 
    Instanceof: 35, 
    JSError: 36, 
    JSFunctionAttribute: 37, 
    JSFunctionAttributeEnum: 38, 
    JSLocalField: 39, 
    JSObject: 40, 
    JScriptException: 41, 
    LateBinding: 42, 
    LenientGlobalObject: 43, 
    MathObject: 44, 
    MethodInvoker: 45, 
    Missing: 46, 
    Namespace: 47, 
    NotRecommended: 48, 
    NumberObject: 49, 
    NumericBinary: 50, 
    NumericUnary: 51, 
    ObjectConstructor: 52, 
    Override: 53, 
    Package: 54, 
    Plus: 55, 
    PostOrPrefixOperator: 56, 
    RangeErrorObject: 57, 
    ReferenceAttribute: 58, 
    ReferenceErrorObject: 59, 
    RegExpConstructor: 60, 
    RegExpObject: 61, 
    Relational: 62, 
    ReturnOutOfFinally: 63, 
    Runtime: 64, 
    ScriptFunction: 65, 
    ScriptObject: 66, 
    ScriptStream: 67, 
    SimpleHashtable: 68, 
    StackFrame: 69, 
    StrictEquality: 70, 
    StringObject: 71, 
    SyntaxErrorObject: 72, 
    Throw: 73, 
    Try: 74, 
    TypedArray: 75, 
    TypeErrorObject: 76, 
    Typeof: 77, 
    URIErrorObject: 78, 
    VBArrayObject: 79, 
    With: 80, 
    BaseVsaStartup: 81, 
    VsaEngine: 82, 
  }
);

/* class Microsoft.JScript.URIErrorObject */ 

(function URIErrorObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ErrorObject"), 
      Name: "Microsoft.JScript.URIErrorObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ErrorPrototype"), $.Object])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VariableDeclaration */ 

(function VariableDeclaration$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.VariableDeclaration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.Lookup"), 
          $asm03.TypeRef("Microsoft.JScript.TypeExpression"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm07.TypeRef("System.Reflection.FieldAttributes"), $asm03.TypeRef("Microsoft.JScript.CustomAttributeList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFirstExecutableContext", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Context"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "identifier", $asm03.TypeRef("Microsoft.JScript.Lookup"));

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.TypeExpression"));

    $.Field({Static:false, Public:false}, "initializer", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "field", $asm03.TypeRef("Microsoft.JScript.JSVariableField"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VBArrayConstructor */ 

(function VBArrayConstructor$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptFunction"), 
      Name: "Microsoft.JScript.VBArrayConstructor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.LenientFunctionPrototype"), $asm03.TypeRef("Microsoft.JScript.LenientVBArrayPrototype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Call", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Construct", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Construct", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VBArrayObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm03.TypeRef("Microsoft.JScript.JSFunctionAttribute"), function () { return [$asm03.Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs]; })
      .Parameter(0, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ob", $.Type);

    $.Field({Static:false, Public:false}, "originalPrototype", $asm03.TypeRef("Microsoft.JScript.VBArrayPrototype"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VBArrayObject */ 

(function VBArrayObject$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.JSObject"), 
      Name: "Microsoft.JScript.VBArrayObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.VBArrayPrototype"), $asm07.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "dimensions", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "getItem", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "lbound", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "toArray", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ArrayObject"), [$asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ubound", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "array", $asm07.TypeRef("System.Array"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Override */ 

(function Override$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.Override", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Method")]; });

})();

/* class Microsoft.JScript.Hide */ 

(function Hide$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.JScript.Hide", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Method")]; });

})();

/* class Microsoft.JScript.VoidOp */ 

(function VoidOp$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.UnaryOp"), 
      Name: "Microsoft.JScript.VoidOp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InferType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$asm03.TypeRef("Microsoft.JScript.JSField")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.JScript.IEngine2 */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IEngine2", true, [], function ($) {
    $.Method({}, "GetAssembly", JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly")));
    $.Method({}, "Run", JSIL.MethodSignature.Action($asm07.TypeRef("System.AppDomain")));
    $.Method({}, "CompileEmpty", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "RunEmpty", JSIL.MethodSignature.Void);
    $.Method({}, "DisconnectEvents", JSIL.MethodSignature.Void);
    $.Method({}, "ConnectEvents", JSIL.MethodSignature.Void);
    $.Method({}, "RegisterEventSource", JSIL.MethodSignature.Action($.String));
    $.Method({}, "Interrupt", JSIL.MethodSignature.Void);
    $.Method({}, "InitVsaEngine", new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")]));
    $.Method({}, "GetGlobalScope", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IVsaScriptScope")));
    $.Method({}, "GetModule", JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Module")));
    $.Method({}, "Clone", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine"), [$asm07.TypeRef("System.AppDomain")]));
    $.Method({}, "Restart", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["BFF6C97F-0705-4394-88B8-A03A4B8B4CD7"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.ISite2 */ 

JSIL.MakeInterface(
  "Microsoft.JScript.ISite2", true, [], function ($) {
    $.Method({}, "GetParentChain", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Object]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["BFF6C980-0705-4394-88B8-A03A4B8B4CD7"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IDebugScriptScope */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebugScriptScope", true, [], function ($) {
    $.Method({}, "SetThisValue", JSIL.MethodSignature.Action($.Object));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["59447635-3E26-4873-BF26-05F173B80F5E"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IDebugVsaScriptCodeItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDebugVsaScriptCodeItem", true, [], function ($) {
    $.Method({}, "Evaluate", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "ParseNamedBreakPoint", new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* enum Microsoft.JScript.VSAITEMTYPE2 */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.VSAITEMTYPE2", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    HOSTOBJECT: 16, 
    HOSTSCOPE: 17, 
    HOSTSCOPEANDOBJECT: 18, 
    SCRIPTSCOPE: 19, 
    SCRIPTBLOCK: 20, 
    STATEMENT: 21, 
    EXPRESSION: 22, 
  }
);

/* interface Microsoft.JScript.IVsaScriptScope */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IVsaScriptScope", true, [], function ($) {
    $.Method({}, "get_Parent", JSIL.MethodSignature.Return($.Type));
    $.Method({}, "AddItem", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")]));
    $.Method({}, "GetItem", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String]));
    $.Method({}, "RemoveItem", JSIL.MethodSignature.Action($.String));
    $.Method({}, "RemoveItem", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")));
    $.Method({}, "GetItemCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetItemAtIndex", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.Int32]));
    $.Method({}, "RemoveItemAtIndex", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "GetObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "CreateDynamicItem", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")]));
    $.Property({}, "Parent");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["ED4BAE22-2F3C-419a-B487-CF869E716B95"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IVsaScriptCodeItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IVsaScriptCodeItem", true, [], function ($) {
    $.Method({}, "get_StartLine", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_StartLine", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_StartColumn", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_StartColumn", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "Execute", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "StartLine");
    $.Property({}, "StartColumn");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaCodeItem"), $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E0C0FFE8-7eea-4ee5-b7e4-0080c7eb0b74"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IDefineEvent */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IDefineEvent", true, [], function ($) {
    $.Method({}, "AddEvent", new JSIL.MethodSignature($.Object, [$.String, $.Int32]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["D1A19408-BB6B-43eb-BB6F-E7CF6AF047D7"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.IVsaFullErrorInfo */ 

JSIL.MakeInterface(
  "Microsoft.JScript.IVsaFullErrorInfo", true, [], function ($) {
    $.Method({}, "get_EndLine", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "EndLine");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["DC3691BC-F188-4b67-8338-326671E0F3F6"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* class Microsoft.JScript.VsaItem */ 

(function VsaItem$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.VsaItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"), $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCompiledType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOption", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsDirty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "codebase", $.String);

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"));

    $.Field({Static:false, Public:false}, "flag", $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemFlag"));

    $.Field({Static:false, Public:false}, "isDirty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDirty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ItemType", $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaHostObject */ 

(function VsaHostObject$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VsaItem"), 
      Name: "Microsoft.JScript.VsaHostObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"), $asm03.TypeRef("Microsoft.JScript.VsaScriptScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamedItemNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ExposeMembers", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Field", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.VsaScriptScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNamedItemNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReRun", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ExposeMembers", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_TypeString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "hostObject", $.Object);

    $.Field({Static:false, Public:false}, "exposeMembers", $.Boolean);

    $.Field({Static:false, Public:false}, "isVisible", $.Boolean);

    $.Field({Static:false, Public:false}, "exposed", $.Boolean);

    $.Field({Static:false, Public:false}, "compiled", $.Boolean);

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("Microsoft.JScript.VsaScriptScope"));

    $.Field({Static:false, Public:false}, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "typeString", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ExposeMembers", $.Boolean);

    $.Property({Static:false, Public:false}, "Field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false}, "Scope", $asm03.TypeRef("Microsoft.JScript.VsaScriptScope"));

    $.Property({Static:false, Public:true }, "TypeString", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaGlobalItem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaItems */ 

(function VsaItems$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.VsaItems", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateItem", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [
          $.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryObtainLock", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "engine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Field({Static:false, Public:false}, "staticCodeBlockCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItems"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.JScript.VsaNamedItemScope */ 

(function VsaNamedItemScope$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.VsaNamedItemScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndWrapMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $asm07.TypeRef("System.Reflection.IReflect"), $.Object, 
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDefaultThisObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.IActivationObject.GetLocalField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    )
      .Overrides($asm03.TypeRef("Microsoft.JScript.IActivationObject"), "GetLocalField");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "namedItem", $.Object);

    $.Field({Static:false, Public:false}, "namedItemWrappedMemberCache", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "reflectObj", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false}, "recursive", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IActivationObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaReference */ 

(function VsaReference$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VsaItem"), 
      Name: "Microsoft.JScript.VsaReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCompatibility", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Assembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String);

    $.Field({Static:false, Public:false}, "assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "loadFailed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AssemblyName", $.String);

    $.Property({Static:false, Public:false}, "Assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaReferenceItem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaScriptCode */ 

(function VsaScriptCode$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VsaItem"), 
      Name: "Microsoft.JScript.VsaScriptCode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"), $asm03.TypeRef("Microsoft.JScript.IVsaScriptScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddEventSource", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendSourceText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CodeDOM", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCompiledType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOption", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseNamedBreakPoint", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveEventSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RunCode", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceContext", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_StartColumn", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_StartLine", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "codeContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "binaryCode", $asm03.TypeRef("Microsoft.JScript.ScriptBlock"));

    $.Field({Static:false, Public:false}, "executed", $.Boolean);

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("Microsoft.JScript.VsaScriptScope"));

    $.Field({Static:false, Public:false}, "compiledBlock", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "compileToIL", $.Boolean);

    $.Field({Static:false, Public:false}, "optimize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CodeDOM", $asm0A.TypeRef("System.CodeDom.CodeObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Scope", $asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"));

    $.Property({Static:false, Public:true }, "SourceContext", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IVsaScriptCodeItem"), 
      /* 2 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaCodeItem"), 
      /* 3 */ $asm03.TypeRef("Microsoft.JScript.IDebugVsaScriptCodeItem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaScriptScope */ 

(function VsaScriptScope$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VsaItem"), 
      Name: "Microsoft.JScript.VsaScriptScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddItem", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDynamicItem", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Parent", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetItem", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetItemAtIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetItemCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveItemAtIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReRun", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetThisValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("Microsoft.JScript.GlobalScope"));

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean);

    $.Field({Static:false, Public:false}, "isClosed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Parent", $asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"));

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"), 
      /* 2 */ $asm03.TypeRef("Microsoft.JScript.IDebugScriptScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.VsaStaticCode */ 

(function VsaStaticCode$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.VsaItem"), 
      Name: "Microsoft.JScript.VsaStaticCode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), $.String, 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemFlag")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddEventSource", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendSourceText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CodeDOM", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCompiledType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PartiallyEvaluate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAssemblyAttributeLists", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Remove", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveEventSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceContext", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TranslateToIL", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "codeContext", $asm03.TypeRef("Microsoft.JScript.Context"));

    $.Field({Static:false, Public:false}, "compiledClass", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "block", $asm03.TypeRef("Microsoft.JScript.ScriptBlock"));

    $.Property({Static:false, Public:true , Virtual:true }, "CodeDOM", $asm0A.TypeRef("System.CodeDom.CodeObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SourceContext", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceText", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaCodeItem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.While */ 

(function While$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.While", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "condition", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.With */ 

(function With$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.AST"), 
      Name: "Microsoft.JScript.With", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Context"), $asm03.TypeRef("Microsoft.JScript.AST"), 
          $asm03.TypeRef("Microsoft.JScript.AST")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Evaluate", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "JScriptWith", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PartiallyEvaluate", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.AST"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TranslateToILInitializer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.Field({Static:false, Public:false}, "obj", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "block", $asm03.TypeRef("Microsoft.JScript.AST"));

    $.Field({Static:false, Public:false}, "completion", $asm03.TypeRef("Microsoft.JScript.Completion"));

    $.Field({Static:false, Public:false}, "enclosing_function", $asm03.TypeRef("Microsoft.JScript.FunctionScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.WithObject */ 

(function WithObject$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ScriptObject"), 
      Name: "Microsoft.JScript.WithObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.ScriptObject"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDefaultThisObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMemberValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.JScript.IActivationObject.GetLocalField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [$.String])
    )
      .Overrides($asm03.TypeRef("Microsoft.JScript.IActivationObject"), "GetLocalField");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetMemberValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "contained_object", $.Object);

    $.Field({Static:false, Public:false}, "isKnownAtCompileTime", $.Boolean);

    $.Field({Static:false, Public:false}, "isSuperType", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IActivationObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.WrappedNamespace */ 

(function WrappedNamespace$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.ActivationObject"), 
      Name: "Microsoft.JScript.WrappedNamespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String, $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Vsa.BaseVsaEngine */ 

(function BaseVsaEngine$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Vsa.BaseVsaEngine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoClose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoCompile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoLoadSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoSaveCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoSaveSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Error", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaException"), [$asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppDomain", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System._AppDomain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationBase", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Assembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Evidence", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Policy.Evidence"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_GenerateDebugInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompiled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRunning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItems"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RootMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RootNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Site", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCustomOption", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOption", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitNew", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCondition", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaEngine+Pre"), $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaEngine+Pre")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsValidIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidNamespaceName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadCompiledState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Preconditions", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaEngine+Pre"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetCompiledState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RevokeCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Run", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SaveCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SaveSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AppDomain", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System._AppDomain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationBase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Evidence", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Policy.Evidence"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_GenerateDebugInfo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDirty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_LCID", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RootMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RootNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Site", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCustomOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryObtainLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRootMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "applicationPath", $.String);

    $.Field({Static:false, Public:false}, "loadedAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "compiledRootNamespace", $.String);

    $.Field({Static:false, Public:false}, "engineSite", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"));

    $.Field({Static:false, Public:false}, "genDebugInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "haveCompiledState", $.Boolean);

    $.Field({Static:false, Public:false}, "failedCompilation", $.Boolean);

    $.Field({Static:false, Public:false}, "isClosed", $.Boolean);

    $.Field({Static:false, Public:false}, "isEngineCompiled", $.Boolean);

    $.Field({Static:false, Public:false}, "isDebugInfoSupported", $.Boolean);

    $.Field({Static:false, Public:false}, "isEngineDirty", $.Boolean);

    $.Field({Static:false, Public:false}, "isEngineInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isEngineRunning", $.Boolean);

    $.Field({Static:false, Public:false}, "vsaItems", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItems"));

    $.Field({Static:false, Public:false}, "scriptLanguage", $.String);

    $.Field({Static:false, Public:false}, "errorLocale", $.Int32);

    $.Field({Static:true , Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "engineName", $.String);

    $.Field({Static:false, Public:false}, "engineMoniker", $.String);

    $.Field({Static:false, Public:false}, "rootNamespace", $.String);

    $.Field({Static:false, Public:false}, "startupClass", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "startupInstance", $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaStartup"));

    $.Field({Static:false, Public:false}, "assemblyVersion", $.String);

    $.Field({Static:false, Public:false}, "executionEvidence", $asm07.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:false, Public:true }, "AppDomain", $asm07.TypeRef("System._AppDomain"));

    $.Property({Static:false, Public:true , Virtual:true }, "Evidence", $asm07.TypeRef("System.Security.Policy.Evidence"));

    $.Property({Static:false, Public:true }, "ApplicationBase", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true , Virtual:true }, "GenerateDebugInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompiled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDirty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsRunning", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItems"));

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LCID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RootMoniker", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "RootNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Site", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"));

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["F8932A50-9127-48B6-B115-2BFDC627CEE3"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* enum Microsoft.JScript.Vsa.BaseVsaEngine+Pre */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Vsa.BaseVsaEngine+Pre", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EngineNotClosed: 1, 
    SupportForDebug: 2, 
    EngineCompiled: 4, 
    EngineRunning: 8, 
    EngineNotRunning: 16, 
    RootMonikerSet: 32, 
    RootMonikerNotSet: 64, 
    RootNamespaceSet: 128, 
    SiteSet: 256, 
    SiteNotSet: 512, 
    EngineInitialised: 1024, 
    EngineNotInitialised: 2048, 
  }
);

/* class Microsoft.JScript.Vsa.BaseVsaStartup */ 

(function BaseVsaStartup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Vsa.BaseVsaStartup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSite", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Startup", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "site", $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; });

})();

/* class Microsoft.JScript.Vsa.VsaObsolete */ 

(function VsaObsolete$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.JScript.Vsa.VsaObsolete", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Description", $.String, "Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.JScript.Vsa.ResInfo */ 

(function ResInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.JScript.Vsa.ResInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Field({Static:false, Public:true }, "filename", $.String);

    $.Field({Static:false, Public:true }, "fullpath", $.String);

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "isPublic", $.Boolean);

    $.Field({Static:false, Public:true }, "isLinked", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; });

})();

/* enum Microsoft.JScript.Vsa.JSVsaItemType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Vsa.JSVsaItemType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Reference: 0, 
    AppGlobal: 1, 
    Code: 2, 
  }
);

/* enum Microsoft.JScript.Vsa.JSVsaItemFlag */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Vsa.JSVsaItemFlag", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Module: 1, 
    Class: 2, 
  }
);

/* interface Microsoft.JScript.Vsa.IJSVsaEngine */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaEngine", true, [], function ($) {
    $.Method({}, "get_Site", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")));
    $.Method({}, "set_Site", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")));
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Name", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_RootMoniker", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_RootMoniker", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_RootNamespace", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_RootNamespace", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_LCID", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_LCID", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_GenerateDebugInfo", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_GenerateDebugInfo", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Evidence", JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Policy.Evidence")));
    $.Method({}, "set_Evidence", JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Policy.Evidence")));
    $.Method({}, "get_Items", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItems")));
    $.Method({}, "get_IsDirty", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Language", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Version", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetOption", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "SetOption", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "Compile", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Run", JSIL.MethodSignature.Void);
    $.Method({}, "Reset", JSIL.MethodSignature.Void);
    $.Method({}, "Close", JSIL.MethodSignature.Void);
    $.Method({}, "get_IsRunning", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_IsCompiled", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "RevokeCache", JSIL.MethodSignature.Void);
    $.Method({}, "SaveSourceState", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite")));
    $.Method({}, "LoadSourceState", JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite")));
    $.Method({}, "SaveCompiledState", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])]));
    $.Method({}, "InitNew", JSIL.MethodSignature.Void);
    $.Method({}, "IsValidIdentifier", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "get_Assembly", JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly")));
    $.Property({}, "Site");
    $.Property({}, "Name");
    $.Property({}, "RootMoniker");
    $.Property({}, "RootNamespace");
    $.Property({}, "LCID");
    $.Property({}, "GenerateDebugInfo");
    $.Property({}, "Evidence");
    $.Property({}, "Items");
    $.Property({}, "IsDirty");
    $.Property({}, "Language");
    $.Property({}, "Version");
    $.Property({}, "IsRunning");
    $.Property({}, "IsCompiled");
    $.Property({}, "Assembly");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["8FA2C97B-47E4-4A31-A7F5-FF39D1195CD9"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaSite */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaSite", true, [], function ($) {
    $.Method({}, "GetCompiledState", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])]));
    $.Method({}, "OnCompilerError", new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")]));
    $.Method({}, "GetGlobalInstance", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "GetEventSourceInstance", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "Notify", new JSIL.MethodSignature(null, [$.String, $.Object]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["605A62B5-3BA8-49E0-A056-0A6A7A5846A3"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaPersistSite */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaPersistSite", true, [], function ($) {
    $.Method({}, "SaveElement", new JSIL.MethodSignature(null, [$.String, $.String]));
    $.Method({}, "LoadElement", new JSIL.MethodSignature($.String, [$.String]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["F901A1FF-8EBA-4C38-B6E0-E7E52606D325"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaError */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaError", true, [], function ($) {
    $.Method({}, "get_Line", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Severity", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Description", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_LineText", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_SourceItem", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")));
    $.Method({}, "get_EndColumn", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_StartColumn", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Number", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_SourceMoniker", JSIL.MethodSignature.Return($.String));
    $.Property({}, "Line");
    $.Property({}, "Severity");
    $.Property({}, "Description");
    $.Property({}, "LineText");
    $.Property({}, "SourceItem");
    $.Property({}, "EndColumn");
    $.Property({}, "StartColumn");
    $.Property({}, "Number");
    $.Property({}, "SourceMoniker");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["425EA439-6417-4F3E-BCC9-1AFAC79E3F66"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaItem", true, [], function ($) {
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Name", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ItemType", JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType")));
    $.Method({}, "get_IsDirty", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "GetOption", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "SetOption", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Property({}, "Name");
    $.Property({}, "ItemType");
    $.Property({}, "IsDirty");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1F2377AC-8A09-417B-89DC-D146769F0B45"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaItems */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaItems", true, [], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String]));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.Int32]));
    $.Method({}, "CreateItem", new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [
          $.String, $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemType"), 
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaItemFlag")
        ]));
    $.Method({}, "Remove", JSIL.MethodSignature.Action($.String));
    $.Method({}, "Remove", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "Count");
    $.Property({}, "Item");
    $.Property({}, "Item");
  }, [$asm07.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["172341E0-9B0D-43E6-9EFF-75E030A46461"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaReferenceItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaReferenceItem", true, [], function ($) {
    $.Method({}, "get_AssemblyName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_AssemblyName", JSIL.MethodSignature.Action($.String));
    $.Property({}, "AssemblyName");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["8EFD265B-677A-4B09-A471-E086787AA727"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaCodeItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaCodeItem", true, [], function ($) {
    $.Method({}, "get_SourceText", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SourceText", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_CodeDOM", JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeObject")));
    $.Method({}, "AppendSourceText", JSIL.MethodSignature.Action($.String));
    $.Method({}, "AddEventSource", new JSIL.MethodSignature(null, [$.String, $.String]));
    $.Method({}, "RemoveEventSource", JSIL.MethodSignature.Action($.String));
    $.Property({}, "SourceText");
    $.Property({}, "CodeDOM");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["528BBC87-CCDC-4F07-B29C-9B10575DEB2F"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* interface Microsoft.JScript.Vsa.IJSVsaGlobalItem */ 

JSIL.MakeInterface(
  "Microsoft.JScript.Vsa.IJSVsaGlobalItem", true, [], function ($) {
    $.Method({}, "set_TypeString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ExposeMembers", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_ExposeMembers", JSIL.MethodSignature.Action($.Boolean));
    $.Property({}, "TypeString");
    $.Property({}, "ExposeMembers");
  }, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["15B2CCE5-D1EA-4EB9-9E06-8729C72D631B"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

/* enum Microsoft.JScript.Vsa.JSVsaError */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Vsa.JSVsaError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AppDomainCannotBeSet: -2146226176, 
    AppDomainInvalid: -2146226175, 
    ApplicationBaseCannotBeSet: -2146226174, 
    ApplicationBaseInvalid: -2146226173, 
    AssemblyExpected: -2146226172, 
    AssemblyNameInvalid: -2146226171, 
    BadAssembly: -2146226170, 
    CachedAssemblyInvalid: -2146226169, 
    CallbackUnexpected: -2146226168, 
    CodeDOMNotAvailable: -2146226167, 
    CompiledStateNotFound: -2146226166, 
    DebugInfoNotSupported: -2146226165, 
    ElementNameInvalid: -2146226164, 
    ElementNotFound: -2146226163, 
    EngineBusy: -2146226162, 
    EngineCannotClose: -2146226161, 
    EngineCannotReset: -2146226160, 
    EngineClosed: -2146226159, 
    EngineEmpty: -2146226159, 
    EngineInitialized: -2146226157, 
    EngineNameInUse: -2146226156, 
    EngineNotCompiled: -2146226155, 
    EngineNotInitialized: -2146226154, 
    EngineNotRunning: -2146226153, 
    EngineRunning: -2146226152, 
    EventSourceInvalid: -2146226151, 
    EventSourceNameInUse: -2146226150, 
    EventSourceNameInvalid: -2146226149, 
    EventSourceNotFound: -2146226148, 
    EventSourceTypeInvalid: -2146226147, 
    GetCompiledStateFailed: -2146226146, 
    GlobalInstanceInvalid: -2146226145, 
    GlobalInstanceTypeInvalid: -2146226144, 
    InternalCompilerError: -2146226143, 
    ItemCannotBeRemoved: -2146226142, 
    ItemFlagNotSupported: -2146226141, 
    ItemNameInUse: -2146226140, 
    ItemNameInvalid: -2146226139, 
    ItemNotFound: -2146226138, 
    ItemTypeNotSupported: -2146226137, 
    LCIDNotSupported: -2146226136, 
    LoadElementFailed: -2146226135, 
    NotificationInvalid: -2146226134, 
    OptionInvalid: -2146226133, 
    OptionNotSupported: -2146226132, 
    RevokeFailed: -2146226131, 
    RootMonikerAlreadySet: -2146226130, 
    RootMonikerInUse: -2146226129, 
    RootMonikerInvalid: -2146226128, 
    RootMonikerNotSet: -2146226127, 
    RootMonikerProtocolInvalid: -2146226126, 
    RootNamespaceInvalid: -2146226125, 
    RootNamespaceNotSet: -2146226124, 
    SaveCompiledStateFailed: -2146226123, 
    SaveElementFailed: -2146226122, 
    SiteAlreadySet: -2146226121, 
    SiteInvalid: -2146226120, 
    SiteNotSet: -2146226119, 
    SourceItemNotAvailable: -2146226118, 
    SourceMonikerNotAvailable: -2146226117, 
    URLInvalid: -2146226116, 
    BrowserNotExist: -2146226115, 
    DebuggeeNotStarted: -2146226114, 
    EngineNameInvalid: -2146226113, 
    EngineNotExist: -2146226112, 
    FileFormatUnsupported: -2146226111, 
    FileTypeUnknown: -2146226110, 
    ItemCannotBeRenamed: -2146226109, 
    MissingSource: -2146226108, 
    NotInitCompleted: -2146226107, 
    NameTooLong: -2146226106, 
    ProcNameInUse: -2146226105, 
    ProcNameInvalid: -2146226104, 
    VsaServerDown: -2146226103, 
    MissingPdb: -2146226102, 
    NotClientSideAndNoUrl: -2146226101, 
    CannotAttachToWebServer: -2146226100, 
    EngineNameNotSet: -2146226099, 
    UnknownError: -2146225921, 
  }
);

/* class Microsoft.JScript.Vsa.JSVsaException */ 

(function JSVsaException$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "Microsoft.JScript.Vsa.JSVsaException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "ErrorCode", $asm03.TypeRef("Microsoft.JScript.Vsa.JSVsaError"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["064C47AC-C9DF-4FCD-9009-E9299D620018"]; })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* enum Microsoft.JScript.Vsa.LoaderAPI */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.JScript.Vsa.LoaderAPI", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LoadFrom: 0, 
    LoadFile: 1, 
    ReflectionOnlyLoadFrom: 2, 
  }
);

/* class Microsoft.JScript.Vsa.VsaEngine */ 

(function VsaEngine$Members () {
  var $, $thisType;

































































































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaEngine"), 
      Name: "Microsoft.JScript.Vsa.VsaEngine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChildAndValue", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPackage", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.PackageScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIdentifierForCLSCompliance", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTypeNameForCLSCompliance", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("Microsoft.JScript.Context")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaEngine"), [$asm07.TypeRef("System.AppDomain")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompileEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConnectEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAttribute", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngine", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngineAndGetGlobalScope", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.GlobalScope"), [$.Boolean, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngineAndGetGlobalScopeWithType", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.GlobalScope"), [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.RuntimeTypeHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.GlobalScope"), [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.RuntimeTypeHandle"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEngineForDebugger", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEngineWithType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.RuntimeTypeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEntryPointIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEntryPointIL", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.FieldInfo"), 
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateHostCallbackIL", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMain", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateShutdownIL", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStartupClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DisconnectEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoClose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoCompile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoLoadSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoSaveCompiledState", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DoSaveSourceState", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaPersistSite"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureReflectionOnlyModulesLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAssembly", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateRandomPEFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilerGlobals", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.CompilerGlobals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Globals", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.Globals"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JScriptModule", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Module"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LenientGlobalObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.LenientGlobalObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LibpathList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RuntimeDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scopes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeRefs", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.TypeReferences"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VsaModule", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Module"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClass", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.ClassScope"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCustomOption", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGlobalScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.IVsaScriptScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetItem", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetItemAtIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetItemCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMainScope", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.GlobalScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetModule", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Module"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOriginalArrayConstructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ArrayConstructor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOriginalObjectConstructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ObjectConstructor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOriginalRegExpConstructor", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.RegExpConstructor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetScannerInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.JScript.JSScanner"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStaticCodeBlockCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVersionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitVsaEngine", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaSite")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Interrupt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsValidIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidNamespaceName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadCompiledState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadCustomOptions", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadManagedResources", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadProjectVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadUserDefines", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadVsaEngineState", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadVsaItems", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.JScriptException")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopScriptObject", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PushScriptObject", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RegisterEventSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetCompiledState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Restart", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Run", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.AppDomain"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RunEmpty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveCustomOptions", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveManagedResources", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveProjectVersion", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveSourceForDebugging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveUserDefines", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveVsaEngineState", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveVsaItems", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ScriptObjectStackTop", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetCustomOption", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEnclosingContext", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.ScriptObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutputStream", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.JScript.IMessageReceiver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpCompilerEnvironment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToAddImplicitAssemblyReference", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRootMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "alwaysGenerateIL", $.Boolean);

    $.Field({Static:false, Public:false}, "autoRef", $.Boolean);

    $.Field({Static:false, Public:false}, "Defines", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "doCRS", $.Boolean);

    $.Field({Static:false, Public:false}, "doFast", $.Boolean);

    $.Field({Static:false, Public:false}, "doPrint", $.Boolean);

    $.Field({Static:false, Public:false}, "doSaveAfterCompile", $.Boolean);

    $.Field({Static:false, Public:false}, "doWarnAsError", $.Boolean);

    $.Field({Static:false, Public:false}, "nWarningLevel", $.Int32);

    $.Field({Static:false, Public:false}, "genStartupClass", $.Boolean);

    $.Field({Static:false, Public:false}, "isCLSCompliant", $.Boolean);

    $.Field({Static:false, Public:false}, "versionSafe", $.Boolean);

    $.Field({Static:false, Public:false}, "PEFileName", $.String);

    $.Field({Static:false, Public:false}, "PEFileKind", $asm07.TypeRef("System.Reflection.Emit.PEFileKinds"));

    $.Field({Static:false, Public:false}, "PEKindFlags", $asm07.TypeRef("System.Reflection.PortableExecutableKinds"));

    $.Field({Static:false, Public:false}, "PEMachineArchitecture", $asm07.TypeRef("System.Reflection.ImageFileMachine"));

    $.Field({Static:false, Public:false}, "ReferenceLoaderAPI", $asm03.TypeRef("Microsoft.JScript.Vsa.LoaderAPI"));

    $.Field({Static:false, Public:false}, "versionInfo", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "errorCultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "executeForJSEE", $.Boolean, false);

    $.Field({Static:false, Public:false}, "libpath", $.String);

    $.Field({Static:false, Public:false}, "libpathList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "isCompilerSet", $.Boolean);

    $.Field({Static:false, Public:false}, "globalScope", $asm03.TypeRef("Microsoft.JScript.VsaScriptScope"));

    $.Field({Static:false, Public:false}, "packages", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "scopes", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "implicitAssemblies", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "implicitAssemblyCache", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "win32resource", $.String);

    $.Field({Static:false, Public:false}, "managedResources", $asm07.TypeRef("System.Collections.ICollection"));

    $.Field({Static:false, Public:false}, "debugDirectory", $.String);

    $.Field({Static:false, Public:false}, "tempDirectory", $.String);

    $.Field({Static:false, Public:false}, "randomNumberGenerator", $asm07.TypeRef("System.Security.Cryptography.RNGCryptoServiceProvider"));

    $.Field({Static:false, Public:false}, "rawPE", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "rawPDB", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "classCounter", $.Int32);

    $.Field({Static:false, Public:false}, "cachedTypeLookups", $asm03.TypeRef("Microsoft.JScript.SimpleHashtable"));

    $.Field({Static:false, Public:false}, "runningThread", $asm07.TypeRef("System.Threading.Thread"));

    $.Field({Static:false, Public:false}, "compilerGlobals", $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"));

    $.Field({Static:false, Public:false}, "globals", $asm03.TypeRef("Microsoft.JScript.Globals"));

    $.Field({Static:false, Public:false}, "numberOfErrors", $.Int32);

    $.Field({Static:false, Public:false}, "runtimeDirectory", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "CurrentProjectVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "typenameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "engineVersion", $.String);

    $.Field({Static:false, Public:false}, "runtimeAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:true , Public:false}, "assemblyReferencesTable", $asm07.TypeRef("System.Collections.Hashtable"), null);

    $.Field({Static:true , Public:false}, "reflectionOnlyVsaModule", $asm07.TypeRef("System.Reflection.Module"), null);

    $.Field({Static:true , Public:false}, "reflectionOnlyJScriptModule", $asm07.TypeRef("System.Reflection.Module"), null);

    $.Field({Static:true , Public:false}, "_reflectionOnlyTypeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"));

    $.Field({Static:true , Public:false}, "exeEngine", $asm03.TypeRef("Microsoft.JScript.Vsa.VsaEngine"));

    $.Property({Static:false, Public:false}, "VsaModule", $asm07.TypeRef("System.Reflection.Module"));

    $.Property({Static:false, Public:false}, "JScriptModule", $asm07.TypeRef("System.Reflection.Module"));

    $.Property({Static:false, Public:false}, "CompilerGlobals", $asm03.TypeRef("Microsoft.JScript.CompilerGlobals"));

    $.Property({Static:false, Public:false}, "TypeRefs", $asm03.TypeRef("Microsoft.JScript.TypeReferences"));

    $.Property({Static:false, Public:false}, "ErrorCultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:false}, "Globals", $asm03.TypeRef("Microsoft.JScript.Globals"));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "LenientGlobalObject", $asm03.TypeRef("Microsoft.JScript.LenientGlobalObject"));

    $.Property({Static:false, Public:false}, "Scopes", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "RuntimeDirectory", $.String);

    $.Property({Static:false, Public:false}, "LibpathList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("Microsoft.JScript.IEngine2"), 
      /* 2 */ $asm03.TypeRef("Microsoft.JScript.IRedirectOutput")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["B71E484D-93ED-4b56-BFB9-CEED5134822B"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help."]; });

})();

/* class Microsoft.JScript.Vsa.DefaultVsaSite */ 

(function DefaultVsaSite$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.JScript.Vsa.BaseVsaSite"), 
      Name: "Microsoft.JScript.Vsa.DefaultVsaSite", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnCompilerError", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.JScript.Vsa.IJSVsaError")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

