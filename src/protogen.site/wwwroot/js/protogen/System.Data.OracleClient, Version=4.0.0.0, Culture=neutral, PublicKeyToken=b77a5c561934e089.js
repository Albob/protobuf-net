/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm12 = JSIL.DeclareAssembly("System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class Bid */ 

(function Bid$Members () {
  var $, $thisType;


















































































  JSIL.MakeStaticClass("Bid", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddMetaText", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DASSERT", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "deterministicStaticInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "doneEntryPoint", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "DTRACE", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DTRACE", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "get_AdvancedOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultCmdSpace", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ID", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoData", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScopeOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "getAppDomainFriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "getIdentity", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Module")])
    );

    $.ExternalMethod({Static:true , Public:false}, "getModulePath", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Module")])
    );

    $.ExternalMethod({Static:true , Public:false}, "initEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "internalInitialize", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOn", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("Bid+ApiGroup")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolerTrace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PutStr", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ScopeLeave", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetApiGroupBits", 
      new JSIL.MethodSignature($asm12.TypeRef("Bid+ApiGroup"), [$asm12.TypeRef("Bid+ApiGroup"), $asm12.TypeRef("Bid+ApiGroup")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.UInt32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.Int32, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.UInt32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.String, $.Int32, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.UInt32, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.UInt32, 
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.String, 
          $.Int32, $.IntPtr, 
          $.Int32, $.Int32, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.IntPtr, 
          $.IntPtr, $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.String, 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr, 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Int32, 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.Int32, $.IntPtr, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $.Int32, 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.IntPtr, $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $.String, 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+CRED"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.Int32, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceBin", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt16
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceBinEx", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEx", 
      new JSIL.MethodSignature(null, [$.UInt32, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEx", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.String, 
          $.String
        ])
    );

    $.Field({Static:true , Public:false}, "__noData", $.IntPtr);

    $.Field({Static:true , Public:false}, "_setBitsLock", $.Object);

    $.Field({Static:true , Public:false}, "modID", $.IntPtr);

    $.Field({Static:true , Public:false}, "modFlags", $asm12.TypeRef("Bid+ApiGroup"));

    $.Field({Static:true , Public:false}, "modIdentity", $.String);

    $.Field({Static:true , Public:false}, "ctrlCallback", $asm12.TypeRef("Bid+CtrlCB"));

    $.Field({Static:true , Public:false}, "cookieObject", $asm12.TypeRef("Bid+BindingCookie"));

    $.Field({Static:true , Public:false}, "hCookie", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:true , Public:false}, "__defaultCmdSpace", $.IntPtr);

    $.Constant({Static:true , Public:false}, "BidVer", $.Int32, 9210);

    $.Constant({Static:true , Public:false}, "configFlags", $.UInt32, 3489660928);

    $.Field({Static:true , Public:false}, "ai", $asm12.TypeRef("Bid+AutoInit"));

    $.Constant({Static:true , Public:false}, "dllName", $.String, "System.Data.OracleClient.dll");


    function Bid__cctor () {
      $thisType.__noData = new $asm07.System.IntPtr();
      $thisType.modID = new $asm07.System.IntPtr();
      $thisType.hCookie = new $asm07.System.Runtime.InteropServices.GCHandle();
      $thisType.__defaultCmdSpace = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Bid__cctor
    );

    $.Property({Static:true , Public:false}, "TraceOn", $.Boolean);

    $.Property({Static:true , Public:false}, "ScopeOn", $.Boolean);

    $.Property({Static:true , Public:false}, "AdvancedOn", $.Boolean);

    $.Property({Static:true , Public:false}, "NoData", $.IntPtr);

    $.Property({Static:true , Public:false}, "ID", $.IntPtr);

    $.Property({Static:true , Public:false}, "IsInitialized", $.Boolean);

    $.Property({Static:true , Public:false}, "DefaultCmdSpace", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* enum Bid+ApiGroup */ 

JSIL.MakeEnum(
  {
    FullName: "Bid+ApiGroup", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Off: 0, 
    Default: 1, 
    Trace: 2, 
    Scope: 4, 
    Perf: 8, 
    Resource: 16, 
    Memory: 32, 
    StatusOk: 64, 
    Advanced: 128, 
    MaskBid: 4095, 
    Pooling: 4096, 
    Dependency: 8192, 
    StateDump: 16384, 
    Correlation: 262144, 
    MaskUser: 4294963200, 
    MaskAll: 4294967295, 
  }
);

/* delegate Bid+CtrlCB */ 

JSIL.MakeDelegate("Bid+CtrlCB", false, [], 
  new JSIL.MethodSignature($asm12.TypeRef("Bid+ApiGroup"), [$asm12.TypeRef("Bid+ApiGroup"), $asm12.TypeRef("Bid+ApiGroup")]));

/* class Bid+BindingCookie */ 

(function BindingCookie$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Bid+BindingCookie", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Invalidate", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "_data", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Bid+CtlCmd */ 

JSIL.MakeEnum(
  {
    FullName: "Bid+CtlCmd", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Reverse: 1, 
    Unicode: 2, 
    DcsBase: 1073741824, 
    CmdSpaceCount: 1073741824, 
    CmdSpaceEnum: 1073741828, 
    CmdSpaceQuery: 1073741832, 
    GetEventID: 1073741846, 
    ParseString: 1073741850, 
    AddExtension: 1073741854, 
    AddMetaText: 1073741858, 
    AddResHandle: 1073741862, 
    Shutdown: 1073741866, 
    LastItem: 1073741867, 
    DcsMax: 1610612732, 
    CplBase: 1610612736, 
    CplMax: 2147483644, 
  }
);

/* struct Bid+BIDEXTINFO */ 

(function BIDEXTINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Bid+BIDEXTINFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.String, 
          $.String, $.IntPtr
        ])
    );

    $.Field({Static:false, Public:false}, "hModule", $.IntPtr);

    $.Field({Static:false, Public:false}, "DomainName", $.String);

    $.Field({Static:false, Public:false}, "Reserved2", $.Int32);

    $.Field({Static:false, Public:false}, "Reserved", $.Int32);

    $.Field({Static:false, Public:false}, "ModulePath", $.String);

    $.Field({Static:false, Public:false}, "ModulePathA", $.IntPtr);

    $.Field({Static:false, Public:false}, "pBindCookie", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Bid+AutoInit */ 

(function AutoInit$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Bid+AutoInit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_bInitialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Bid+NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;




























































  JSIL.MakeStaticClass("Bid+NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "AddMetaText", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("Bid+CtlCmd"), $.IntPtr, 
          $.String, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidCtlProc", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DllBidEntryPoint", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $.String, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Bid+ApiGroup")]), $asm12.TypeRef("Bid+CtrlCB"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Bid+BIDEXTINFO")]), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DllBidEntryPoint", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("Bid+ApiGroup")]), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "DllBidFinalize", 
      JSIL.MethodSignature.Void, 
      {
        Module: "System.Data.OracleClient.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "DllBidInitialize", 
      JSIL.MethodSignature.Void, 
      {
        Module: "System.Data.OracleClient.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "PutStr", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidPutStrW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeEnter", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.String, $.Int32, 
          $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidScopeEnterCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ScopeLeave", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        EntryPoint: "DllBidScopeLeave", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.UInt32, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.Int32, 
          $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.UInt32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.String, 
          $.Int32, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.String, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.String, 
          $.Int32, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.UInt32, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.UInt32, $.IntPtr, 
          $.Int32, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.String, $.Int32, 
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.String, $.IntPtr, 
          $.String, $.UInt32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.String, $.IntPtr, 
          $.IntPtr, $.UInt32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.String, $.IntPtr, 
          $.Int32, $.UInt32, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.Int32, $.UInt32, 
          $.String, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.IntPtr, $.UInt32, 
          $.String, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.Int32, $.Int32, 
          $.String, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.String, 
          $.String, $.UInt32, 
          $.String, $.IntPtr
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.String, 
          $.Int32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "TraceBin", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.UIntPtr, 
          $.UIntPtr, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32
        ]), 
      {
        Module: "System.Data.OracleClient.dll", 
        CharSet: 'unicode',
        EntryPoint: "DllBidTraceCW", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class BidIdentityAttribute */ 

(function BidIdentityAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidIdentityAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdentityString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_identity", $.String);

    $.Property({Static:false, Public:false}, "IdentityString", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Module]; });

})();

/* class BidMetaTextAttribute */ 

(function BidMetaTextAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidMetaTextAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_metaText", $.String);

    $.Property({Static:false, Public:false}, "MetaText", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Module]; });

})();

/* class BidMethodAttribute */ 

(function BidMethodAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidMethodAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS"]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class BidArgumentTypeAttribute */ 

(function BidArgumentTypeAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "BidArgumentTypeAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "ArgumentType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS"]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Method", "Parameter")]; });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data");
JSIL.DeclareNamespace("System.Data.ProviderBase");
/* class System.Data.ProviderBase.FieldNameLookup */ 

(function FieldNameLookup$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.FieldNameLookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.IDataRecord"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLookup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LinearIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm07.TypeRef("System.Globalization.CompareOptions")])
    );

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_fieldNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_compareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:false, Public:false}, "_defaultLocaleID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbBuffer */ 

(function DbBuffer$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.ProviderBase.DbBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringUni", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringUni", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIntPtr", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StructureToPtr", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCheck", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIntPtr", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr])
    );

    $.Constant({Static:true , Public:false}, "LMEM_FIXED", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "LMEM_MOVEABLE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "LMEM_ZEROINIT", $.Int32, 64);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bufferLength", $.Int32);

    $.Field({Static:false, Public:false}, "_baseOffset", $.Int32);

    $.Property({Static:false, Public:false}, "BaseOffset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionInternal */ 

(function DbConnectionInternal$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionInternal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ConnectionState"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ActivateConnection", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupConnectionOnTransactionCompletion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CleanupTransactionOnCompletion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReferenceCollection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeactivateConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DelegatedTransactionEnded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachTransaction", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoNotPoolThisConnection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoomThisConnection", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowSetConnectionString", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBePooled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistedTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConnectionDoomed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmancipated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsNonPoolableTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsTransactionRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTxRootWaitingForTxEnd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextPooledObject", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Owner", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pool", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadyToPrepareTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceCollection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersionNormalized", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldHidePassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UnbindOnTransactionCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeNonPooledObject", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakePooledConnection", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostPop", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrePush", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EnlistedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NextPooledObject", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInStasis", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TerminateStasis", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionCompletedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm27.TypeRef("System.Transactions.TransactionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionOutcomeEnlist", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateChangeClosed", $asm11.TypeRef("System.Data.StateChangeEventArgs"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateChangeOpen", $asm11.TypeRef("System.Data.StateChangeEventArgs"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_allowSetConnectionString", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hidePassword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_state", $asm11.TypeRef("System.Data.ConnectionState"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_owningObject", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_nextPooledObject", $.Type);

    $.Field({Static:false, Public:false}, "_connectionPool", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Field({Static:false, Public:false}, "_performanceCounters", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Field({Static:false, Public:false}, "_referenceCollection", $asm12.TypeRef("System.Data.ProviderBase.DbReferenceCollection"));

    $.Field({Static:false, Public:false}, "_pooledCount", $.Int32);

    $.Field({Static:false, Public:false}, "_connectionIsDoomed", $.Boolean);

    $.Field({Static:false, Public:false}, "_cannotBePooled", $.Boolean);

    $.Field({Static:false, Public:false}, "_isInStasis", $.Boolean);

    $.Field({Static:false, Public:false}, "_createTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_enlistedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "_enlistedTransactionOriginal", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "NextPooledObject", $.Type);

    $.Property({Static:false, Public:false}, "AllowSetConnectionString", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBePooled", $.Boolean);

    $.Property({Static:false, Public:false}, "EnlistedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:false}, "IsTxRootWaitingForTxEnd", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "UnbindOnTransactionCompletion", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsNonPoolableTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsTransactionRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConnectionDoomed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmancipated", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Owner", $.Object);

    $.Property({Static:false, Public:false}, "Pool", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:false, Virtual:true }, "ReadyToPrepareTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferenceCollection", $asm12.TypeRef("System.Data.ProviderBase.DbReferenceCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersionNormalized", $.String);

    $.Property({Static:false, Public:true }, "ShouldHidePassword", $.Boolean);

    $.Property({Static:false, Public:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosed */ 

(function DbConnectionClosed$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.ProviderBase.DbConnectionClosed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.ConnectionState"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionBusy */ 

(function DbConnectionBusy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedBusy */ 

(function DbConnectionClosedBusy$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionOpenBusy */ 

(function DbConnectionOpenBusy$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionOpenBusy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedConnecting */ 

(function DbConnectionClosedConnecting$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionBusy"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedConnecting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedNeverOpened */ 

(function DbConnectionClosedNeverOpened$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedNeverOpened", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened */ 

(function DbConnectionClosedPreviouslyOpened$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionClosed"), 
      Name: "System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingletonInstance", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionFactory */ 

(function DbConnectionFactory$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearAllPools", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearPool", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm12.TypeRef("System.Data.Common.DbConnectionOptions"), $.Object, 
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupProviderInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"), [$asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolProviderInfo", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"), [$asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNonPooledConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePooledConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), 
          $asm12.TypeRef("System.Data.Common.DbConnectionOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePruningTimer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Timer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [
          $.String, $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PruneConnectionPoolGroups", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolForRelease", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolGroupForRelease", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Field({Static:false, Public:false}, "_connectionPoolGroups", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolsToRelease", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolGroupsToRelease", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_performanceCounters", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pruningTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Constant({Static:true , Public:false}, "PruningDueTime", $.Int32, 240000);

    $.Constant({Static:true , Public:false}, "PruningPeriod", $.Int32, 30000);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool */ 

(function DbConnectionPool$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), 
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCleanupTimer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Timer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeactivateObject", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DestroyObject", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrorCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorOccurred", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTransactionAffinity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRunning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedToReplenish", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PerformanceCounters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroupOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseDeactivateQueue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseLoadBalancing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsingIntegrateSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromGeneralPool", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromTransactedPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Transaction")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PoolCreateRequest", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessDeactivateQueue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PutNewObject", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PutObject", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutObjectFromTransactedPool", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QueuePoolCreateRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReclaimEmancipatedObjects", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Startup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UserCreateRequest", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.Constant({Static:true , Public:false}, "PoolerTracePoints", $asm12.TypeRef("Bid+ApiGroup"), 4096);

    $.Constant({Static:true , Public:false}, "MAX_Q_SIZE", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "SEMAPHORE_HANDLE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ERROR_HANDLE", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CREATION_HANDLE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "BOGUS_HANDLE", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "WAIT_OBJECT_0", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "WAIT_TIMEOUT", $.Int32, 258);

    $.Constant({Static:true , Public:false}, "WAIT_ABANDONED", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "WAIT_FAILED", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "ERROR_WAIT_DEFAULT", $.Int32, 5000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_random", $asm07.TypeRef("System.Random"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cleanupWait", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_identity", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionFactory", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionPoolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionPoolGroupOptions", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Field({Static:false, Public:false}, "_connectionPoolProviderInfo", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"));

    $.Field({Static:false, Public:false}, "_state", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+State"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stackOld", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+DbConnectionInternalListStack"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stackNew", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+DbConnectionInternalListStack"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolCreateRequest", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_deactivateQueue", $asm07.TypeRef("System.Collections.Queue"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_deactivateCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:false, Public:false}, "_waitCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_waitHandles", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles"));

    $.Field({Static:false, Public:false}, "_resError", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "_errorOccurred", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_errorWait", $.Int32);

    $.Field({Static:false, Public:false}, "_errorTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "_cleanupTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transactedConnectionPool", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]));

    $.Field({Static:false, Public:false}, "_totalObjects", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "CreationTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ErrorOccurred", $.Boolean);

    $.Property({Static:false, Public:false}, "HasTransactionAffinity", $.Boolean);

    $.Property({Static:false, Public:false}, "LoadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "NeedToReplenish", $.Boolean);

    $.Property({Static:false, Public:false}, "Identity", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolIdentity"));

    $.Property({Static:false, Public:false}, "IsRunning", $.Boolean);

    $.Property({Static:false, Public:false}, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "PerformanceCounters", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "PoolGroupOptions", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolProviderInfo"));

    $.Property({Static:false, Public:false}, "UseDeactivateQueue", $.Boolean);

    $.Property({Static:false, Public:false}, "UseLoadBalancing", $.Boolean);

    $.Property({Static:false, Public:false}, "UsingIntegrateSecurity", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.ProviderBase.DbConnectionPool+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.ProviderBase.DbConnectionPool+State", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initializing: 0, 
    Running: 1, 
    ShuttingDown: 2, 
  }
);

/* class System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList */ 

(function TransactedConnectionList$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")]), 
      Name: "System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_transaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool */ 

(function TransactedConnectionPool$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+TransactedConnectionPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pool", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransactedObject", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutTransactedObject", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionEnded", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Field({Static:false, Public:false}, "_transactedCxns", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm27.TypeRef("System.Transactions.Transaction"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool+TransactedConnectionList")]));

    $.Field({Static:false, Public:false}, "_pool", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "Pool", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles */ 

(function PoolWaitHandles$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+PoolWaitHandles", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_CreationSemaphore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Threading.Semaphore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolSemaphore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Threading.Semaphore"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_errorEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_errorHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_releaseFlags", $.Int32);

    $.Property({Static:false, Public:false}, "CreationHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));

    $.Property({Static:false, Public:false}, "CreationSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.Property({Static:false, Public:false}, "ErrorEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:false}, "PoolSemaphore", $asm0A.TypeRef("System.Threading.Semaphore"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPool+DbConnectionInternalListStack */ 

(function DbConnectionInternalListStack$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPool+DbConnectionInternalListStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronizedPop", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SynchronizedPush", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.Field({Static:false, Public:false}, "_stack", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters */ 

(function DbConnectionPoolCounters$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "ExceptionEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ExitEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstanceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "UnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Constant({Static:true , Public:false}, "CounterInstanceNameMaxLength", $.Int32, 127);

    $.Field({Static:false, Public:false, ReadOnly:true }, "HardConnectsPerSecond", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "HardDisconnectsPerSecond", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SoftConnectsPerSecond", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "SoftDisconnectsPerSecond", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfNonPooledConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfPooledConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnectionPoolGroups", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPoolGroups", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnectionPools", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPools", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfActiveConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfFreeConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfStasisConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "NumberOfReclaimedConnections", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters+Counter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters+CreationData */ 

(function CreationData$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.ProviderBase.DbConnectionPoolCounters+CreationData", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "HardConnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "HardDisconnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SoftConnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SoftDisconnectsPerSecond", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfNonPooledConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfPooledConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnectionPoolGroups", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPoolGroups", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnectionPools", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfInactiveConnectionPools", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfActiveConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfFreeConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfStasisConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberOfReclaimedConnections", $asm0A.TypeRef("System.Diagnostics.CounterCreationData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCounters+Counter */ 

(function Counter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCounters+Counter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm0A.TypeRef("System.Diagnostics.PerformanceCounterType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Decrement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "Increment", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_instance", $asm0A.TypeRef("System.Diagnostics.PerformanceCounter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolCountersNoCounters */ 

(function DbConnectionPoolCountersNoCounters$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolCountersNoCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroup */ 

(function DbConnectionPoolGroup$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.Common.DbConnectionOptions"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearInternal", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetaDataFactory", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroupOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderInfo", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConnectionPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkPoolGroupAsActive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Prune", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MetaDataFactory", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProviderInfo", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_connectionOptions", $asm12.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolGroupOptions", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Field({Static:false, Public:false}, "_poolCollection", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "_poolCount", $.Int32);

    $.Field({Static:false, Public:false}, "_state", $.Int32);

    $.Field({Static:false, Public:false}, "_providerInfo", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"));

    $.Field({Static:false, Public:false}, "_metaDataFactory", $asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Constant({Static:true , Public:false}, "PoolGroupStateActive", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PoolGroupStateIdle", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PoolGroupStateDisabled", $.Int32, 4);

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm12.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "ProviderInfo", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo"));

    $.Property({Static:false, Public:false}, "IsDisabled", $.Boolean);

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:false}, "PoolGroupOptions", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"));

    $.Property({Static:false, Public:false}, "MetaDataFactory", $asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolIdentity */ 

(function DbConnectionPoolIdentity$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolIdentity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWellKnownSid", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Principal.WellKnownSidType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentWindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWindowsIdentityToken", 
      new JSIL.MethodSignature($.IntPtr, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntegratedSecurityError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:false}, "E_NotImpersonationToken", $.Int32, -2147023587);

    $.Constant({Static:true , Public:false}, "Win32_CheckTokenMembership", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Win32_GetTokenInformation_1", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "Win32_GetTokenInformation_2", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "Win32_ConvertSidToStringSidW", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "Win32_CreateWellKnownSid", $.Int32, 5);

    $.Field({Static:true , Public:true , ReadOnly:true }, "NoIdentity", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NetworkSid", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sidString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isRestricted", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isNetwork", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRestricted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroupOptions */ 

(function DbConnectionPoolGroupOptions$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroupOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasTransactionAffinity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PoolByIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseDeactivateQueue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseLoadBalancing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_poolByIdentity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creationTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_loadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasTransactionAffinity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_useDeactivateQueue", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_useLoadBalancing", $.Boolean);

    $.Property({Static:false, Public:true }, "CreationTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "HasTransactionAffinity", $.Boolean);

    $.Property({Static:false, Public:true }, "LoadBalanceTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:true }, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:true }, "PoolByIdentity", $.Boolean);

    $.Property({Static:false, Public:true }, "UseDeactivateQueue", $.Boolean);

    $.Property({Static:false, Public:true }, "UseLoadBalancing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo */ 

(function DbConnectionPoolGroupProviderInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.Field({Static:false, Public:false}, "_poolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbConnectionPoolProviderInfo */ 

(function DbConnectionPoolProviderInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbConnectionPoolProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbMetaDataFactory */ 

(function DbMetaDataFactory$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbMetaDataFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneAndFilterCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteCommand", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.DataRow"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterColumns", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.DataColumn")]), [
          $asm11.TypeRef("System.Data.DataTable"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.DataColumnCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMetaDataCollectionRow", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataRow"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixUpVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeThisColumn", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataColumn"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDataSetFromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportedByCurrentVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.DataRow")])
    );

    $.Field({Static:false, Public:false}, "_metaDataCollectionsDataSet", $asm11.TypeRef("System.Data.DataSet"));

    $.Field({Static:false, Public:false}, "_normalizedServerVersion", $.String);

    $.Field({Static:false, Public:false}, "_serverVersionString", $.String);

    $.Constant({Static:true , Public:false}, "_collectionName", $.String, "CollectionName");

    $.Constant({Static:true , Public:false}, "_populationMechanism", $.String, "PopulationMechanism");

    $.Constant({Static:true , Public:false}, "_populationString", $.String, "PopulationString");

    $.Constant({Static:true , Public:false}, "_maximumVersion", $.String, "MaximumVersion");

    $.Constant({Static:true , Public:false}, "_minimumVersion", $.String, "MinimumVersion");

    $.Constant({Static:true , Public:false}, "_dataSourceProductVersionNormalized", $.String, "DataSourceProductVersionNormalized");

    $.Constant({Static:true , Public:false}, "_dataSourceProductVersion", $.String, "DataSourceProductVersion");

    $.Constant({Static:true , Public:false}, "_restrictionDefault", $.String, "RestrictionDefault");

    $.Constant({Static:true , Public:false}, "_restrictionNumber", $.String, "RestrictionNumber");

    $.Constant({Static:true , Public:false}, "_numberOfRestrictions", $.String, "NumberOfRestrictions");

    $.Constant({Static:true , Public:false}, "_restrictionName", $.String, "RestrictionName");

    $.Constant({Static:true , Public:false}, "_parameterName", $.String, "ParameterName");

    $.Constant({Static:true , Public:false}, "_dataTable", $.String, "DataTable");

    $.Constant({Static:true , Public:false}, "_sqlCommand", $.String, "SQLCommand");

    $.Constant({Static:true , Public:false}, "_prepareCollection", $.String, "PrepareCollection");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.ProviderBase.DbReferenceCollection */ 

(function DbReferenceCollection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.ProviderBase.DbReferenceCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Notify", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.Common");
/* class System.Data.Common.ADP */ 

(function ADP$Members () {
  var $, $thisType;











































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.ADP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbigousCollectionName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BadBindValueType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BadOracleClientImageFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BadOracleClientVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferExceeded", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotDeriveOverloaded", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotOpenLobWithDifferentMode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OracleLobOpenMode"), $asm12.TypeRef("System.Data.OracleClient.OracleLobOpenMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangeDatabaseNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClosedConnectionError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ClosedDataReaderError", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionIndexInt32", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionIndexString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionInvalidType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionNameIsNotUnique", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionNullValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionRemoveInvalidObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CommandTextRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInsensitiveInvariant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigUnableToLoadXmlMetaDataFile", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Configuration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConfigWrongNumberOfValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Configuration.ConfigurationException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionAlreadyOpen", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionStateMsg", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionStringSyntax", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CouldNotCreateEnvironment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataIsNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DataReaderClosed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DataReaderNoData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DataTableDoesNotExist", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveParametersNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DistribTxRequiresOracle9i", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DistribTxRequiresOracleServicesForMTS", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DstCompare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBuilder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$asm07.TypeRef("System.MulticastDelegate")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOletxTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IDtcTransaction"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlStreamFromValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdentifierIsNotQuoted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfDataSourceInformationRows", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InputRefCursorNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalConnectionError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.Common.ADP+ConnectionError")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.Common.ADP+InternalErrorCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntPtrOffset", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCommandType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.CommandType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidConnectionOptionValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataDirectory", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataLength", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataRowVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DataRowVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDataTypeForValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDbType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.DbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidDestinationBufferIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidEnumerationValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeyname", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidKeyRestrictionBehavior", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.KeyRestrictionBehavior")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLobType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMinMaxPoolSizeValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOffsetValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOracleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterDirection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidParameterType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm11.TypeRef("System.Data.IDataParameterCollection"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidPermissionState", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSeekOrigin", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSizeValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSourceBufferIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidSourceOffset", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUpdateRowSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm11.TypeRef("System.Data.UpdateRowSource")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXMLBadVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXmlInvalidValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidXmlMissingColumn", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCatchableExceptionType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.IDataParameter"), $asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.ParameterDirection"), $asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmptyArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeywordNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LobAmountExceeded", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LobAmountMustBeEven", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LobPositionMustBeEven", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LobWriteInvalidOnNull", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LobWriteRequiresTransaction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotImplemented", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingDataSourceInformationColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingRestrictionColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MissingRestrictionRow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MonthOutOfRange", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBePositive", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoColumns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoCommandText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoConnectionString", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoLocalTransactionInDistributedContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoOptimizedDirectTableAccess", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoParallelTransactions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAPermissionElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectDisposed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenConnectionPropertySet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenConnectionRequired", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm11.TypeRef("System.Data.ConnectionState")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationResultedInOverflow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OracleError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "OracleError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Overflow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterConversionFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm11.TypeRef("System.Data.IDataParameterCollection"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersIsNotParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.IDataParameterCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersIsParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.Type"), $asm11.TypeRef("System.Data.IDataParameterCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterSizeIsMissing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterSizeIsTooLarge", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersMappingIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $asm11.TypeRef("System.Data.IDataParameterCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParametersSourceIndex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm11.TypeRef("System.Data.IDataParameterCollection"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PermissionTypeMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PooledOpenTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProviderException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryFailed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadOnlyLob", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SeekBeyondEnd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Simple", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SrcCompare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorExpectedCommaAfterColumn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorExpectedCommaAfterTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorExpectedIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorExpectedNextPart", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorMissingParenthesis", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SyntaxErrorTooManyNameParts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TooManyRestrictions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionAsReturnValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionForCapture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionWithoutRethrow", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionCompleted", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionConnectionMismatch", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionPresent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TransactionRequired", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedCollection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedPopulationMechanism", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownDataTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedIsolationLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedOracleDateTimeBinding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteByteForBinaryLobsOnly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.Constant({Static:true , Public:false}, "Parameter", $.String, "Parameter");

    $.Constant({Static:true , Public:false}, "ParameterName", $.String, "ParameterName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsWindowsNT", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IsPlatformNT5", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StackOverflowType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.StackOverflowException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OutOfMemoryType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.OutOfMemoryException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ThreadAbortType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Threading.ThreadAbortException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullReferenceType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.NullReferenceException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "AccessViolationType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.AccessViolationException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SecurityType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Security.SecurityException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ArgumentNullExceptionType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.ArgumentNullException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "FormatExceptionType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.FormatException.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OverflowExceptionType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.OverflowException.__Type__;
      });

    $.Constant({Static:true , Public:false}, "ConnectionString", $.String, "ConnectionString");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullString", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "CharSize", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 0);
      });

    $.Constant({Static:true , Public:false}, "compareOptions", $asm07.TypeRef("System.Globalization.CompareOptions"), 25);

    $.Field({Static:true , Public:false, ReadOnly:true }, "PtrSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "StrEmpty", $.String, "");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NullHandleRef", $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"));


    function ADP__cctor () {
      $thisType.NullHandleRef = new $asm07.System.Runtime.InteropServices.HandleRef();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ADP__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.ADP+ConnectionError */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.ADP+ConnectionError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BeginGetConnectionReturnsNull: 0, 
    GetConnectionReturnsNull: 1, 
    ConnectionOptionsMissing: 2, 
    CouldNotSwitchToClosedPreviouslyOpenedState: 3, 
  }
);

/* enum System.Data.Common.ADP+InternalErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.ADP+InternalErrorCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UnpooledObjectHasOwner: 0, 
    UnpooledObjectHasWrongOwner: 1, 
    PushingObjectSecondTime: 2, 
    PooledObjectHasOwner: 3, 
    PooledObjectInPoolMoreThanOnce: 4, 
    CreateObjectReturnedNull: 5, 
    NewObjectCannotBePooled: 6, 
    NonPooledObjectUsedMoreThanOnce: 7, 
    AttemptingToPoolOnRestrictedToken: 8, 
    ConvertSidToStringSidWReturnedNull: 10, 
    AttemptingToConstructReferenceCollectionOnStaticObject: 12, 
    AttemptingToEnlistTwice: 13, 
    CreateReferenceCollectionReturnedNull: 14, 
    PooledObjectWithoutPool: 15, 
    UnexpectedWaitAnyResult: 16, 
    NameValuePairNext: 20, 
    InvalidParserState1: 21, 
    InvalidParserState2: 22, 
    InvalidBuffer: 30, 
    InvalidLongBuffer: 31, 
    InvalidNumberOfRows: 32, 
  }
);

/* class System.Data.Common.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.SafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentProcessId", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LocalAlloc", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32, $.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "LocalFree", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "ReleaseSemaphore", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "WaitForMultipleObjectsEx", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.IntPtr, 
          $.Boolean, $.UInt32, 
          $.Boolean
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "WaitForSingleObjectEx", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.UInt32, 
          $.Boolean
        ]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Data.Common.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;















































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CheckTokenMembership", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ConvertSidToStringSidW", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateWellKnownSid", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetTokenInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "IsTokenRestricted", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "lstrlenA", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "lstrlenW", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.UInt32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, 
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIBindByName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.UInt32, 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null
          , 
          {
            NativeType: "U2"
          }, null
          , null
          , null
          , null
          , null
          , 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCICharSetToUnicode", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDateTimeFromArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.Byte, $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Byte
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDateTimeGetTimeZoneOffset", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.SByte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.SByte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDateTimeToArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.Byte
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDefineArrayOfStruct", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDefineByPos", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.IntPtr, $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U2"
          }, null
          , null
          , null
          , 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDefineDynamic", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+Callback+OCICallbackDefine")
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDescriptorAlloc", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIDescriptorFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIEnvCreate", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIEnvNlsCreate", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.UInt16, $.UInt16
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , null
          , null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIErrorGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.UInt32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIHandleAlloc", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; })
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIHandleFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobAppend", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobClose", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobCopy2", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.UInt64, $.UInt64, 
          $.UInt64
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobCreateTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt16, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM"), $asm12.TypeRef("System.Data.OracleClient.OCI+LOB_TYPE"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DURATION")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U1"
          }, 
          {
            NativeType: "U1"
          }, null
          , 
          {
            NativeType: "U2"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobErase", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobFileExists", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobFileGetName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt16])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobFileSetName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt16, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt16
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobFreeTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobGetChunkSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobGetLength", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobIsOpen", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobIsTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobLoadFromFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobOpen", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Byte
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.IntPtr, $.UInt16, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U1"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobTrim", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCILobWrite", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $.Byte, 
          $.IntPtr, $.IntPtr, 
          $.UInt16, $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U1"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberAbs", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberAdd", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberArcCos", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberArcSin", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberArcTan", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberArcTan2", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberCeil", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberCmp", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberCos", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberDiv", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberExp", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFloor", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromReal", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Double]), 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberFromText", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.String, 
          $.UInt32, $.String, 
          $.UInt32, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }, null
          , 
          {
            NativeType: "LPStr"
          }, null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberHypCos", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberHypSin", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberHypTan", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberIntPower", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberIsInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberLn", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberLog", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberMod", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberMul", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberNeg", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberPower", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberRound", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberShift", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberSign", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberSin", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberSqrt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberSub", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberTan", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToInt", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+SIGN"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToReal", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Double])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberToText", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $.Int32, 
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }, null
          , null
          , null
          , null
          , 
          {
            NativeType: "Array", 
            Out: true
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCINumberTrunc", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIParamGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.UInt32
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIRowidToChar", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIServerAttach", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIServerDetach", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIServerVersion", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.UInt32, 
          $.Byte
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U1"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCISessionBegin", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+CRED"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }, 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCISessionEnd", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIStmtExecute", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.UInt32, $.IntPtr, 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIStmtFetch", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+FETCH"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U2"
          }, 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIStmtPrepare", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+SYNTAX"), $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "U4"
          }, 
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCITransCommit", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCITransRollback", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ]), 
      {
        Module: "oci.dll", 
        Parameters: [
          {
            NativeType: "U4"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OCIUnicodeToCharSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "oermsg", 
      new JSIL.MethodSignature($.Int32, [$.Int16, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer")]), 
      {
        Module: "oci.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OraMTSEnlCtxGet", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "oramts.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }, null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OraMTSEnlCtxRel", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "oramts.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OraMTSJoinTxn", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.OciEnlistContext"), $asm27.TypeRef("System.Transactions.IDtcTransaction")]), 
      {
        Module: "oramts.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "OraMTSOCIErrGet", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "oramts.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute"), function () { return [$asm07.System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior]; });

    $.PInvokeMethod({Static:true , Public:false}, "SetLastError", 
      JSIL.MethodSignature.Action($.Int32), 
      {
        Module: "kernel32.dll", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Data.Common.DbConnectionOptions */ 

(function DbConnectionOptions$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.DbConnectionOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInsensitiveInvariant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32Internal", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertValueToBooleanInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToIntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertValueToIntegratedSecurityInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertValueToString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandPermission", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Expand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasPersistablePassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parsetable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Text.StringBuilder"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyValuePair", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKeyNameValid", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValueValidInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInternal", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.NameValuePair"), [
          $asm07.TypeRef("System.Collections.Hashtable"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplacePasswordPwd", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.NameValuePair"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "UsersConnectionString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsersConnectionString", 
      new JSIL.MethodSignature($.String, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UsersConnectionStringForTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "ConnectionStringValidKeyPattern", $.String, "^(?![;\\s])[^\\p{Cc}]+(?<!\\s)$");

    $.Constant({Static:true , Public:false}, "ConnectionStringValidValuePattern", $.String, "^[^\x00]*$");

    $.Constant({Static:true , Public:false}, "ConnectionStringQuoteValuePattern", $.String, "^[^\"'=;\\s\\p{Cc}]*$");

    $.Constant({Static:true , Public:false}, "ConnectionStringQuoteOdbcValuePattern", $.String, "^\\{([^\\}\x00]|\\}\\})*\\}$");

    $.Constant({Static:true , Public:false}, "DataDirectory", $.String, "|datadirectory|");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_usersConnectionString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parsetable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "KeyChain", $asm12.TypeRef("System.Data.OracleClient.NameValuePair"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "HasPasswordKeyword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "UseOdbcRules", $.Boolean);

    $.Field({Static:false, Public:false}, "_permissionset", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Property({Static:false, Public:false}, "HasBlankPassword", $.Boolean);

    $.Property({Static:false, Public:false}, "HasPersistablePassword", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "Parsetable", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.Common.DbConnectionOptions+ParserState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.Common.DbConnectionOptions+ParserState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NothingYet: 1, 
    Key: 2, 
    KeyEqual: 3, 
    KeyEnd: 4, 
    UnquotedValue: 5, 
    DoubleQuoteValue: 6, 
    DoubleQuoteValueQuote: 7, 
    SingleQuoteValue: 8, 
    SingleQuoteValueQuote: 9, 
    BraceQuoteValue: 10, 
    BraceQuoteValueQuote: 11, 
    QuotedValueEnd: 12, 
    NullTermination: 13, 
  }
);

/* class System.Data.Common.DbConnectionStringBuilderDescriptor */ 

(function DbConnectionStringBuilderDescriptor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "System.Data.Common.DbConnectionStringBuilderDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RefreshOnChange", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RefreshOnChange", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_componentType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_propertyType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "_refreshOnChange", $.Boolean);

    $.Property({Static:false, Public:false}, "RefreshOnChange", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.ReadOnlyCollection`1 */ 

(function ReadOnlyCollection$b1$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.Common.ReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.Common.ReadOnlyCollection`1+Enumerator`1 */ 

(function Enumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.Common.ReadOnlyCollection`1+Enumerator`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T", "K"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("K"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("K")]));

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("K"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("K")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.Common.DbConnectionStringBuilderUtil */ 

(function DbConnectionStringBuilderUtil$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Data.Common.DbConnectionStringBuilderUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntegratedSecurity", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Data.OracleClient");
/* class System.Data.OracleClient.DbSqlParser */ 

(function DbSqlParser$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.DbSqlParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddColumn", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")]), 
          $asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTable", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")]), 
          $asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CatalogMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteSchemaInformation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateRegexPattern", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindCompletedColumn", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"), $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindTableForColumn", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GatherKeyColumns", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GatherTableColumns", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Columns", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_QuotePrefixCharacter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_QuoteSuffixCharacter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SqlTokenParser", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Tables", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTableCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPart", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlTokenParser", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenAsString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse2", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenFromMatch", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParser+Token"), [$asm0A.TypeRef("System.Text.RegularExpressions.Match")])
    );

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part1", $.String, "[\\s;]*((?<keyword>all|as|compute|cross|distinct|for|from|full|group|having|intersect|inner|join|left|minus|natural|order|outer|on|right|select|top|union|using|where)\\b|(?<identifier>");

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part2", $.String, "*)|");

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part3", $.String, "(?<quotedidentifier>");

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part4", $.String, ")");

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part5", $.String, "|(?<string>");

    $.Constant({Static:true , Public:false}, "SqlTokenPattern_Part6", $.String, ")|(?<other>.))[\\s;]*");

    $.Field({Static:true , Public:false}, "_sqlTokenParser", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "_sqlTokenPattern", $.String);

    $.Field({Static:true , Public:false}, "_identifierGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_quotedidentifierGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_keywordGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_stringGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_otherGroup", $.Int32);

    $.Field({Static:false, Public:false}, "_quotePrefixCharacter", $.String);

    $.Field({Static:false, Public:false}, "_quoteSuffixCharacter", $.String);

    $.Field({Static:false, Public:false}, "_columns", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"));

    $.Field({Static:false, Public:false}, "_tables", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserTableCollection"));

    $.Property({Static:false, Public:false}, "Columns", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "QuotePrefixCharacter", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "QuoteSuffixCharacter", $.String);

    $.Property({Static:true , Public:false}, "SqlTokenParser", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:false}, "Tables", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserTableCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.DbSqlParser+TokenType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.DbSqlParser+TokenType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Null: 0, 
    Identifier: 1, 
    QuotedIdentifier: 2, 
    String: 3, 
    Other: 100, 
    Other_Comma: 101, 
    Other_Period: 102, 
    Other_LeftParen: 103, 
    Other_RightParen: 104, 
    Other_Star: 105, 
    Keyword: 200, 
    Keyword_ALL: 201, 
    Keyword_AS: 202, 
    Keyword_COMPUTE: 203, 
    Keyword_CROSS: 204, 
    Keyword_DISTINCT: 205, 
    Keyword_FOR: 206, 
    Keyword_FROM: 207, 
    Keyword_FULL: 208, 
    Keyword_GROUP: 209, 
    Keyword_HAVING: 210, 
    Keyword_INNER: 211, 
    Keyword_INTERSECT: 212, 
    Keyword_INTO: 213, 
    Keyword_JOIN: 214, 
    Keyword_LEFT: 215, 
    Keyword_MINUS: 216, 
    Keyword_NATURAL: 217, 
    Keyword_ON: 218, 
    Keyword_ORDER: 219, 
    Keyword_OUTER: 220, 
    Keyword_RIGHT: 221, 
    Keyword_SELECT: 222, 
    Keyword_TOP: 223, 
    Keyword_UNION: 224, 
    Keyword_USING: 225, 
    Keyword_WHERE: 226, 
  }
);

/* struct System.Data.OracleClient.DbSqlParser+Token */ 

(function Token$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.DbSqlParser+Token", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.DbSqlParser+TokenType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.DbSqlParser+TokenType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_type", $asm12.TypeRef("System.Data.OracleClient.DbSqlParser+TokenType"));

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Null", $.Type);


    function Token__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Token__cctor
    );

    $.Property({Static:false, Public:false}, "Value", $.String);

    $.Property({Static:false, Public:false}, "Type", $asm12.TypeRef("System.Data.OracleClient.DbSqlParser+TokenType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.DbSqlParser+PARSERSTATE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.DbSqlParser+PARSERSTATE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NOTHINGYET: 1, 
    SELECT: 2, 
    COLUMN: 3, 
    COLUMNALIAS: 4, 
    TABLE: 5, 
    TABLEALIAS: 6, 
    FROM: 7, 
    EXPRESSION: 8, 
    JOIN: 9, 
    JOINCONDITION: 10, 
    DONE: 11, 
  }
);

/* class System.Data.OracleClient.DbSqlParserColumn */ 

(function DbSqlParserColumn$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.DbSqlParserColumn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopySchemaInfoFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopySchemaInfoFrom", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DatabaseName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAliased", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExpression", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnique", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConstraint", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn+ConstraintType"))
    );

    $.Field({Static:false, Public:false}, "_isKey", $.Boolean);

    $.Field({Static:false, Public:false}, "_isUnique", $.Boolean);

    $.Field({Static:false, Public:false}, "_databaseName", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_tableName", $.String);

    $.Field({Static:false, Public:false}, "_columnName", $.String);

    $.Field({Static:false, Public:false}, "_alias", $.String);

    $.Property({Static:false, Public:false}, "ColumnName", $.String);

    $.Property({Static:false, Public:false}, "DatabaseName", $.String);

    $.Property({Static:false, Public:false}, "IsAliased", $.Boolean);

    $.Property({Static:false, Public:false}, "IsExpression", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKey", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnique", $.Boolean);

    $.Property({Static:false, Public:false}, "SchemaName", $.String);

    $.Property({Static:false, Public:false}, "TableName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.DbSqlParserColumn+ConstraintType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.DbSqlParserColumn+ConstraintType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PrimaryKey: 1, 
    UniqueKey: 2, 
    UniqueConstraint: 3, 
  }
);

/* class System.Data.OracleClient.DbSqlParserColumnCollection */ 

(function DbSqlParserColumnCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Data.OracleClient.DbSqlParserColumnCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"), [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Property({Static:false, Public:false}, "ItemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Item", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.OracleClient.DbSqlParserTable */ 

(function DbSqlParserTable$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.DbSqlParserTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Columns", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CorrelationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DatabaseName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Columns", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"))
    );

    $.Field({Static:false, Public:false}, "_databaseName", $.String);

    $.Field({Static:false, Public:false}, "_schemaName", $.String);

    $.Field({Static:false, Public:false}, "_tableName", $.String);

    $.Field({Static:false, Public:false}, "_correlationName", $.String);

    $.Field({Static:false, Public:false}, "_columns", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"));

    $.Property({Static:false, Public:false}, "Columns", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"));

    $.Property({Static:false, Public:false}, "CorrelationName", $.String);

    $.Property({Static:false, Public:false}, "DatabaseName", $.String);

    $.Property({Static:false, Public:false}, "SchemaName", $.String);

    $.Property({Static:false, Public:false}, "TableName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.DbSqlParserTableCollection */ 

(function DbSqlParserTableCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Data.OracleClient.DbSqlParserTableCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Property({Static:false, Public:false}, "ItemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Item", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.OracleClient.MetaType */ 

(function MetaType$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.MetaType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DbType"), $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BindSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCharacterType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLob", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLong", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVariableLength", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxBindSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NoConvertType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OciType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OracleType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsesNationalCharacterSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMetaType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeForObject", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeForType", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Data.DbType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMetaTypeForType", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.Constant({Static:true , Public:false}, "LongMax", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "N_BFILE", $.String, "BFILE");

    $.Constant({Static:true , Public:false}, "N_BLOB", $.String, "BLOB");

    $.Constant({Static:true , Public:false}, "N_CHAR", $.String, "CHAR");

    $.Constant({Static:true , Public:false}, "N_CLOB", $.String, "CLOB");

    $.Constant({Static:true , Public:false}, "N_DATE", $.String, "DATE");

    $.Constant({Static:true , Public:false}, "N_FLOAT", $.String, "FLOAT");

    $.Constant({Static:true , Public:false}, "N_INTEGER", $.String, "INTEGER");

    $.Constant({Static:true , Public:false}, "N_INTERVALYM", $.String, "INTERVAL YEAR TO MONTH");

    $.Constant({Static:true , Public:false}, "N_INTERVALDS", $.String, "INTERVAL DAY TO SECOND");

    $.Constant({Static:true , Public:false}, "N_LONG", $.String, "LONG");

    $.Constant({Static:true , Public:false}, "N_LONGRAW", $.String, "LONG RAW");

    $.Constant({Static:true , Public:false}, "N_NCHAR", $.String, "NCHAR");

    $.Constant({Static:true , Public:false}, "N_NCLOB", $.String, "NCLOB");

    $.Constant({Static:true , Public:false}, "N_NUMBER", $.String, "NUMBER");

    $.Constant({Static:true , Public:false}, "N_NVARCHAR2", $.String, "NVARCHAR2");

    $.Constant({Static:true , Public:false}, "N_RAW", $.String, "RAW");

    $.Constant({Static:true , Public:false}, "N_REFCURSOR", $.String, "REF CURSOR");

    $.Constant({Static:true , Public:false}, "N_ROWID", $.String, "ROWID");

    $.Constant({Static:true , Public:false}, "N_TIMESTAMP", $.String, "TIMESTAMP");

    $.Constant({Static:true , Public:false}, "N_TIMESTAMPLTZ", $.String, "TIMESTAMP WITH LOCAL TIME ZONE");

    $.Constant({Static:true , Public:false}, "N_TIMESTAMPTZ", $.String, "TIMESTAMP WITH TIME ZONE");

    $.Constant({Static:true , Public:false}, "N_UNSIGNEDINT", $.String, "UNSIGNED INTEGER");

    $.Constant({Static:true , Public:false}, "N_VARCHAR2", $.String, "VARCHAR2");

    $.Field({Static:true , Public:false, ReadOnly:true }, "dbTypeMetaType", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 24);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "oracleTypeMetaType", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 31);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "oracleTypeMetaType_LONGVARCHAR", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "oracleTypeMetaType_LONGVARRAW", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "oracleTypeMetaType_LONGNVARCHAR", $.Type);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dbType", $asm11.TypeRef("System.Data.DbType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_oracleType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ociType", $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_convertToType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_noConvertType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxBindSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataTypeName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isCharacterType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isLob", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isLong", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_usesNationalCharacterSet", $.Boolean);

    $.Property({Static:false, Public:false}, "BaseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "BindSize", $.Int32);

    $.Property({Static:false, Public:false}, "DataTypeName", $.String);

    $.Property({Static:false, Public:false}, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:false}, "IsCharacterType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLob", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLong", $.Boolean);

    $.Property({Static:false, Public:false}, "IsVariableLength", $.Boolean);

    $.Property({Static:false, Public:false}, "MaxBindSize", $.Int32);

    $.Property({Static:false, Public:false}, "NoConvertType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "OciType", $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"));

    $.Property({Static:false, Public:false}, "OracleType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Property({Static:false, Public:false}, "UsesNationalCharacterSet", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer */ 

(function NativeBuffer$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetDataPtr", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetDataPtr", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DangerousGetDataPtrWithBaseOffset", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleValueToTrace", 
      new JSIL.MethodSignature($.IntPtr, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringAnsi", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStringAnsi", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToStructure", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_LongColumnData")]))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_Exception */ 

(function NativeBuffer_Exception$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_Exception", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_LongColumnData */ 

(function NativeBuffer_LongColumnData$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_LongColumnData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyOutOfLineBytes", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyOutOfLineChars", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TotalLengthInBytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChunk", 
      new JSIL.MethodSignature($.IntPtr, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Constant({Static:true , Public:false}, "ChunkIsFree", $.Int32, -2);

    $.Constant({Static:true , Public:false}, "ChunkToBeFilled", $.Int32, -1);

    $.Field({Static:false, Public:false}, "_currentChunk", $.IntPtr);

    $.Field({Static:false, Public:false}, "_chunkCount", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "AllocationSize", $.Int32, 8184);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReservedSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxChunkSize", $.Int32, function ($pi) {
        return ((($pi.AllocationSize | 0) - ($pi.ReservedSize | 0)) | 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "LengthOrIndicatorOffset", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OutOfMemory", $asm07.TypeRef("System.OutOfMemoryException"));

    $.Property({Static:false, Public:false}, "TotalLengthInBytes", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_ParameterBuffer */ 

(function NativeBuffer_ParameterBuffer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_ParameterBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_RowBuffer */ 

(function NativeBuffer_RowBuffer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_RowBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentPositionIsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NumberOfRows", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RowLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveFirst", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MovePrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NumberOfRows", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_numberOfRows", $.Int32);

    $.Field({Static:false, Public:false}, "_rowLength", $.Int32);

    $.Field({Static:false, Public:false}, "_ready", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentPositionIsValid", $.Boolean);

    $.Property({Static:false, Public:false}, "NumberOfRows", $.Int32);

    $.Property({Static:false, Public:false}, "RowLength", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_ScratchBuffer */ 

(function NativeBuffer_ScratchBuffer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_ScratchBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NativeBuffer_ServerVersion */ 

(function NativeBuffer_ServerVersion$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
      Name: "System.Data.OracleClient.NativeBuffer_ServerVersion", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OCI */ 

(function OCI$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OCI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DetermineClientVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClientVersionAtLeastOracle9i", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "_clientVersion", $.Int32);

    $.Property({Static:true , Public:false}, "ClientVersionAtLeastOracle9i", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.OCI+PATTR */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+PATTR", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_ATTR_DATA_SIZE: 1, 
    OCI_ATTR_DATA_TYPE: 2, 
    OCI_ATTR_DISP_SIZE: 3, 
    OCI_ATTR_NAME: 4, 
    OCI_ATTR_PRECISION: 5, 
    OCI_ATTR_SCALE: 6, 
    OCI_ATTR_IS_NULL: 7, 
  }
);

/* enum System.Data.OracleClient.OCI+ATTR */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+ATTR", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_ATTR_FNCODE: 1, 
    OCI_ATTR_DATA_SIZE: 1, 
    OCI_ATTR_DATA_TYPE: 2, 
    OCI_ATTR_OBJECT: 2, 
    OCI_ATTR_DISP_SIZE: 3, 
    OCI_ATTR_NONBLOCKING_MODE: 3, 
    OCI_ATTR_SQLCODE: 4, 
    OCI_ATTR_NAME: 4, 
    OCI_ATTR_ENV: 5, 
    OCI_ATTR_PRECISION: 5, 
    OCI_ATTR_SERVER: 6, 
    OCI_ATTR_SCALE: 6, 
    OCI_ATTR_IS_NULL: 7, 
    OCI_ATTR_SESSION: 7, 
    OCI_ATTR_TRANS: 8, 
    OCI_ATTR_ROW_COUNT: 9, 
    OCI_ATTR_SQLFNCODE: 10, 
    OCI_ATTR_PREFETCH_ROWS: 11, 
    OCI_ATTR_NESTED_PREFETCH_ROWS: 12, 
    OCI_ATTR_PREFETCH_MEMORY: 13, 
    OCI_ATTR_NESTED_PREFETCH_MEMORY: 14, 
    OCI_ATTR_CHAR_COUNT: 15, 
    OCI_ATTR_FSPRECISION: 16, 
    OCI_ATTR_PDSCL: 16, 
    OCI_ATTR_PDPRC: 17, 
    OCI_ATTR_LFPRECISION: 17, 
    OCI_ATTR_PARAM_COUNT: 18, 
    OCI_ATTR_ROWID: 19, 
    OCI_ATTR_CHARSET: 20, 
    OCI_ATTR_NCHAR: 21, 
    OCI_ATTR_USERNAME: 22, 
    OCI_ATTR_PASSWORD: 23, 
    OCI_ATTR_STMT_TYPE: 24, 
    OCI_ATTR_INTERNAL_NAME: 25, 
    OCI_ATTR_EXTERNAL_NAME: 26, 
    OCI_ATTR_XID: 27, 
    OCI_ATTR_TRANS_LOCK: 28, 
    OCI_ATTR_TRANS_NAME: 29, 
    OCI_ATTR_HEAPALLOC: 30, 
    OCI_ATTR_CHARSET_ID: 31, 
    OCI_ATTR_CHARSET_FORM: 32, 
    OCI_ATTR_MAXDATA_SIZE: 33, 
    OCI_ATTR_CACHE_OPT_SIZE: 34, 
    OCI_ATTR_CACHE_MAX_SIZE: 35, 
    OCI_ATTR_PINOPTION: 36, 
    OCI_ATTR_ALLOC_DURATION: 37, 
    OCI_ATTR_PIN_DURATION: 38, 
    OCI_ATTR_FDO: 39, 
    OCI_ATTR_POSTPROCESSING_CALLBACK: 40, 
    OCI_ATTR_POSTPROCESSING_CONTEXT: 41, 
    OCI_ATTR_ROWS_RETURNED: 42, 
    OCI_ATTR_FOCBK: 43, 
    OCI_ATTR_IN_V8_MODE: 44, 
    OCI_ATTR_LOBEMPTY: 45, 
    OCI_ATTR_SESSLANG: 46, 
    OCI_ATTR_VISIBILITY: 47, 
    OCI_ATTR_RELATIVE_MSGID: 48, 
    OCI_ATTR_SEQUENCE_DEVIATION: 49, 
    OCI_ATTR_CONSUMER_NAME: 50, 
    OCI_ATTR_DEQ_MODE: 51, 
    OCI_ATTR_NAVIGATION: 52, 
    OCI_ATTR_WAIT: 53, 
    OCI_ATTR_DEQ_MSGID: 54, 
    OCI_ATTR_PRIORITY: 55, 
    OCI_ATTR_DELAY: 56, 
    OCI_ATTR_EXPIRATION: 57, 
    OCI_ATTR_CORRELATION: 58, 
    OCI_ATTR_ATTEMPTS: 59, 
    OCI_ATTR_RECIPIENT_LIST: 60, 
    OCI_ATTR_EXCEPTION_QUEUE: 61, 
    OCI_ATTR_ENQ_TIME: 62, 
    OCI_ATTR_MSG_STATE: 63, 
    OCI_ATTR_AGENT_NAME: 64, 
    OCI_ATTR_AGENT_ADDRESS: 65, 
    OCI_ATTR_AGENT_PROTOCOL: 66, 
    OCI_ATTR_SENDER_ID: 68, 
    OCI_ATTR_ORIGINAL_MSGID: 69, 
    OCI_ATTR_QUEUE_NAME: 70, 
    OCI_ATTR_NFY_MSGID: 71, 
    OCI_ATTR_MSG_PROP: 72, 
    OCI_ATTR_NUM_DML_ERRORS: 73, 
    OCI_ATTR_DML_ROW_OFFSET: 74, 
    OCI_ATTR_DATEFORMAT: 75, 
    OCI_ATTR_BUF_ADDR: 76, 
    OCI_ATTR_BUF_SIZE: 77, 
    OCI_ATTR_DIRPATH_MODE: 78, 
    OCI_ATTR_DIRPATH_NOLOG: 79, 
    OCI_ATTR_DIRPATH_PARALLEL: 80, 
    OCI_ATTR_NUM_ROWS: 81, 
    OCI_ATTR_COL_COUNT: 82, 
    OCI_ATTR_STREAM_OFFSET: 83, 
    OCI_ATTR_SHARED_HEAPALLOC: 84, 
    OCI_ATTR_SERVER_GROUP: 85, 
    OCI_ATTR_MIGSESSION: 86, 
    OCI_ATTR_NOCACHE: 87, 
    OCI_ATTR_MEMPOOL_SIZE: 88, 
    OCI_ATTR_MEMPOOL_INSTNAME: 89, 
    OCI_ATTR_MEMPOOL_APPNAME: 90, 
    OCI_ATTR_MEMPOOL_HOMENAME: 91, 
    OCI_ATTR_MEMPOOL_MODEL: 92, 
    OCI_ATTR_MODES: 93, 
    OCI_ATTR_SUBSCR_NAME: 94, 
    OCI_ATTR_SUBSCR_CALLBACK: 95, 
    OCI_ATTR_SUBSCR_CTX: 96, 
    OCI_ATTR_SUBSCR_PAYLOAD: 97, 
    OCI_ATTR_SUBSCR_NAMESPACE: 98, 
    OCI_ATTR_PROXY_CREDENTIALS: 99, 
    OCI_ATTR_INITIAL_CLIENT_ROLES: 100, 
    OCI_ATTR_UNK: 101, 
    OCI_ATTR_NUM_COLS: 102, 
    OCI_ATTR_LIST_COLUMNS: 103, 
    OCI_ATTR_RDBA: 104, 
    OCI_ATTR_CLUSTERED: 105, 
    OCI_ATTR_PARTITIONED: 106, 
    OCI_ATTR_INDEX_ONLY: 107, 
    OCI_ATTR_LIST_ARGUMENTS: 108, 
    OCI_ATTR_LIST_SUBPROGRAMS: 109, 
    OCI_ATTR_REF_TDO: 110, 
    OCI_ATTR_LINK: 111, 
    OCI_ATTR_MIN: 112, 
    OCI_ATTR_MAX: 113, 
    OCI_ATTR_INCR: 114, 
    OCI_ATTR_CACHE: 115, 
    OCI_ATTR_ORDER: 116, 
    OCI_ATTR_HW_MARK: 117, 
    OCI_ATTR_TYPE_SCHEMA: 118, 
    OCI_ATTR_TIMESTAMP: 119, 
    OCI_ATTR_NUM_ATTRS: 120, 
    OCI_ATTR_NUM_PARAMS: 121, 
    OCI_ATTR_OBJID: 122, 
    OCI_ATTR_PTYPE: 123, 
    OCI_ATTR_PARAM: 124, 
    OCI_ATTR_OVERLOAD_ID: 125, 
    OCI_ATTR_TABLESPACE: 126, 
    OCI_ATTR_TDO: 127, 
    OCI_ATTR_LTYPE: 128, 
    OCI_ATTR_PARSE_ERROR_OFFSET: 129, 
    OCI_ATTR_IS_TEMPORARY: 130, 
    OCI_ATTR_IS_TYPED: 131, 
    OCI_ATTR_DURATION: 132, 
    OCI_ATTR_IS_INVOKER_RIGHTS: 133, 
    OCI_ATTR_OBJ_NAME: 134, 
    OCI_ATTR_OBJ_SCHEMA: 135, 
    OCI_ATTR_OBJ_ID: 136, 
    OCI_ATTR_DIRPATH_SORTED_INDEX: 137, 
    OCI_ATTR_DIRPATH_INDEX_MAINT_METHOD: 138, 
    OCI_ATTR_DIRPATH_FILE: 139, 
    OCI_ATTR_DIRPATH_STORAGE_INITIAL: 140, 
    OCI_ATTR_DIRPATH_STORAGE_NEXT: 141, 
    OCI_ATTR_TRANS_TIMEOUT: 142, 
    OCI_ATTR_SERVER_STATUS: 143, 
    OCI_ATTR_STATEMENT: 144, 
    OCI_ATTR_NO_CACHE: 145, 
    OCI_ATTR_RESERVED_1: 146, 
    OCI_ATTR_SERVER_BUSY: 147, 
    OCI_ATTR_MAXCHAR_SIZE: 163, 
    OCI_ATTR_ENV_CHARSET_ID: 207, 
    OCI_ATTR_ENV_NCHARSET_ID: 208, 
    OCI_ATTR_ENV_UTF16: 209, 
    OCI_ATTR_CHAR_SIZE: 286, 
  }
);

/* enum System.Data.OracleClient.OCI+CHARSETFORM */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+CHARSETFORM", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SQLCS_IMPLICIT: 1, 
    SQLCS_NCHAR: 2, 
    SQLCS_EXPLICIT: 3, 
    SQLCS_FLEXIBLE: 4, 
    SQLCS_LIT_NULL: 5, 
  }
);

/* enum System.Data.OracleClient.OCI+CRED */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+CRED", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_CRED_RDBMS: 1, 
    OCI_CRED_EXT: 2, 
    OCI_CRED_PROXY: 3, 
  }
);

/* enum System.Data.OracleClient.OCI+DATATYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+DATATYPE", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    VARCHAR2: 1, 
    NUMBER: 2, 
    INTEGER: 3, 
    FLOAT: 4, 
    STRING: 5, 
    VARNUM: 6, 
    LONG: 8, 
    ROWID: 11, 
    DATE: 12, 
    VARRAW: 15, 
    RAW: 23, 
    LONGRAW: 24, 
    UNSIGNEDINT: 68, 
    LONGVARCHAR: 94, 
    LONGVARRAW: 95, 
    CHAR: 96, 
    CHARZ: 97, 
    CURSOR: 102, 
    ROWID_DESC: 104, 
    MLSLABEL: 105, 
    USERDEFINED: 108, 
    REF: 110, 
    CLOB: 112, 
    BLOB: 113, 
    BFILE: 114, 
    RSET: 116, 
    OCIDATE: 156, 
    INT_TIMESTAMP: 180, 
    INT_TIMESTAMP_TZ: 181, 
    INT_INTERVAL_YM: 182, 
    INT_INTERVAL_DS: 183, 
    ANSIDATE: 184, 
    TIME: 185, 
    TIME_TZ: 186, 
    TIMESTAMP: 187, 
    TIMESTAMP_TZ: 188, 
    INTERVAL_YM: 189, 
    INTERVAL_DS: 190, 
    UROWID: 208, 
    INT_TIMESTAMP_LTZ: 231, 
    TIMESTAMP_LTZ: 232, 
    PLSQLRECORD: 250, 
    PLSQLTABLE: 251, 
  }
);

/* enum System.Data.OracleClient.OCI+DURATION */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+DURATION", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_DURATION_NEXT: 7, 
    OCI_DURATION_DEFAULT: 8, 
    OCI_DURATION_NULL: 9, 
    OCI_DURATION_BEGIN: 10, 
    OCI_DURATION_SESSION: 10, 
    OCI_DURATION_TRANS: 11, 
    OCI_DURATION_CALL: 12, 
    OCI_DURATION_STATEMENT: 13, 
    OCI_DURATION_CALLOUT: 14, 
    OCI_DURATION_LAST: 14, 
  }
);

/* enum System.Data.OracleClient.OCI+FETCH */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+FETCH", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_FETCH_NEXT: 2, 
    OCI_FETCH_FIRST: 4, 
    OCI_FETCH_LAST: 8, 
    OCI_FETCH_PRIOR: 16, 
    OCI_FETCH_ABSOLUTE: 32, 
    OCI_FETCH_RELATIVE: 64, 
  }
);

/* enum System.Data.OracleClient.OCI+HTYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+HTYPE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_HTYPE_ENV: 1, 
    OCI_HTYPE_ERROR: 2, 
    OCI_HTYPE_SVCCTX: 3, 
    OCI_HTYPE_STMT: 4, 
    OCI_HTYPE_BIND: 5, 
    OCI_HTYPE_DEFINE: 6, 
    OCI_HTYPE_DESCRIBE: 7, 
    OCI_HTYPE_SERVER: 8, 
    OCI_HTYPE_SESSION: 9, 
    OCI_HTYPE_TRANS: 10, 
    OCI_HTYPE_COMPLEXOBJECT: 11, 
    OCI_HTYPE_SECURITY: 12, 
    OCI_HTYPE_SUBSCRIPTION: 13, 
    OCI_HTYPE_DIRPATH_CTX: 14, 
    OCI_HTYPE_DIRPATH_COLUMN_ARRAY: 15, 
    OCI_HTYPE_DIRPATH_STREAM: 16, 
    OCI_HTYPE_PROC: 17, 
    OCI_DTYPE_FIRST: 50, 
    OCI_DTYPE_LOB: 50, 
    OCI_DTYPE_SNAP: 51, 
    OCI_DTYPE_RSET: 52, 
    OCI_DTYPE_PARAM: 53, 
    OCI_DTYPE_ROWID: 54, 
    OCI_DTYPE_COMPLEXOBJECTCOMP: 55, 
    OCI_DTYPE_FILE: 56, 
    OCI_DTYPE_AQENQ_OPTIONS: 57, 
    OCI_DTYPE_AQDEQ_OPTIONS: 58, 
    OCI_DTYPE_AQMSG_PROPERTIES: 59, 
    OCI_DTYPE_AQAGENT: 60, 
    OCI_DTYPE_LOCATOR: 61, 
    OCI_DTYPE_INTERVAL_YM: 62, 
    OCI_DTYPE_INTERVAL_DS: 63, 
    OCI_DTYPE_AQNFY_DESCRIPTOR: 64, 
    OCI_DTYPE_DATE: 65, 
    OCI_DTYPE_TIME: 66, 
    OCI_DTYPE_TIME_TZ: 67, 
    OCI_DTYPE_TIMESTAMP: 68, 
    OCI_DTYPE_TIMESTAMP_TZ: 69, 
    OCI_DTYPE_TIMESTAMP_LTZ: 70, 
    OCI_DTYPE_UCB: 71, 
    OCI_DTYPE_LAST: 71, 
  }
);

/* enum System.Data.OracleClient.OCI+INDICATOR */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+INDICATOR", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TOOBIG: -2, 
    ISNULL: -1, 
    OK: 0, 
  }
);

/* enum System.Data.OracleClient.OCI+LOB_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+LOB_TYPE", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_TEMP_BLOB: 1, 
    OCI_TEMP_CLOB: 2, 
  }
);

/* enum System.Data.OracleClient.OCI+MODE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+MODE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    OCI_DEFAULT: 0, 
    OCI_THREADED: 1, 
    OCI_BATCH_MODE: 1, 
    OCI_SB2_IND_PTR: 1, 
    OCI_MIGRATE: 1, 
    OCI_OBJECT: 2, 
    OCI_SYSDBA: 2, 
    OCI_EXACT_FETCH: 2, 
    OCI_DATA_AT_EXEC: 2, 
    OCI_DYNAMIC_FETCH: 2, 
    OCI_PIECEWISE: 4, 
    OCI_EVENTS: 4, 
    OCI_KEEP_FETCH_STATE: 4, 
    OCI_SYSOPER: 4, 
    OCI_PRELIM_AUTH: 8, 
    OCI_SCROLLABLE_CURSOR: 8, 
    OCI_DESCRIBE_ONLY: 16, 
    OCI_SHARED: 16, 
    OCIP_ICACHE: 16, 
    OCI_COMMIT_ON_SUCCESS: 32, 
    OCI_NON_BLOCKING: 64, 
    OCI_NO_UCB: 64, 
    OCI_BATCH_ERRORS: 128, 
    OCI_NO_MUTEX: 128, 
    OCI_PARSE_ONLY: 256, 
    OCI_SHARED_EXT: 256, 
    OCI_CACHE: 512, 
    OCI_NO_CACHE: 1024, 
    OCI_SHOW_DML_WARNINGS: 1024, 
    OCI_UTF16: 16384, 
  }
);

/* enum System.Data.OracleClient.OCI+RETURNCODE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+RETURNCODE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_CONTINUE: -24200, 
    OCI_STILL_EXECUTING: -3123, 
    OCI_INVALID_HANDLE: -2, 
    OCI_ERROR: -1, 
    OCI_SUCCESS: 0, 
    OCI_SUCCESS_WITH_INFO: 1, 
    OCI_NEED_DATA: 99, 
    OCI_NO_DATA: 100, 
    OCI_RESERVED_FOR_INT_USE: 200, 
  }
);

/* enum System.Data.OracleClient.OCI+SIGN */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+SIGN", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_NUMBER_UNSIGNED: 0, 
    OCI_NUMBER_SIGNED: 2, 
  }
);

/* enum System.Data.OracleClient.OCI+STMT */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+STMT", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_STMT_SELECT: 1, 
    OCI_STMT_UPDATE: 2, 
    OCI_STMT_DELETE: 3, 
    OCI_STMT_INSERT: 4, 
    OCI_STMT_CREATE: 5, 
    OCI_STMT_DROP: 6, 
    OCI_STMT_ALTER: 7, 
    OCI_STMT_BEGIN: 8, 
    OCI_STMT_DECLARE: 9, 
  }
);

/* enum System.Data.OracleClient.OCI+SYNTAX */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OCI+SYNTAX", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OCI_NTV_SYNTAX: 1, 
    OCI_V7_SYNTAX: 2, 
    OCI_V8_SYNTAX: 3, 
  }
);

/* class System.Data.OracleClient.OCI+Callback */ 

(function Callback$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Data.OracleClient.OCI+Callback", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OracleClient.OCI+Callback+OCICallbackDefine */ 

JSIL.MakeDelegate("System.Data.OracleClient.OCI+Callback+OCICallbackDefine", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.UInt32"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")
    ]));

/* class System.Data.OracleClient.OciEnlistContext */ 

(function OciEnlistContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.OracleClient.OciEnlistContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleValueToTrace", 
      new JSIL.MethodSignature($.IntPtr, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Join", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection"), $asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.Field({Static:false, Public:false}, "_serviceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciHandle */ 

(function OciHandle$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Data.OracleClient.OciHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), $asm12.TypeRef("System.Data.OracleClient.OciHandle+HANDLEFLAG")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRef", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EnvironmentHandle", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_HandleType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnicode", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ParentHandle", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttributeName", 
      new JSIL.MethodSignature($.String, [$.Type, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleValueToTrace", 
      new JSIL.MethodSignature($.IntPtr, [$.Type])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "PtrToString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PtrToString", 
      new JSIL.MethodSignature($.String, [$.IntPtr, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciStatementHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciSessionHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciServerHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciDefineHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciBindHandle")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciParameterDescriptor")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $.Type, 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttribute", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), $.String, 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.Field({Static:false, Public:false}, "_handleType", $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"));

    $.Field({Static:false, Public:false}, "_refCount", $.Int32);

    $.Field({Static:false, Public:false}, "_parentHandle", $.Type);

    $.Field({Static:false, Public:false}, "_isUnicode", $.Boolean);

    $.Property({Static:false, Public:false}, "EnvironmentHandle", $.Type);

    $.Property({Static:false, Public:false}, "HandleType", $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnicode", $.Boolean);

    $.Property({Static:false, Public:false}, "ParentHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.OciHandle+HANDLEFLAG */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OciHandle+HANDLEFLAG", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    DEFAULT: 0, 
    UNICODE: 1, 
    NLS: 2, 
  }
);

/* class System.Data.OracleClient.OciEnvironmentHandle */ 

(function OciEnvironmentHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciEnvironmentHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), $.Boolean])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciErrorHandle */ 

(function OciErrorHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciErrorHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionIsBroken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConnectionIsBroken", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_connectionIsBroken", $.Boolean);

    $.Property({Static:false, Public:false}, "ConnectionIsBroken", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciDateTimeDescriptor */ 

(function OciDateTimeDescriptor$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciDateTimeDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssertDateTimeType", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), [$asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciFileDescriptor */ 

(function OciFileDescriptor$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciFileDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OCILobFileSetNameWrapper", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt16, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt16
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciIntervalDescriptor */ 

(function OciIntervalDescriptor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciIntervalDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciLobDescriptor */ 

(function OciLobDescriptor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciLobDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciNlsEnvironmentHandle */ 

(function OciNlsEnvironmentHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciNlsEnvironmentHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OCI+MODE"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciRowidDescriptor */ 

(function OciRowidDescriptor$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciRowidDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowid", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciServerHandle */ 

(function OciServerHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciServerHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciServiceContextHandle */ 

(function OciServiceContextHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciServiceContextHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciSessionHandle */ 

(function OciSessionHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciSessionHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciStatementHandle */ 

(function OciStatementHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciStatementHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescriptor", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OciParameterDescriptor"), [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRowid", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor"), [$asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciSimpleHandle */ 

(function OciSimpleHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
      Name: "System.Data.OracleClient.OciSimpleHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciBindHandle */ 

(function OciBindHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciSimpleHandle"), 
      Name: "System.Data.OracleClient.OciBindHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciDefineHandle */ 

(function OciDefineHandle$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciSimpleHandle"), 
      Name: "System.Data.OracleClient.OciDefineHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciParameterDescriptor */ 

(function OciParameterDescriptor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.OciSimpleHandle"), 
      Name: "System.Data.OracleClient.OciParameterDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OciLobLocator */ 

(function OciLobLocator$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OciLobLocator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceClose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionIsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Descriptor", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LobType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Open", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleLobOpenMode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeDispose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:false, Public:false}, "_connectionCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_lobType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Field({Static:false, Public:false}, "_descriptor", $asm12.TypeRef("System.Data.OracleClient.OciHandle"));

    $.Field({Static:false, Public:false}, "_cloneCount", $.Int32);

    $.Field({Static:false, Public:false}, "_openMode", $.Int32);

    $.Property({Static:false, Public:false}, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Property({Static:false, Public:false}, "ConnectionIsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:false}, "Descriptor", $asm12.TypeRef("System.Data.OracleClient.OciHandle"));

    $.Property({Static:false, Public:true }, "LobType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleBFile */ 

(function OracleBFile$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.OracleClient.OracleBFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciLobLocator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertInternalLobIsValid", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [$asm12.TypeRef("System.Data.OracleClient.OracleLob")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [$asm12.TypeRef("System.Data.OracleClient.OracleLob"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [
          $.Int64, $asm12.TypeRef("System.Data.OracleClient.OracleLob"), 
          $.Int64, $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLobIsOpened", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Descriptor", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileExists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LobLocator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciLobLocator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetFileName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "_lob", $asm12.TypeRef("System.Data.OracleClient.OracleLob"));

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_directoryAlias", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Constant({Static:true , Public:false}, "MaxDirectoryAliasChars", $.Int16, 30);

    $.Constant({Static:true , Public:false}, "MaxFileAliasChars", $.Int16, 255);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true }, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Property({Static:false, Public:false}, "Descriptor", $asm12.TypeRef("System.Data.OracleClient.OciHandle"));

    $.Property({Static:false, Public:true }, "DirectoryName", $.String);

    $.Property({Static:false, Public:true }, "FileExists", $.Boolean);

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:false}, "LobLocator", $asm12.TypeRef("System.Data.OracleClient.OciLobLocator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.ICloneable"), 
      /* 2 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OracleClient.OracleBinary */ 

(function OracleBinary$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleBinary", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.MetaType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLength", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.MetaType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "PerformCompareByte", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:false}, "_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function OracleBinary__cctor () {
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleBinary__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Item", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Data.OracleClient.OracleBoolean */ 

(function OracleBoolean$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleBoolean", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ByteValue", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFalse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTrue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Data.OracleClient.OracleNumber")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_False", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LogicalNot", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_True", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Xor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "_value", $.Byte);

    $.Constant({Static:true , Public:false}, "x_Null", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_True", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_False", $.Byte, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "False", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "True", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);


    function OracleBoolean__cctor () {
      $thisType.False = new $thisType();
      $thisType.Null = new $thisType();
      $thisType.One = new $thisType();
      $thisType.True = new $thisType();
      $thisType.Zero = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleBoolean__cctor
    );

    $.Property({Static:false, Public:false}, "ByteValue", $.Byte);

    $.Property({Static:false, Public:true }, "IsFalse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTrue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleColumn */ 

(function OracleColumn$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OracleColumn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "_callback_GetColumnPiecewise", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer"), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Describe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), 
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupLongValueLength", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.NativeBuffer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ColumnName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLob", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLong", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OracleType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ordinal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaTableSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldOracleType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleBFile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBFile"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleBinary", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBinary"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleDateTime", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleDateTime"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleLob", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleLob"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleMonthSpan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleMonthSpan"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleNumber", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleNumber"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleString", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleString"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleTimeSpan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleTimeSpan"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOracleValue", 
      new JSIL.MethodSignature($.Object, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rebind", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.Field({Static:false, Public:false}, "_describeHandle", $asm12.TypeRef("System.Data.OracleClient.OciParameterDescriptor"));

    $.Field({Static:false, Public:false}, "_ordinal", $.Int32);

    $.Field({Static:false, Public:false}, "_columnName", $.String);

    $.Field({Static:false, Public:false}, "_metaType", $asm12.TypeRef("System.Data.OracleClient.MetaType"));

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_byteSize", $.Int32);

    $.Field({Static:false, Public:false}, "_isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_indicatorOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_lengthOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_valueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_rowBuffer", $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer"));

    $.Field({Static:false, Public:false}, "_longBuffer", $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_LongColumnData"));

    $.Field({Static:false, Public:false}, "_longLength", $.Int32);

    $.Field({Static:false, Public:false}, "_callback", $asm12.TypeRef("System.Data.OracleClient.OCI+Callback+OCICallbackDefine"));

    $.Field({Static:false, Public:false}, "_lobLocator", $asm12.TypeRef("System.Data.OracleClient.OciLobLocator"));

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:false, Public:false}, "_connectionCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_bindAsUTF16", $.Boolean);

    $.Property({Static:false, Public:false}, "ColumnName", $.String);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLob", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLong", $.Boolean);

    $.Property({Static:false, Public:false}, "OracleType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Property({Static:false, Public:false}, "Ordinal", $.Int32);

    $.Property({Static:false, Public:false}, "Precision", $.Byte);

    $.Property({Static:false, Public:false}, "Scale", $.Byte);

    $.Property({Static:false, Public:false}, "SchemaTableSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleCommand */ 

(function OracleCommand$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommand"), 
      Name: "System.Data.OracleClient.OracleCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $asm11.TypeRef("System.Data.CommandBehavior"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ArrayList")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $asm11.TypeRef("System.Data.CommandBehavior"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ArrayList")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteDbDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteNonQueryInternal", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteOracleNonQuery", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OracleString")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteOracleScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleDataReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteReader", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleDataReader"), [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExecuteScalar", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteScalarInternal", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CommandType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionIsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbParameterCollection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbTransaction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DesignTimeVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnvironmentHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StatementText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StatementType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OCI+STMT"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdatedRowSource", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPersistedRowid", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleString"), [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OciRowidDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStatementHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior"), $asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseStatementHandle", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetCommandTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CommandType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.CommandType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbConnection", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_DbTransaction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DesignTimeVisible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transaction", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdatedRowSource", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.UpdateRowSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeCommandTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Field({Static:false, Public:false}, "_commandText", $.String);

    $.Field({Static:false, Public:false}, "_commandType", $asm11.TypeRef("System.Data.CommandType"));

    $.Field({Static:false, Public:false}, "_updatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"));

    $.Field({Static:false, Public:false}, "_designTimeInvisible", $.Boolean);

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:false, Public:false}, "_preparedStatementHandle", $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"));

    $.Field({Static:false, Public:false}, "_preparedAtCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_parameterCollection", $asm12.TypeRef("System.Data.OracleClient.OracleParameterCollection"));

    $.Field({Static:false, Public:false}, "_statementType", $asm12.TypeRef("System.Data.OracleClient.OCI+STMT"));

    $.Field({Static:false, Public:false}, "_transaction", $asm12.TypeRef("System.Data.OracleClient.OracleTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "CommandText", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Oracle.Design.OracleCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_CommandText"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_CommandTimeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CommandType", $asm11.TypeRef("System.Data.CommandType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_CommandType"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.CommandType.Text]; });

    $.Property({Static:false, Public:true }, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_Connection"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Behavior"]; });

    $.Property({Static:false, Public:false}, "ConnectionIsClosed", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbParameterCollection", $asm11.TypeRef("System.Data.Common.DbParameterCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbTransaction", $asm11.TypeRef("System.Data.Common.DbTransaction"));

    $.Property({Static:false, Public:true , Virtual:true }, "DesignTimeVisible", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "EnvironmentHandle", $asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"));

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true }, "Parameters", $asm12.TypeRef("System.Data.OracleClient.OracleParameterCollection"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_Parameters"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.Property({Static:false, Public:false}, "StatementText", $.String);

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:false}, "StatementType", $asm12.TypeRef("System.Data.OracleClient.OCI+STMT"));

    $.Property({Static:false, Public:true }, "Transaction", $asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_Transaction"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "UpdatedRowSource", $asm11.TypeRef("System.Data.UpdateRowSource"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm11.System.Data.UpdateRowSource.Both]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbCommand_UpdatedRowSource"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RecordsAffected"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return [true]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OracleCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleCommand has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OracleCommandBuilder */ 

(function OracleCommandBuilder$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbCommandBuilder"), 
      Name: "System.Data.OracleClient.OracleCommandBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyParameterInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.Common.DbParameter"), $asm11.TypeRef("System.Data.DataRow"), 
          $asm11.TypeRef("System.Data.StatementType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeriveParameters", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveParametersFromStoredProcedure", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OracleCommand")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogLocation", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CatalogSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataAdapter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaSeparator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeleteCommand", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInsertCommand", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameterPlaceholder", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateCommand", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleCommand"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteIdentifier", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveName", 
      new JSIL.MethodSignature($.UInt32, [
          $asm12.TypeRef("System.Data.OracleClient.OracleCommand"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RowUpdatingHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatingEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogLocation", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.CatalogLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CatalogSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataAdapter", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SchemaSeparator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetRowUpdatingHandler", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnquoteIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "_doubleQuoteChar", $.Char, "\"");

    $.Constant({Static:true , Public:false}, "_doubleQuoteString", $.String, "\"");

    $.Constant({Static:true , Public:false}, "_doubleQuoteEscapeString", $.String, "\"\"");

    $.Constant({Static:true , Public:false}, "_singleQuoteChar", $.Char, "'");

    $.Constant({Static:true , Public:false}, "_singleQuoteString", $.String, "'");

    $.Constant({Static:true , Public:false}, "_singleQuoteEscapeString", $.String, "''");

    $.Constant({Static:true , Public:false}, "ResolveNameCommand_Part1", $.String, "begin dbms_utility.name_resolve(");

    $.Constant({Static:true , Public:false}, "ResolveNameCommand_Part2", $.String, ",1,:schema,:part1,:part2,:dblink,:part1type,:objectnum); end;");

    $.Field({Static:true , Public:false, ReadOnly:true }, "DeriveParameterCommand_Part1", $.String);

    $.Constant({Static:true , Public:false}, "DeriveParameterCommand_Part2", $.String, " and package_name");

    $.Constant({Static:true , Public:false}, "DeriveParameterCommand_Part3", $.String, " and object_name = ");

    $.Constant({Static:true , Public:false}, "DeriveParameterCommand_Part4", $.String, "  order by overload, position");

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogLocation", $asm11.TypeRef("System.Data.Common.CatalogLocation"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "CatalogSeparator", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "DataAdapter", $asm12.TypeRef("System.Data.OracleClient.OracleDataAdapter"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleCommandBuilder_DataAdapter"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaSeparator", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleCommandBuilder has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OracleCommandSet */ 

(function OracleCommandSet$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OracleCommandSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OracleTransaction")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteNonQuery", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBatchCommandText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BatchCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommandCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBatchedRecordsAffected", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParameterCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlTokenParser", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleCommandSet+LocalParameter")]), [
          $asm12.TypeRef("System.Data.OracleClient.OracleCommand"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CommandTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Connection", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Transaction", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_sqlTokenPattern", $.String, "[\\s]+|(?<string>'([^']|'')*')|(?<comment>(/\\*([^\\*]|\\*[^/])*\\*/)|(--.*))|(?<parametermarker>:[\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_#$]+)|(?<query>select)|(?<identifier>([\\p{Lo}\\p{Lu}\\p{Ll}\\p{Lm}\\p{Nd}\\uff3f_#$]+)|(\"([^\"]|\"\")*\"))|(?<other>.)");

    $.Field({Static:true , Public:false}, "_sqlTokenParser", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "_commentGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_identifierGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_parameterMarkerGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_queryGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_stringGroup", $.Int32);

    $.Field({Static:true , Public:false}, "_otherGroup", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Declarations_Prefix", $.String, "declare\ntype refcursortype is ref cursor;\n");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Declarations_CursorType", $.String, " refcursortype;\n");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Body_Prefix", $.String, "begin\n");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Body_Suffix", $.String, "end;");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_QueryPrefix_Part1", $.String, "open ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_QueryPrefix_Part2", $.String, " for ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_Suffix_Part1", $.String, ";\n:");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_NonQuerySuffix_Part2", $.String, " := sql%rowcount;\n");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_QuerySuffix_Part2", $.String, " := ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Command_QuerySuffix_Part3", $.String, ";\n");

    $.Field({Static:false, Public:false}, "_usedParameterNames", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_commandList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_batchCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_dirty", $.Boolean);

    $.Property({Static:false, Public:false}, "BatchCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Property({Static:false, Public:true }, "CommandCount", $.Int32);

    $.Property({Static:false, Public:false}, "CommandList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "CommandTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Property({Static:false, Public:false}, "Transaction", $asm12.TypeRef("System.Data.OracleClient.OracleTransaction"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleCommandSet+LocalCommand */ 

(function LocalCommand$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OracleCommandSet+LocalCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbParameter")]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleCommandSet+LocalParameter")])
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "IsQuery", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "CommandText", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Data.Common.DbParameter")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ParameterNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ParameterInsertionPoints", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleCommandSet+LocalParameter")]));

    $.Field({Static:false, Public:false}, "ResultParameter", $asm12.TypeRef("System.Data.OracleClient.OracleParameter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OracleClient.OracleCommandSet+LocalParameter */ 

(function LocalParameter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleCommandSet+LocalParameter", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "ParameterIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "InsertionPoint", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "RemovalLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.TransactionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.TransactionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AutoCommit: 0, 
    LocalStarted: 1, 
    GlobalStarted: 2, 
  }
);

/* class System.Data.OracleClient.OracleConnection */ 

(function OracleConnection$Members () {
  var $, $thisType;











































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnection"), 
      Name: "System.Data.OracleClient.OracleConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "add_InfoMessage", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWeakReference", 
      new JSIL.MethodSignature(null, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginDbTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeDatabase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckError", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearAllPools", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearPool", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Get", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionString_Set", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDbCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateExecutePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.CodeAccessPermission"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeMe", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDistributedTransaction", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDistributedTransactionHelper", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.ITransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CloseCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionFactory", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConnectionTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Database", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnvironmentHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerConnection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PoolGroup", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerTimeZoneAdjustmentToUTC", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionAtLeastOracle8", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionAtLeastOracle9i", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_State", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ConnectionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Transaction", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnicodeEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserConnectionOptions", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactory", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaDataFactoryInternal", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenInternalConnection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetScratchBuffer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyWeakReference", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnInfoMessage", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Open", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PermissionDemand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_InfoMessage", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWeakReference", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackDeadTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PoolGroup", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionEvent", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerConnectionTo", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:true , Public:false}, "VerifyExecutePermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventInfoMessage", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_connectionFactory", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), function ($pi) {
        return $asm12.System.Data.OracleClient.OracleConnectionFactory.SingletonInstance;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExecutePermission", $asm07.TypeRef("System.Security.CodeAccessPermission"));

    $.Field({Static:false, Public:false}, "_userConnectionOptions", $asm12.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Field({Static:false, Public:false}, "_poolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Field({Static:false, Public:false}, "_innerConnection", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Field({Static:false, Public:false}, "_closeCount", $.Int32);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionString", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleConnection_ConnectionString"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RecommendedAsConfigurableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Oracle.Design.OracleConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ConnectionTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Database", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DataSource", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleConnection_DataSource"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "EnvironmentHandle", $asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"));

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:false}, "HasTransaction", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerTimeZoneAdjustmentToUTC", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleConnection_ServerVersion"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "ServerVersionAtLeastOracle8", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerVersionAtLeastOracle9i", $.Boolean);

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:false}, "Transaction", $asm12.TypeRef("System.Data.OracleClient.OracleTransaction"));

    $.Property({Static:false, Public:false}, "TransactionState", $asm12.TypeRef("System.Data.OracleClient.TransactionState"));

    $.Property({Static:false, Public:false}, "UnicodeEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "CloseCount", $.Int32);

    $.Property({Static:false, Public:false}, "ConnectionFactory", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"));

    $.Property({Static:false, Public:false}, "ConnectionOptions", $asm12.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Property({Static:false, Public:false}, "InnerConnection", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"));

    $.Property({Static:false, Public:false}, "PoolGroup", $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"));

    $.Property({Static:false, Public:true , Virtual:true }, "State", $asm11.TypeRef("System.Data.ConnectionState"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnection_State"]; });

    $.Property({Static:false, Public:false}, "UserConnectionOptions", $asm12.TypeRef("System.Data.Common.DbConnectionOptions"));

    $.Event({Static:false, Public:true }, "InfoMessage", $asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventHandler"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_InfoMessage"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleConnection_InfoMessage"]; });

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["InfoMessage"]; })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OracleConnectionFactory */ 

(function OracleConnectionFactory$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionFactory"), 
      Name: "System.Data.OracleClient.OracleConnectionFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [
          $asm12.TypeRef("System.Data.Common.DbConnectionOptions"), $.Object, 
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPool"), $asm11.TypeRef("System.Data.Common.DbConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionOptions", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.Common.DbConnectionOptions"), [$.String, $asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConnectionPoolGroupOptions", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroupOptions"), [$asm12.TypeRef("System.Data.Common.DbConnectionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateMetaDataFactory", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbMetaDataFactory"), [$asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderFactory", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbProviderFactory"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConnectionPoolGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInnerConnection", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectId", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.Common.DbConnection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PermissionDemand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetConnectionPoolGroup", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolGroup")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionEvent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
          $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetInnerConnectionTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Data.Common.DbConnection"), $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);

    $.Constant({Static:true , Public:true }, "_metaDataXml", $.String, "MetaDataXml");

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderFactory", $asm11.TypeRef("System.Data.Common.DbProviderFactory"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OraclePerformanceCounters */ 

(function OraclePerformanceCounters$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionPoolCounters"), 
      Name: "System.Data.OracleClient.OraclePerformanceCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "CategoryName", $.String, ".NET Data Provider for Oracle");

    $.Constant({Static:true , Public:false}, "CategoryHelp", $.String, "Counters for System.Data.OracleClient");

    $.Field({Static:true , Public:true , ReadOnly:true }, "SingletonInstance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleConnectionString */ 

(function OracleConnectionString$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.Common.DbConnectionOptions"), 
      Name: "System.Data.OracleClient.OracleConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreatePermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enlist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OmitOracleConnectionName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pooling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Unicode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParseSynonyms", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.Field({Static:true , Public:false}, "_validKeyNamesAndSynonyms", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_enlist", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_integratedSecurity", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_persistSecurityInfo", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_pooling", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_unicode", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_omitOracleConnectionName", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_loadBalanceTimeout", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataSource", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_password", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_userId", $.String);

    $.Property({Static:false, Public:false}, "Enlist", $.Boolean);

    $.Property({Static:false, Public:false}, "IntegratedSecurity", $.Boolean);

    $.Property({Static:false, Public:false}, "Pooling", $.Boolean);

    $.Property({Static:false, Public:false}, "Unicode", $.Boolean);

    $.Property({Static:false, Public:false}, "OmitOracleConnectionName", $.Boolean);

    $.Property({Static:false, Public:false}, "LoadBalanceTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "MaxPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "MinPoolSize", $.Int32);

    $.Property({Static:false, Public:false}, "DataSource", $.String);

    $.Property({Static:false, Public:false}, "UserId", $.String);

    $.Property({Static:false, Public:false}, "Password", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleConnectionStringBuilder */ 

(function OracleConnectionStringBuilder$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"), 
      Name: "System.Data.OracleClient.OracleConnectionStringBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPropertyDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntegratedSecurity", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enlist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IntegratedSecurity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LoadBalanceTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinPoolSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OmitOracleConnectionName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PersistSecurityInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pooling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Unicode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAt", 
      new JSIL.MethodSignature($.Object, [$asm12.TypeRef("System.Data.OracleClient.OracleConnectionStringBuilder+Keywords")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributesFromCollection", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Attribute")]), [$asm0A.TypeRef("System.ComponentModel.AttributeCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndex", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleConnectionStringBuilder+Keywords"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProperties", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnectionStringBuilder+Keywords"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enlist", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IntegratedSecurity", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LoadBalanceTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxPoolSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinPoolSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OmitOracleConnectionName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PersistSecurityInfo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pooling", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Unicode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserID", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_validKeywords", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_keywords", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleConnectionStringBuilder+Keywords")]));

    $.Field({Static:false, Public:false}, "_dataSource", $.String);

    $.Field({Static:false, Public:false}, "_password", $.String);

    $.Field({Static:false, Public:false}, "_userID", $.String);

    $.Field({Static:false, Public:false}, "_loadBalanceTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "_maxPoolSize", $.Int32);

    $.Field({Static:false, Public:false}, "_minPoolSize", $.Int32);

    $.Field({Static:false, Public:false}, "_enlist", $.Boolean);

    $.Field({Static:false, Public:false}, "_integratedSecurity", $.Boolean);

    $.Field({Static:false, Public:false}, "_persistSecurityInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "_pooling", $.Boolean);

    $.Field({Static:false, Public:false}, "_unicode", $.Boolean);

    $.Field({Static:false, Public:false}, "_omitOracleConnectionName", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "DataSource", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Data Source"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Source"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_DataSource"]; });

    $.Property({Static:false, Public:true }, "Enlist", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Enlist"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_Enlist"]; });

    $.Property({Static:false, Public:true }, "IntegratedSecurity", $.Boolean)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Integrated Security"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_IntegratedSecurity"]; });

    $.Property({Static:false, Public:true }, "LoadBalanceTimeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Load Balance Timeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_LoadBalanceTimeout"]; });

    $.Property({Static:false, Public:true }, "MaxPoolSize", $.Int32)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_MaxPoolSize"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Max Pool Size"]; });

    $.Property({Static:false, Public:true }, "MinPoolSize", $.Int32)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_MinPoolSize"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Min Pool Size"]; });

    $.Property({Static:false, Public:true }, "OmitOracleConnectionName", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Omit Oracle Connection Name"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_OmitOracleConnectionName"]; });

    $.Property({Static:false, Public:true }, "Password", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Password"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_Password"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.PasswordPropertyTextAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "PersistSecurityInfo", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Persist Security Info"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_PersistSecurityInfo"]; });

    $.Property({Static:false, Public:true }, "Pooling", $.Boolean)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_Pooling"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Pooling"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Pooling"]; });

    $.Property({Static:false, Public:true }, "Unicode", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["Unicode"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Initialization"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_Unicode"]; });

    $.Property({Static:false, Public:true }, "UserID", $.String)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Security"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbConnectionString_UserID"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DisplayNameAttribute"), function () { return ["User ID"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleConnectionStringBuilder has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultPropertyAttribute"), function () { return ["DataSource"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm12.System.Data.OracleClient.OracleConnectionStringBuilder_OracleConnectionStringBuilderConverter.__Type__]; });

})();

/* enum System.Data.OracleClient.OracleConnectionStringBuilder+Keywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OracleConnectionStringBuilder+Keywords", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DataSource: 0, 
    PersistSecurityInfo: 1, 
    IntegratedSecurity: 2, 
    UserID: 3, 
    Password: 4, 
    Enlist: 5, 
    Pooling: 6, 
    MinPoolSize: 7, 
    MaxPoolSize: 8, 
    Unicode: 9, 
    LoadBalanceTimeout: 10, 
    OmitOracleConnectionName: 11, 
  }
);

/* class System.Data.OracleClient.OracleConnectionStringBuilder+OracleConnectionStringBuilderConverter */ 

(function OracleConnectionStringBuilderConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.OracleClient.OracleConnectionStringBuilder+OracleConnectionStringBuilderConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm12.TypeRef("System.Data.OracleClient.OracleConnectionStringBuilder")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleDataAdapter */ 

(function OracleDataAdapter$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataAdapter"), 
      Name: "System.Data.OracleClient.OracleDataAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdated", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_RowUpdating", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddToBatch", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Data.IDbCommand")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatedEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateRowUpdatingEvent", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBatch", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InsertCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SelectCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UpdateBatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.IDataParameter"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetBatchedRecordsAffected", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeBatching", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdated", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRowUpdating", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdated", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_RowUpdating", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatingEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InsertCommand", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SelectCommand", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_UpdateBatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_DeleteCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_InsertCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_SelectCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.get_UpdateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "get_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_DeleteCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_DeleteCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_InsertCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_InsertCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_SelectCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_SelectCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.set_UpdateCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    )
      .Overrides($asm11.TypeRef("System.Data.IDbDataAdapter"), "set_UpdateCommand");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TerminateBatching", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdated", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EventRowUpdating", $.Object);

    $.Field({Static:false, Public:false}, "_deleteCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_insertCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_selectCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_updateCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_commandSet", $asm12.TypeRef("System.Data.OracleClient.OracleCommandSet"));

    $.Field({Static:false, Public:false}, "_updateBatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "DeleteCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_DeleteCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.DeleteCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "InsertCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_InsertCommand"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.InsertCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true }, "SelectCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Fill"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_SelectCommand"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.SelectCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateBatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "UpdateCommand", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_UpdateCommand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "System.Data.IDbDataAdapter.UpdateCommand", $asm11.TypeRef("System.Data.IDbCommand"));

    $.Event({Static:false, Public:true }, "RowUpdated", $asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatedEventHandler"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdated"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; });

    $.Event({Static:false, Public:true }, "RowUpdating", $asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatingEventHandler"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Update"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbDataAdapter_RowUpdating"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleDataAdapter has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ToolboxItemAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OracleDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["RowUpdated"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["Microsoft.VSDesigner.Data.VS.OracleDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

})();

/* class System.Data.OracleClient.OracleDataReader */ 

(function OracleDataReader$Members () {
  var $, $thisType;

































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbDataReader"), 
      Name: "System.Data.OracleClient.OracleDataReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OracleCommand"), $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), 
          $.String, $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OracleCommand"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $.String, $asm11.TypeRef("System.Data.CommandBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderHasColumns", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderHasData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderIsOpen", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertReaderIsOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSchemaTable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.DataTable"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillColumnInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FillSchemaTable", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FieldCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasRows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidRow", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordsAffected", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int64, [
          $.Int32, $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDataTypeName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleBFile", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBFile"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleBinary", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBinary"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleDateTime", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleDateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleLob", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleLob"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleMonthSpan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleMonthSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleNumber", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleNumber"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleString", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleString"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleTimeSpan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleTimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOracleValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetOrdinal", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificFieldType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProviderSpecificValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSchemaTable", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCommandBehavior", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.CommandBehavior")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NextResult", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextResultInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Constant({Static:true , Public:false}, "_prefetchMemory", $.Int32, 65536);

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:false, Public:false}, "_connectionCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_statementHandle", $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"));

    $.Field({Static:false, Public:false}, "_statementText", $.String);

    $.Field({Static:false, Public:false}, "_commandBehavior", $asm11.TypeRef("System.Data.CommandBehavior"));

    $.Field({Static:false, Public:false}, "_columnInfo", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleColumn")]));

    $.Field({Static:false, Public:false}, "_buffer", $asm12.TypeRef("System.Data.OracleClient.NativeBuffer_RowBuffer"));

    $.Field({Static:false, Public:false}, "_rowBufferLength", $.Int32);

    $.Field({Static:false, Public:false}, "_rowsToPrefetch", $.Int32);

    $.Field({Static:false, Public:false}, "_rowsTotal", $.Int32);

    $.Field({Static:false, Public:false}, "_isLastBuffer", $.Boolean);

    $.Field({Static:false, Public:false}, "_endOfData", $.Boolean);

    $.Field({Static:false, Public:false}, "_closeConnectionToo", $.Boolean);

    $.Field({Static:false, Public:false}, "_keyInfoRequested", $.Boolean);

    $.Field({Static:false, Public:false}, "_hasRows", $.Byte);

    $.Constant({Static:true , Public:false}, "x_hasRows_Unknown", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_hasRows_False", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_hasRows_True", $.Byte, 2);

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ObjectID", $.Int32);

    $.Field({Static:false, Public:false}, "_fieldNameLookup", $asm12.TypeRef("System.Data.ProviderBase.FieldNameLookup"));

    $.Field({Static:false, Public:false}, "_schemaTable", $asm11.TypeRef("System.Data.DataTable"));

    $.Field({Static:false, Public:false}, "_recordsAffected", $.Int32);

    $.Field({Static:false, Public:false}, "_refCursorDataReaders", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:false, Public:false}, "_nextRefCursor", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "FieldCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasRows", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValidRow", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RecordsAffected", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Data.OracleClient.OracleDateTime */ 

(function OracleDateTime$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleDateTime", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 8, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Globalization.Calendar")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"), $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDescriptor", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"), [
          $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEmptyDescriptor", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"), [$asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTimeInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTimeZoneInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hour", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Millisecond", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minute", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Year", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesFromBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBytesFromDescriptor", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"), $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalDateToNative", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalTimestampToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"), $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Unpack", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Constant({Static:true , Public:false}, "MaxOracleFSecPrecision", $.Int32, 9);

    $.Field({Static:false, Public:false}, "_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "x_DATE_Length", $.Byte, 7);

    $.Constant({Static:true , Public:false}, "x_TIMESTAMP_Length", $.Byte, 11);

    $.Constant({Static:true , Public:false}, "x_TIMESTAMP_WITH_TIMEZONE_Length", $.Byte, 13);

    $.Constant({Static:true , Public:false}, "FractionalSecondsPerTick", $.Int32, 100);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function OracleDateTime__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleDateTime__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Year", $.Int32);

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "Hour", $.Int32);

    $.Property({Static:false, Public:true }, "Minute", $.Int32);

    $.Property({Static:false, Public:true }, "Second", $.Int32);

    $.Property({Static:false, Public:true }, "Millisecond", $.Int32);

    $.Property({Static:false, Public:false}, "HasTimeZoneInfo", $.Boolean);

    $.Property({Static:false, Public:false}, "HasTimeInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleEncoding */ 

(function OracleEncoding$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Text.Encoding"), 
      Name: "System.Data.OracleClient.OracleEncoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection"));

    $.Property({Static:false, Public:false}, "Handle", $asm12.TypeRef("System.Data.OracleClient.OciHandle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleException */ 

(function OracleException$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbException"), 
      Name: "System.Data.OracleClient.OracleException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectionIsBroken", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($.Type, [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleInternalConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "_code", $.Int32);

    $.Property({Static:false, Public:true }, "Code", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleClientFactory */ 

(function OracleClientFactory$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbProviderFactory"), 
      Name: "System.Data.OracleClient.OracleClientFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCommandBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbCommandBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConnectionStringBuilder", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnectionStringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDataAdapter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbDataAdapter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateParameter", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.CodeAccessPermission"), [$asm07.TypeRef("System.Security.Permissions.PermissionState")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OracleClientFactory has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OracleInfoMessageEventArgs */ 

(function OracleInfoMessageEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Data.OracleClient.OracleInfoMessageEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleException"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "exception", $asm12.TypeRef("System.Data.OracleClient.OracleException"));

    $.Property({Static:false, Public:true }, "Code", $.Int32);

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "Source", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OracleClient.OracleInfoMessageEventHandler */ 

JSIL.MakeDelegate("System.Data.OracleClient.OracleInfoMessageEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventArgs")]));

/* class System.Data.OracleClient.OracleInternalConnection */ 

(function OracleInternalConnection$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.ProviderBase.DbConnectionInternal"), 
      Name: "System.Data.OracleClient.OracleInternalConnection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Activate", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginOracleTransaction", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginTransaction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbTransaction"), [$asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConnectionIsBroken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDeferredInfoMessage", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deactivate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Enlist", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Transaction"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FireDeferredInfoMessageEvents", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnvironmentHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTransaction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionAtLeastOracle8", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionAtLeastOracle8i", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionAtLeastOracle9i", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ServerVersionNormalized", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerVersionNumber", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SessionHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciSessionHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Transaction", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionState", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnicodeEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetScratchBuffer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServerTimeZoneAdjustmentToUTC", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenOnLocalTransaction", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseServerVersion", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProxyConnection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RollbackDeadTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Transaction", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TransactionState", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StringToNullTerminatedBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnEnlist", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_connectionOptions", $asm12.TypeRef("System.Data.OracleClient.OracleConnectionString"));

    $.Field({Static:false, Public:false}, "_environmentHandle", $asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"));

    $.Field({Static:false, Public:false}, "_errorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Field({Static:false, Public:false}, "_serverHandle", $asm12.TypeRef("System.Data.OracleClient.OciServerHandle"));

    $.Field({Static:false, Public:false}, "_serviceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Field({Static:false, Public:false}, "_sessionHandle", $asm12.TypeRef("System.Data.OracleClient.OciSessionHandle"));

    $.Field({Static:false, Public:false}, "_enlistContext", $asm12.TypeRef("System.Data.OracleClient.OciEnlistContext"));

    $.Field({Static:false, Public:false}, "_connectionIsOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "_transaction", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_transactionState", $asm12.TypeRef("System.Data.OracleClient.TransactionState"));

    $.Field({Static:false, Public:false}, "_deferredInfoMessageCollection", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.OracleClient.OracleInfoMessageEventArgs")]));

    $.Field({Static:false, Public:false}, "_serverVersion", $.Int64);

    $.Field({Static:false, Public:false}, "_serverVersionString", $.String);

    $.Field({Static:false, Public:false}, "_serverVersionStringNormalized", $.String);

    $.Field({Static:false, Public:false}, "_serverTimeZoneAdjustment", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_scratchBuffer", $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"));

    $.Field({Static:false, Public:false}, "_encodingDatabase", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "_encodingNational", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "EnvironmentHandle", $asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"));

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:false}, "HasTransaction", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersion", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ServerVersionNormalized", $.String);

    $.Property({Static:false, Public:false}, "ServerVersionAtLeastOracle8", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerVersionAtLeastOracle8i", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerVersionAtLeastOracle9i", $.Boolean);

    $.Property({Static:false, Public:false}, "ServerVersionNumber", $.Int64);

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:false}, "SessionHandle", $asm12.TypeRef("System.Data.OracleClient.OciSessionHandle"));

    $.Property({Static:false, Public:false}, "Transaction", $asm12.TypeRef("System.Data.OracleClient.OracleTransaction"));

    $.Property({Static:false, Public:false}, "TransactionState", $asm12.TypeRef("System.Data.OracleClient.TransactionState"));

    $.Property({Static:false, Public:false}, "UnicodeEnabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.OracleInternalConnection+PARSERSTATE */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OracleInternalConnection+PARSERSTATE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NOTHINGYET: 1, 
    PERIOD: 2, 
    DIGIT: 3, 
  }
);

/* class System.Data.OracleClient.OracleLob */ 

(function OracleLob$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Data.OracleClient.OracleLob", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OciLobLocator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustOffsetToOracle", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustOffsetToOracle", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustOracleToOffset", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustOracleToOffset", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertAmountIsEven", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertAmountIsValid", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertAmountIsValidOddOK", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertConnectionIsOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertObjectNotDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertPositionIsValid", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertTransactionExists", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginBatch", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleLobOpenMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [$.Type, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Int64, [
          $.Int64, $.Type, 
          $.Int64, $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EndBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Erase", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "Erase", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChunkSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionIsClosed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentOraclePosition", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Descriptor", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsBatched", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCharacterLob", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTemporary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LobLocator", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciLobLocator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LobType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceContextHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "_isNull", $.Boolean);

    $.Field({Static:false, Public:false}, "_lobLocator", $asm12.TypeRef("System.Data.OracleClient.OciLobLocator"));

    $.Field({Static:false, Public:false}, "_lobType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Field({Static:false, Public:false}, "_charsetForm", $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM"));

    $.Field({Static:false, Public:false}, "_currentPosition", $.Int64);

    $.Field({Static:false, Public:false}, "_isTemporaryState", $.Byte);

    $.Constant({Static:true , Public:false}, "x_IsTemporaryUnknown", $.Byte, 0);

    $.Constant({Static:true , Public:false}, "x_IsTemporary", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "x_IsNotTemporary", $.Byte, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true }, "ChunkSize", $.Int32);

    $.Property({Static:false, Public:true }, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Property({Static:false, Public:false}, "ConnectionIsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentOraclePosition", $.UInt32);

    $.Property({Static:false, Public:false}, "Descriptor", $asm12.TypeRef("System.Data.OracleClient.OciHandle"));

    $.Property({Static:false, Public:false}, "ErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Property({Static:false, Public:true }, "IsBatched", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCharacterLob", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTemporary", $.Boolean);

    $.Property({Static:false, Public:false}, "LobLocator", $asm12.TypeRef("System.Data.OracleClient.OciLobLocator"));

    $.Property({Static:false, Public:true }, "LobType", $asm12.TypeRef("System.Data.OracleClient.OracleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "ServiceContextHandle", $asm12.TypeRef("System.Data.OracleClient.OciServiceContextHandle"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.ICloneable"), 
      /* 2 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.OracleLobOpenMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OracleLobOpenMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ReadOnly: 1, 
    ReadWrite: 2, 
  }
);

/* struct System.Data.OracleClient.OracleMonthSpan */ 

(function OracleMonthSpan$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleMonthSpan", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssertValid", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToNative", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_value", $.Int32);

    $.Constant({Static:true , Public:false}, "MaxMonth", $.Int32, 176556);

    $.Constant({Static:true , Public:false}, "MinMonth", $.Int32, -176556);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Constant({Static:true , Public:false}, "NullValue", $.Int32, 2147483647);


    function OracleMonthSpan__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleMonthSpan__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OracleClient.OracleNumber */ 

(function OracleNumber$Members () {
  var $, $thisType;










































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleNumber", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Acos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Asin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Atan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Atan2", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Ceiling", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Cos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Cosh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exp", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Floor", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDecimal", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $asm07.TypeRef("System.Decimal"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDouble", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Double, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromInt32", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromInt64", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromString", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromStringOfDigits", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromUInt32", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromUInt64", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $.UInt64, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalAdd", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalCmp", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalDiv", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalIsInt", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalMod", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalMul", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalNeg", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalShift", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalSign", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalSub", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalTrunc", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log10", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToInt32", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToInt64", 
      new JSIL.MethodSignature($.Int64, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToNative", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Round", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Shift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sign", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sinh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sqrt", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Tan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Tanh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Truncate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.Field({Static:true , Public:false}, "doubleMinValue", $.Double, -9.99999999999999E+125);

    $.Field({Static:true , Public:false}, "doubleMaxValue", $.Double, 9.99999999999999E+125);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_DecimalMaxValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_DecimalMinValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_E", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_MaxValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_MinValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_MinusOne", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_One", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_Pi", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_TwoPow64", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "OciNumberValue_Zero", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "E", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxPrecision", $.Int32, 38);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxScale", $.Int32, 127);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinScale", $.Int32, -84);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinusOne", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "PI", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type);

    $.Constant({Static:true , Public:false}, "WholeDigitPattern", $.String, "999999999999999999999999999999999999999999999999999999999999999");

    $.Constant({Static:true , Public:false}, "WholeDigitPattern_Length", $.Int32, 63);


    function OracleNumber__cctor () {
      $thisType.E = new $thisType();
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MinusOne = new $thisType();
      $thisType.Null = new $thisType();
      $thisType.One = new $thisType();
      $thisType.PI = new $thisType();
      $thisType.Zero = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleNumber__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.Decimal"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleParameter */ 

(function OracleParameter$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameter"), 
      Name: "System.Data.OracleClient.OracleParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.Boolean, $.Byte, 
          $.Byte, $.String, 
          $asm11.TypeRef("System.Data.DataRowVersion"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32, $asm11.TypeRef("System.Data.ParameterDirection"), 
          $.String, $asm11.TypeRef("System.Data.DataRowVersion"), 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelper", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneHelperCore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CoerceValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm12.TypeRef("System.Data.OracleClient.MetaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareExchangeParent", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.Common.DbParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BindSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CoercedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandSetResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DbType", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OracleType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParameterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Precision", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrecisionInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Scale", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScaleInternal", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceColumnNullMapping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceVersion", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetActualSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCoercedValueInternal", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaType", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.MetaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMetaType", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.MetaType"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyTypeChanging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetDbType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetOracleType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetSize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CoercedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CommandSetResult", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DbType", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DbType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.ParameterDirection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OracleType", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ParameterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Precision", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PrecisionInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Scale", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ScaleInternal", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceColumnNullMapping", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SourceVersion", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.DataRowVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCoercedValueInternal", 
      new JSIL.MethodSignature(null, [$.Object, $asm12.TypeRef("System.Data.OracleClient.MetaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeOracleType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializePrecision", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeScale", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValuePrecisionCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueScaleCore", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSize", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueSizeCore", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_metaType", $asm12.TypeRef("System.Data.OracleClient.MetaType"));

    $.Field({Static:false, Public:false}, "_commandSetResult", $.Int32);

    $.Field({Static:false, Public:false}, "_coercedMetaType", $asm12.TypeRef("System.Data.OracleClient.MetaType"));

    $.Field({Static:false, Public:false}, "_parameterName", $.String);

    $.Field({Static:false, Public:false}, "_precision", $.Byte);

    $.Field({Static:false, Public:false}, "_scale", $.Byte);

    $.Field({Static:false, Public:false}, "_hasScale", $.Boolean);

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Field({Static:false, Public:false}, "_parent", $.Object);

    $.Field({Static:false, Public:false}, "_direction", $asm11.TypeRef("System.Data.ParameterDirection"));

    $.Field({Static:false, Public:false}, "_size", $.Int32);

    $.Field({Static:false, Public:false}, "_offset", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceColumn", $.String);

    $.Field({Static:false, Public:false}, "_sourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"));

    $.Field({Static:false, Public:false}, "_sourceColumnNullMapping", $.Boolean);

    $.Field({Static:false, Public:false}, "_isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "_coercedValue", $.Object);

    $.Property({Static:false, Public:false}, "BindSize", $.Int32);

    $.Property({Static:false, Public:false}, "CommandSetResult", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "DbType", $asm11.TypeRef("System.Data.DbType"));

    $.Property({Static:false, Public:true }, "OracleType", $asm12.TypeRef("System.Data.OracleClient.OracleType"))
      .Attribute($asm11.TypeRef("System.Data.Common.DbProviderSpecificTypePropertyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["OracleCategory_Data"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["OracleParameter_OracleType"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm12.System.Data.OracleClient.OracleType.VarChar]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ParameterName", $.String)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_ParameterName"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Precision", $.Byte)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Precision has been deprecated.  Use the Math classes to explicitly set the precision of a decimal.  http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Property({Static:false, Public:false}, "PrecisionInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Scale", $.Byte)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Scale has been deprecated.  Use the Math classes to explicitly set the scale of a decimal.  http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.Property({Static:false, Public:false}, "ScaleInternal", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.StringConverter.__Type__]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_Value"]; });

    $.Property({Static:false, Public:false}, "CoercedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Direction", $asm11.TypeRef("System.Data.ParameterDirection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.RefreshPropertiesAttribute"), function () { return [$asm0A.System.ComponentModel.RefreshProperties.All]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_Direction"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "Offset", $.Int32)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_Offset"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Size", $.Int32)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_Size"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Data"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumn", $.String)
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_SourceColumn"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "SourceColumnNullMapping", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceVersion", $asm11.TypeRef("System.Data.DataRowVersion"))
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResCategoryAttribute"), function () { return ["DataCategory_Update"]; })
      .Attribute($asm12.TypeRef("System.Data.OracleClient.ResDescriptionAttribute"), function () { return ["DbParameter_SourceVersion"]; });

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm12.System.Data.OracleClient.OracleParameter_OracleParameterConverter.__Type__]; });

})();

/* class System.Data.OracleClient.OracleParameter+OracleParameterConverter */ 

(function OracleParameterConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "System.Data.OracleClient.OracleParameter+OracleParameterConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Design.Serialization.InstanceDescriptor"), [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleParameterBinding */ 

(function OracleParameterBinding$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OracleParameterBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleCommand"), $asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTemporaryLobForValue", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleLob"), [
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameter", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputValue", 
      new JSIL.MethodSignature($.Object, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Data.IDataParameter"), $asm11.TypeRef("System.Data.ParameterDirection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostExecute", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareForBind", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutOracleValue", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.Field({Static:false, Public:false}, "_command", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Field({Static:false, Public:false}, "_parameter", $asm12.TypeRef("System.Data.OracleClient.OracleParameter"));

    $.Field({Static:false, Public:false}, "_coercedValue", $.Object);

    $.Field({Static:false, Public:false}, "_bindingMetaType", $asm12.TypeRef("System.Data.OracleClient.MetaType"));

    $.Field({Static:false, Public:false}, "_bindHandle", $asm12.TypeRef("System.Data.OracleClient.OciBindHandle"));

    $.Field({Static:false, Public:false}, "_bindSize", $.Int32);

    $.Field({Static:false, Public:false}, "_bufferLength", $.Int32);

    $.Field({Static:false, Public:false}, "_indicatorOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_lengthOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_valueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_bindAsUCS2", $.Boolean);

    $.Field({Static:false, Public:false}, "_freeTemporaryLob", $.Boolean);

    $.Field({Static:false, Public:false}, "_descriptor", $asm12.TypeRef("System.Data.OracleClient.OciStatementHandle"));

    $.Field({Static:false, Public:false}, "_locator", $asm12.TypeRef("System.Data.OracleClient.OciLobLocator"));

    $.Field({Static:false, Public:false}, "_dateTimeDescriptor", $asm12.TypeRef("System.Data.OracleClient.OciDateTimeDescriptor"));

    $.Property({Static:false, Public:false}, "Parameter", $asm12.TypeRef("System.Data.OracleClient.OracleParameter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleParameterCollection */ 

(function OracleParameterCollection$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbParameterCollection"), 
      Name: "System.Data.OracleClient.OracleParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [
          $.String, $asm12.TypeRef("System.Data.OracleClient.OracleType"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddWithValue", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckName", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParameter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Data.Common.DbParameter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.IEnumerable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RangeCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleParameter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Data.Common.DbParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false}, "ItemType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm12.System.Data.OracleClient.OracleParameter.__Type__;
      });

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")]));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Data.OracleClient.OracleParameter"));

    $.Property({Static:false, Public:true }, "Item", $asm12.TypeRef("System.Data.OracleClient.OracleParameter"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "InnerList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Data.OracleClient.OracleParameter")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ListBindableAttribute"), function () { return [false]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.OracleClient.OraclePermission */ 

(function OraclePermission$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Data.OracleClient.OraclePermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OraclePermissionAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionEntry", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DBConnectionString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "DecodeXmlValue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeXmlValue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowBlankPassword", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "_isUnrestricted", $.Boolean);

    $.Field({Static:false, Public:false}, "_allowBlankPassword", $.Boolean);

    $.Field({Static:false, Public:false}, "_keyvaluetree", $asm12.TypeRef("System.Data.OracleClient.NameValuePermission"));

    $.Field({Static:false, Public:false}, "_keyvalues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "AllowBlankPassword", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OraclePermission has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OraclePermissionAttribute */ 

(function OraclePermissionAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.Data.OracleClient.OraclePermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowBlankPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyRestrictionBehavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyRestrictions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowBlankPassword", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyRestrictionBehavior", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyRestrictions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldSerializeConnectionString", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:true }, "ShouldSerializeKeyRestrictions", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "_allowBlankPassword", $.Boolean);

    $.Field({Static:false, Public:false}, "_connectionString", $.String);

    $.Field({Static:false, Public:false}, "_restrictions", $.String);

    $.Field({Static:false, Public:false}, "_behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:true }, "AllowBlankPassword", $.Boolean);

    $.Property({Static:false, Public:true }, "ConnectionString", $.String);

    $.Property({Static:false, Public:true }, "KeyRestrictionBehavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:true }, "KeyRestrictions", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Struct"
      )]; })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["OraclePermissionAttribute has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false]; });

})();

/* class System.Data.OracleClient.OracleRowUpdatedEventArgs */ 

(function OracleRowUpdatedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatedEventArgs"), 
      Name: "System.Data.OracleClient.OracleRowUpdatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OracleClient.OracleRowUpdatedEventHandler */ 

JSIL.MakeDelegate("System.Data.OracleClient.OracleRowUpdatedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatedEventArgs")]));

/* class System.Data.OracleClient.OracleRowUpdatingEventArgs */ 

(function OracleRowUpdatingEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.RowUpdatingEventArgs"), 
      Name: "System.Data.OracleClient.OracleRowUpdatingEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Data.DataRow"), $asm11.TypeRef("System.Data.IDbCommand"), 
          $asm11.TypeRef("System.Data.StatementType"), $asm11.TypeRef("System.Data.Common.DataTableMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseCommand", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_BaseCommand", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.IDbCommand"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleCommand"))
    );

    $.Property({Static:false, Public:true }, "Command", $asm12.TypeRef("System.Data.OracleClient.OracleCommand"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseCommand", $asm11.TypeRef("System.Data.IDbCommand"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Data.OracleClient.OracleRowUpdatingEventHandler */ 

JSIL.MakeDelegate("System.Data.OracleClient.OracleRowUpdatingEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm12.TypeRef("System.Data.OracleClient.OracleRowUpdatingEventArgs")]));

/* class System.Data.OracleClient.OracleSqlParser */ 

(function OracleSqlParser$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Data.OracleClient.DbSqlParser"), 
      Name: "System.Data.OracleClient.OracleSqlParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CatalogCase", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CatalogMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindConstraintColumn", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GatherKeyColumns", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GatherTableColumns", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumnCollection"), [$asm12.TypeRef("System.Data.OracleClient.DbSqlParserTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSynonymQueryStatement", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.OracleConnection")])
    );

    $.Constant({Static:true , Public:false}, "SynonymQueryBegin", $.String, "select table_owner, table_name from all_synonyms where");

    $.Constant({Static:true , Public:false}, "SynonymQueryNoSchema", $.String, " owner in ('PUBLIC', user)");

    $.Constant({Static:true , Public:false}, "SynonymQuerySchema", $.String, " owner = '");

    $.Constant({Static:true , Public:false}, "SynonymQueryTable", $.String, " and synonym_name = '");

    $.Constant({Static:true , Public:false}, "SynonymQueryEnd", $.String, "' order by decode(owner, 'PUBLIC', 2, 1)");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintOwnerParameterName", $.String, "OwnerName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintTableParameterName", $.String, "TableName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery1a", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery1b_ownerDefault", $.String, " and ac.owner = user");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery1b_ownerIsKnown", $.String, " and ac.owner = :OwnerName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery1c", $.String, " and ac.table_name = :TableName order by acc.constraint_name");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery2a", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery2b_ownerDefault", $.String, " and ai.owner = user");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery2b_ownerIsKnown", $.String, " and ai.owner = :OwnerName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConstraintQuery2c", $.String, " and ai.table_name = :TableName order by aic.index_name");

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_quoteCharacter", $.String, "\"");

    $.Field({Static:true , Public:false, ReadOnly:true }, "_regexPattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleSqlParser+ConstraintColumn */ 

(function ConstraintColumn$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.OracleSqlParser+ConstraintColumn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "columnName", $.String);

    $.Field({Static:false, Public:false}, "constraintType", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn+ConstraintType"));

    $.Field({Static:false, Public:false}, "parsedColumn", $asm12.TypeRef("System.Data.OracleClient.DbSqlParserColumn"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Data.OracleClient.OracleString */ 

(function OracleString$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleString", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $.Boolean, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLength", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.MetaType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToNative", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToString", 
      new JSIL.MethodSignature($.String, [
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.MetaType"), 
          $asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function OracleString__cctor () {
      $thisType.Empty = new $thisType();
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleString__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Item", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Data.OracleClient.OracleTimeSpan */ 

(function OracleTimeSpan$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Data.OracleClient.OracleTimeSpan", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Days", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hours", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Milliseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minutes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToNative", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MarshalToTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEquals", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Data.OracleClient.OracleBoolean"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Unpack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "FractionalSecondsPerTick", $.Int32, 100);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Null", $.Type);


    function OracleTimeSpan__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.Null = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OracleTimeSpan__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Days", $.Int32);

    $.Property({Static:false, Public:true }, "Hours", $.Int32);

    $.Property({Static:false, Public:true }, "Minutes", $.Int32);

    $.Property({Static:false, Public:true }, "Seconds", $.Int32);

    $.Property({Static:false, Public:true }, "Milliseconds", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable"), 
      /* 1 */ $asm11.TypeRef("System.Data.SqlTypes.INullable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.OracleTransaction */ 

(function OracleTransaction$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Data.Common.DbTransaction"), 
      Name: "System.Data.OracleClient.OracleTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Data.OracleClient.OracleConnection"), $asm11.TypeRef("System.Data.IsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertNotCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OracleConnection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DbConnection", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.Common.DbConnection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Field({Static:false, Public:false}, "_connectionCloseCount", $.Int32);

    $.Field({Static:false, Public:false}, "_isolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Field({Static:true , Public:false}, "_objectTypeCount", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_objectID", $.Int32);

    $.Property({Static:false, Public:true }, "Connection", $asm12.TypeRef("System.Data.OracleClient.OracleConnection"));

    $.Property({Static:false, Public:false, Virtual:true }, "DbConnection", $asm11.TypeRef("System.Data.Common.DbConnection"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm11.TypeRef("System.Data.IsolationLevel"));

    $.Property({Static:false, Public:false}, "ObjectID", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Data.OracleClient.OracleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Data.OracleClient.OracleType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BFile: 1, 
    Blob: 2, 
    Char: 3, 
    Clob: 4, 
    Cursor: 5, 
    DateTime: 6, 
    IntervalDayToSecond: 7, 
    IntervalYearToMonth: 8, 
    LongRaw: 9, 
    LongVarChar: 10, 
    NChar: 11, 
    NClob: 12, 
    Number: 13, 
    NVarChar: 14, 
    Raw: 15, 
    RowId: 16, 
    Timestamp: 18, 
    TimestampLocal: 19, 
    TimestampWithTZ: 20, 
    VarChar: 22, 
    Byte: 23, 
    UInt16: 24, 
    UInt32: 25, 
    SByte: 26, 
    Int16: 27, 
    Int32: 28, 
    Float: 29, 
    Double: 30, 
  }
);

/* class System.Data.OracleClient.TempEnvironment */ 

(function TempEnvironment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.TempEnvironment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorHandle", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "environmentHandle", $asm12.TypeRef("System.Data.OracleClient.OciEnvironmentHandle"));

    $.Field({Static:true , Public:false}, "availableErrorHandle", $asm12.TypeRef("System.Data.OracleClient.OciErrorHandle"));

    $.Field({Static:true , Public:false}, "isInitialized", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "locked", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.TracedNativeMethods */ 

(function TracedNativeMethods$Members () {
  var $, $thisType;























































  JSIL.MakeStaticClass("System.Data.OracleClient.TracedNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIAttrSet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $asm12.TypeRef("System.Data.OracleClient.OCI+ATTR"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIBindByName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.String, 
          $.Int32, $.IntPtr, 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), 
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIDefineArrayOfStruct", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIDefineByPos", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32, 
          $.IntPtr, $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+DATATYPE"), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIDefineDynamic", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+Callback+OCICallbackDefine")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIDescriptorAlloc", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIDescriptorFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIEnvCreate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIEnvNlsCreate", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), 
          $.UInt16, $.UInt16
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIErrorGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIHandleAlloc", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIHandleFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "OCILobAppend", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobClose", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobCreateTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt16, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM"), $asm12.TypeRef("System.Data.OracleClient.OCI+LOB_TYPE"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+DURATION")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobErase", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobFileExists", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobFileGetName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt16]), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt16])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobFileSetName", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciFileDescriptor"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobFreeTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobGetChunkSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobGetLength", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobIsOpen", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobIsTemporary", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobLoadFromFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.UInt32, $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobOpen", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Byte
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $.UInt16, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobTrim", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCILobWrite", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $.Byte, 
          $.UInt16, $asm12.TypeRef("System.Data.OracleClient.OCI+CHARSETFORM")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIParamGet", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+HTYPE"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIRowidToChar", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.Data.OracleClient.OciHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIServerAttach", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.String, $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIServerDetach", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "OCIServerVersion", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.NativeBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCISessionBegin", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OCI+CRED"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCISessionEnd", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIStmtExecute", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $.Int32, 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIStmtFetch", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.Int32, $asm12.TypeRef("System.Data.OracleClient.OCI+FETCH"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCIStmtPrepare", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $.String, $asm12.TypeRef("System.Data.OracleClient.OCI+SYNTAX"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE"), $asm12.TypeRef("System.Data.OracleClient.OracleConnection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCITransCommit", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OCITransRollback", 
      new JSIL.MethodSignature($.Int32, [
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OCI+MODE")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "oermsg", 
      new JSIL.MethodSignature($.Int32, [$.Int16, $asm12.TypeRef("System.Data.OracleClient.NativeBuffer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OraMTSEnlCtxGet", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm12.TypeRef("System.Data.OracleClient.OciHandle"), 
          $asm12.TypeRef("System.Data.OracleClient.OciHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "OraMTSEnlCtxRel", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "OraMTSJoinTxn", 
      new JSIL.MethodSignature($.Int32, [$asm12.TypeRef("System.Data.OracleClient.OciEnlistContext"), $asm27.TypeRef("System.Transactions.IDtcTransaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OraMTSOCIErrGet", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm12.TypeRef("System.Data.OracleClient.NativeBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NameValuePair */ 

(function NameValuePair$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.NameValuePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_length", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "_next", $.Type);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.NameValuePermission */ 

(function NameValuePermission$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.NameValuePermission", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Data.OracleClient.DBConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "AddEntry", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm07.TypeRef("System.Collections.ArrayList"), 
          $asm12.TypeRef("System.Data.OracleClient.DBConnectionString")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckKeyForValue", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueForKeyPermit", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Data.OracleClient.DBConnectionString")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyNameValue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Intersect", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.IComparable"), "CompareTo");

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Field({Static:false, Public:false}, "_entry", $asm12.TypeRef("System.Data.OracleClient.DBConnectionString"));

    $.Field({Static:false, Public:false}, "_tree", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Data.OracleClient.DBConnectionString */ 

(function DBConnectionString$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.DBConnectionString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm12.TypeRef("System.Data.Common.DbConnectionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Data.Common.DbConnectionOptions"), $.String, 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm11.TypeRef("System.Data.KeyRestrictionBehavior")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Behavior", 
      JSIL.MethodSignature.Return($asm11.TypeRef("System.Data.KeyRestrictionBehavior"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyChain", 
      JSIL.MethodSignature.Return($asm12.TypeRef("System.Data.OracleClient.NameValuePair"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Restrictions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRestrictedKeyword", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewRestrictionAllowOnly", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewRestrictionIntersect", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoDuplicateUnion", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseRestrictions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveDuplicates", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Verify", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptedUsersConnectionString", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_parsetable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keychain", $asm12.TypeRef("System.Data.OracleClient.NameValuePair"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasPassword", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictionValues", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictions", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_encryptedActualConnectionString", $.String);

    $.Property({Static:false, Public:false}, "Behavior", $asm11.TypeRef("System.Data.KeyRestrictionBehavior"));

    $.Property({Static:false, Public:false}, "ConnectionString", $.String);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "KeyChain", $asm12.TypeRef("System.Data.OracleClient.NameValuePair"));

    $.Property({Static:false, Public:false}, "Restrictions", $.String);

    $.Property({Static:false, Public:false}, "Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Data.OracleClient.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Data.OracleClient.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Data.OracleClient.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Data.OracleClient.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Data.OracleClient.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Data.OracleClient.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ADP_CollectionIndexInt32", $.String, "ADP_CollectionIndexInt32");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIndexString", $.String, "ADP_CollectionIndexString");

    $.Constant({Static:true , Public:false}, "ADP_CollectionInvalidType", $.String, "ADP_CollectionInvalidType");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIsNotParent", $.String, "ADP_CollectionIsNotParent");

    $.Constant({Static:true , Public:false}, "ADP_CollectionIsParent", $.String, "ADP_CollectionIsParent");

    $.Constant({Static:true , Public:false}, "ADP_CollectionNullValue", $.String, "ADP_CollectionNullValue");

    $.Constant({Static:true , Public:false}, "ADP_CollectionRemoveInvalidObject", $.String, "ADP_CollectionRemoveInvalidObject");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionAlreadyOpen", $.String, "ADP_ConnectionAlreadyOpen");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Closed", $.String, "ADP_ConnectionStateMsg_Closed");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Connecting", $.String, "ADP_ConnectionStateMsg_Connecting");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_Open", $.String, "ADP_ConnectionStateMsg_Open");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_OpenExecuting", $.String, "ADP_ConnectionStateMsg_OpenExecuting");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg_OpenFetching", $.String, "ADP_ConnectionStateMsg_OpenFetching");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStateMsg", $.String, "ADP_ConnectionStateMsg");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionStringSyntax", $.String, "ADP_ConnectionStringSyntax");

    $.Constant({Static:true , Public:false}, "ADP_DataReaderClosed", $.String, "ADP_DataReaderClosed");

    $.Constant({Static:true , Public:false}, "ADP_EmptyString", $.String, "ADP_EmptyString");

    $.Constant({Static:true , Public:false}, "ADP_InternalConnectionError", $.String, "ADP_InternalConnectionError");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataDirectory", $.String, "ADP_InvalidDataDirectory");

    $.Constant({Static:true , Public:false}, "ADP_InvalidEnumerationValue", $.String, "ADP_InvalidEnumerationValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidKey", $.String, "ADP_InvalidKey");

    $.Constant({Static:true , Public:false}, "ADP_InvalidOffsetValue", $.String, "ADP_InvalidOffsetValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidValue", $.String, "ADP_InvalidValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidXMLBadVersion", $.String, "ADP_InvalidXMLBadVersion");

    $.Constant({Static:true , Public:false}, "ADP_NoConnectionString", $.String, "ADP_NoConnectionString");

    $.Constant({Static:true , Public:false}, "ADP_NotAPermissionElement", $.String, "ADP_NotAPermissionElement");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionPropertySet", $.String, "ADP_OpenConnectionPropertySet");

    $.Constant({Static:true , Public:false}, "ADP_PermissionTypeMismatch", $.String, "ADP_PermissionTypeMismatch");

    $.Constant({Static:true , Public:false}, "ADP_PooledOpenTimeout", $.String, "ADP_PooledOpenTimeout");

    $.Constant({Static:true , Public:false}, "DataCategory_Data", $.String, "DataCategory_Data");

    $.Constant({Static:true , Public:false}, "DataCategory_StateChange", $.String, "DataCategory_StateChange");

    $.Constant({Static:true , Public:false}, "DataCategory_Update", $.String, "DataCategory_Update");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandTimeout", $.String, "DbCommand_CommandTimeout");

    $.Constant({Static:true , Public:false}, "DbConnection_State", $.String, "DbConnection_State");

    $.Constant({Static:true , Public:false}, "DbConnection_StateChange", $.String, "DbConnection_StateChange");

    $.Constant({Static:true , Public:false}, "DbParameter_DbType", $.String, "DbParameter_DbType");

    $.Constant({Static:true , Public:false}, "DbParameter_Direction", $.String, "DbParameter_Direction");

    $.Constant({Static:true , Public:false}, "DbParameter_IsNullable", $.String, "DbParameter_IsNullable");

    $.Constant({Static:true , Public:false}, "DbParameter_Offset", $.String, "DbParameter_Offset");

    $.Constant({Static:true , Public:false}, "DbParameter_ParameterName", $.String, "DbParameter_ParameterName");

    $.Constant({Static:true , Public:false}, "DbParameter_Size", $.String, "DbParameter_Size");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceColumn", $.String, "DbParameter_SourceColumn");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceVersion", $.String, "DbParameter_SourceVersion");

    $.Constant({Static:true , Public:false}, "DbParameter_SourceColumnNullMapping", $.String, "DbParameter_SourceColumnNullMapping");

    $.Constant({Static:true , Public:false}, "DbParameter_Value", $.String, "DbParameter_Value");

    $.Constant({Static:true , Public:false}, "MDF_QueryFailed", $.String, "MDF_QueryFailed");

    $.Constant({Static:true , Public:false}, "MDF_TooManyRestrictions", $.String, "MDF_TooManyRestrictions");

    $.Constant({Static:true , Public:false}, "MDF_InvalidRestrictionValue", $.String, "MDF_InvalidRestrictionValue");

    $.Constant({Static:true , Public:false}, "MDF_UndefinedCollection", $.String, "MDF_UndefinedCollection");

    $.Constant({Static:true , Public:false}, "MDF_UndefinedPopulationMechanism", $.String, "MDF_UndefinedPopulationMechanism");

    $.Constant({Static:true , Public:false}, "MDF_UnsupportedVersion", $.String, "MDF_UnsupportedVersion");

    $.Constant({Static:true , Public:false}, "MDF_MissingDataSourceInformationColumn", $.String, "MDF_MissingDataSourceInformationColumn");

    $.Constant({Static:true , Public:false}, "MDF_IncorrectNumberOfDataSourceInformationRows", $.String, "MDF_IncorrectNumberOfDataSourceInformationRows");

    $.Constant({Static:true , Public:false}, "MDF_MissingRestrictionColumn", $.String, "MDF_MissingRestrictionColumn");

    $.Constant({Static:true , Public:false}, "MDF_MissingRestrictionRow", $.String, "MDF_MissingRestrictionRow");

    $.Constant({Static:true , Public:false}, "MDF_NoColumns", $.String, "MDF_NoColumns");

    $.Constant({Static:true , Public:false}, "MDF_UnableToBuildCollection", $.String, "MDF_UnableToBuildCollection");

    $.Constant({Static:true , Public:false}, "MDF_AmbigousCollectionName", $.String, "MDF_AmbigousCollectionName");

    $.Constant({Static:true , Public:false}, "MDF_CollectionNameISNotUnique", $.String, "MDF_CollectionNameISNotUnique");

    $.Constant({Static:true , Public:false}, "MDF_DataTableDoesNotExist", $.String, "MDF_DataTableDoesNotExist");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXml", $.String, "MDF_InvalidXml");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXmlMissingColumn", $.String, "MDF_InvalidXmlMissingColumn");

    $.Constant({Static:true , Public:false}, "MDF_InvalidXmlInvalidValue", $.String, "MDF_InvalidXmlInvalidValue");

    $.Constant({Static:true , Public:false}, "ADP_InternalError", $.String, "ADP_InternalError");

    $.Constant({Static:true , Public:false}, "ADP_NoMessageAvailable", $.String, "ADP_NoMessageAvailable");

    $.Constant({Static:true , Public:false}, "ADP_BadBindValueType", $.String, "ADP_BadBindValueType");

    $.Constant({Static:true , Public:false}, "ADP_BadOracleClientImageFormat", $.String, "ADP_BadOracleClientImageFormat");

    $.Constant({Static:true , Public:false}, "ADP_BadOracleClientVersion", $.String, "ADP_BadOracleClientVersion");

    $.Constant({Static:true , Public:false}, "ADP_BufferExceeded", $.String, "ADP_BufferExceeded");

    $.Constant({Static:true , Public:false}, "ADP_CannotDeriveOverloaded", $.String, "ADP_CannotDeriveOverloaded");

    $.Constant({Static:true , Public:false}, "ADP_CannotOpenLobWithDifferentMode", $.String, "ADP_CannotOpenLobWithDifferentMode");

    $.Constant({Static:true , Public:false}, "ADP_ChangeDatabaseNotSupported", $.String, "ADP_ChangeDatabaseNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_ClosedConnectionError", $.String, "ADP_ClosedConnectionError");

    $.Constant({Static:true , Public:false}, "ADP_ClosedDataReaderError", $.String, "ADP_ClosedDataReaderError");

    $.Constant({Static:true , Public:false}, "ADP_CommandTextRequired", $.String, "ADP_CommandTextRequired");

    $.Constant({Static:true , Public:false}, "ADP_ConfigWrongNumberOfValues", $.String, "ADP_ConfigWrongNumberOfValues");

    $.Constant({Static:true , Public:false}, "ADP_ConfigUnableToLoadXmlMetaDataFile", $.String, "ADP_ConfigUnableToLoadXmlMetaDataFile");

    $.Constant({Static:true , Public:false}, "ADP_ConnectionRequired", $.String, "ADP_ConnectionRequired");

    $.Constant({Static:true , Public:false}, "ADP_CouldNotCreateEnvironment", $.String, "ADP_CouldNotCreateEnvironment");

    $.Constant({Static:true , Public:false}, "ADP_ConvertFailed", $.String, "ADP_ConvertFailed");

    $.Constant({Static:true , Public:false}, "ADP_DataIsNull", $.String, "ADP_DataIsNull");

    $.Constant({Static:true , Public:false}, "ADP_DataReaderNoData", $.String, "ADP_DataReaderNoData");

    $.Constant({Static:true , Public:false}, "ADP_DeriveParametersNotSupported", $.String, "ADP_DeriveParametersNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_DistribTxRequiresOracle9i", $.String, "ADP_DistribTxRequiresOracle9i");

    $.Constant({Static:true , Public:false}, "ADP_DistribTxRequiresOracleServicesForMTS", $.String, "ADP_DistribTxRequiresOracleServicesForMTS");

    $.Constant({Static:true , Public:false}, "ADP_IdentifierIsNotQuoted", $.String, "ADP_IdentifierIsNotQuoted");

    $.Constant({Static:true , Public:false}, "ADP_InputRefCursorNotSupported", $.String, "ADP_InputRefCursorNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_InternalProviderError", $.String, "ADP_InternalProviderError");

    $.Constant({Static:true , Public:false}, "ADP_InvalidCommandType", $.String, "ADP_InvalidCommandType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidConnectionOptionLength", $.String, "ADP_InvalidConnectionOptionLength");

    $.Constant({Static:true , Public:false}, "ADP_InvalidConnectionOptionValue", $.String, "ADP_InvalidConnectionOptionValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataLength", $.String, "ADP_InvalidDataLength");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataType", $.String, "ADP_InvalidDataType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDataTypeForValue", $.String, "ADP_InvalidDataTypeForValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDbType", $.String, "ADP_InvalidDbType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidDestinationBufferIndex", $.String, "ADP_InvalidDestinationBufferIndex");

    $.Constant({Static:true , Public:false}, "ADP_InvalidLobType", $.String, "ADP_InvalidLobType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidMinMaxPoolSizeValues", $.String, "ADP_InvalidMinMaxPoolSizeValues");

    $.Constant({Static:true , Public:false}, "ADP_InvalidOracleType", $.String, "ADP_InvalidOracleType");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSeekOrigin", $.String, "ADP_InvalidSeekOrigin");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSizeValue", $.String, "ADP_InvalidSizeValue");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSourceBufferIndex", $.String, "ADP_InvalidSourceBufferIndex");

    $.Constant({Static:true , Public:false}, "ADP_InvalidSourceOffset", $.String, "ADP_InvalidSourceOffset");

    $.Constant({Static:true , Public:false}, "ADP_KeywordNotSupported", $.String, "ADP_KeywordNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_LobAmountExceeded", $.String, "ADP_LobAmountExceeded");

    $.Constant({Static:true , Public:false}, "ADP_LobAmountMustBeEven", $.String, "ADP_LobAmountMustBeEven");

    $.Constant({Static:true , Public:false}, "ADP_LobPositionMustBeEven", $.String, "ADP_LobPositionMustBeEven");

    $.Constant({Static:true , Public:false}, "ADP_LobWriteInvalidOnNull", $.String, "ADP_LobWriteInvalidOnNull");

    $.Constant({Static:true , Public:false}, "ADP_LobWriteRequiresTransaction", $.String, "ADP_LobWriteRequiresTransaction");

    $.Constant({Static:true , Public:false}, "ADP_MonthOutOfRange", $.String, "ADP_MonthOutOfRange");

    $.Constant({Static:true , Public:false}, "ADP_MustBePositive", $.String, "ADP_MustBePositive");

    $.Constant({Static:true , Public:false}, "ADP_NoCommandText", $.String, "ADP_NoCommandText");

    $.Constant({Static:true , Public:false}, "ADP_NoData", $.String, "ADP_NoData");

    $.Constant({Static:true , Public:false}, "ADP_NoLocalTransactionInDistributedContext", $.String, "ADP_NoLocalTransactionInDistributedContext");

    $.Constant({Static:true , Public:false}, "ADP_NoOptimizedDirectTableAccess", $.String, "ADP_NoOptimizedDirectTableAccess");

    $.Constant({Static:true , Public:false}, "ADP_NoParallelTransactions", $.String, "ADP_NoParallelTransactions");

    $.Constant({Static:true , Public:false}, "ADP_OpenConnectionRequired", $.String, "ADP_OpenConnectionRequired");

    $.Constant({Static:true , Public:false}, "ADP_OperationFailed", $.String, "ADP_OperationFailed");

    $.Constant({Static:true , Public:false}, "ADP_OperationResultedInOverflow", $.String, "ADP_OperationResultedInOverflow");

    $.Constant({Static:true , Public:false}, "ADP_ParameterConversionFailed", $.String, "ADP_ParameterConversionFailed");

    $.Constant({Static:true , Public:false}, "ADP_ParameterSizeIsMissing", $.String, "ADP_ParameterSizeIsMissing");

    $.Constant({Static:true , Public:false}, "ADP_ParameterSizeIsTooLarge", $.String, "ADP_ParameterSizeIsTooLarge");

    $.Constant({Static:true , Public:false}, "ADP_PleaseUninstallTheBeta", $.String, "ADP_PleaseUninstallTheBeta");

    $.Constant({Static:true , Public:false}, "ADP_ReadOnlyLob", $.String, "ADP_ReadOnlyLob");

    $.Constant({Static:true , Public:false}, "ADP_SeekBeyondEnd", $.String, "ADP_SeekBeyondEnd");

    $.Constant({Static:true , Public:false}, "ADP_SQLParserInternalError", $.String, "ADP_SQLParserInternalError");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorExpectedCommaAfterColumn", $.String, "ADP_SyntaxErrorExpectedCommaAfterColumn");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorExpectedCommaAfterTable", $.String, "ADP_SyntaxErrorExpectedCommaAfterTable");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorExpectedIdentifier", $.String, "ADP_SyntaxErrorExpectedIdentifier");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorExpectedNextPart", $.String, "ADP_SyntaxErrorExpectedNextPart");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorMissingParenthesis", $.String, "ADP_SyntaxErrorMissingParenthesis");

    $.Constant({Static:true , Public:false}, "ADP_SyntaxErrorTooManyNameParts", $.String, "ADP_SyntaxErrorTooManyNameParts");

    $.Constant({Static:true , Public:false}, "ADP_TransactionCompleted", $.String, "ADP_TransactionCompleted");

    $.Constant({Static:true , Public:false}, "ADP_TransactionConnectionMismatch", $.String, "ADP_TransactionConnectionMismatch");

    $.Constant({Static:true , Public:false}, "ADP_TransactionPresent", $.String, "ADP_TransactionPresent");

    $.Constant({Static:true , Public:false}, "ADP_TransactionRequired_Execute", $.String, "ADP_TransactionRequired_Execute");

    $.Constant({Static:true , Public:false}, "ADP_TypeNotSupported", $.String, "ADP_TypeNotSupported");

    $.Constant({Static:true , Public:false}, "ADP_UnexpectedReturnCode", $.String, "ADP_UnexpectedReturnCode");

    $.Constant({Static:true , Public:false}, "ADP_UnknownDataTypeCode", $.String, "ADP_UnknownDataTypeCode");

    $.Constant({Static:true , Public:false}, "ADP_UnsupportedIsolationLevel", $.String, "ADP_UnsupportedIsolationLevel");

    $.Constant({Static:true , Public:false}, "ADP_WriteByteForBinaryLobsOnly", $.String, "ADP_WriteByteForBinaryLobsOnly");

    $.Constant({Static:true , Public:false}, "ADP_WrongType", $.String, "ADP_WrongType");

    $.Constant({Static:true , Public:false}, "DataCategory_Advanced", $.String, "DataCategory_Advanced");

    $.Constant({Static:true , Public:false}, "DataCategory_Initialization", $.String, "DataCategory_Initialization");

    $.Constant({Static:true , Public:false}, "DataCategory_Pooling", $.String, "DataCategory_Pooling");

    $.Constant({Static:true , Public:false}, "DataCategory_Security", $.String, "DataCategory_Security");

    $.Constant({Static:true , Public:false}, "DataCategory_Source", $.String, "DataCategory_Source");

    $.Constant({Static:true , Public:false}, "OracleCategory_Behavior", $.String, "OracleCategory_Behavior");

    $.Constant({Static:true , Public:false}, "OracleCategory_Data", $.String, "OracleCategory_Data");

    $.Constant({Static:true , Public:false}, "OracleCategory_Fill", $.String, "OracleCategory_Fill");

    $.Constant({Static:true , Public:false}, "OracleCategory_InfoMessage", $.String, "OracleCategory_InfoMessage");

    $.Constant({Static:true , Public:false}, "OracleCategory_StateChange", $.String, "OracleCategory_StateChange");

    $.Constant({Static:true , Public:false}, "OracleCategory_Update", $.String, "OracleCategory_Update");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandText", $.String, "DbCommand_CommandText");

    $.Constant({Static:true , Public:false}, "DbCommand_CommandType", $.String, "DbCommand_CommandType");

    $.Constant({Static:true , Public:false}, "DbCommand_Connection", $.String, "DbCommand_Connection");

    $.Constant({Static:true , Public:false}, "DbCommand_Transaction", $.String, "DbCommand_Transaction");

    $.Constant({Static:true , Public:false}, "DbCommand_UpdatedRowSource", $.String, "DbCommand_UpdatedRowSource");

    $.Constant({Static:true , Public:false}, "DbCommand_Parameters", $.String, "DbCommand_Parameters");

    $.Constant({Static:true , Public:false}, "OracleCommandBuilder_DataAdapter", $.String, "OracleCommandBuilder_DataAdapter");

    $.Constant({Static:true , Public:false}, "OracleCommandBuilder_QuotePrefix", $.String, "OracleCommandBuilder_QuotePrefix");

    $.Constant({Static:true , Public:false}, "OracleCommandBuilder_QuoteSuffix", $.String, "OracleCommandBuilder_QuoteSuffix");

    $.Constant({Static:true , Public:false}, "OracleConnection_ConnectionString", $.String, "OracleConnection_ConnectionString");

    $.Constant({Static:true , Public:false}, "OracleConnection_DataSource", $.String, "OracleConnection_DataSource");

    $.Constant({Static:true , Public:false}, "OracleConnection_InfoMessage", $.String, "OracleConnection_InfoMessage");

    $.Constant({Static:true , Public:false}, "OracleConnection_StateChange", $.String, "OracleConnection_StateChange");

    $.Constant({Static:true , Public:false}, "OracleConnection_State", $.String, "OracleConnection_State");

    $.Constant({Static:true , Public:false}, "OracleConnection_ServerVersion", $.String, "OracleConnection_ServerVersion");

    $.Constant({Static:true , Public:false}, "DbConnectionString_ConnectionString", $.String, "DbConnectionString_ConnectionString");

    $.Constant({Static:true , Public:false}, "DbConnectionString_DataSource", $.String, "DbConnectionString_DataSource");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Enlist", $.String, "DbConnectionString_Enlist");

    $.Constant({Static:true , Public:false}, "DbConnectionString_IntegratedSecurity", $.String, "DbConnectionString_IntegratedSecurity");

    $.Constant({Static:true , Public:false}, "DbConnectionString_LoadBalanceTimeout", $.String, "DbConnectionString_LoadBalanceTimeout");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MaxPoolSize", $.String, "DbConnectionString_MaxPoolSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_MinPoolSize", $.String, "DbConnectionString_MinPoolSize");

    $.Constant({Static:true , Public:false}, "DbConnectionString_OmitOracleConnectionName", $.String, "DbConnectionString_OmitOracleConnectionName");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Password", $.String, "DbConnectionString_Password");

    $.Constant({Static:true , Public:false}, "DbConnectionString_PersistSecurityInfo", $.String, "DbConnectionString_PersistSecurityInfo");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Pooling", $.String, "DbConnectionString_Pooling");

    $.Constant({Static:true , Public:false}, "DbConnectionString_Unicode", $.String, "DbConnectionString_Unicode");

    $.Constant({Static:true , Public:false}, "DbConnectionString_UserID", $.String, "DbConnectionString_UserID");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_DeleteCommand", $.String, "DbDataAdapter_DeleteCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_InsertCommand", $.String, "DbDataAdapter_InsertCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_RowUpdated", $.String, "DbDataAdapter_RowUpdated");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_RowUpdating", $.String, "DbDataAdapter_RowUpdating");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_SelectCommand", $.String, "DbDataAdapter_SelectCommand");

    $.Constant({Static:true , Public:false}, "DbDataAdapter_UpdateCommand", $.String, "DbDataAdapter_UpdateCommand");

    $.Constant({Static:true , Public:false}, "DbTable_Connection", $.String, "DbTable_Connection");

    $.Constant({Static:true , Public:false}, "DbTable_DeleteCommand", $.String, "DbTable_DeleteCommand");

    $.Constant({Static:true , Public:false}, "DbTable_InsertCommand", $.String, "DbTable_InsertCommand");

    $.Constant({Static:true , Public:false}, "DbTable_SelectCommand", $.String, "DbTable_SelectCommand");

    $.Constant({Static:true , Public:false}, "DbTable_UpdateCommand", $.String, "DbTable_UpdateCommand");

    $.Constant({Static:true , Public:false}, "OracleParameter_OracleType", $.String, "OracleParameter_OracleType");

    $.Constant({Static:true , Public:false}, "OracleMetaDataFactory_XML", $.String, "OracleMetaDataFactory_XML");

    $.Constant({Static:true , Public:false}, "SqlMisc_NullString", $.String, "SqlMisc_NullString");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

