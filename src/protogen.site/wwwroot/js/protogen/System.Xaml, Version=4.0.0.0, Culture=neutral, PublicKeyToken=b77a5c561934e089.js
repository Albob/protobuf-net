/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm2D = JSIL.DeclareAssembly("System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Xaml");
/* class System.Xaml.TypeConverterHelper */ 

(function TypeConverterHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Xaml.TypeConverterHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_InvariantEnglishUS", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConverterType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConverterTypeFromName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCoreConverterFromCoreType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCoreConverterFromCustomType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeConverter", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter"), [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:false}, "invariantEnglishUS", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "InvariantEnglishUS", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.ReflectionHelper */ 

(function ReflectionHelper$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.Xaml.ReflectionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetAlreadyLoadedAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributeData", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributeData", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")]), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributeData", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttributeData", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Reflection.CustomAttributeData"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetQualifiedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeConverterAttributeData", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeConverterAttributeData", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInternalType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPublicType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadAssemblyHelper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetCacheForAssembly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "_loadedAssembliesHash", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.SafeSecurityHelper */ 

(function SafeSecurityHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Xaml.SafeSecurityHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CleanupCollectedAssemblies", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.AssemblyName"), [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoadedAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameKeyToken", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:true , Public:false}, "_assemblies", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm07.TypeRef("System.Reflection.AssemblyName")]));

    $.Field({Static:true , Public:false}, "syncObject", $.Object);

    $.Field({Static:true , Public:false}, "_isGCCallbackPending", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_cleanupCollectedAssemblies", $asm07.TypeRef("System.Threading.WaitCallback"), function ($pi) {
        return $asm07.System.Threading.WaitCallback.New(null, null, new JSIL.MethodPointerInfo($thisType, "CleanupCollectedAssemblies", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Constant({Static:true , Public:false}, "IMAGE", $.String, "image");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.WeakRefKey */ 

(function WeakRefKey$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.WeakReference"), 
      Name: "System.Xaml.WeakRefKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "_hashCode", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.GCNotificationToken */ 

(function GCNotificationToken$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.GCNotificationToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.WaitCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:false}, "RegisterCallback", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.WaitCallback"), $.Object])
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:false, Public:false}, "state", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.NameScope */ 

(function NameScope$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.NameScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindName", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RegisterName", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_nameMap", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"), 
      /* 1 */ $asm2D.TypeRef("System.Windows.Markup.INameScope"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 3 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 5 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xaml.NameScope+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.NameScope+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "_enumerator", $asm07.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.NameValidationHelper */ 

(function NameValidationHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xaml.NameValidationHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsValidIdentifierName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.CriticalExceptions */ 

(function CriticalExceptions$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Xaml.CriticalExceptions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Unwrap", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.AttachableMemberIdentifier */ 

(function AttachableMemberIdentifier$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.AttachableMemberIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "declaringType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "memberName", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.AttachablePropertyServices */ 

(function AttachablePropertyServices$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Xaml.AttachablePropertyServices", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CopyPropertiesTo", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAttachedPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "RemoveProperty", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["T"])
    );

    $.Field({Static:true , Public:false}, "attachedProperties", $asm2D.TypeRef("System.Xaml.AttachablePropertyServices+DefaultAttachedPropertyStore"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.AttachablePropertyServices+DefaultAttachedPropertyStore */ 

(function DefaultAttachedPropertyStore$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.AttachablePropertyServices+DefaultAttachedPropertyStore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyPropertiesTo", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveProperty", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["T"])
    );

    $.Field({Static:false, Public:false}, "instanceStorage", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Object, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.SavedContextType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.SavedContextType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Template: 0, 
    ReparseValue: 1, 
    ReparseMarkupExtension: 2, 
  }
);

/* class System.Xaml.XamlSavedContext */ 

(function XamlSavedContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Uri)) ();
  };



  function XamlSavedContext_get_BaseUri () {
    return this.XamlSavedContext$BaseUri$value;
  }; 




  function XamlSavedContext_set_BaseUri (value) {
    this.XamlSavedContext$BaseUri$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSavedContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.SavedContextType"), $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), 
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")])
        ])
    );

    $.Method({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      XamlSavedContext_get_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SaveContextType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.SavedContextType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stack", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")]))
    );

    $.Method({Static:false, Public:false}, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      XamlSavedContext_set_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_stack", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")]));

    $.Field({Static:false, Public:false}, "_savedContextType", $asm2D.TypeRef("System.Xaml.SavedContextType"));

    $.Field({Static:false, Public:false}, "XamlSavedContext$BaseUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SaveContextType", $asm2D.TypeRef("System.Xaml.SavedContextType"));

    $.Property({Static:false, Public:true }, "Stack", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")]));

    $.Property({Static:false, Public:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true }, "BaseUri", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.EventConverter */ 

(function EventConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xaml.EventConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRootObjectAndDelegateType", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectEventArgs */ 

(function XamlObjectEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.System.Uri)) ();
  };




  function XamlObjectEventArgs_get_ElementLineNumber () {
    return this.XamlObjectEventArgs$ElementLineNumber$value;
  }; 

  function XamlObjectEventArgs_get_ElementLinePosition () {
    return this.XamlObjectEventArgs$ElementLinePosition$value;
  }; 

  function XamlObjectEventArgs_get_Instance () {
    return this.XamlObjectEventArgs$Instance$value;
  }; 

  function XamlObjectEventArgs_get_SourceBamlUri () {
    return this.XamlObjectEventArgs$SourceBamlUri$value;
  }; 

  function XamlObjectEventArgs_set_ElementLineNumber (value) {
    this.XamlObjectEventArgs$ElementLineNumber$value = (value | 0);
  }; 

  function XamlObjectEventArgs_set_ElementLinePosition (value) {
    this.XamlObjectEventArgs$ElementLinePosition$value = (value | 0);
  }; 

  function XamlObjectEventArgs_set_Instance (value) {
    this.XamlObjectEventArgs$Instance$value = value;
  }; 

  function XamlObjectEventArgs_set_SourceBamlUri (value) {
    this.XamlObjectEventArgs$SourceBamlUri$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Xaml.XamlObjectEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm0A.TypeRef("System.Uri"), 
          $.Int32, $.Int32
        ])
    );

    $.Method({Static:false, Public:true }, "get_ElementLineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlObjectEventArgs_get_ElementLineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ElementLinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlObjectEventArgs_get_ElementLinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object), 
      XamlObjectEventArgs_get_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SourceBamlUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      XamlObjectEventArgs_get_SourceBamlUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ElementLineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlObjectEventArgs_set_ElementLineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ElementLinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlObjectEventArgs_set_ElementLinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Instance", 
      JSIL.MethodSignature.Action($.Object), 
      XamlObjectEventArgs_set_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SourceBamlUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      XamlObjectEventArgs_set_SourceBamlUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectEventArgs$Instance$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectEventArgs$SourceBamlUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectEventArgs$ElementLineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectEventArgs$ElementLinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true }, "SourceBamlUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ElementLineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "ElementLinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xaml.IAmbientProvider */ 

JSIL.MakeInterface(
  "System.Xaml.IAmbientProvider", true, [], function ($) {
    $.Method({}, "GetFirstAmbientValue", new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.AmbientPropertyValue"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])]));
    $.Method({}, "GetFirstAmbientValue", new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])]));
    $.Method({}, "GetAllAmbientValues", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])]));
    $.Method({}, "GetAllAmbientValues", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])]));
    $.Method({}, "GetAllAmbientValues", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])
        ]));
  }, []);

/* class System.Xaml.AmbientPropertyValue */ 

(function AmbientPropertyValue$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.AmbientPropertyValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RetrievedProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "_property", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "RetrievedProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xaml.IAttachedPropertyStore */ 

JSIL.MakeInterface(
  "System.Xaml.IAttachedPropertyStore", true, [], function ($) {
    $.Method({}, "get_PropertyCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "CopyPropertiesTo", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), $.Int32]));
    $.Method({}, "RemoveProperty", new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier")]));
    $.Method({}, "SetProperty", new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object]));
    $.Method({}, "TryGetProperty", new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
    $.Property({}, "PropertyCount");
  }, []);

/* interface System.Xaml.IDestinationTypeProvider */ 

JSIL.MakeInterface(
  "System.Xaml.IDestinationTypeProvider", true, [], function ($) {
    $.Method({}, "GetDestinationType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
  }, []);

/* interface System.Xaml.INamespacePrefixLookup */ 

JSIL.MakeInterface(
  "System.Xaml.INamespacePrefixLookup", true, [], function ($) {
    $.Method({}, "LookupPrefix", new JSIL.MethodSignature($.String, [$.String]));
  }, []);

/* enum System.Xaml.DeferringMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.DeferringMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Off: 0, 
    TemplateStarting: 1, 
    TemplateDeferring: 2, 
    TemplateReady: 3, 
  }
);

/* class System.Xaml.XamlWriter */ 

(function XamlWriter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };





  function XamlWriter_get_IsDisposed () {
    return this.XamlWriter$IsDisposed$value;
  }; 


  function XamlWriter_set_IsDisposed (value) {
    this.XamlWriter$IsDisposed$value = value;
  }; 










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlWriter_get_IsDisposed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlWriter_set_IsDisposed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteNode", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "XamlWriter$IsDisposed$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.DeferringWriter */ 

(function DeferringWriter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriter"), 
      Name: "System.Xaml.DeferringWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CollectTemplateList", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.DeferringMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ShouldProvideLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartDeferredList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_mode", $asm2D.TypeRef("System.Xaml.DeferringMode"));

    $.Field({Static:false, Public:false}, "_handled", $.Boolean);

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Field({Static:false, Public:false}, "_deferredList", $asm2D.TypeRef("System.Xaml.XamlNodeList"));

    $.Field({Static:false, Public:false}, "_deferredWriter", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Field({Static:false, Public:false}, "_deferredTreeDepth", $.Int32);

    $.Property({Static:false, Public:true }, "Handled", $.Boolean);

    $.Property({Static:false, Public:true }, "Mode", $asm2D.TypeRef("System.Xaml.DeferringMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "ShouldProvideLineInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfoConsumer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.XamlNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.XamlNodeType", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    StartObject: 1, 
    GetObject: 2, 
    EndObject: 3, 
    StartMember: 4, 
    EndMember: 5, 
    Value: 6, 
    NamespaceDeclaration: 7, 
  }
);

/* delegate System.Xaml.XamlNodeAddDelegate */ 

JSIL.MakeDelegate("System.Xaml.XamlNodeAddDelegate", false, [], 
  new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $asm07.TypeRef("System.Object")]));

/* delegate System.Xaml.XamlLineInfoAddDelegate */ 

JSIL.MakeDelegate("System.Xaml.XamlLineInfoAddDelegate", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32")]));

/* delegate System.Xaml.XamlNodeNextDelegate */ 

JSIL.MakeDelegate("System.Xaml.XamlNodeNextDelegate", false, [], 
  JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode")));

/* delegate System.Xaml.XamlNodeIndexDelegate */ 

JSIL.MakeDelegate("System.Xaml.XamlNodeIndexDelegate", false, [], 
  new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm07.TypeRef("System.Int32")]));

/* struct System.Xaml.XamlNode */ 

(function XamlNode$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Xaml.XamlNode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNode+InternalNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.LineInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEndOfAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.LineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceDeclaration", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XamlType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEof_Helper", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_nodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Field({Static:false, Public:false}, "_internalNodeType", $asm2D.TypeRef("System.Xaml.XamlNode+InternalNodeType"));

    $.Field({Static:false, Public:false}, "_data", $.Object);

    $.Property({Static:false, Public:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true }, "NamespaceDeclaration", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true }, "XamlType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "LineInfo", $asm2D.TypeRef("System.Xaml.LineInfo"));

    $.Property({Static:false, Public:false}, "IsEof", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEndOfAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLineInfo", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* enum System.Xaml.XamlNode+InternalNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.XamlNode+InternalNodeType", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    StartOfStream: 1, 
    EndOfStream: 2, 
    EndOfAttributes: 3, 
    LineInfo: 4, 
  }
);

/* class System.Xaml.XamlReaderSettings */ 

(function XamlReaderSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };




  function XamlReaderSettings_get_AllowProtectedMembersOnRoot () {
    return this.XamlReaderSettings$AllowProtectedMembersOnRoot$value;
  }; 

  function XamlReaderSettings_get_BaseUri () {
    return this.XamlReaderSettings$BaseUri$value;
  }; 

  function XamlReaderSettings_get_IgnoreUidsOnPropertyElements () {
    return this.XamlReaderSettings$IgnoreUidsOnPropertyElements$value;
  }; 

  function XamlReaderSettings_get_LocalAssembly () {
    return this.XamlReaderSettings$LocalAssembly$value;
  }; 

  function XamlReaderSettings_get_ProvideLineInfo () {
    return this.XamlReaderSettings$ProvideLineInfo$value;
  }; 

  function XamlReaderSettings_get_ValuesMustBeString () {
    return this.XamlReaderSettings$ValuesMustBeString$value;
  }; 


  function XamlReaderSettings_set_AllowProtectedMembersOnRoot (value) {
    this.XamlReaderSettings$AllowProtectedMembersOnRoot$value = value;
  }; 

  function XamlReaderSettings_set_BaseUri (value) {
    this.XamlReaderSettings$BaseUri$value = value;
  }; 

  function XamlReaderSettings_set_IgnoreUidsOnPropertyElements (value) {
    this.XamlReaderSettings$IgnoreUidsOnPropertyElements$value = value;
  }; 

  function XamlReaderSettings_set_LocalAssembly (value) {
    this.XamlReaderSettings$LocalAssembly$value = value;
  }; 

  function XamlReaderSettings_set_ProvideLineInfo (value) {
    this.XamlReaderSettings$ProvideLineInfo$value = value;
  }; 

  function XamlReaderSettings_set_ValuesMustBeString (value) {
    this.XamlReaderSettings$ValuesMustBeString$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlReaderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:true }, "get_AllowProtectedMembersOnRoot", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlReaderSettings_get_AllowProtectedMembersOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      XamlReaderSettings_get_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IgnoreUidsOnPropertyElements", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlReaderSettings_get_IgnoreUidsOnPropertyElements
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LocalAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly")), 
      XamlReaderSettings_get_LocalAssembly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ProvideLineInfo", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlReaderSettings_get_ProvideLineInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ValuesMustBeString", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlReaderSettings_get_ValuesMustBeString
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitializeProvideLineInfo", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_AllowProtectedMembersOnRoot", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlReaderSettings_set_AllowProtectedMembersOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      XamlReaderSettings_set_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IgnoreUidsOnPropertyElements", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlReaderSettings_set_IgnoreUidsOnPropertyElements
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LocalAssembly", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly")), 
      XamlReaderSettings_set_LocalAssembly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ProvideLineInfo", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlReaderSettings_set_ProvideLineInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ValuesMustBeString", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlReaderSettings_set_ValuesMustBeString
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$AllowProtectedMembersOnRoot$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$ProvideLineInfo$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$BaseUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$LocalAssembly$value", $asm07.TypeRef("System.Reflection.Assembly"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$IgnoreUidsOnPropertyElements$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlReaderSettings$ValuesMustBeString$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AllowProtectedMembersOnRoot", $.Boolean);

    $.Property({Static:false, Public:true }, "ProvideLineInfo", $.Boolean);

    $.Property({Static:false, Public:true }, "BaseUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "LocalAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "IgnoreUidsOnPropertyElements", $.Boolean);

    $.Property({Static:false, Public:true }, "ValuesMustBeString", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectWriter */ 

(function XamlObjectWriter$Members () {
  var $, $thisType;




















































































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriter"), 
      Name: "System.Xaml.XamlObjectWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSavedContext"), $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteDeferredInitialization", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteNameReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRuntime", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"), [$asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecutePendingAdds", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameFixupGraph", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PendingCollectionAdds", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectWriter+PendingCollectionAdd")])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PendingKeyConversionContexts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Result", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Runtime", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ShouldProvideLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyFromInstance", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenForUnresolvedChildren", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlSavedContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasUnresolvedChildren", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlSavedContext"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBuiltInGenericDictionary", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConstructionDirective", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDirectiveAllowedOnNullInstance", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextConstructionDirective", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_AddDependencyForUnresolvedChildren", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.XamlSavedContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_AddToParentDictionary", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ApplyCurrentPreconstructionPropertyValues", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ApplyCurrentPreconstructionPropertyValues", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ApplyPropertyValue", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_AssignProvidedValue", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_BeginInit", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CheckAssignmentToParentStart", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CheckBaseUri", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ConvertPositionalParamsToArgs", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CreateAndAssignToParentStart", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CreateFromInitializationValue", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.String, $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_CreatePropertyValueFromValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_DeferProvideValue", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_DoAssignmentToParentCollection", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_DoAssignmentToParentProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_DuplicatePropertyCheck", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndInit", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_PendAssignmentToParentCollection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_PendCurrentFixupToken_SetValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_PendKeyFixupToken", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ProvideValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_PushAndPopAProvideValueStackFrame", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_RegisterName_OnCurrent", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_RegisterName_OnParent", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_SetConnectionId", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ShouldConvertKey", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ValidateXClass", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_WillParentCollectionAdd", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MS.Internal.Xaml.Context.ICheckIfInitialized.IsFullyInitialized", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized"), "IsFullyInitialized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    )
      .Overrides($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"), "WithLineInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterBeginInit", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterEndInit", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterProperties", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeProperties", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNameFixup", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNameFixup_Reparse", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNameFixup_Simple", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNameFixup_UpdatePendingAddItem", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNameFixup_UpdatePendingAddKey", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterName", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"), $.String, 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $asm2D.TypeRef("System.Windows.Markup.INameScope"), $asm2D.TypeRef("System.Windows.Markup.INameScope"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnresolvedRefs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "TriggerNameResolution", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCreateParentInstance", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_lastInstance", $.Object);

    $.Field({Static:false, Public:false}, "_inDispose", $.Boolean);

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Field({Static:false, Public:false}, "_deferringWriter", $asm2D.TypeRef("System.Xaml.DeferringWriter"));

    $.Field({Static:false, Public:false}, "_afterBeginInitHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Field({Static:false, Public:false}, "_beforePropertiesHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Field({Static:false, Public:false}, "_afterPropertiesHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Field({Static:false, Public:false}, "_afterEndInitHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Field({Static:false, Public:false}, "_xamlSetValueHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs")]));

    $.Field({Static:false, Public:false}, "_rootObjectInstance", $.Object);

    $.Field({Static:false, Public:false}, "_skipDuplicatePropertyCheck", $.Boolean);

    $.Field({Static:false, Public:false}, "_nameFixupGraph", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"));

    $.Field({Static:false, Public:false}, "_pendingCollectionAdds", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectWriter+PendingCollectionAdd")])]));

    $.Field({Static:false, Public:false}, "_rootNamescope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Field({Static:false, Public:false}, "_skipProvideValueOnRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "_nextNodeMustBeEndMember", $.Boolean);

    $.Field({Static:false, Public:false}, "_preferUnconvertedDictionaryKeys", $.Boolean);

    $.Field({Static:false, Public:false}, "_pendingKeyConversionContexts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")]));

    $.Property({Static:false, Public:false}, "NameFixupGraph", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"));

    $.Property({Static:false, Public:false}, "PendingCollectionAdds", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectWriter+PendingCollectionAdd")])]));

    $.Property({Static:false, Public:false}, "PendingKeyConversionContexts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")]));

    $.Property({Static:false, Public:false}, "Runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"));

    $.Property({Static:false, Public:true }, "RootNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Property({Static:false, Public:true , Virtual:true }, "Result", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "ShouldProvideLineInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfoConsumer"), 
      /* 2 */ $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"), 
      /* 3 */ $asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectWriter+PendingCollectionAdd */ 

(function PendingCollectionAdd$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };



  function PendingCollectionAdd_get_Item () {
    return this.PendingCollectionAdd$Item$value;
  }; 

  function PendingCollectionAdd_get_ItemType () {
    return this.PendingCollectionAdd$ItemType$value;
  }; 

  function PendingCollectionAdd_get_Key () {
    return this.PendingCollectionAdd$Key$value;
  }; 

  function PendingCollectionAdd_get_KeyIsSet () {
    return this.PendingCollectionAdd$KeyIsSet$value;
  }; 

  function PendingCollectionAdd_get_KeyIsUnconverted () {
    return this.PendingCollectionAdd$KeyIsUnconverted$value;
  }; 

  function PendingCollectionAdd_get_LineNumber () {
    return this.PendingCollectionAdd$LineNumber$value;
  }; 

  function PendingCollectionAdd_get_LinePosition () {
    return this.PendingCollectionAdd$LinePosition$value;
  }; 


  function PendingCollectionAdd_set_Item (value) {
    this.PendingCollectionAdd$Item$value = value;
  }; 

  function PendingCollectionAdd_set_ItemType (value) {
    this.PendingCollectionAdd$ItemType$value = value;
  }; 

  function PendingCollectionAdd_set_Key (value) {
    this.PendingCollectionAdd$Key$value = value;
  }; 

  function PendingCollectionAdd_set_KeyIsSet (value) {
    this.PendingCollectionAdd$KeyIsSet$value = value;
  }; 

  function PendingCollectionAdd_set_KeyIsUnconverted (value) {
    this.PendingCollectionAdd$KeyIsUnconverted$value = value;
  }; 

  function PendingCollectionAdd_set_LineNumber (value) {
    this.PendingCollectionAdd$LineNumber$value = (value | 0);
  }; 

  function PendingCollectionAdd_set_LinePosition (value) {
    this.PendingCollectionAdd$LinePosition$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectWriter+PendingCollectionAdd", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      JSIL.MethodSignature.Return($.Object), 
      PendingCollectionAdd_get_Item
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      PendingCollectionAdd_get_ItemType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object), 
      PendingCollectionAdd_get_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KeyIsSet", 
      JSIL.MethodSignature.Return($.Boolean), 
      PendingCollectionAdd_get_KeyIsSet
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KeyIsUnconverted", 
      JSIL.MethodSignature.Return($.Boolean), 
      PendingCollectionAdd_get_KeyIsUnconverted
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      PendingCollectionAdd_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      PendingCollectionAdd_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    )
      .Overrides($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"), "WithLineInfo");

    $.Method({Static:false, Public:true }, "set_Item", 
      JSIL.MethodSignature.Action($.Object), 
      PendingCollectionAdd_set_Item
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ItemType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      PendingCollectionAdd_set_ItemType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Key", 
      JSIL.MethodSignature.Action($.Object), 
      PendingCollectionAdd_set_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyIsSet", 
      JSIL.MethodSignature.Action($.Boolean), 
      PendingCollectionAdd_set_KeyIsSet
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyIsUnconverted", 
      JSIL.MethodSignature.Action($.Boolean), 
      PendingCollectionAdd_set_KeyIsUnconverted
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      PendingCollectionAdd_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      PendingCollectionAdd_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$Key$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$KeyIsSet$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$KeyIsUnconverted$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$Item$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$ItemType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PendingCollectionAdd$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Key", $.Object);

    $.Property({Static:false, Public:true }, "KeyIsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyIsUnconverted", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "ItemType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlWriterSettings */ 

(function XamlWriterSettings$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlWriterSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectWriterSettings */ 

(function XamlObjectWriterSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.Permissions.XamlAccessLevel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm2D.System.Xaml.XamlObjectEventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Windows.Markup.INameScope)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm2D.System.Windows.Markup.XamlSetValueEventArgs))) ();
  };




  function XamlObjectWriterSettings_get_AccessLevel () {
    return this.XamlObjectWriterSettings$AccessLevel$value;
  }; 

  function XamlObjectWriterSettings_get_AfterBeginInitHandler () {
    return this.XamlObjectWriterSettings$AfterBeginInitHandler$value;
  }; 

  function XamlObjectWriterSettings_get_AfterEndInitHandler () {
    return this.XamlObjectWriterSettings$AfterEndInitHandler$value;
  }; 

  function XamlObjectWriterSettings_get_AfterPropertiesHandler () {
    return this.XamlObjectWriterSettings$AfterPropertiesHandler$value;
  }; 

  function XamlObjectWriterSettings_get_BeforePropertiesHandler () {
    return this.XamlObjectWriterSettings$BeforePropertiesHandler$value;
  }; 

  function XamlObjectWriterSettings_get_ExternalNameScope () {
    return this.XamlObjectWriterSettings$ExternalNameScope$value;
  }; 

  function XamlObjectWriterSettings_get_IgnoreCanConvert () {
    return this.XamlObjectWriterSettings$IgnoreCanConvert$value;
  }; 

  function XamlObjectWriterSettings_get_PreferUnconvertedDictionaryKeys () {
    return this.XamlObjectWriterSettings$PreferUnconvertedDictionaryKeys$value;
  }; 

  function XamlObjectWriterSettings_get_RegisterNamesOnExternalNamescope () {
    return this.XamlObjectWriterSettings$RegisterNamesOnExternalNamescope$value;
  }; 

  function XamlObjectWriterSettings_get_RootObjectInstance () {
    return this.XamlObjectWriterSettings$RootObjectInstance$value;
  }; 

  function XamlObjectWriterSettings_get_SkipDuplicatePropertyCheck () {
    return this.XamlObjectWriterSettings$SkipDuplicatePropertyCheck$value;
  }; 

  function XamlObjectWriterSettings_get_SkipProvideValueOnRoot () {
    return this.XamlObjectWriterSettings$SkipProvideValueOnRoot$value;
  }; 

  function XamlObjectWriterSettings_get_SourceBamlUri () {
    return this.XamlObjectWriterSettings$SourceBamlUri$value;
  }; 

  function XamlObjectWriterSettings_get_XamlSetValueHandler () {
    return this.XamlObjectWriterSettings$XamlSetValueHandler$value;
  }; 

  function XamlObjectWriterSettings_set_AccessLevel (value) {
    this.XamlObjectWriterSettings$AccessLevel$value = value;
  }; 

  function XamlObjectWriterSettings_set_AfterBeginInitHandler (value) {
    this.XamlObjectWriterSettings$AfterBeginInitHandler$value = value;
  }; 

  function XamlObjectWriterSettings_set_AfterEndInitHandler (value) {
    this.XamlObjectWriterSettings$AfterEndInitHandler$value = value;
  }; 

  function XamlObjectWriterSettings_set_AfterPropertiesHandler (value) {
    this.XamlObjectWriterSettings$AfterPropertiesHandler$value = value;
  }; 

  function XamlObjectWriterSettings_set_BeforePropertiesHandler (value) {
    this.XamlObjectWriterSettings$BeforePropertiesHandler$value = value;
  }; 

  function XamlObjectWriterSettings_set_ExternalNameScope (value) {
    this.XamlObjectWriterSettings$ExternalNameScope$value = value;
  }; 

  function XamlObjectWriterSettings_set_IgnoreCanConvert (value) {
    this.XamlObjectWriterSettings$IgnoreCanConvert$value = value;
  }; 

  function XamlObjectWriterSettings_set_PreferUnconvertedDictionaryKeys (value) {
    this.XamlObjectWriterSettings$PreferUnconvertedDictionaryKeys$value = value;
  }; 

  function XamlObjectWriterSettings_set_RegisterNamesOnExternalNamescope (value) {
    this.XamlObjectWriterSettings$RegisterNamesOnExternalNamescope$value = value;
  }; 

  function XamlObjectWriterSettings_set_RootObjectInstance (value) {
    this.XamlObjectWriterSettings$RootObjectInstance$value = value;
  }; 

  function XamlObjectWriterSettings_set_SkipDuplicatePropertyCheck (value) {
    this.XamlObjectWriterSettings$SkipDuplicatePropertyCheck$value = value;
  }; 

  function XamlObjectWriterSettings_set_SkipProvideValueOnRoot (value) {
    this.XamlObjectWriterSettings$SkipProvideValueOnRoot$value = value;
  }; 

  function XamlObjectWriterSettings_set_SourceBamlUri (value) {
    this.XamlObjectWriterSettings$SourceBamlUri$value = value;
  }; 

  function XamlObjectWriterSettings_set_XamlSetValueHandler (value) {
    this.XamlObjectWriterSettings$XamlSetValueHandler$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriterSettings"), 
      Name: "System.Xaml.XamlObjectWriterSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:true }, "get_AccessLevel", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")), 
      XamlObjectWriterSettings_get_AccessLevel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AfterBeginInitHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_get_AfterBeginInitHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AfterEndInitHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_get_AfterEndInitHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AfterPropertiesHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_get_AfterPropertiesHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BeforePropertiesHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_get_BeforePropertiesHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ExternalNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScope")), 
      XamlObjectWriterSettings_get_ExternalNameScope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IgnoreCanConvert", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectWriterSettings_get_IgnoreCanConvert
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferUnconvertedDictionaryKeys", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectWriterSettings_get_PreferUnconvertedDictionaryKeys
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RegisterNamesOnExternalNamescope", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectWriterSettings_get_RegisterNamesOnExternalNamescope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RootObjectInstance", 
      JSIL.MethodSignature.Return($.Object), 
      XamlObjectWriterSettings_get_RootObjectInstance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SkipDuplicatePropertyCheck", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectWriterSettings_get_SkipDuplicatePropertyCheck
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SkipProvideValueOnRoot", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectWriterSettings_get_SkipProvideValueOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SourceBamlUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      XamlObjectWriterSettings_get_SourceBamlUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlSetValueHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs")])), 
      XamlObjectWriterSettings_get_XamlSetValueHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AccessLevel", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")), 
      XamlObjectWriterSettings_set_AccessLevel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AfterBeginInitHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_set_AfterBeginInitHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AfterEndInitHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_set_AfterEndInitHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AfterPropertiesHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_set_AfterPropertiesHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BeforePropertiesHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")])), 
      XamlObjectWriterSettings_set_BeforePropertiesHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ExternalNameScope", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Windows.Markup.INameScope")), 
      XamlObjectWriterSettings_set_ExternalNameScope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IgnoreCanConvert", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectWriterSettings_set_IgnoreCanConvert
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferUnconvertedDictionaryKeys", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectWriterSettings_set_PreferUnconvertedDictionaryKeys
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RegisterNamesOnExternalNamescope", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectWriterSettings_set_RegisterNamesOnExternalNamescope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RootObjectInstance", 
      JSIL.MethodSignature.Action($.Object), 
      XamlObjectWriterSettings_set_RootObjectInstance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SkipDuplicatePropertyCheck", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectWriterSettings_set_SkipDuplicatePropertyCheck
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SkipProvideValueOnRoot", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectWriterSettings_set_SkipProvideValueOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SourceBamlUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      XamlObjectWriterSettings_set_SourceBamlUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlSetValueHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs")])), 
      XamlObjectWriterSettings_set_XamlSetValueHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "StripDelegates", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$AfterBeginInitHandler$value", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$BeforePropertiesHandler$value", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$AfterPropertiesHandler$value", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$AfterEndInitHandler$value", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$XamlSetValueHandler$value", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$RootObjectInstance$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$IgnoreCanConvert$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$ExternalNameScope$value", $asm2D.TypeRef("System.Windows.Markup.INameScope"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$SkipDuplicatePropertyCheck$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$RegisterNamesOnExternalNamescope$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$SkipProvideValueOnRoot$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$PreferUnconvertedDictionaryKeys$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$SourceBamlUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectWriterSettings$AccessLevel$value", $asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AfterBeginInitHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Property({Static:false, Public:true }, "BeforePropertiesHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Property({Static:false, Public:true }, "AfterPropertiesHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Property({Static:false, Public:true }, "AfterEndInitHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Xaml.XamlObjectEventArgs")]));

    $.Property({Static:false, Public:true }, "XamlSetValueHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs")]));

    $.Property({Static:false, Public:true }, "RootObjectInstance", $.Object);

    $.Property({Static:false, Public:true }, "IgnoreCanConvert", $.Boolean);

    $.Property({Static:false, Public:true }, "ExternalNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Property({Static:false, Public:true }, "SkipDuplicatePropertyCheck", $.Boolean);

    $.Property({Static:false, Public:true }, "RegisterNamesOnExternalNamescope", $.Boolean);

    $.Property({Static:false, Public:true }, "SkipProvideValueOnRoot", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferUnconvertedDictionaryKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "SourceBamlUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "AccessLevel", $asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlReader */ 

(function XamlReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };





  function XamlReader_get_IsDisposed () {
    return this.XamlReader$IsDisposed$value;
  }; 










  function XamlReader_set_IsDisposed (value) {
    this.XamlReader$IsDisposed$value = value;
  }; 




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlReader_get_IsDisposed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlReader_set_IsDisposed
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipFromTo", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $asm2D.TypeRef("System.Xaml.XamlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "XamlReader$IsDisposed$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlReader */ 

(function XamlXmlReader$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReader"), 
      Name: "System.Xaml.XamlXmlReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextReader"), $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextReader"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.TextReader"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$.String, $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.IO.TextReader"), $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlNamespaceSupported", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_nodeStream", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_currentLineInfo", $asm2D.TypeRef("System.Xaml.LineInfo"));

    $.Field({Static:false, Public:false}, "_endOfStreamNode", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_mergedSettings", $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlReaderSettings */ 

(function XamlXmlReaderSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };




  function XamlXmlReaderSettings_get_CloseInput () {
    return this.XamlXmlReaderSettings$CloseInput$value;
  }; 

  function XamlXmlReaderSettings_get_SkipXmlCompatibilityProcessing () {
    return this.XamlXmlReaderSettings$SkipXmlCompatibilityProcessing$value;
  }; 

  function XamlXmlReaderSettings_get_XmlLang () {
    return this.XamlXmlReaderSettings$XmlLang$value;
  }; 

  function XamlXmlReaderSettings_get_XmlSpacePreserve () {
    return this.XamlXmlReaderSettings$XmlSpacePreserve$value;
  }; 

  function XamlXmlReaderSettings_set_CloseInput (value) {
    this.XamlXmlReaderSettings$CloseInput$value = value;
  }; 

  function XamlXmlReaderSettings_set_SkipXmlCompatibilityProcessing (value) {
    this.XamlXmlReaderSettings$SkipXmlCompatibilityProcessing$value = value;
  }; 

  function XamlXmlReaderSettings_set_XmlLang (value) {
    this.XamlXmlReaderSettings$XmlLang$value = value;
  }; 

  function XamlXmlReaderSettings_set_XmlSpacePreserve (value) {
    this.XamlXmlReaderSettings$XmlSpacePreserve$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReaderSettings"), 
      Name: "System.Xaml.XamlXmlReaderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:true }, "get_CloseInput", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlXmlReaderSettings_get_CloseInput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SkipXmlCompatibilityProcessing", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlXmlReaderSettings_get_SkipXmlCompatibilityProcessing
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String), 
      XamlXmlReaderSettings_get_XmlLang
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XmlSpacePreserve", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlXmlReaderSettings_get_XmlSpacePreserve
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CloseInput", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlXmlReaderSettings_set_CloseInput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SkipXmlCompatibilityProcessing", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlXmlReaderSettings_set_SkipXmlCompatibilityProcessing
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XmlLang", 
      JSIL.MethodSignature.Action($.String), 
      XamlXmlReaderSettings_set_XmlLang
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XmlSpacePreserve", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlXmlReaderSettings_set_XmlSpacePreserve
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlReaderSettings$XmlLang$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlReaderSettings$XmlSpacePreserve$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlReaderSettings$SkipXmlCompatibilityProcessing$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlReaderSettings$CloseInput$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_xmlnsDictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpacePreserve", $.Boolean);

    $.Property({Static:false, Public:true }, "SkipXmlCompatibilityProcessing", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseInput", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xaml.IRootObjectProvider */ 

JSIL.MakeInterface(
  "System.Xaml.IRootObjectProvider", true, [], function ($) {
    $.Method({}, "get_RootObject", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "RootObject");
  }, []);

/* interface System.Xaml.IXamlLineInfo */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlLineInfo", true, [], function ($) {
    $.Method({}, "get_HasLineInfo", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_LineNumber", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_LinePosition", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "HasLineInfo");
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
  }, []);

/* interface System.Xaml.IXamlLineInfoConsumer */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlLineInfoConsumer", true, [], function ($) {
    $.Method({}, "SetLineInfo", new JSIL.MethodSignature(null, [$.Int32, $.Int32]));
    $.Method({}, "get_ShouldProvideLineInfo", JSIL.MethodSignature.Return($.Boolean));
    $.Property({}, "ShouldProvideLineInfo");
  }, []);

/* interface System.Xaml.IXamlNamespaceResolver */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlNamespaceResolver", true, [], function ($) {
    $.Method({}, "GetNamespace", new JSIL.MethodSignature($.String, [$.String]));
    $.Method({}, "GetNamespacePrefixes", JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])));
  }, []);

/* interface System.Xaml.IXamlNameProvider */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlNameProvider", true, [], function ($) {
    $.Method({}, "GetName", new JSIL.MethodSignature($.String, [$.Object]));
  }, []);

/* interface System.Xaml.IXamlNameResolver */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlNameResolver", true, [], function ($) {
    $.Method({}, "get_IsFixupTokenAvailable", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Resolve", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "Resolve", new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]));
    $.Method({}, "GetFixupToken", new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])]));
    $.Method({}, "GetFixupToken", new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.Boolean]));
    $.Method({}, "GetAllNamesAndValuesInScope", JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])));
    $.Method({}, "add_OnNameScopeInitializationComplete", JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler")));
    $.Method({}, "remove_OnNameScopeInitializationComplete", JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler")));
    $.Property({}, "IsFixupTokenAvailable");
  }, []);

/* interface System.Xaml.IXamlObjectWriterFactory */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlObjectWriterFactory", true, [], function ($) {
    $.Method({}, "GetParentSettings", JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")));
    $.Method({}, "GetXamlObjectWriter", new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectWriter"), [$asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")]));
  }, []);

/* interface System.Xaml.IXamlSchemaContextProvider */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlSchemaContextProvider", true, [], function ($) {
    $.Method({}, "get_SchemaContext", JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext")));
    $.Property({}, "SchemaContext");
  }, []);

/* class System.Xaml.ArrayHelper */ 

(function ArrayHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Xaml.ArrayHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertArrayType", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm07.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm07.TypeRef("System.Func`2", ["!!0", "!!1"])], ["R", "S"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForAll", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm07.TypeRef("System.Action`1", ["!!0"])], ["R"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.NamespaceDeclaration */ 

(function NamespaceDeclaration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.NamespaceDeclaration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Prefix={Prefix} Namespace={Namespace}"]; });

})();

/* class System.Xaml.LineInfo */ 

(function LineInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.LineInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_linePosition", $.Int32);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.ReaderBaseDelegate */ 

(function ReaderBaseDelegate$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReader"), 
      Name: "System.Xaml.ReaderBaseDelegate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasLineInfo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_currentNode", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_currentLineInfo", $asm2D.TypeRef("System.Xaml.LineInfo"));

    $.Field({Static:false, Public:false}, "_hasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.ReaderDelegate */ 

(function ReaderDelegate$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.ReaderBaseDelegate"), 
      Name: "System.Xaml.ReaderDelegate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlNodeNextDelegate"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_nextDelegate", $asm2D.TypeRef("System.Xaml.XamlNodeNextDelegate"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xaml.IXamlIndexingReader */ 

JSIL.MakeInterface(
  "System.Xaml.IXamlIndexingReader", true, [], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_CurrentIndex", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_CurrentIndex", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "Count");
    $.Property({}, "CurrentIndex");
  }, []);

/* class System.Xaml.ReaderMultiIndexDelegate */ 

(function ReaderMultiIndexDelegate$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.ReaderBaseDelegate"), 
      Name: "System.Xaml.ReaderMultiIndexDelegate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlNodeIndexDelegate"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CurrentIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:true , Public:false}, "s_StartOfStream", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:true , Public:false}, "s_EndOfStream", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_indexDelegate", $asm2D.TypeRef("System.Xaml.XamlNodeIndexDelegate"));

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Field({Static:false, Public:false}, "_idx", $.Int32);


    function ReaderMultiIndexDelegate__cctor () {
      $thisType.s_StartOfStream = new $asm2D.System.Xaml.XamlNode();
      $thisType.s_EndOfStream = new $asm2D.System.Xaml.XamlNode();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ReaderMultiIndexDelegate__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentIndex", $.Int32);

    $.ImplementInterfaces(
      /* 2 */ $asm2D.TypeRef("System.Xaml.IXamlIndexingReader")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.WriterDelegate */ 

(function WriterDelegate$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriter"), 
      Name: "System.Xaml.WriterDelegate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlNodeAddDelegate"), $asm2D.TypeRef("System.Xaml.XamlLineInfoAddDelegate"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ShouldProvideLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowBecauseWriterIsClosed", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowBecauseWriterIsClosed2", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIsDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_addDelegate", $asm2D.TypeRef("System.Xaml.XamlNodeAddDelegate"));

    $.Field({Static:false, Public:false}, "_addLineInfoDelegate", $asm2D.TypeRef("System.Xaml.XamlLineInfoAddDelegate"));

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "ShouldProvideLineInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfoConsumer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlBackgroundReader */ 

(function XamlBackgroundReader$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReader"), 
      Name: "System.Xaml.XamlBackgroundReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToBuffer", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncomingFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutgoingEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InterruptableTransform", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlReader"), $asm2D.TypeRef("System.Xaml.XamlWriter"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Next", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Next_ProcessLineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "StartThread", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "StartThread", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SwapBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "XamlReaderThreadStart", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_providerFullEvent", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "_dataReceivedEvent", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "_incoming", $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_inIdx", $.Int32);

    $.Field({Static:false, Public:false}, "_outgoing", $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_outIdx", $.Int32);

    $.Field({Static:false, Public:false}, "_outValid", $.Int32);

    $.Field({Static:false, Public:false}, "_currentNode", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_wrappedReader", $asm2D.TypeRef("System.Xaml.XamlReader"));

    $.Field({Static:false, Public:false}, "_internalReader", $asm2D.TypeRef("System.Xaml.XamlReader"));

    $.Field({Static:false, Public:false}, "_writer", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Field({Static:false, Public:false}, "_wrappedReaderHasLineInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "_thread", $asm07.TypeRef("System.Threading.Thread"));

    $.Field({Static:false, Public:false}, "_caughtException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "IncomingFull", $.Boolean);

    $.Property({Static:false, Public:false}, "OutgoingEmpty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlNodeList */ 

(function XamlNodeList$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlNodeList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Index", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "_nodeList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_readMode", $.Boolean);

    $.Field({Static:false, Public:false}, "_writer", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Field({Static:false, Public:false}, "_hasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true }, "Writer", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlNodeQueue */ 

(function XamlNodeQueue$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlNodeQueue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlNodeType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Next", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.Field({Static:false, Public:false}, "_nodeQueue", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_endOfStreamNode", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_reader", $asm2D.TypeRef("System.Xaml.ReaderDelegate"));

    $.Field({Static:false, Public:false}, "_writer", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Field({Static:false, Public:false}, "_hasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true }, "Reader", $asm2D.TypeRef("System.Xaml.XamlReader"));

    $.Property({Static:false, Public:true }, "Writer", $asm2D.TypeRef("System.Xaml.XamlWriter"));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSubreader */ 

(function XamlSubreader$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReader"), 
      Name: "System.Xaml.XamlSubreader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "LimitedRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_reader", $asm2D.TypeRef("System.Xaml.XamlReader"));

    $.Field({Static:false, Public:false}, "_lineInfoReader", $asm2D.TypeRef("System.Xaml.IXamlLineInfo"));

    $.Field({Static:false, Public:false}, "_done", $.Boolean);

    $.Field({Static:false, Public:false}, "_firstRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_rootIsStartMember", $.Boolean);

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.BoolTypeBits */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.BoolTypeBits", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    AllValid: -65536, 
    Constructible: 1, 
    XmlData: 2, 
    MarkupExtension: 4, 
    Nullable: 8, 
    NameScope: 16, 
    ConstructionRequiresArguments: 32, 
    Public: 64, 
    Default: 73, 
    Unknown: 256, 
    TrimSurroundingWhitespace: 4096, 
    WhitespaceSignificantCollection: 8192, 
    UsableDuringInitialization: 16384, 
    Ambient: 32768, 
  }
);

/* enum System.Xaml.BoolMemberBits */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.BoolMemberBits", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AllValid: -65536, 
    ReadOnly: 1, 
    WriteOnly: 2, 
    Event: 4, 
    Unknown: 8, 
    Ambient: 16, 
    ReadPublic: 32, 
    WritePublic: 64, 
    Default: 96, 
    Directive: 96, 
  }
);

/* enum System.Xaml.ThreeValuedBool */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.ThreeValuedBool", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotSet: 0, 
    False: 1, 
    True: 2, 
  }
);

/* struct System.Xaml.NullableReference`1 */ 

(function NullableReference$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Xaml.NullableReference`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_IsNotPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSetVolatile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNotPresent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIfNull", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetVolatile", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:false}, "s_NullSentinel", $.Object);

    $.Field({Static:true , Public:false}, "s_NotPresentSentinel", $.Object);

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Property({Static:false, Public:true }, "IsNotPresent", $.Boolean);

    $.Property({Static:false, Public:true }, "IsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "IsSetVolatile", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMember */ 

(function XamlMember$Members () {
  var $, $thisType;
























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlMember", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.PropertyInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"), $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.EventInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.EventInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.EventInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"), $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"), $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"), 
          $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReflector", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDefaultValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureReflector", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AreAttributesAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependsOn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Getter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSerializationVisibility", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Invoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAmbient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAttachable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDirective", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEvent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadPublicIgnoringType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWritePublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritePublicIgnoringType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MarkupExtensionBracketCharacters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredXamlNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializationVisibility", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Setter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingMemberInternal", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolMemberBits")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolMemberBits")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsReadVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriteVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupBooleanValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolMemberBits")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupConstructorArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupCustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupDeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupDependsOn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupInvoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsAmbient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsEvent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsReadPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsWriteOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsWritePublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupMarkupExtensionBracketCharacters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupSerializationVisibility", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupSystemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTargetType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingGetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingSetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGetter", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSetter", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $.String])
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_declaringType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "_memberType", $asm2D.TypeRef("System.Xaml.XamlMember+MemberType"));

    $.Field({Static:false, Public:false}, "_isNameValid", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"));

    $.Field({Static:false, Public:false}, "_reflector", $asm2D.TypeRef("System.Xaml.Schema.MemberReflector"));

    $.Field({Static:false, Public:false}, "_underlyingMember", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MemberInfo")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "DeclaringType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "Invoker", $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"));

    $.Property({Static:false, Public:true }, "IsUnknown", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadPublic", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWritePublic", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsNameValid", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferredXamlNamespace", $.String);

    $.Property({Static:false, Public:true }, "TargetType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "TypeConverter", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:false, Public:true }, "ValueSerializer", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]));

    $.Property({Static:false, Public:true }, "DeferringLoader", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]));

    $.Property({Static:false, Public:true }, "UnderlyingMember", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "UnderlyingMemberInternal", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWriteOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAttachable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEvent", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDirective", $.Boolean);

    $.Property({Static:false, Public:true }, "DependsOn", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true }, "IsAmbient", $.Boolean);

    $.Property({Static:false, Public:true }, "SerializationVisibility", $asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"));

    $.Property({Static:false, Public:true }, "MarkupExtensionBracketCharacters", $asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]));

    $.Property({Static:false, Public:false}, "ConstructorArgument", $.String);

    $.Property({Static:false, Public:false}, "DefaultValue", $.Object);

    $.Property({Static:false, Public:false}, "Getter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "HasDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSerializationVisibility", $.Boolean);

    $.Property({Static:false, Public:false}, "Setter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "IsReadPublicIgnoringType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritePublicIgnoringType", $.Boolean);

    $.Property({Static:false, Public:false}, "AreAttributesAvailable", $.Boolean);

    $.Property({Static:false, Public:false}, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.XamlMember+MemberType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.XamlMember+MemberType", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Instance: 0, 
    Attachable: 1, 
    Directive: 2, 
  }
);

/* class System.Xaml.XamlDirective */ 

(function XamlDirective$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMember"), 
      Name: "System.Xaml.XamlDirective", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String, 
          $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations"), $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String, 
          $asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedLocation", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupCustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupDeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupDependsOn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupInvoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsAmbient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsEvent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsReadPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsWriteOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsWritePublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTargetType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingGetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingSetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NamespacesAreEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_allowedLocation", $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations"));

    $.Field({Static:false, Public:false}, "_xamlNamespaces", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:true }, "AllowedLocation", $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.NameScopeDictionary */ 

(function NameScopeDictionary$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.NameScopeDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Windows.Markup.INameScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindName", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RegisterName", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "ContainsKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), "TryGetValue");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnregisterName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_nameMap", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "_underlyingNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Field({Static:false, Public:false}, "_names", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$.String]));

    $.Property({Static:false, Public:false}, "UnderlyingNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"), 
      /* 1 */ $asm2D.TypeRef("System.Windows.Markup.INameScope"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 3 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 5 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.NameScopeDictionary+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.NameScopeDictionary+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NameScopeDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "dictionaryEnumerator", $asm07.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Field({Static:false, Public:false}, "_nameMap", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "_underlyingNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScope"));

    $.Field({Static:false, Public:false}, "_names", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlDeferringLoader */ 

(function XamlDeferringLoader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlDeferringLoader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlReader"), $asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlReader"), [$.Object, $asm07.TypeRef("System.IServiceProvider")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlException */ 

(function XamlException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };







  function XamlException_get_LineNumber () {
    return this.XamlException$LineNumber$value;
  }; 

  function XamlException_get_LinePosition () {
    return this.XamlException$LinePosition$value;
  }; 



  function XamlException_set_LineNumber (value) {
    this.XamlException$LineNumber$value = (value | 0);
  }; 

  function XamlException_set_LinePosition (value) {
    this.XamlException$LinePosition$value = (value | 0);
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.Xaml.XamlException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlException_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlException_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlException_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlException_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "XamlException$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlException$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlParseException */ 

(function XamlParseException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlParseException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MeScanner"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScanner"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectWriterException */ 

(function XamlObjectWriterException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlObjectWriterException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlDuplicateMemberException */ 

(function XamlDuplicateMemberException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };







  function XamlDuplicateMemberException_get_DuplicateMember () {
    return this.XamlDuplicateMemberException$DuplicateMember$value;
  }; 

  function XamlDuplicateMemberException_get_ParentType () {
    return this.XamlDuplicateMemberException$ParentType$value;
  }; 


  function XamlDuplicateMemberException_set_DuplicateMember (value) {
    this.XamlDuplicateMemberException$DuplicateMember$value = value;
  }; 

  function XamlDuplicateMemberException_set_ParentType (value) {
    this.XamlDuplicateMemberException$ParentType$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlDuplicateMemberException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Method({Static:false, Public:true }, "get_DuplicateMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlDuplicateMemberException_get_DuplicateMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlDuplicateMemberException_get_ParentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Method({Static:false, Public:true }, "set_DuplicateMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlDuplicateMemberException_set_DuplicateMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ParentType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlDuplicateMemberException_set_ParentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlDuplicateMemberException$DuplicateMember$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlDuplicateMemberException$ParentType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "DuplicateMember", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "ParentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlInternalException */ 

(function XamlInternalException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlInternalException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Constant({Static:true , Public:false}, "MessagePrefix", $.String, "Internal XAML system error: ");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSchemaException */ 

(function XamlSchemaException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlSchemaException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReaderException */ 

(function XamlObjectReaderException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlObjectReaderException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriterException */ 

(function XamlXmlWriterException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlException"), 
      Name: "System.Xaml.XamlXmlWriterException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlLanguage */ 

(function XamlLanguage$Members () {
  var $, $thisType;



































































  JSIL.MakeStaticClass("System.Xaml.XamlLanguage", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_AllDirectives", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AllTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Array", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AsyncRecords", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Base", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Boolean", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Byte", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Char", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Class", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ClassAttributes", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ClassModifier", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ConnectionId", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Decimal", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Double", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FactoryMethod", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FieldModifier", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_INameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Initialization", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Int16", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Int32", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Int64", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IXmlSerializable", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lang", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MarkupExtension", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PositionalParameterDescriptor", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PositionalParameters", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Property", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Reference", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Shared", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Single", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Space", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Static", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_String", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Subclass", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SynchronousMode", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TimeSpan", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TypeArguments", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Uid", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnknownContent", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XamlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XData", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllDirectives", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [
          $.String, $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations"), 
          $asm2D.TypeRef("System.Xaml.Schema.MemberReflector")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [
          $.String, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), $asm2D.TypeRef("System.Xaml.Schema.AllowedMemberLocations")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupClrNamespaceType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm2D.TypeRef("System.Xaml.MS.Impl.AssemblyNamespacePair"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupXamlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupXmlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeAlias", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.Constant({Static:true , Public:true }, "Xaml2006Namespace", $.String, "http://schemas.microsoft.com/winfx/2006/xaml");

    $.Constant({Static:true , Public:true }, "Xml1998Namespace", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "SWMNamespace", $.String, "System.Windows.Markup");

    $.Constant({Static:true , Public:false}, "PreferredPrefix", $.String, "x");

    $.Constant({Static:true , Public:false}, "x_AsyncRecords", $.String, "AsyncRecords");

    $.Constant({Static:true , Public:false}, "x_Arguments", $.String, "Arguments");

    $.Constant({Static:true , Public:false}, "x_Class", $.String, "Class");

    $.Constant({Static:true , Public:false}, "x_ClassModifier", $.String, "ClassModifier");

    $.Constant({Static:true , Public:false}, "x_Code", $.String, "Code");

    $.Constant({Static:true , Public:false}, "x_ConnectionId", $.String, "ConnectionId");

    $.Constant({Static:true , Public:false}, "x_FactoryMethod", $.String, "FactoryMethod");

    $.Constant({Static:true , Public:false}, "x_FieldModifier", $.String, "FieldModifier");

    $.Constant({Static:true , Public:false}, "x_Initialization", $.String, "_Initialization");

    $.Constant({Static:true , Public:false}, "x_Items", $.String, "_Items");

    $.Constant({Static:true , Public:false}, "x_Key", $.String, "Key");

    $.Constant({Static:true , Public:false}, "x_Members", $.String, "Members");

    $.Constant({Static:true , Public:false}, "x_ClassAttributes", $.String, "ClassAttributes");

    $.Constant({Static:true , Public:false}, "x_Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "x_PositionalParameters", $.String, "_PositionalParameters");

    $.Constant({Static:true , Public:false}, "x_Shared", $.String, "Shared");

    $.Constant({Static:true , Public:false}, "x_Subclass", $.String, "Subclass");

    $.Constant({Static:true , Public:false}, "x_SynchronousMode", $.String, "SynchronousMode");

    $.Constant({Static:true , Public:false}, "x_TypeArguments", $.String, "TypeArguments");

    $.Constant({Static:true , Public:false}, "x_Uid", $.String, "Uid");

    $.Constant({Static:true , Public:false}, "x_UnknownContent", $.String, "_UnknownContent");

    $.Constant({Static:true , Public:false}, "xml_Space", $.String, "space");

    $.Constant({Static:true , Public:false}, "xml_Lang", $.String, "lang");

    $.Constant({Static:true , Public:false}, "xml_Base", $.String, "base");

    $.Field({Static:true , Public:false}, "s_xamlNamespaces", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:true , Public:false}, "s_xmlNamespaces", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:true , Public:false}, "s_schemaContext", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlSchemaContext")]));

    $.Field({Static:true , Public:false}, "s_array", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_null", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_reference", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_static", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_type", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_string", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_double", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_int32", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_boolean", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_member", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_property", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_xDataHolder", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_object", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_listOfObject", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_listOfMembers", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_listOfAttributes", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_markupExtension", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_iNameScope", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_iXmlSerializable", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_positionalParameterDescriptor", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_char", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_single", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_byte", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_int16", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_int64", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_decimal", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_uri", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_timespan", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:true , Public:false}, "s_allTypes", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")])]));

    $.Field({Static:true , Public:false}, "s_asyncRecords", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_arguments", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_class", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_classModifier", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_code", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_connectionId", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_factoryMethod", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_fieldModifier", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_items", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_initialization", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_key", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_members", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_classAttributes", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_name", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_positionalParameters", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_shared", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_subclass", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_synchronousMode", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_typeArguments", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_uid", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_unknownContent", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_base", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_lang", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_space", $asm07.TypeRef("System.Lazy`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Field({Static:true , Public:false}, "s_allDirectives", $asm07.TypeRef("System.Lazy`1", [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")])]));

    $.Property({Static:true , Public:true }, "XamlNamespaces", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:true , Public:true }, "XmlNamespaces", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:true , Public:true }, "Array", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Null", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Property", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Reference", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Static", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "String", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Double", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Int32", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Boolean", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "XData", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Object", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Char", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Single", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Byte", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Int16", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Int64", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Decimal", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "Uri", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "TimeSpan", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:true }, "AllTypes", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Property({Static:true , Public:true }, "Arguments", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "AsyncRecords", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Class", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "ClassModifier", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Code", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "ConnectionId", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "FactoryMethod", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "FieldModifier", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Items", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Initialization", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Key", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Members", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "ClassAttributes", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Name", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "PositionalParameters", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Shared", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Subclass", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "SynchronousMode", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "TypeArguments", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Uid", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "UnknownContent", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Base", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Lang", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "Space", $asm2D.TypeRef("System.Xaml.XamlDirective"));

    $.Property({Static:true , Public:true }, "AllDirectives", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm2D.TypeRef("System.Xaml.XamlDirective")]));

    $.Property({Static:true , Public:false}, "MarkupExtension", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:false}, "INameScope", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:false}, "PositionalParameterDescriptor", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:true , Public:false}, "IXmlSerializable", $asm2D.TypeRef("System.Xaml.XamlType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlLanguage+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlLanguage+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_0", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_1", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_10", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_11", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_12", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_13", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_14", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_15", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_16", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_17", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_18", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_19", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_2", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_20", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_21", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_22", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_23", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_24", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_25", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_26", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_27", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_28", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_29", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_3", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_30", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_31", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_32", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_33", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_34", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_35", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_36", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_37", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_38", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_39", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_4", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_40", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_41", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_42", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_43", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_44", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_45", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_46", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_47", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_48", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_49", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_5", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_50", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_51", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlDirective"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_6", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_7", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_8", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.cctor$gb__204_9", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlMarkupExtensionWriter */ 

(function XamlMarkupExtensionWriter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriter"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMemberForUniqueness", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+Node"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Failed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MarkupExtensionString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "sb", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "nodes", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+Node")]));

    $.Field({Static:false, Public:false}, "currentState", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Field({Static:false, Public:false}, "xamlXmlWriter", $asm2D.TypeRef("System.Xaml.XamlXmlWriter"));

    $.Field({Static:false, Public:false}, "settings", $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings"));

    $.Field({Static:false, Public:false}, "meSettings", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriterSettings"));

    $.Field({Static:false, Public:false}, "failed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true }, "MarkupExtensionString", $.String);

    $.Property({Static:false, Public:true }, "Failed", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlPropertySet)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlNodeType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };



  function Node_get_Members () {
    return this.Node$Members$value;
  }; 

  function Node_get_NodeType () {
    return this.Node$NodeType$value;
  }; 

  function Node_get_XamlProperty () {
    return this.Node$XamlProperty$value;
  }; 

  function Node_get_XamlType () {
    return this.Node$XamlType$value;
  }; 

  function Node_set_Members (value) {
    this.Node$Members$value = value;
  }; 

  function Node_set_NodeType (value) {
    this.Node$NodeType$value = value;
  }; 

  function Node_set_XamlProperty (value) {
    this.Node$XamlProperty$value = value;
  }; 

  function Node_set_XamlType (value) {
    this.Node$XamlType$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlPropertySet")), 
      Node_get_Members
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      Node_get_NodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      Node_get_XamlProperty
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      Node_get_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Members", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlPropertySet")), 
      Node_set_Members
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_NodeType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      Node_set_NodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      Node_set_XamlProperty
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      Node_set_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$XamlProperty$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$Members$value", $asm2D.TypeRef("System.Xaml.XamlPropertySet"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$NodeType$value", $asm2D.TypeRef("System.Xaml.XamlNodeType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$XamlType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "XamlProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "Members", $asm2D.TypeRef("System.Xaml.XamlPropertySet"));

    $.Property({Static:false, Public:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true }, "XamlType", $asm2D.TypeRef("System.Xaml.XamlType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+WriterState */ 

(function WriterState$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+WriterState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainCharacterToEscape", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatStringInCorrectSyntax", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefix", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "specialChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+Start */ 

(function Start$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+Start", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InObject */ 

(function InObject$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStack", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNonPositionalParameterMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InObjectBeforeMember */ 

(function InObjectBeforeMember$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+InObject"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InObjectBeforeMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InObjectAfterMember */ 

(function InObjectAfterMember$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+InObject"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InObjectAfterMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InPositionalParameters */ 

(function InPositionalParameters$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InPositionalParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InPositionalParametersBeforeValue */ 

(function InPositionalParametersBeforeValue$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+InPositionalParameters"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InPositionalParametersBeforeValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InPositionalParametersAfterValue */ 

(function InPositionalParametersAfterValue$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+InPositionalParameters"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InPositionalParametersAfterValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Delimiter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InMember */ 

(function InMember$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriter+InMemberAfterValueOrEndObject */ 

(function InMemberAfterValueOrEndObject$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"), 
      Name: "System.Xaml.XamlMarkupExtensionWriter+InMemberAfterValueOrEndObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlMarkupExtensionWriterSettings */ 

(function XamlMarkupExtensionWriterSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function XamlMarkupExtensionWriterSettings_get_ContinueWritingWhenPrefixIsNotFound () {
    return this.XamlMarkupExtensionWriterSettings$ContinueWritingWhenPrefixIsNotFound$value;
  }; 

  function XamlMarkupExtensionWriterSettings_set_ContinueWritingWhenPrefixIsNotFound (value) {
    this.XamlMarkupExtensionWriterSettings$ContinueWritingWhenPrefixIsNotFound$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlMarkupExtensionWriterSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_ContinueWritingWhenPrefixIsNotFound", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlMarkupExtensionWriterSettings_get_ContinueWritingWhenPrefixIsNotFound
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ContinueWritingWhenPrefixIsNotFound", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlMarkupExtensionWriterSettings_set_ContinueWritingWhenPrefixIsNotFound
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlMarkupExtensionWriterSettings$ContinueWritingWhenPrefixIsNotFound$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "ContinueWritingWhenPrefixIsNotFound", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSchemaContext */ 

(function XamlSchemaContext$Members () {
  var $, $thisType;































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSchemaContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContextSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.Assembly")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.Assembly")]), $asm2D.TypeRef("System.Xaml.XamlSchemaContextSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreInternalsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly"), $asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssemblySatisfiesReference", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.AssemblyName"), $asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildBracketCharacterCacheForType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupCollectedAssemblies", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCollectedAssemblies", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDictionary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", ["!!0", "!!1"]), null, ["K", "V"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDictionary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", ["!!0", "!!1"]), [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["K", "V"])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateStaticAndDynamicXmlnsInfos", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XamlSchemaContext_$lEnumerateStaticAndDynamicXmlnsInfos$gd__74.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "EnumerateXmlnsInfos", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_FullyQualifyAssemblyNamesInClrNamespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MasterBracketCharacterCache", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MasterMemberList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`2", [$asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Reflection.MemberInfo")]), $asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MasterTypeList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MasterValueConverterList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`3", [
              $asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType"), 
              $asm07.TypeRef("System.Type")
            ]), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceByUriList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.Schema.XamlNamespace")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceAssemblies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.Assembly")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportMarkupExtensionsWithDuplicateArity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlNsCompatDict", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsInfoForDynamicAssemblies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.WeakRefKey"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsInfoForUnreferencedAssemblies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllXamlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllXamlTypes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyShortName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAttachableEvent", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String, $asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAttachableProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $.String, $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompatibleNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEvent", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm07.TypeRef("System.Reflection.EventInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreferredPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefixForClrNs", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm07.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootNamespace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueConverter", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"]), [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType")], ["TConverterBase"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlDirective", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlDirective"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlNamespace", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlNamespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlNamespaces", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])
        ])
    )
      .Parameter(2, "typeArguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlNsInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"), [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlNsMappings", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$asm07.TypeRef("System.Reflection.Assembly"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBracketCharacterCacheForType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeAssemblyLoadHook", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePreferredPrefixes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAssemblyResolve", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterAssemblyCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveReferenceAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaContextAssemblyLoadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.AssemblyLoadEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryAdd", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", ["!!0", "!!1"]), "!!0", 
          "!!1"
        ], ["K", "V"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetCompatibleXamlNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryUpdate", 
      new JSIL.MethodSignature("!!1", [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", ["!!0", "!!1"]), "!!0", 
          "!!1", "!!1"
        ], ["K", "V"])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateNamespaceByUriList", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePreferredPrefixes", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"), $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateXmlNsInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateXmlNsInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")])
    );

    $.Constant({Static:true , Public:false}, "ConcurrencyLevel", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DictionaryCapacity", $.Int32, 17);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_referenceAssemblies", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Reflection.Assembly")]));

    $.Field({Static:false, Public:false}, "_syncExaminingAssemblies", $.Object);

    $.Field({Static:false, Public:false}, "_nonClrNamespaces", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Field({Static:false, Public:false}, "_preferredPrefixes", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_xmlNsCompatDict", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_masterTypeList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:false, Public:false}, "_masterValueConverterList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`3", [
            $asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType"), 
            $asm07.TypeRef("System.Type")
          ]), $.Object]));

    $.Field({Static:false, Public:false}, "_masterMemberList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`2", [$asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Reflection.MemberInfo")]), $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_masterBracketCharacterCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_settings", $asm2D.TypeRef("System.Xaml.XamlSchemaContextSettings"));

    $.Field({Static:false, Public:false}, "_namespaceByUriList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.Schema.XamlNamespace")]));

    $.Field({Static:false, Public:false}, "_xmlnsInfo", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Field({Static:false, Public:false}, "_xmlnsInfoForDynamicAssemblies", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.WeakRefKey"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Field({Static:false, Public:false}, "_xmlnsInfoForUnreferencedAssemblies", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Field({Static:false, Public:false}, "_assemblyLoadHandler", $asm2D.TypeRef("System.Xaml.XamlSchemaContext+AssemblyLoadHandler"));

    $.Field({Static:false, Public:false}, "_unexaminedAssemblies", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.Assembly")]));

    $.Field({Static:false, Public:false}, "_isGCCallbackPending", $.Boolean);

    $.Field({Static:false, Public:false}, "_syncAccessingUnexaminedAssemblies", $.Object);

    $.Field({Static:false, Public:false}, "_referenceAssemblyNames", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.AssemblyName")]));

    $.Property({Static:false, Public:false}, "XmlNsCompatDict", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "MasterBracketCharacterCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")])]));

    $.Property({Static:false, Public:false}, "MasterTypeList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Property({Static:false, Public:false}, "MasterValueConverterList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`3", [
            $asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType"), 
            $asm07.TypeRef("System.Type")
          ]), $.Object]));

    $.Property({Static:false, Public:false}, "MasterMemberList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityTuple`2", [$asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Reflection.MemberInfo")]), $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:true }, "SupportMarkupExtensionsWithDuplicateArity", $.Boolean);

    $.Property({Static:false, Public:true }, "FullyQualifyAssemblyNamesInClrNamespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "ReferenceAssemblies", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.Assembly")]));

    $.Property({Static:false, Public:false}, "XmlnsInfo", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Property({Static:false, Public:false}, "XmlnsInfoForDynamicAssemblies", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.WeakRefKey"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Property({Static:false, Public:false}, "NamespaceByUriList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.Schema.XamlNamespace")]));

    $.Property({Static:false, Public:false}, "XmlnsInfoForUnreferencedAssemblies", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm07.TypeRef("System.Reflection.Assembly"), $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSchemaContext+AssemblyLoadHandler */ 

(function AssemblyLoadHandler$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSchemaContext+AssemblyLoadHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Hook", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "OnAssemblyLoad", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.AssemblyLoadEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Unhook", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "schemaContextRef", $asm07.TypeRef("System.WeakReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSchemaContext+WeakReferenceList`1 */ 

(function WeakReferenceList$b1$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.WeakReference")]), 
      Name: "System.Xaml.XamlSchemaContext+WeakReferenceList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Enumerate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XamlSchemaContext_WeakReferenceList$b1_$lEnumerate$gd__14.__Type__]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 8 */ $asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 9 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 10 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlSchemaContext+WeakReferenceList`1+<Enumerate>d__14 */ 

(function $lEnumerate$gd__14$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSchemaContext+WeakReferenceList`1+<Enumerate>d__14", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XamlSchemaContext+WeakReferenceList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.WeakReference")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlSchemaContext+<EnumerateStaticAndDynamicXmlnsInfos>d__74 */ 

(function $lEnumerateStaticAndDynamicXmlnsInfos$gd__74$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSchemaContext+<EnumerateStaticAndDynamicXmlnsInfos>d__74", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.MS.Impl.XmlNsInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.MS.Impl.XmlNsInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.MS.Impl.XmlNsInfo$g.Current", $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlSchemaContextSettings */ 

(function XamlSchemaContextSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };




  function XamlSchemaContextSettings_get_FullyQualifyAssemblyNamesInClrNamespaces () {
    return this.XamlSchemaContextSettings$FullyQualifyAssemblyNamesInClrNamespaces$value;
  }; 

  function XamlSchemaContextSettings_get_SupportMarkupExtensionsWithDuplicateArity () {
    return this.XamlSchemaContextSettings$SupportMarkupExtensionsWithDuplicateArity$value;
  }; 

  function XamlSchemaContextSettings_set_FullyQualifyAssemblyNamesInClrNamespaces (value) {
    this.XamlSchemaContextSettings$FullyQualifyAssemblyNamesInClrNamespaces$value = value;
  }; 

  function XamlSchemaContextSettings_set_SupportMarkupExtensionsWithDuplicateArity (value) {
    this.XamlSchemaContextSettings$SupportMarkupExtensionsWithDuplicateArity$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlSchemaContextSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:true }, "get_FullyQualifyAssemblyNamesInClrNamespaces", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlSchemaContextSettings_get_FullyQualifyAssemblyNamesInClrNamespaces
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportMarkupExtensionsWithDuplicateArity", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlSchemaContextSettings_get_SupportMarkupExtensionsWithDuplicateArity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_FullyQualifyAssemblyNamesInClrNamespaces", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlSchemaContextSettings_set_FullyQualifyAssemblyNamesInClrNamespaces
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SupportMarkupExtensionsWithDuplicateArity", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlSchemaContextSettings_set_SupportMarkupExtensionsWithDuplicateArity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSchemaContextSettings$SupportMarkupExtensionsWithDuplicateArity$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSchemaContextSettings$FullyQualifyAssemblyNamesInClrNamespaces$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SupportMarkupExtensionsWithDuplicateArity", $.Boolean);

    $.Property({Static:false, Public:true }, "FullyQualifyAssemblyNamesInClrNamespaces", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlServices */ 

(function XamlServices$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Xaml.XamlServices", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlWriter"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlReader"), $asm2D.TypeRef("System.Xaml.XamlWriter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlReader"), $asm2D.TypeRef("System.Xaml.XamlWriter"), 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlType */ 

(function XamlType$Members () {
  var $, $thisType;























































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"), 
          $asm2D.TypeRef("System.Xaml.Schema.TypeReflector")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AppendTypeName", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanAssignTo", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReflector", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureReflector", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedContentTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AreAttributesAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConstructionRequiresArguments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorBindingFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.BindingFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentWrappers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Invoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAmbient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConstructible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDictionary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsGeneric", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMarkupExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNameValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnlyMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUsableAsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUsableDuringInitialization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWhitespaceSignificantCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MarkupExtensionReturnType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredXamlNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SetMarkupExtensionHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SetTypeConverterHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrimSurroundingWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeArguments", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingTypeInternal", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Type")]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAliasedProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlDirective")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllAttachableMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllExcludedReadOnlyMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttachableMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCollectionKind", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolTypeBits")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolTypeBits")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPositionalParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyOrUnknown", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPublicAndInternalConstructors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XamlType_$lGetPublicAndInternalConstructors$gd__151.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReadOnly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm07.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeArguments", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeArguments", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNullableGeneric", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupAliasedProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlDirective")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupAllAttachableMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllExcludedReadOnlyMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupAllMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupAllowedContentTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllPositionalParameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type])]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupAttachableMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupBaseType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupBooleanValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.BoolTypeBits")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupCollectionKind", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupConstructionRequiresArguments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupContentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupContentWrappers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupCustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupDeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupInvoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsAmbient", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsConstructible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsMarkupExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsNameScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsWhitespaceSignificantCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupIsXData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupItemType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupKeyType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupMarkupExtensionReturnType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupPositionalParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupSetMarkupExtensionHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupSetTypeConverterHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTrimSurroundingWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupTypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUnderlyingType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupUsableDuringInitialization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LookupValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetAttributeString", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "typeArgumentsAreEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_typeArguments", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Field({Static:false, Public:false}, "_reflector", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector"));

    $.Field({Static:false, Public:false}, "_underlyingType", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Type")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_namespaces", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "_isNameValid", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"));

    $.Property({Static:false, Public:true }, "BaseType", $.Type);

    $.Property({Static:false, Public:true }, "Invoker", $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"));

    $.Property({Static:false, Public:true }, "IsNameValid", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUnknown", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "PreferredXamlNamespace", $.String);

    $.Property({Static:false, Public:true }, "TypeArguments", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true }, "UnderlyingType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "UnderlyingTypeInternal", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "ConstructionRequiresArguments", $.Boolean);

    $.Property({Static:false, Public:true }, "IsArray", $.Boolean);

    $.Property({Static:false, Public:true }, "IsCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "IsConstructible", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "IsGeneric", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMarkupExtension", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNameScope", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPublic", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUsableDuringInitialization", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWhitespaceSignificantCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXData", $.Boolean);

    $.Property({Static:false, Public:true }, "TrimSurroundingWhitespace", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAmbient", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyType", $.Type);

    $.Property({Static:false, Public:true }, "ItemType", $.Type);

    $.Property({Static:false, Public:true }, "AllowedContentTypes", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true }, "ContentWrappers", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true }, "TypeConverter", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:false, Public:true }, "ValueSerializer", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]));

    $.Property({Static:false, Public:true }, "ContentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "DeferringLoader", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]));

    $.Property({Static:false, Public:true }, "MarkupExtensionReturnType", $.Type);

    $.Property({Static:false, Public:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:false}, "IsUsableAsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadOnlyMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "SetMarkupExtensionHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]));

    $.Property({Static:false, Public:false}, "SetTypeConverterHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]));

    $.Property({Static:false, Public:false}, "AddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AreAttributesAvailable", $.Boolean);

    $.Property({Static:false, Public:false}, "ConstructorBindingFlags", $asm07.TypeRef("System.Reflection.BindingFlags"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlType+EmptyList`1 */ 

(function EmptyList$b1$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xaml.XamlType+EmptyList`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Value", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlType+<GetPublicAndInternalConstructors>d__151 */ 

(function $lGetPublicAndInternalConstructors$gd__151$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlType+<GetPublicAndInternalConstructors>d__151", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.ConstructorInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.ConstructorInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ConstructorInfo"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.ConstructorInfo$g.Current", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlObjectReader */ 

(function XamlObjectReader$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReader"), 
      Name: "System.Xaml.XamlObjectReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstructorArgument", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSerializationVisibility", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"), [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "settings", $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings"));

    $.Field({Static:false, Public:false}, "schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "currentXamlNode", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "currentInstance", $.Object);

    $.Field({Static:false, Public:false}, "nodes", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEof", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Instance", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+MarkupInfo */ 

(function MarkupInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlNode)) ();
  };





  function MarkupInfo_get_XamlNode () {
    return this.MarkupInfo$XamlNode$value;
  }; 

  function MarkupInfo_set_XamlNode (value) {
    this.MarkupInfo$XamlNode$value = value.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+MarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decompose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.Method({Static:false, Public:true }, "get_XamlNode", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode")), 
      MarkupInfo_get_XamlNode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlNode", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNode")), 
      MarkupInfo_set_XamlNode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MarkupInfo$XamlNode$value", $asm2D.TypeRef("System.Xaml.XamlNode"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "XamlNode", $asm2D.TypeRef("System.Xaml.XamlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo */ 

(function ObjectOrValueMarkupInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureNoDuplicateNames", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+HashSet`1", [$.String])]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ObjectMarkupInfo */ 

(function ObjectMarkupInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };






























  function ObjectMarkupInfo_get_Name () {
    return this.ObjectMarkupInfo$Name$value;
  }; 

  function ObjectMarkupInfo_get_Object () {
    return this.ObjectMarkupInfo$Object$value;
  }; 













  function ObjectMarkupInfo_set_Name (value) {
    this.ObjectMarkupInfo$Name$value = value;
  }; 

  function ObjectMarkupInfo_set_Object (value) {
    this.ObjectMarkupInfo$Object$value = value;
  }; 






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+ObjectMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArgumentsMembers", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ICollection"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddAttachedProperties", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Type, 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFactoryMethodAndValidateArguments", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $asm07.TypeRef("System.Collections.ICollection"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddItemsProperty", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNameProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRecordConstructionMembers", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRecordMembers", 
      new JSIL.MethodSignature(null, [$.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRecordMembers", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRecordMembers", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Type, 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AssignName", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AssignName", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanPropertyXamlRoundtrip", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckTypeCanRoundtrip", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToInstanceDescriptor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), $.Object, 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ICollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConvertTypeAndMethodToString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decompose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureNoDuplicateNames", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+HashSet`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAllAttributableProperties", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectReader+HashSet`1", [$.String]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNamespaceForTypeArguments", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForArray", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Array"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForNull", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "ForObject", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForObjectInternal", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForTypeConverted", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Object, 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsAttributableMarkupExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ObjectMarkupInfo_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($.Object), 
      ObjectMarkupInfo_get_Object
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstructorInfo", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ICollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodParams", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlSerializableProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), [$asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertPropertiesWithDO", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEmptyString", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MemberMarkupInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMemberOnlyDependentOnAttributableMembers", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+HashSet`1", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MemberMarkupInfo"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPropertyContent", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MemberMarkupInfo"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyUsedInMethodSignature", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReorderPropertiesWithDO", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SelectAndRemovePropertiesWithDO", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")])]))
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ObjectMarkupInfo_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Object", 
      JSIL.MethodSignature.Action($.Object), 
      ObjectMarkupInfo_set_Object
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SortProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryAddPositionalParameters", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $asm07.TypeRef("System.Collections.ICollection"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetDefaultConstructorInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ICollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetInstanceDescriptorInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.ICollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNamePropertyAndFindName", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MemberMarkupInfo")])
    );

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Field({Static:false, Public:false}, "isAttributableMarkupExtension", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "ObjectMarkupInfo$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectMarkupInfo$Object$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Object", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsAttributableMarkupExtension", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ObjectMarkupInfo+PropertySorterForXmlSyntax */ 

(function PropertySorterForXmlSyntax$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+ObjectMarkupInfo+PropertySorterForXmlSyntax", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")])
    );

    $.Constant({Static:true , Public:false}, "Equal", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "XFirst", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "YFirst", $.Int32, 1);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ObjectMarkupInfo+PropertySorterForCurlySyntax */ 

(function PropertySorterForCurlySyntax$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+ObjectMarkupInfo+PropertySorterForCurlySyntax", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")])
    );

    $.Constant({Static:true , Public:false}, "Equal", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "XFirst", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "YFirst", $.Int32, 1);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+NameScopeMarkupInfo */ 

(function NameScopeMarkupInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlObjectReader_ReferenceTable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };




  function NameScopeMarkupInfo_get_ParentTable () {
    return this.NameScopeMarkupInfo$ParentTable$value;
  }; 

  function NameScopeMarkupInfo_get_SourceObject () {
    return this.NameScopeMarkupInfo$SourceObject$value;
  }; 


  function NameScopeMarkupInfo_set_ParentTable (value) {
    this.NameScopeMarkupInfo$ParentTable$value = value;
  }; 

  function NameScopeMarkupInfo_set_SourceObject (value) {
    this.NameScopeMarkupInfo$SourceObject$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+NameScopeMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureNoDuplicateNames", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+HashSet`1", [$.String])]))
    );

    $.Method({Static:false, Public:true }, "get_ParentTable", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable")), 
      NameScopeMarkupInfo_get_ParentTable
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SourceObject", 
      JSIL.MethodSignature.Return($.Object), 
      NameScopeMarkupInfo_get_SourceObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.Method({Static:false, Public:true }, "set_ParentTable", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable")), 
      NameScopeMarkupInfo_set_ParentTable
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SourceObject", 
      JSIL.MethodSignature.Action($.Object), 
      NameScopeMarkupInfo_set_SourceObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameScopeMarkupInfo$ParentTable$value", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameScopeMarkupInfo$SourceObject$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "ParentTable", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable"));

    $.Property({Static:false, Public:true }, "SourceObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ObjectReferenceEqualityComparer */ 

(function ObjectReferenceEqualityComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+ObjectReferenceEqualityComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ValueMarkupInfo */ 

(function ValueMarkupInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+ValueMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+MemberMarkupInfo */ 

(function MemberMarkupInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };


















  function MemberMarkupInfo_get_IsContent () {
    return this.MemberMarkupInfo$IsContent$value;
  }; 

  function MemberMarkupInfo_get_IsFactoryMethod () {
    return this.MemberMarkupInfo$IsFactoryMethod$value;
  }; 





  function MemberMarkupInfo_set_IsContent (value) {
    this.MemberMarkupInfo$IsContent$value = value;
  }; 

  function MemberMarkupInfo_set_IsFactoryMethod (value) {
    this.MemberMarkupInfo$IsFactoryMethod$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+MemberMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToXamlReader", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectReader+XamlTemplateMarkupInfo"), [
          $.Object, $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decompose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ForAttachedProperty", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForDictionary", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForDictionaryItems", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForProperty", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForReadWriteProperty", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForSequence", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForSequenceItems", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ForXmlSerializable", 
      new JSIL.MethodSignature($.Type, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Children", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAtomic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAttributable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAttributableMarkupExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_IsContent", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberMarkupInfo_get_IsContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsFactoryMethod", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberMarkupInfo_get_IsFactoryMethod
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyValueInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo"), [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyValueInfoInternal", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectOrValueMarkupInfo"), [
          $.Object, $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $asm0A.TypeRef("System.ComponentModel.TypeConverter"), $.Boolean, 
          $asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MemberRequiresNamespaceHoisting", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveObjectNodesForCollectionOrDictionary", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Method({Static:false, Public:true }, "set_IsContent", 
      JSIL.MethodSignature.Action($.Boolean), 
      MemberMarkupInfo_set_IsContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsFactoryMethod", 
      JSIL.MethodSignature.Action($.Boolean), 
      MemberMarkupInfo_set_IsFactoryMethod
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ShouldOmitKey", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.DictionaryEntry"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldUnwrapDueToWhitespace", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldWriteProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfPropertiesAreAttached", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")
        ])
    );

    $.Field({Static:false, Public:false}, "children", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Field({Static:false, Public:false}, "MemberMarkupInfo$IsContent$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberMarkupInfo$IsFactoryMethod$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "IsContent", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFactoryMethod", $.Boolean);

    $.Property({Static:false, Public:true }, "Children", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Property({Static:false, Public:true }, "IsAtomic", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAttributableMarkupExtension", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAttributable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+EndObjectMarkupInfo */ 

(function EndObjectMarkupInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+EndObjectMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+EndMemberMarkupInfo */ 

(function EndMemberMarkupInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+EndMemberMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+NamespaceMarkupInfo */ 

(function NamespaceMarkupInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+NamespaceMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ReferenceMarkupInfo */ 

(function ReferenceMarkupInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlObjectReader_ObjectMarkupInfo)) ();
  };




  function ReferenceMarkupInfo_get_Target () {
    return this.ReferenceMarkupInfo$Target$value;
  }; 

  function ReferenceMarkupInfo_set_Target (value) {
    this.ReferenceMarkupInfo$Target$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+ReferenceMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decompose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.Method({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo")), 
      ReferenceMarkupInfo_get_Target
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo")), 
      ReferenceMarkupInfo_set_Target
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ReferenceMarkupInfo$Target$value", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "nameProperty", $asm2D.TypeRef("System.Xaml.XamlObjectReader+MemberMarkupInfo"));

    $.Property({Static:false, Public:true }, "Target", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+ReferenceTable */ 

(function ReferenceTable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+ReferenceTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddToServiceProviderTable", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindInServiceProviderTable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "objectGraphTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo")]));

    $.Field({Static:false, Public:false}, "serviceProviderTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+SerializerContext */ 

(function SerializerContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlObjectReader_ReferenceTable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Type)) ();
  };












  function SerializerContext_get_Instance () {
    return this.SerializerContext$Instance$value;
  }; 

  function SerializerContext_get_IsRoot () {
    return this.SerializerContext$IsRoot$value;
  }; 



  function SerializerContext_get_ReferenceTable () {
    return this.SerializerContext$ReferenceTable$value;
  }; 

  function SerializerContext_get_RootType () {
    return this.SerializerContext$RootType$value;
  }; 













  function SerializerContext_set_Instance (value) {
    this.SerializerContext$Instance$value = value;
  }; 

  function SerializerContext_set_IsRoot (value) {
    this.SerializerContext$IsRoot$value = value;
  }; 

  function SerializerContext_set_ReferenceTable (value) {
    this.SerializerContext$ReferenceTable$value = value;
  }; 

  function SerializerContext_set_RootType (value) {
    this.SerializerContext$RootType$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+SerializerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AllocateIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.TypeConverter"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanRoundTripString", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.TypeConverter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanRoundtripUsingValueSerializer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareByValue", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]), $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertTo", 
      new JSIL.MethodSignature("!!0", [$asm0A.TypeRef("System.ComponentModel.TypeConverter"), $.Object], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "ConvertXamlTypeToString", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Method({Static:false, Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object), 
      SerializerContext_get_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsRoot", 
      JSIL.MethodSignature.Return($.Boolean), 
      SerializerContext_get_IsRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LocalAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PendingNameScopes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+NameScopeMarkupInfo")]))
    );

    $.Method({Static:false, Public:true }, "get_ReferenceTable", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable")), 
      SerializerContext_get_ReferenceTable
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RootType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SerializerContext_get_RootType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Runtime", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeDescriptorContext", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueSerializerContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSortedNamespaceNodes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPropertyReadVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPropertyWriteVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LocalAssemblyAwareGetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReserveDefaultPrefixForRootObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Method({Static:false, Public:true }, "set_Instance", 
      JSIL.MethodSignature.Action($.Object), 
      SerializerContext_set_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsRoot", 
      JSIL.MethodSignature.Action($.Boolean), 
      SerializerContext_set_IsRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReferenceTable", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable")), 
      SerializerContext_set_ReferenceTable
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RootType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      SerializerContext_set_RootType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryConvertToMarkupExtension", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.TypeConverter"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryHoistNamespaceDeclaration", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryTypeConvertToString", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.TypeConverter"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryValueSerializeToString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "lastIdentifier", $.Int32);

    $.Field({Static:false, Public:false}, "pendingNameScopes", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+NameScopeMarkupInfo")]));

    $.Field({Static:false, Public:false}, "typeDescriptorContext", $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"));

    $.Field({Static:false, Public:false}, "valueSerializerContext", $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"));

    $.Field({Static:false, Public:false}, "namespaceToPrefixMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "prefixToNamespaceMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"));

    $.Field({Static:false, Public:false}, "settings", $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings"));

    $.Field({Static:false, Public:false}, "SerializerContext$Instance$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SerializerContext$ReferenceTable$value", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SerializerContext$IsRoot$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SerializerContext$RootType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Settings", $asm2D.TypeRef("System.Xaml.XamlObjectReaderSettings"));

    $.Property({Static:false, Public:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true }, "Runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"));

    $.Property({Static:false, Public:true }, "PendingNameScopes", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+NameScopeMarkupInfo")]));

    $.Property({Static:false, Public:true }, "ReferenceTable", $asm2D.TypeRef("System.Xaml.XamlObjectReader+ReferenceTable"));

    $.Property({Static:false, Public:true }, "ValueSerializerContext", $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"));

    $.Property({Static:false, Public:true }, "TypeDescriptorContext", $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"));

    $.Property({Static:false, Public:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true }, "LocalAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "IsRoot", $.Boolean);

    $.Property({Static:false, Public:true }, "RootType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+SerializerContext+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+SerializerContext+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetSortedNamespaceNodes$gb__31_0", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__31_0", $asm07.TypeRef("System.Converter`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]), $asm2D.TypeRef("System.Xaml.XamlNode")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlObjectReader+TypeDescriptorAndValueSerializerContext */ 

(function TypeDescriptorAndValueSerializerContext$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+TypeDescriptorAndValueSerializerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Container", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.IContainer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyDescriptor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetService", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValueSerializerFor", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValueSerializerFor", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnComponentChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnComponentChanging", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "context", $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "Container", $asm0A.TypeRef("System.ComponentModel.IContainer"));

    $.Property({Static:false, Public:true , Virtual:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyDescriptor", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), 
      /* 1 */ $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), 
      /* 2 */ $asm07.TypeRef("System.IServiceProvider"), 
      /* 3 */ $asm2D.TypeRef("System.Xaml.INamespacePrefixLookup"), 
      /* 4 */ $asm2D.TypeRef("System.Xaml.IXamlSchemaContextProvider"), 
      /* 5 */ $asm2D.TypeRef("System.Xaml.IXamlNameProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+XamlTemplateMarkupInfo */ 

(function XamlTemplateMarkupInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlObjectReader+ObjectMarkupInfo"), 
      Name: "System.Xaml.XamlObjectReader+XamlTemplateMarkupInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlReader"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decompose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlObjectReader+SerializerContext"))
    );

    $.Field({Static:false, Public:false}, "nodes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+MarkupInfo")]));

    $.Field({Static:false, Public:false}, "objectPosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+HashSet`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+PartiallyOrderedList`2 */ 

(function PartiallyOrderedList$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+PartiallyOrderedList`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DepthFirstSearch", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntryIndex", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XamlObjectReader_PartiallyOrderedList$b2_$lGetEnumerator$gd__6.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "SetOrder", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XamlObjectReader_PartiallyOrderedList$b2_$lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__7.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "TopologicalSort", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_entries", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlObjectReader+PartiallyOrderedList`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false}, "_firstIndex", $.Int32);

    $.Field({Static:false, Public:false}, "_lastIndex", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+PartiallyOrderedList`2+Entry */ 

(function Entry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+PartiallyOrderedList`2+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Value", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:true }, "Predecessors", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "Link", $.Int32);

    $.Constant({Static:true , Public:true }, "UNSEEN", $.Int32, -1);

    $.Constant({Static:true , Public:true }, "INDFS", $.Int32, -2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+PartiallyOrderedList`2+<GetEnumerator>d__6 */ 

(function $lGetEnumerator$gd__6$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+PartiallyOrderedList`2+<GetEnumerator>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XamlObjectReader+PartiallyOrderedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "$lentry$g5__1", $asm2D.TypeRef("System.Xaml.XamlObjectReader+PartiallyOrderedList`2+Entry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.Current", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlObjectReader+PartiallyOrderedList`2+<System-Collections-IEnumerable-GetEnumerator>d__7 */ 

(function $lSystem$daCollections$daIEnumerable$daGetEnumerator$gd__7$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlObjectReader+PartiallyOrderedList`2+<System-Collections-IEnumerable-GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XamlObjectReader+PartiallyOrderedList`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XamlObjectReader+TypeConverterExtensions */ 

(function TypeConverterExtensions$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xaml.XamlObjectReader+TypeConverterExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetConverterInstance", 
      new JSIL.MethodSignature("!!0", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverter"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlObjectReader+XamlMemberExtensions */ 

(function XamlMemberExtensions$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Xaml.XamlObjectReader+XamlMemberExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetExcludedReadOnlyMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNearestMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+XamlMemberExtensions+GetNearestBaseMemberCriterion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MeetsCriterion", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlObjectReader+XamlMemberExtensions+GetNearestBaseMemberCriterion")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.XamlObjectReader+XamlMemberExtensions+GetNearestBaseMemberCriterion */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.XamlObjectReader+XamlMemberExtensions+GetNearestBaseMemberCriterion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    HasSerializationVisibility: 0, 
    HasDefaultValue: 1, 
    HasConstructorArgument: 2, 
  }
);

/* class System.Xaml.XamlObjectReaderSettings */ 

(function XamlObjectReaderSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function XamlObjectReaderSettings_get_RequireExplicitContentVisibility () {
    return this.XamlObjectReaderSettings$RequireExplicitContentVisibility$value;
  }; 

  function XamlObjectReaderSettings_set_RequireExplicitContentVisibility (value) {
    this.XamlObjectReaderSettings$RequireExplicitContentVisibility$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlReaderSettings"), 
      Name: "System.Xaml.XamlObjectReaderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_RequireExplicitContentVisibility", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlObjectReaderSettings_get_RequireExplicitContentVisibility
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RequireExplicitContentVisibility", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlObjectReaderSettings_set_RequireExplicitContentVisibility
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlObjectReaderSettings$RequireExplicitContentVisibility$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "RequireExplicitContentVisibility", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter */ 

(function XamlXmlWriter$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriter"), 
      Name: "System.Xaml.XamlXmlWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.TextWriter"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignNamespacePrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildTypeArgumentsString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIsDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMemberForUniqueness", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsConsecutiveInnerSpaces", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsLeadingSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsTrailingSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsWhitespaceThatIsNotSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertXamlTypeToString", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertXamlTypeToStringHelper", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefinePrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPrefix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContainingXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasSignificantWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeXamlXmlWriter", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicit", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPrefixEverUsedForAnotherNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsShadowed", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringStartsWithCurly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeArgumentsContainNamespaceThatNeedsDefinition", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDeferredNamespaces", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGetObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeArguments", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUndefinedNamespaces", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteXmlSpace", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "currentState", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Field({Static:false, Public:false}, "output", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "settings", $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings"));

    $.Field({Static:false, Public:false}, "namespaceScopes", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("System.Xaml.XamlXmlWriter+Frame")]));

    $.Field({Static:false, Public:false}, "meNodesStack", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")])]));

    $.Field({Static:false, Public:false}, "meWriter", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"));

    $.Field({Static:false, Public:false}, "ppStateInfo", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+PositionalParameterStateInfo"));

    $.Field({Static:false, Public:false}, "deferredValue", $.String);

    $.Field({Static:false, Public:false}, "deferredValueIsME", $.Boolean);

    $.Field({Static:false, Public:false}, "isFirstElementOfWhitespaceSignificantCollection", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "prefixAssignmentHistory", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "Settings", $asm2D.TypeRef("System.Xaml.XamlXmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+Frame */ 

(function Frame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlNodeType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlPropertySet)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };





  function Frame_get_AllocatingNodeType () {
    return this.Frame$AllocatingNodeType$value;
  }; 

  function Frame_get_IsContent () {
    return this.Frame$IsContent$value;
  }; 

  function Frame_get_IsObjectFromMember () {
    return this.Frame$IsObjectFromMember$value;
  }; 

  function Frame_get_Member () {
    return this.Frame$Member$value;
  }; 

  function Frame_get_Members () {
    return this.Frame$Members$value;
  }; 

  function Frame_get_Type () {
    return this.Frame$Type$value;
  }; 



  function Frame_set_AllocatingNodeType (value) {
    this.Frame$AllocatingNodeType$value = value;
  }; 

  function Frame_set_IsContent (value) {
    this.Frame$IsContent$value = value;
  }; 

  function Frame_set_IsObjectFromMember (value) {
    this.Frame$IsObjectFromMember$value = value;
  }; 

  function Frame_set_Member (value) {
    this.Frame$Member$value = value;
  }; 

  function Frame_set_Members (value) {
    this.Frame$Members$value = value;
  }; 

  function Frame_set_Type (value) {
    this.Frame$Type$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlXmlWriter+Frame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AssignNamespacePrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareByKey", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]), $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])])
    );

    $.Method({Static:false, Public:true }, "get_AllocatingNodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      Frame_get_AllocatingNodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsContent", 
      JSIL.MethodSignature.Return($.Boolean), 
      Frame_get_IsContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsObjectFromMember", 
      JSIL.MethodSignature.Return($.Boolean), 
      Frame_get_IsObjectFromMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      Frame_get_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlPropertySet")), 
      Frame_get_Members
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      Frame_get_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetSortedPrefixMap", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_AllocatingNodeType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      Frame_set_AllocatingNodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsContent", 
      JSIL.MethodSignature.Action($.Boolean), 
      Frame_set_IsContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsObjectFromMember", 
      JSIL.MethodSignature.Action($.Boolean), 
      Frame_set_IsObjectFromMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Member", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      Frame_set_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Members", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlPropertySet")), 
      Frame_set_Members
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      Frame_set_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryLookupNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryLookupPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "namespaceMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "prefixMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "Frame$Type$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Frame$Member$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Frame$Members$value", $asm2D.TypeRef("System.Xaml.XamlPropertySet"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Frame$AllocatingNodeType$value", $asm2D.TypeRef("System.Xaml.XamlNodeType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Frame$IsObjectFromMember$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Frame$IsContent$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "Members", $asm2D.TypeRef("System.Xaml.XamlPropertySet"));

    $.Property({Static:false, Public:true }, "AllocatingNodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));

    $.Property({Static:false, Public:true }, "IsObjectFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "IsContent", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+WriterState */ 

(function WriterState$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlXmlWriter+WriterState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteMemberAsAttribute", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteMemberAsElement", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteStartElementForObject", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+Start */ 

(function Start$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+Start", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+End */ 

(function End$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+End", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InRecord */ 

(function InRecord$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InRecordTryAttributes */ 

(function InRecordTryAttributes$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InRecordTryAttributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMember */ 

(function InMember$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFrameWithXmlSpacePreserve", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlXmlWriter+Frame"), [$asm2D.TypeRef("System.Xaml.XamlXmlWriter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSpaceOrThrow", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberAfterValue */ 

(function InMemberAfterValue$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberAfterValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberAfterValueWithSignificantWhitespace */ 

(function InMemberAfterValueWithSignificantWhitespace$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberAfterValueWithSignificantWhitespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberAfterEndObject */ 

(function InMemberAfterEndObject$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberAfterEndObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberAttributedMember */ 

(function InMemberAttributedMember$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberAttributedMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberTryAttributes */ 

(function InMemberTryAttributes$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberTryAttributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+InMemberTryAttributesAfterValue */ 

(function InMemberTryAttributesAfterValue$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+InMemberTryAttributesAfterValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+TryContentProperty */ 

(function TryContentProperty$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+TryContentProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+TryContentPropertyInTryAttributesState */ 

(function TryContentPropertyInTryAttributesState$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+TryContentPropertyInTryAttributesState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+TryCurlyForm */ 

(function TryCurlyForm$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+TryCurlyForm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNodesInXmlForm", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+ExpandPositionalParameters */ 

(function ExpandPositionalParameters$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"), 
      Name: "System.Xaml.XamlXmlWriter+ExpandPositionalParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandPositionalParametersIntoProperties", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllPropertiesWithCAA", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParametersInfo", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), [$asm2D.TypeRef("System.Xaml.XamlType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfFailed", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNodes", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartMember", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlXmlWriter"), $.String])
    );

    $.Field({Static:true , Public:false}, "state", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));

    $.Property({Static:true , Public:true }, "State", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriter+PositionalParameterStateInfo */ 

(function PositionalParameterStateInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Collections.Generic.List$b1.Of($asm2D.System.Xaml.XamlNode)))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlXmlWriter_WriterState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlMarkupExtensionWriter)) ();
  };



  function PositionalParameterStateInfo_get_CurrentDepth () {
    return this.PositionalParameterStateInfo$CurrentDepth$value;
  }; 

  function PositionalParameterStateInfo_get_NodesList () {
    return this.PositionalParameterStateInfo$NodesList$value;
  }; 

  function PositionalParameterStateInfo_get_ReturnState () {
    return this.PositionalParameterStateInfo$ReturnState$value;
  }; 

  function PositionalParameterStateInfo_get_Writer () {
    return this.PositionalParameterStateInfo$Writer$value;
  }; 


  function PositionalParameterStateInfo_set_CurrentDepth (value) {
    this.PositionalParameterStateInfo$CurrentDepth$value = (value | 0);
  }; 

  function PositionalParameterStateInfo_set_NodesList (value) {
    this.PositionalParameterStateInfo$NodesList$value = value;
  }; 

  function PositionalParameterStateInfo_set_ReturnState (value) {
    this.PositionalParameterStateInfo$ReturnState$value = value;
  }; 

  function PositionalParameterStateInfo_set_Writer (value) {
    this.PositionalParameterStateInfo$Writer$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlXmlWriter+PositionalParameterStateInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter"))
    );

    $.Method({Static:false, Public:true }, "get_CurrentDepth", 
      JSIL.MethodSignature.Return($.Int32), 
      PositionalParameterStateInfo_get_CurrentDepth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NodesList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")])])), 
      PositionalParameterStateInfo_get_NodesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ReturnState", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState")), 
      PositionalParameterStateInfo_get_ReturnState
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter")), 
      PositionalParameterStateInfo_get_Writer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_CurrentDepth", 
      JSIL.MethodSignature.Action($.Int32), 
      PositionalParameterStateInfo_set_CurrentDepth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_NodesList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")])])), 
      PositionalParameterStateInfo_set_NodesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReturnState", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState")), 
      PositionalParameterStateInfo_set_ReturnState
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Writer", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter")), 
      PositionalParameterStateInfo_set_Writer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterStateInfo$NodesList$value", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterStateInfo$Writer$value", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterStateInfo$CurrentDepth$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterStateInfo$ReturnState$value", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "NodesList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")])]));

    $.Property({Static:false, Public:true }, "Writer", $asm2D.TypeRef("System.Xaml.XamlMarkupExtensionWriter"));

    $.Property({Static:false, Public:true }, "CurrentDepth", $.Int32);

    $.Property({Static:false, Public:true }, "ReturnState", $asm2D.TypeRef("System.Xaml.XamlXmlWriter+WriterState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlPropertySet */ 

(function XamlPropertySet$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XamlPropertySet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XamlXmlWriterSettings */ 

(function XamlXmlWriterSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };




  function XamlXmlWriterSettings_get_AssumeValidInput () {
    return this.XamlXmlWriterSettings$AssumeValidInput$value;
  }; 

  function XamlXmlWriterSettings_get_CloseOutput () {
    return this.XamlXmlWriterSettings$CloseOutput$value;
  }; 

  function XamlXmlWriterSettings_set_AssumeValidInput (value) {
    this.XamlXmlWriterSettings$AssumeValidInput$value = value;
  }; 

  function XamlXmlWriterSettings_set_CloseOutput (value) {
    this.XamlXmlWriterSettings$CloseOutput$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlWriterSettings"), 
      Name: "System.Xaml.XamlXmlWriterSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Method({Static:false, Public:true }, "get_AssumeValidInput", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlXmlWriterSettings_get_AssumeValidInput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CloseOutput", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlXmlWriterSettings_get_CloseOutput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AssumeValidInput", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlXmlWriterSettings_set_AssumeValidInput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CloseOutput", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlXmlWriterSettings_set_CloseOutput
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlWriterSettings$AssumeValidInput$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlXmlWriterSettings$CloseOutput$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AssumeValidInput", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseOutput", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.LooseTypeExtensions */ 

(function LooseTypeExtensions$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Xaml.LooseTypeExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AssemblyQualifiedNameEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyQualifiedNameAssignableFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLooseSubClassOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWindowsBaseToSystemXamlComparison", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.Assembly"), $asm07.TypeRef("System.Reflection.Assembly"), 
          $asm07.TypeRef("System.Reflection.AssemblyName"), $asm07.TypeRef("System.Reflection.AssemblyName")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LooselyImplementInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase");

    $.Field({Static:true , Public:false, ReadOnly:true }, "WindowsBaseToken", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xaml.IsXmlNamespaceSupportedCallback */ 

JSIL.MakeDelegate("System.Xaml.IsXmlNamespaceSupportedCallback", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.String")])]));

/* delegate System.Xaml.HandleElementCallback */ 

JSIL.MakeDelegate("System.Xaml.HandleElementCallback", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Boolean")])]));

/* delegate System.Xaml.HandleAttributeCallback */ 

JSIL.MakeDelegate("System.Xaml.HandleAttributeCallback", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")));

/* class System.Xaml.XmlWrappingReader */ 

(function XmlWrappingReader$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xaml.XmlWrappingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Reader", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm2F.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm2F.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm2F.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "_reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "_readerAsIXmlLineInfo", $asm2F.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "_readerAsResolver", $asm2F.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm2F.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm2F.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm2F.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.ImplementInterfaces(
      /* 1 */ $asm2F.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm2F.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xaml.XmlCompatibilityReader */ 

(function XmlCompatibilityReader$Members () {
  var $, $thisType;





























































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XmlWrappingReader"), 
      Name: "System.Xaml.XmlCompatibilityReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.IsXmlNamespaceSupportedCallback")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm2D.TypeRef("System.Xaml.IsXmlNamespaceSupportedCallback"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSubsumingNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclareNamespaceCompatibility", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Error", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "get_AlternateContent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Choice", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompatibilityUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Fallback", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ignorable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MustUnderstand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PreserveAttributes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PreserveElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessContent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Requires", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+CompatibilityScope"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappedNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAlternateContent", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleChoice", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleFallback", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleIgnorable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleMustUnderstand", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandlePreserveAttributes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandlePreserveElements", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleProcessContent", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceKnown", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSubsumingNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapNewNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseContentToNamespaceElementPair", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]), [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XmlCompatibilityReader_$lParseContentToNamespaceElementPair$gd__40.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "PopScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrefixesToNamespaces", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.System.Xaml.XmlCompatibilityReader_$lPrefixesToNamespaces$gd__41.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "PushScope", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStartElement", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreReaderPosition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveReaderPosition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanForCompatibility", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanForEndCompatibility", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Normalization", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldIgnoreNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipToKnownAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_inAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "_currentName", $.String);

    $.Field({Static:false, Public:false}, "_namespaceCallback", $asm2D.TypeRef("System.Xaml.IsXmlNamespaceSupportedCallback"));

    $.Field({Static:false, Public:false}, "_knownNamespaces", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "_namespaceMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_subsumingNamespaces", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "_elementHandler", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.HandleElementCallback")]));

    $.Field({Static:false, Public:false}, "_attributeHandler", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.HandleAttributeCallback")]));

    $.Field({Static:false, Public:false}, "_depthOffset", $.Int32);

    $.Field({Static:false, Public:false}, "_ignoredAttributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "_attributePosition", $.Int32);

    $.Field({Static:false, Public:false}, "_compatibilityUri", $.String);

    $.Field({Static:false, Public:false}, "_alternateContent", $.String);

    $.Field({Static:false, Public:false}, "_choice", $.String);

    $.Field({Static:false, Public:false}, "_fallback", $.String);

    $.Field({Static:false, Public:false}, "_requires", $.String);

    $.Field({Static:false, Public:false}, "_ignorable", $.String);

    $.Field({Static:false, Public:false}, "_mustUnderstand", $.String);

    $.Field({Static:false, Public:false}, "_processContent", $.String);

    $.Field({Static:false, Public:false}, "_preserveElements", $.String);

    $.Field({Static:false, Public:false}, "_preserveAttributes", $.String);

    $.Field({Static:false, Public:false}, "_compatibilityScope", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+CompatibilityScope"));

    $.Field({Static:false, Public:false}, "isPreviousElementEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "previousElementDepth", $.Int32);

    $.Constant({Static:true , Public:false}, "XmlnsDeclaration", $.String, "xmlns");

    $.Constant({Static:true , Public:false}, "MarkupCompatibilityURI", $.String, "http://schemas.openxmlformats.org/markup-compatibility/2006");

    $.Field({Static:true , Public:false}, "_predefinedNamespaces", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true }, "Normalization", $.Boolean);

    $.Property({Static:false, Public:false}, "Encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "Scope", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+CompatibilityScope"));

    $.Property({Static:false, Public:false}, "AlternateContent", $.String);

    $.Property({Static:false, Public:false}, "Choice", $.String);

    $.Property({Static:false, Public:false}, "Fallback", $.String);

    $.Property({Static:false, Public:false}, "Requires", $.String);

    $.Property({Static:false, Public:false}, "Ignorable", $.String);

    $.Property({Static:false, Public:false}, "MustUnderstand", $.String);

    $.Property({Static:false, Public:false}, "ProcessContent", $.String);

    $.Property({Static:false, Public:false}, "PreserveElements", $.String);

    $.Property({Static:false, Public:false}, "PreserveAttributes", $.String);

    $.Property({Static:false, Public:false}, "CompatibilityUri", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xaml.XmlCompatibilityReader+NamespaceElementPair */ 

(function NamespaceElementPair$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Xaml.XmlCompatibilityReader+NamespaceElementPair", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:true }, "namespaceName", $.String);

    $.Field({Static:false, Public:true }, "itemName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XmlCompatibilityReader+CompatibilityScope */ 

(function CompatibilityScope$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XmlCompatibilityReader+CompatibilityScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Int32, 
          $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanIgnore", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChoiceSeen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChoiceTaken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FallbackSeen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InAlternateContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Previous", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Ignorable", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsIgnorableAtCurrentScope", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "PreserveAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "PreserveElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ProcessContent", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChoiceSeen", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChoiceTaken", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FallbackSeen", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InAlternateContent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InProcessContent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldProcessContent", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Verify", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_previous", $.Type);

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Field({Static:false, Public:false}, "_fallbackSeen", $.Boolean);

    $.Field({Static:false, Public:false}, "_inAlternateContent", $.Boolean);

    $.Field({Static:false, Public:false}, "_inProcessContent", $.Boolean);

    $.Field({Static:false, Public:false}, "_choiceTaken", $.Boolean);

    $.Field({Static:false, Public:false}, "_choiceSeen", $.Boolean);

    $.Field({Static:false, Public:false}, "_reader", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader"));

    $.Field({Static:false, Public:false}, "_ignorables", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "_processContents", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+ProcessContentSet")]));

    $.Field({Static:false, Public:false}, "_preserveElements", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+PreserveItemSet")]));

    $.Field({Static:false, Public:false}, "_preserveAttributes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+PreserveItemSet")]));

    $.Property({Static:false, Public:true }, "Previous", $.Type);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "FallbackSeen", $.Boolean);

    $.Property({Static:false, Public:true }, "InAlternateContent", $.Boolean);

    $.Property({Static:false, Public:true }, "InProcessContent", $.Boolean);

    $.Property({Static:false, Public:true }, "ChoiceTaken", $.Boolean);

    $.Property({Static:false, Public:true }, "ChoiceSeen", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XmlCompatibilityReader+ProcessContentSet */ 

(function ProcessContentSet$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XmlCompatibilityReader+ProcessContentSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldProcessContent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "_all", $.Boolean);

    $.Field({Static:false, Public:false}, "_namespaceName", $.String);

    $.Field({Static:false, Public:false}, "_reader", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader"));

    $.Field({Static:false, Public:false}, "_names", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XmlCompatibilityReader+PreserveItemSet */ 

(function PreserveItemSet$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XmlCompatibilityReader+PreserveItemSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldPreserveItem", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "_all", $.Boolean);

    $.Field({Static:false, Public:false}, "_namespaceName", $.String);

    $.Field({Static:false, Public:false}, "_reader", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader"));

    $.Field({Static:false, Public:false}, "_names", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.XmlCompatibilityReader+<ParseContentToNamespaceElementPair>d__40 */ 

(function $lParseContentToNamespaceElementPair$gd__40$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XmlCompatibilityReader+<ParseContentToNamespaceElementPair>d__40", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XmlCompatibilityReader.NamespaceElementPair$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XmlCompatibilityReader.NamespaceElementPair$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "content", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__content", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader"));

    $.Field({Static:false, Public:false}, "callerContext", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__callerContext", $.String);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XmlCompatibilityReader.NamespaceElementPair$g.Current", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XmlCompatibilityReader+NamespaceElementPair")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.XmlCompatibilityReader+<PrefixesToNamespaces>d__41 */ 

(function $lPrefixesToNamespaces$gd__41$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.XmlCompatibilityReader+<PrefixesToNamespaces>d__41", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.String$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.String")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.String")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.String);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "prefixes", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__prefixes", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("System.Xaml.XmlCompatibilityReader"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Xaml.SRID */ 

(function SRID$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Xaml.SRID", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Default", $.String, "Default");

    $.Constant({Static:true , Public:true }, "UnexpectedParameterType", $.String, "UnexpectedParameterType");

    $.Constant({Static:true , Public:true }, "CannotConvertStringToType", $.String, "CannotConvertStringToType");

    $.Constant({Static:true , Public:true }, "CannotConvertType", $.String, "CannotConvertType");

    $.Constant({Static:true , Public:true }, "StringEmpty", $.String, "StringEmpty");

    $.Constant({Static:true , Public:true }, "ParameterCannotBeNegative", $.String, "ParameterCannotBeNegative");

    $.Constant({Static:true , Public:true }, "Enum_Invalid", $.String, "Enum_Invalid");

    $.Constant({Static:true , Public:true }, "Collection_BadType", $.String, "Collection_BadType");

    $.Constant({Static:true , Public:true }, "Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength", $.String, "Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength");

    $.Constant({Static:true , Public:true }, "Collection_CopyTo_NumberOfElementsExceedsArrayLength", $.String, "Collection_CopyTo_NumberOfElementsExceedsArrayLength");

    $.Constant({Static:true , Public:true }, "Collection_CopyTo_ArrayCannotBeMultidimensional", $.String, "Collection_CopyTo_ArrayCannotBeMultidimensional");

    $.Constant({Static:true , Public:true }, "CollectionNumberOfElementsMustBeLessOrEqualTo", $.String, "CollectionNumberOfElementsMustBeLessOrEqualTo");

    $.Constant({Static:true , Public:true }, "Enumerator_VerifyContext", $.String, "Enumerator_VerifyContext");

    $.Constant({Static:true , Public:true }, "Animation_ChildMustBeKeyFrame", $.String, "Animation_ChildMustBeKeyFrame");

    $.Constant({Static:true , Public:true }, "Animation_NoTextChildren", $.String, "Animation_NoTextChildren");

    $.Constant({Static:true , Public:true }, "Animation_InvalidBaseValue", $.String, "Animation_InvalidBaseValue");

    $.Constant({Static:true , Public:true }, "Animation_InvalidTimeKeyTime", $.String, "Animation_InvalidTimeKeyTime");

    $.Constant({Static:true , Public:true }, "Animation_InvalidResolvedKeyTimes", $.String, "Animation_InvalidResolvedKeyTimes");

    $.Constant({Static:true , Public:true }, "Animation_InvalidAnimationUsingKeyFramesDuration", $.String, "Animation_InvalidAnimationUsingKeyFramesDuration");

    $.Constant({Static:true , Public:true }, "Animation_Invalid_DefaultValue", $.String, "Animation_Invalid_DefaultValue");

    $.Constant({Static:true , Public:true }, "Freezable_CantBeFrozen", $.String, "Freezable_CantBeFrozen");

    $.Constant({Static:true , Public:true }, "CannotModifyReadOnlyContainer", $.String, "CannotModifyReadOnlyContainer");

    $.Constant({Static:true , Public:true }, "CannotRetrievePartsOfWriteOnlyContainer", $.String, "CannotRetrievePartsOfWriteOnlyContainer");

    $.Constant({Static:true , Public:true }, "TokenizerHelperPrematureStringTermination", $.String, "TokenizerHelperPrematureStringTermination");

    $.Constant({Static:true , Public:true }, "TokenizerHelperMissingEndQuote", $.String, "TokenizerHelperMissingEndQuote");

    $.Constant({Static:true , Public:true }, "TokenizerHelperExtraDataEncountered", $.String, "TokenizerHelperExtraDataEncountered");

    $.Constant({Static:true , Public:true }, "TokenizerHelperEmptyToken", $.String, "TokenizerHelperEmptyToken");

    $.Constant({Static:true , Public:true }, "InvalidPermissionType", $.String, "InvalidPermissionType");

    $.Constant({Static:true , Public:true }, "InvalidPermissionStateValue", $.String, "InvalidPermissionStateValue");

    $.Constant({Static:true , Public:true }, "SecurityExceptionForSettingSandboxExternalToTrue", $.String, "SecurityExceptionForSettingSandboxExternalToTrue");

    $.Constant({Static:true , Public:true }, "FileFormatException", $.String, "FileFormatException");

    $.Constant({Static:true , Public:true }, "FileFormatExceptionWithFileName", $.String, "FileFormatExceptionWithFileName");

    $.Constant({Static:true , Public:true }, "TypeMetadataCannotChangeAfterUse", $.String, "TypeMetadataCannotChangeAfterUse");

    $.Constant({Static:true , Public:true }, "Visual_ArgumentOutOfRange", $.String, "Visual_ArgumentOutOfRange");

    $.Constant({Static:true , Public:true }, "XCRChoiceOnlyInAC", $.String, "XCRChoiceOnlyInAC");

    $.Constant({Static:true , Public:true }, "XCRChoiceAfterFallback", $.String, "XCRChoiceAfterFallback");

    $.Constant({Static:true , Public:true }, "XCRRequiresAttribNotFound", $.String, "XCRRequiresAttribNotFound");

    $.Constant({Static:true , Public:true }, "XCRInvalidRequiresAttribute", $.String, "XCRInvalidRequiresAttribute");

    $.Constant({Static:true , Public:true }, "XCRFallbackOnlyInAC", $.String, "XCRFallbackOnlyInAC");

    $.Constant({Static:true , Public:true }, "XCRChoiceNotFound", $.String, "XCRChoiceNotFound");

    $.Constant({Static:true , Public:true }, "XCRMultipleFallbackFound", $.String, "XCRMultipleFallbackFound");

    $.Constant({Static:true , Public:true }, "XCRInvalidAttribInElement", $.String, "XCRInvalidAttribInElement");

    $.Constant({Static:true , Public:true }, "XCRUnknownCompatElement", $.String, "XCRUnknownCompatElement");

    $.Constant({Static:true , Public:true }, "XCRInvalidACChild", $.String, "XCRInvalidACChild");

    $.Constant({Static:true , Public:true }, "XCRInvalidFormat", $.String, "XCRInvalidFormat");

    $.Constant({Static:true , Public:true }, "XCRUndefinedPrefix", $.String, "XCRUndefinedPrefix");

    $.Constant({Static:true , Public:true }, "XCRUnknownCompatAttrib", $.String, "XCRUnknownCompatAttrib");

    $.Constant({Static:true , Public:true }, "XCRNSProcessContentNotIgnorable", $.String, "XCRNSProcessContentNotIgnorable");

    $.Constant({Static:true , Public:true }, "XCRDuplicateProcessContent", $.String, "XCRDuplicateProcessContent");

    $.Constant({Static:true , Public:true }, "XCRInvalidProcessContent", $.String, "XCRInvalidProcessContent");

    $.Constant({Static:true , Public:true }, "XCRDuplicateWildcardProcessContent", $.String, "XCRDuplicateWildcardProcessContent");

    $.Constant({Static:true , Public:true }, "XCRMustUnderstandFailed", $.String, "XCRMustUnderstandFailed");

    $.Constant({Static:true , Public:true }, "XCRNSPreserveNotIgnorable", $.String, "XCRNSPreserveNotIgnorable");

    $.Constant({Static:true , Public:true }, "XCRDuplicatePreserve", $.String, "XCRDuplicatePreserve");

    $.Constant({Static:true , Public:true }, "XCRInvalidPreserve", $.String, "XCRInvalidPreserve");

    $.Constant({Static:true , Public:true }, "XCRDuplicateWildcardPreserve", $.String, "XCRDuplicateWildcardPreserve");

    $.Constant({Static:true , Public:true }, "XCRInvalidXMLName", $.String, "XCRInvalidXMLName");

    $.Constant({Static:true , Public:true }, "XCRCompatCycle", $.String, "XCRCompatCycle");

    $.Constant({Static:true , Public:true }, "BadXmlnsDefinition", $.String, "BadXmlnsDefinition");

    $.Constant({Static:true , Public:true }, "BadXmlnsCompat", $.String, "BadXmlnsCompat");

    $.Constant({Static:true , Public:true }, "BadXmlnsPrefix", $.String, "BadXmlnsPrefix");

    $.Constant({Static:true , Public:true }, "BadInternalsVisibleTo1", $.String, "BadInternalsVisibleTo1");

    $.Constant({Static:true , Public:true }, "BadInternalsVisibleTo2", $.String, "BadInternalsVisibleTo2");

    $.Constant({Static:true , Public:true }, "DuplicateXmlnsCompat", $.String, "DuplicateXmlnsCompat");

    $.Constant({Static:true , Public:true }, "XmlnsCompatCycle", $.String, "XmlnsCompatCycle");

    $.Constant({Static:true , Public:true }, "UriNotFound", $.String, "UriNotFound");

    $.Constant({Static:true , Public:true }, "DuplicateXmlnsCompatAcrossAssemblies", $.String, "DuplicateXmlnsCompatAcrossAssemblies");

    $.Constant({Static:true , Public:true }, "UnresolvedNamespace", $.String, "UnresolvedNamespace");

    $.Constant({Static:true , Public:true }, "TypeNotFound", $.String, "TypeNotFound");

    $.Constant({Static:true , Public:true }, "TypeNotPublic", $.String, "TypeNotPublic");

    $.Constant({Static:true , Public:true }, "TooManyTypeConverterAttributes", $.String, "TooManyTypeConverterAttributes");

    $.Constant({Static:true , Public:true }, "CannotFindAssembly", $.String, "CannotFindAssembly");

    $.Constant({Static:true , Public:true }, "MissingAssemblyName", $.String, "MissingAssemblyName");

    $.Constant({Static:true , Public:true }, "InvalidTypeArgument", $.String, "InvalidTypeArgument");

    $.Constant({Static:true , Public:true }, "FileNotFoundExceptionMessage", $.String, "FileNotFoundExceptionMessage");

    $.Constant({Static:true , Public:true }, "DirectiveNotFound", $.String, "DirectiveNotFound");

    $.Constant({Static:true , Public:true }, "MustNotCallSetter", $.String, "MustNotCallSetter");

    $.Constant({Static:true , Public:true }, "MissingLookPropertyBit", $.String, "MissingLookPropertyBit");

    $.Constant({Static:true , Public:true }, "TooManyAttributes", $.String, "TooManyAttributes");

    $.Constant({Static:true , Public:true }, "GetTargetTypeOnNonAttachableMember", $.String, "GetTargetTypeOnNonAttachableMember");

    $.Constant({Static:true , Public:true }, "SetTargetTypeOnNonAttachableMember", $.String, "SetTargetTypeOnNonAttachableMember");

    $.Constant({Static:true , Public:true }, "InvalidExpression", $.String, "InvalidExpression");

    $.Constant({Static:true , Public:true }, "MissingKey", $.String, "MissingKey");

    $.Constant({Static:true , Public:true }, "PropertyDoesNotTakeText", $.String, "PropertyDoesNotTakeText");

    $.Constant({Static:true , Public:true }, "EventCannotBeAssigned", $.String, "EventCannotBeAssigned");

    $.Constant({Static:true , Public:true }, "TypeConverterFailed", $.String, "TypeConverterFailed");

    $.Constant({Static:true , Public:true }, "CantCreateUnknownType", $.String, "CantCreateUnknownType");

    $.Constant({Static:true , Public:true }, "CantSetUnknownProperty", $.String, "CantSetUnknownProperty");

    $.Constant({Static:true , Public:true }, "MissingImplicitProperty", $.String, "MissingImplicitProperty");

    $.Constant({Static:true , Public:true }, "BuilderStackNotEmptyOnClose", $.String, "BuilderStackNotEmptyOnClose");

    $.Constant({Static:true , Public:true }, "CannotSetSchemaContext", $.String, "CannotSetSchemaContext");

    $.Constant({Static:true , Public:true }, "MissingImplicitPropertyTypeCase", $.String, "MissingImplicitPropertyTypeCase");

    $.Constant({Static:true , Public:true }, "ConstructImplicitType", $.String, "ConstructImplicitType");

    $.Constant({Static:true , Public:true }, "NonMEWithPositionalParameters", $.String, "NonMEWithPositionalParameters");

    $.Constant({Static:true , Public:true }, "PositionalParamsWrongLength", $.String, "PositionalParamsWrongLength");

    $.Constant({Static:true , Public:true }, "BadStateObjectWriter", $.String, "BadStateObjectWriter");

    $.Constant({Static:true , Public:true }, "DuplicateMemberSet", $.String, "DuplicateMemberSet");

    $.Constant({Static:true , Public:true }, "NotAmbientProperty", $.String, "NotAmbientProperty");

    $.Constant({Static:true , Public:true }, "NotAmbientType", $.String, "NotAmbientType");

    $.Constant({Static:true , Public:true }, "NoSuchConstructor", $.String, "NoSuchConstructor");

    $.Constant({Static:true , Public:true }, "UnresolvedForwardReferences", $.String, "UnresolvedForwardReferences");

    $.Constant({Static:true , Public:true }, "CantAssignRootInstance", $.String, "CantAssignRootInstance");

    $.Constant({Static:true , Public:true }, "ForwardRefDirectives", $.String, "ForwardRefDirectives");

    $.Constant({Static:true , Public:true }, "TransitiveForwardRefDirectives", $.String, "TransitiveForwardRefDirectives");

    $.Constant({Static:true , Public:true }, "TypeHasNoContentProperty", $.String, "TypeHasNoContentProperty");

    $.Constant({Static:true , Public:true }, "GetObjectNull", $.String, "GetObjectNull");

    $.Constant({Static:true , Public:true }, "NotAssignableFrom", $.String, "NotAssignableFrom");

    $.Constant({Static:true , Public:true }, "NameScopeNameNotEmptyString", $.String, "NameScopeNameNotEmptyString");

    $.Constant({Static:true , Public:true }, "NameScopeNameNotFound", $.String, "NameScopeNameNotFound");

    $.Constant({Static:true , Public:true }, "NameScopeDuplicateNamesNotAllowed", $.String, "NameScopeDuplicateNamesNotAllowed");

    $.Constant({Static:true , Public:true }, "NameScopeInvalidIdentifierName", $.String, "NameScopeInvalidIdentifierName");

    $.Constant({Static:true , Public:true }, "NameScopeException", $.String, "NameScopeException");

    $.Constant({Static:true , Public:true }, "ObjectWriterTypeNotAllowed", $.String, "ObjectWriterTypeNotAllowed");

    $.Constant({Static:true , Public:true }, "DirectiveNotAtRoot", $.String, "DirectiveNotAtRoot");

    $.Constant({Static:true , Public:true }, "DirectiveMustBeString", $.String, "DirectiveMustBeString");

    $.Constant({Static:true , Public:true }, "XClassMustMatchRootInstance", $.String, "XClassMustMatchRootInstance");

    $.Constant({Static:true , Public:true }, "SavedContextSchemaContextMismatch", $.String, "SavedContextSchemaContextMismatch");

    $.Constant({Static:true , Public:true }, "SavedContextSchemaContextNull", $.String, "SavedContextSchemaContextNull");

    $.Constant({Static:true , Public:true }, "SettingPropertiesIsNotAllowed", $.String, "SettingPropertiesIsNotAllowed");

    $.Constant({Static:true , Public:true }, "LateConstructionDirective", $.String, "LateConstructionDirective");

    $.Constant({Static:true , Public:true }, "ProvideValueCycle", $.String, "ProvideValueCycle");

    $.Constant({Static:true , Public:true }, "AttachedPropOnFwdRefTC", $.String, "AttachedPropOnFwdRefTC");

    $.Constant({Static:true , Public:true }, "InitializationSyntaxWithoutTypeConverter", $.String, "InitializationSyntaxWithoutTypeConverter");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_SO", $.String, "NoPropertyInCurrentFrame_SO");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_NS", $.String, "NoPropertyInCurrentFrame_NS");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_GO", $.String, "NoPropertyInCurrentFrame_GO");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_GO_noType", $.String, "NoPropertyInCurrentFrame_GO_noType");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_V", $.String, "NoPropertyInCurrentFrame_V");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_V_noType", $.String, "NoPropertyInCurrentFrame_V_noType");

    $.Constant({Static:true , Public:true }, "OpenPropertyInCurrentFrame_EO", $.String, "OpenPropertyInCurrentFrame_EO");

    $.Constant({Static:true , Public:true }, "OpenPropertyInCurrentFrame_SM", $.String, "OpenPropertyInCurrentFrame_SM");

    $.Constant({Static:true , Public:true }, "NoTypeInCurrentFrame_SM", $.String, "NoTypeInCurrentFrame_SM");

    $.Constant({Static:true , Public:true }, "NoTypeInCurrentFrame_EO", $.String, "NoTypeInCurrentFrame_EO");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_EM", $.String, "NoPropertyInCurrentFrame_EM");

    $.Constant({Static:true , Public:true }, "NoPropertyInCurrentFrame_EM_noType", $.String, "NoPropertyInCurrentFrame_EM_noType");

    $.Constant({Static:true , Public:true }, "ValueMustBeFollowedByEndMember", $.String, "ValueMustBeFollowedByEndMember");

    $.Constant({Static:true , Public:true }, "DictionaryFirstChanceException", $.String, "DictionaryFirstChanceException");

    $.Constant({Static:true , Public:true }, "CannotSetBaseUri", $.String, "CannotSetBaseUri");

    $.Constant({Static:true , Public:true }, "DependsOnMissing", $.String, "DependsOnMissing");

    $.Constant({Static:true , Public:true }, "CloseInsideTemplate", $.String, "CloseInsideTemplate");

    $.Constant({Static:true , Public:true }, "UnexpectedClose", $.String, "UnexpectedClose");

    $.Constant({Static:true , Public:true }, "TemplateNotCollected", $.String, "TemplateNotCollected");

    $.Constant({Static:true , Public:true }, "DeferredPropertyNotCollected", $.String, "DeferredPropertyNotCollected");

    $.Constant({Static:true , Public:true }, "MissingCase", $.String, "MissingCase");

    $.Constant({Static:true , Public:true }, "NamespaceNotFound", $.String, "NamespaceNotFound");

    $.Constant({Static:true , Public:true }, "NameScopeOnRootInstance", $.String, "NameScopeOnRootInstance");

    $.Constant({Static:true , Public:true }, "MissingNameResolver", $.String, "MissingNameResolver");

    $.Constant({Static:true , Public:true }, "ObjectNotTcOrMe", $.String, "ObjectNotTcOrMe");

    $.Constant({Static:true , Public:true }, "SimpleFixupsMustHaveOneName", $.String, "SimpleFixupsMustHaveOneName");

    $.Constant({Static:true , Public:true }, "UnexpectedTokenAfterME", $.String, "UnexpectedTokenAfterME");

    $.Constant({Static:true , Public:true }, "WhitespaceAfterME", $.String, "WhitespaceAfterME");

    $.Constant({Static:true , Public:true }, "UnexpectedToken", $.String, "UnexpectedToken");

    $.Constant({Static:true , Public:true }, "NoConstructorWithNArugments", $.String, "NoConstructorWithNArugments");

    $.Constant({Static:true , Public:true }, "MissingComma1", $.String, "MissingComma1");

    $.Constant({Static:true , Public:true }, "MissingComma2", $.String, "MissingComma2");

    $.Constant({Static:true , Public:true }, "TypeNameCannotHavePeriod", $.String, "TypeNameCannotHavePeriod");

    $.Constant({Static:true , Public:true }, "UnexpectedNodeType", $.String, "UnexpectedNodeType");

    $.Constant({Static:true , Public:true }, "ElementRuleException", $.String, "ElementRuleException");

    $.Constant({Static:true , Public:true }, "EmptyElementRuleException", $.String, "EmptyElementRuleException");

    $.Constant({Static:true , Public:true }, "EmptyPropertyElementRuleException", $.String, "EmptyPropertyElementRuleException");

    $.Constant({Static:true , Public:true }, "StartElementRuleException", $.String, "StartElementRuleException");

    $.Constant({Static:true , Public:true }, "ElementBodyRuleException", $.String, "ElementBodyRuleException");

    $.Constant({Static:true , Public:true }, "NonemptyPropertyElementRuleException", $.String, "NonemptyPropertyElementRuleException");

    $.Constant({Static:true , Public:true }, "PropertyElementRuleException", $.String, "PropertyElementRuleException");

    $.Constant({Static:true , Public:true }, "MissingTagInNamespace", $.String, "MissingTagInNamespace");

    $.Constant({Static:true , Public:true }, "AssemblyTagMissing", $.String, "AssemblyTagMissing");

    $.Constant({Static:true , Public:true }, "UnknownAttributeProperty", $.String, "UnknownAttributeProperty");

    $.Constant({Static:true , Public:true }, "NotDeclaringTypeAttributeProperty", $.String, "NotDeclaringTypeAttributeProperty");

    $.Constant({Static:true , Public:true }, "UsableDuringInitializationOnME", $.String, "UsableDuringInitializationOnME");

    $.Constant({Static:true , Public:true }, "TooManyAttributesOnType", $.String, "TooManyAttributesOnType");

    $.Constant({Static:true , Public:true }, "MissingPropertyCaseClrType", $.String, "MissingPropertyCaseClrType");

    $.Constant({Static:true , Public:true }, "UnhandledBoolTypeBit", $.String, "UnhandledBoolTypeBit");

    $.Constant({Static:true , Public:true }, "AmbiguousCollectionItemType", $.String, "AmbiguousCollectionItemType");

    $.Constant({Static:true , Public:true }, "AmbiguousDictionaryItemType", $.String, "AmbiguousDictionaryItemType");

    $.Constant({Static:true , Public:true }, "MarkupExtensionWithDuplicateArity", $.String, "MarkupExtensionWithDuplicateArity");

    $.Constant({Static:true , Public:true }, "SetOnlyProperty", $.String, "SetOnlyProperty");

    $.Constant({Static:true , Public:true }, "XaslTypePropertiesNotImplemented", $.String, "XaslTypePropertiesNotImplemented");

    $.Constant({Static:true , Public:true }, "AttachableMemberNotFound", $.String, "AttachableMemberNotFound");

    $.Constant({Static:true , Public:true }, "PropertyNotImplemented", $.String, "PropertyNotImplemented");

    $.Constant({Static:true , Public:true }, "PrefixNotFound", $.String, "PrefixNotFound");

    $.Constant({Static:true , Public:true }, "LineNumberAndPosition", $.String, "LineNumberAndPosition");

    $.Constant({Static:true , Public:true }, "LineNumberOnly", $.String, "LineNumberOnly");

    $.Constant({Static:true , Public:true }, "QuoteCharactersOutOfPlace", $.String, "QuoteCharactersOutOfPlace");

    $.Constant({Static:true , Public:true }, "UnclosedQuote", $.String, "UnclosedQuote");

    $.Constant({Static:true , Public:true }, "MalformedPropertyName", $.String, "MalformedPropertyName");

    $.Constant({Static:true , Public:true }, "AttributeUnhandledKind", $.String, "AttributeUnhandledKind");

    $.Constant({Static:true , Public:true }, "UnknownType", $.String, "UnknownType");

    $.Constant({Static:true , Public:true }, "UnknownMember", $.String, "UnknownMember");

    $.Constant({Static:true , Public:true }, "UnknownMemberSimple", $.String, "UnknownMemberSimple");

    $.Constant({Static:true , Public:true }, "UnknownMemberOnUnknownType", $.String, "UnknownMemberOnUnknownType");

    $.Constant({Static:true , Public:true }, "MemberIsInternal", $.String, "MemberIsInternal");

    $.Constant({Static:true , Public:true }, "NoAttributeUsage", $.String, "NoAttributeUsage");

    $.Constant({Static:true , Public:true }, "NoElementUsage", $.String, "NoElementUsage");

    $.Constant({Static:true , Public:true }, "InvalidXamlMemberName", $.String, "InvalidXamlMemberName");

    $.Constant({Static:true , Public:true }, "ParentlessPropertyElement", $.String, "ParentlessPropertyElement");

    $.Constant({Static:true , Public:true }, "SchemaContextNotInitialized", $.String, "SchemaContextNotInitialized");

    $.Constant({Static:true , Public:true }, "ThreadAlreadyStarted", $.String, "ThreadAlreadyStarted");

    $.Constant({Static:true , Public:true }, "SchemaContextNull", $.String, "SchemaContextNull");

    $.Constant({Static:true , Public:true }, "CloseXamlWriterBeforeReading", $.String, "CloseXamlWriterBeforeReading");

    $.Constant({Static:true , Public:true }, "CannotWriteClosedWriter", $.String, "CannotWriteClosedWriter");

    $.Constant({Static:true , Public:true }, "WriterIsClosed", $.String, "WriterIsClosed");

    $.Constant({Static:true , Public:true }, "DirectiveGetter", $.String, "DirectiveGetter");

    $.Constant({Static:true , Public:true }, "BadMethod", $.String, "BadMethod");

    $.Constant({Static:true , Public:true }, "CannotResolveTypeForFactoryMethod", $.String, "CannotResolveTypeForFactoryMethod");

    $.Constant({Static:true , Public:true }, "CannotCreateBadType", $.String, "CannotCreateBadType");

    $.Constant({Static:true , Public:true }, "CannotCreateBadEventDelegate", $.String, "CannotCreateBadEventDelegate");

    $.Constant({Static:true , Public:true }, "AttachableEventNotImplemented", $.String, "AttachableEventNotImplemented");

    $.Constant({Static:true , Public:true }, "ListNotIList", $.String, "ListNotIList");

    $.Constant({Static:true , Public:true }, "ArrayAddNotImplemented", $.String, "ArrayAddNotImplemented");

    $.Constant({Static:true , Public:true }, "NoAddMethodFound", $.String, "NoAddMethodFound");

    $.Constant({Static:true , Public:true }, "MissingTypeConverter", $.String, "MissingTypeConverter");

    $.Constant({Static:true , Public:true }, "CantSetReadonlyProperty", $.String, "CantSetReadonlyProperty");

    $.Constant({Static:true , Public:true }, "CantGetWriteonlyProperty", $.String, "CantGetWriteonlyProperty");

    $.Constant({Static:true , Public:true }, "XmlDataNull", $.String, "XmlDataNull");

    $.Constant({Static:true , Public:true }, "XmlValueNotReader", $.String, "XmlValueNotReader");

    $.Constant({Static:true , Public:true }, "NameNotFound", $.String, "NameNotFound");

    $.Constant({Static:true , Public:true }, "MustHaveName", $.String, "MustHaveName");

    $.Constant({Static:true , Public:true }, "MethodInvocation", $.String, "MethodInvocation");

    $.Constant({Static:true , Public:true }, "GetValue", $.String, "GetValue");

    $.Constant({Static:true , Public:true }, "SetValue", $.String, "SetValue");

    $.Constant({Static:true , Public:true }, "AddCollection", $.String, "AddCollection");

    $.Constant({Static:true , Public:true }, "AddDictionary", $.String, "AddDictionary");

    $.Constant({Static:true , Public:true }, "SetConnectionId", $.String, "SetConnectionId");

    $.Constant({Static:true , Public:true }, "InitializationGuard", $.String, "InitializationGuard");

    $.Constant({Static:true , Public:true }, "SetUriBase", $.String, "SetUriBase");

    $.Constant({Static:true , Public:true }, "ProvideValue", $.String, "ProvideValue");

    $.Constant({Static:true , Public:true }, "SetXmlInstance", $.String, "SetXmlInstance");

    $.Constant({Static:true , Public:true }, "GetConverterInstance", $.String, "GetConverterInstance");

    $.Constant({Static:true , Public:true }, "DeferredLoad", $.String, "DeferredLoad");

    $.Constant({Static:true , Public:true }, "DeferredSave", $.String, "DeferredSave");

    $.Constant({Static:true , Public:true }, "FactoryReturnedNull", $.String, "FactoryReturnedNull");

    $.Constant({Static:true , Public:true }, "ConstructorInvocation", $.String, "ConstructorInvocation");

    $.Constant({Static:true , Public:true }, "NoDefaultConstructor", $.String, "NoDefaultConstructor");

    $.Constant({Static:true , Public:true }, "NoConstructor", $.String, "NoConstructor");

    $.Constant({Static:true , Public:true }, "DeferringLoaderInstanceNull", $.String, "DeferringLoaderInstanceNull");

    $.Constant({Static:true , Public:true }, "TypeConverterFailed2", $.String, "TypeConverterFailed2");

    $.Constant({Static:true , Public:true }, "CanConvertFromFailed", $.String, "CanConvertFromFailed");

    $.Constant({Static:true , Public:true }, "CanConvertToFailed", $.String, "CanConvertToFailed");

    $.Constant({Static:true , Public:true }, "ShouldSerializeFailed", $.String, "ShouldSerializeFailed");

    $.Constant({Static:true , Public:true }, "GetItemsReturnedNull", $.String, "GetItemsReturnedNull");

    $.Constant({Static:true , Public:true }, "GetItemsException", $.String, "GetItemsException");

    $.Constant({Static:true , Public:true }, "APSException", $.String, "APSException");

    $.Constant({Static:true , Public:true }, "CannotReassignSchemaContext", $.String, "CannotReassignSchemaContext");

    $.Constant({Static:true , Public:true }, "CannotSetSchemaContextNull", $.String, "CannotSetSchemaContextNull");

    $.Constant({Static:true , Public:true }, "MissingCaseXamlNodes", $.String, "MissingCaseXamlNodes");

    $.Constant({Static:true , Public:true }, "MarkupExtensionTypeName", $.String, "MarkupExtensionTypeName");

    $.Constant({Static:true , Public:true }, "MarkupExtensionTypeNameBad", $.String, "MarkupExtensionTypeNameBad");

    $.Constant({Static:true , Public:true }, "MarkupExtensionNoContext", $.String, "MarkupExtensionNoContext");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterWriteNotSupportedInCurrentState", $.String, "XamlXmlWriterWriteNotSupportedInCurrentState");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterWriteObjectNotSupportedInCurrentState", $.String, "XamlXmlWriterWriteObjectNotSupportedInCurrentState");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterPrefixAlreadyDefinedInCurrentScope", $.String, "XamlXmlWriterPrefixAlreadyDefinedInCurrentScope");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterNamespaceAlreadyHasPrefixInCurrentScope", $.String, "XamlXmlWriterNamespaceAlreadyHasPrefixInCurrentScope");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterDuplicateMember", $.String, "XamlXmlWriterDuplicateMember");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterIsObjectFromMemberSetForArraysOrNonCollections", $.String, "XamlXmlWriterIsObjectFromMemberSetForArraysOrNonCollections");

    $.Constant({Static:true , Public:true }, "XamlXmlWriterCannotWriteNonstringValue", $.String, "XamlXmlWriterCannotWriteNonstringValue");

    $.Constant({Static:true , Public:true }, "ExpandPositionalParametersinTypeWithNoDefaultConstructor", $.String, "ExpandPositionalParametersinTypeWithNoDefaultConstructor");

    $.Constant({Static:true , Public:true }, "ConstructorNotFoundForGivenPositionalParameters", $.String, "ConstructorNotFoundForGivenPositionalParameters");

    $.Constant({Static:true , Public:true }, "ExpandPositionalParametersWithReadOnlyProperties", $.String, "ExpandPositionalParametersWithReadOnlyProperties");

    $.Constant({Static:true , Public:true }, "TypeHasInvalidXamlName", $.String, "TypeHasInvalidXamlName");

    $.Constant({Static:true , Public:true }, "MemberHasInvalidXamlName", $.String, "MemberHasInvalidXamlName");

    $.Constant({Static:true , Public:true }, "NamespaceDeclarationCannotBeXml", $.String, "NamespaceDeclarationCannotBeXml");

    $.Constant({Static:true , Public:true }, "ExpandPositionalParametersWithoutUnderlyingType", $.String, "ExpandPositionalParametersWithoutUnderlyingType");

    $.Constant({Static:true , Public:true }, "PrefixNotInFrames", $.String, "PrefixNotInFrames");

    $.Constant({Static:true , Public:true }, "WhiteSpaceInCollection", $.String, "WhiteSpaceInCollection");

    $.Constant({Static:true , Public:true }, "CannotWriteXmlSpacePreserveOnMember", $.String, "CannotWriteXmlSpacePreserveOnMember");

    $.Constant({Static:true , Public:true }, "InvalidTypeString", $.String, "InvalidTypeString");

    $.Constant({Static:true , Public:true }, "InvalidTypeListString", $.String, "InvalidTypeListString");

    $.Constant({Static:true , Public:true }, "InvalidCharInTypeName", $.String, "InvalidCharInTypeName");

    $.Constant({Static:true , Public:true }, "XamlTypeNameNamespaceIsNull", $.String, "XamlTypeNameNamespaceIsNull");

    $.Constant({Static:true , Public:true }, "XamlTypeNameNameIsNullOrEmpty", $.String, "XamlTypeNameNameIsNullOrEmpty");

    $.Constant({Static:true , Public:true }, "XamlTypeNameCannotGetPrefix", $.String, "XamlTypeNameCannotGetPrefix");

    $.Constant({Static:true , Public:true }, "CollectionCannotContainNulls", $.String, "CollectionCannotContainNulls");

    $.Constant({Static:true , Public:true }, "NamespaceDeclarationPrefixCannotBeNull", $.String, "NamespaceDeclarationPrefixCannotBeNull");

    $.Constant({Static:true , Public:true }, "NamespaceDeclarationNamespaceCannotBeNull", $.String, "NamespaceDeclarationNamespaceCannotBeNull");

    $.Constant({Static:true , Public:true }, "IncorrectGetterParamNum", $.String, "IncorrectGetterParamNum");

    $.Constant({Static:true , Public:true }, "IncorrectSetterParamNum", $.String, "IncorrectSetterParamNum");

    $.Constant({Static:true , Public:true }, "GetterOrSetterRequired", $.String, "GetterOrSetterRequired");

    $.Constant({Static:true , Public:true }, "ObjectReaderDictionaryMethod1NotFound", $.String, "ObjectReaderDictionaryMethod1NotFound");

    $.Constant({Static:true , Public:true }, "ObjectReaderXamlNamedElementAlreadyRegistered", $.String, "ObjectReaderXamlNamedElementAlreadyRegistered");

    $.Constant({Static:true , Public:true }, "ObjectReaderXamlNameScopeResultsInClonedObject", $.String, "ObjectReaderXamlNameScopeResultsInClonedObject");

    $.Constant({Static:true , Public:true }, "ObjectReaderXamlNamePropertyMustBeString", $.String, "ObjectReaderXamlNamePropertyMustBeString");

    $.Constant({Static:true , Public:true }, "ObjectReaderNoDefaultConstructor", $.String, "ObjectReaderNoDefaultConstructor");

    $.Constant({Static:true , Public:true }, "ObjectReaderNoMatchingConstructor", $.String, "ObjectReaderNoMatchingConstructor");

    $.Constant({Static:true , Public:true }, "ObjectReaderInstanceDescriptorIncompatibleArgumentTypes", $.String, "ObjectReaderInstanceDescriptorIncompatibleArgumentTypes");

    $.Constant({Static:true , Public:true }, "ObjectReaderInstanceDescriptorIncompatibleArguments", $.String, "ObjectReaderInstanceDescriptorIncompatibleArguments");

    $.Constant({Static:true , Public:true }, "ObjectReaderInstanceDescriptorInvalidMethod", $.String, "ObjectReaderInstanceDescriptorInvalidMethod");

    $.Constant({Static:true , Public:true }, "ObjectReaderTypeCannotRoundtrip", $.String, "ObjectReaderTypeCannotRoundtrip");

    $.Constant({Static:true , Public:true }, "ObjectReaderTypeIsNested", $.String, "ObjectReaderTypeIsNested");

    $.Constant({Static:true , Public:true }, "ObjectReaderAttachedPropertyNotFound", $.String, "ObjectReaderAttachedPropertyNotFound");

    $.Constant({Static:true , Public:true }, "XamlFactoryInvalidXamlNode", $.String, "XamlFactoryInvalidXamlNode");

    $.Constant({Static:true , Public:true }, "CannotAddPositionalParameters", $.String, "CannotAddPositionalParameters");

    $.Constant({Static:true , Public:true }, "ObjectReaderMultidimensionalArrayNotSupported", $.String, "ObjectReaderMultidimensionalArrayNotSupported");

    $.Constant({Static:true , Public:true }, "ObjectReaderTypeNotAllowed", $.String, "ObjectReaderTypeNotAllowed");

    $.Constant({Static:true , Public:true }, "ObjectReader_TypeNotVisible", $.String, "ObjectReader_TypeNotVisible");

    $.Constant({Static:true , Public:true }, "ExpectedObjectMarkupInfo", $.String, "ExpectedObjectMarkupInfo");

    $.Constant({Static:true , Public:true }, "AttachedPropertyOnTypeConvertedOrStringProperty", $.String, "AttachedPropertyOnTypeConvertedOrStringProperty");

    $.Constant({Static:true , Public:true }, "AttachedPropertyOnDictionaryKey", $.String, "AttachedPropertyOnDictionaryKey");

    $.Constant({Static:true , Public:true }, "MissingNameProvider", $.String, "MissingNameProvider");

    $.Constant({Static:true , Public:true }, "XamlMarkupExtensionWriterCannotSetSchemaContext", $.String, "XamlMarkupExtensionWriterCannotSetSchemaContext");

    $.Constant({Static:true , Public:true }, "XamlMarkupExtensionWriterDuplicateMember", $.String, "XamlMarkupExtensionWriterDuplicateMember");

    $.Constant({Static:true , Public:true }, "XamlMarkupExtensionWriterCannotWriteNonstringValue", $.String, "XamlMarkupExtensionWriterCannotWriteNonstringValue");

    $.Constant({Static:true , Public:true }, "XamlMarkupExtensionWriterInputInvalid", $.String, "XamlMarkupExtensionWriterInputInvalid");

    $.Constant({Static:true , Public:true }, "DefaultAttachablePropertyStoreCannotAddInstance", $.String, "DefaultAttachablePropertyStoreCannotAddInstance");

    $.Constant({Static:true , Public:true }, "UnexpectedConstructorArg", $.String, "UnexpectedConstructorArg");

    $.Constant({Static:true , Public:true }, "ShouldOverrideMethod", $.String, "ShouldOverrideMethod");

    $.Constant({Static:true , Public:true }, "ExpectedQualifiedTypeName", $.String, "ExpectedQualifiedTypeName");

    $.Constant({Static:true , Public:true }, "ExpectedQualifiedAssemblyName", $.String, "ExpectedQualifiedAssemblyName");

    $.Constant({Static:true , Public:true }, "ExpectedLoadPermission", $.String, "ExpectedLoadPermission");

    $.Constant({Static:true , Public:true }, "SecurityXmlUnexpectedTag", $.String, "SecurityXmlUnexpectedTag");

    $.Constant({Static:true , Public:true }, "SecurityXmlUnexpectedValue", $.String, "SecurityXmlUnexpectedValue");

    $.Constant({Static:true , Public:true }, "SecurityXmlMissingAttribute", $.String, "SecurityXmlMissingAttribute");

    $.Constant({Static:true , Public:true }, "StringIsNullOrEmpty", $.String, "StringIsNullOrEmpty");

    $.Constant({Static:true , Public:true }, "NotSupportedOnUnknownType", $.String, "NotSupportedOnUnknownType");

    $.Constant({Static:true , Public:true }, "OnlySupportedOnCollections", $.String, "OnlySupportedOnCollections");

    $.Constant({Static:true , Public:true }, "OnlySupportedOnDictionaries", $.String, "OnlySupportedOnDictionaries");

    $.Constant({Static:true , Public:true }, "OnlySupportedOnCollectionsAndDictionaries", $.String, "OnlySupportedOnCollectionsAndDictionaries");

    $.Constant({Static:true , Public:true }, "NotSupportedOnUnknownMember", $.String, "NotSupportedOnUnknownMember");

    $.Constant({Static:true , Public:true }, "NotSupportedOnDirective", $.String, "NotSupportedOnDirective");

    $.Constant({Static:true , Public:true }, "ArgumentRequired", $.String, "ArgumentRequired");

    $.Constant({Static:true , Public:true }, "ConverterMustDeriveFromBase", $.String, "ConverterMustDeriveFromBase");

    $.Constant({Static:true , Public:true }, "ReferenceIsNull", $.String, "ReferenceIsNull");

    $.Constant({Static:true , Public:true }, "MarkupExtensionArrayType", $.String, "MarkupExtensionArrayType");

    $.Constant({Static:true , Public:true }, "MarkupExtensionArrayBadType", $.String, "MarkupExtensionArrayBadType");

    $.Constant({Static:true , Public:true }, "MarkupExtensionBadStatic", $.String, "MarkupExtensionBadStatic");

    $.Constant({Static:true , Public:true }, "MarkupExtensionStaticMember", $.String, "MarkupExtensionStaticMember");

    $.Constant({Static:true , Public:true }, "MustBeOfType", $.String, "MustBeOfType");

    $.Constant({Static:true , Public:true }, "ToStringNull", $.String, "ToStringNull");

    $.Constant({Static:true , Public:true }, "ConvertToException", $.String, "ConvertToException");

    $.Constant({Static:true , Public:true }, "ConvertFromException", $.String, "ConvertFromException");

    $.Constant({Static:true , Public:true }, "ServiceTypeAlreadyAdded", $.String, "ServiceTypeAlreadyAdded");

    $.Constant({Static:true , Public:true }, "QualifiedNameHasWrongFormat", $.String, "QualifiedNameHasWrongFormat");

    $.Constant({Static:true , Public:true }, "ParserAttributeArgsHigh", $.String, "ParserAttributeArgsHigh");

    $.Constant({Static:true , Public:true }, "ParserAttributeArgsLow", $.String, "ParserAttributeArgsLow");

    $.Constant({Static:true , Public:true }, "ParserAssemblyLoadVersionMismatch", $.String, "ParserAssemblyLoadVersionMismatch");

    $.Constant({Static:true , Public:true }, "FrugalList_TargetMapCannotHoldAllData", $.String, "FrugalList_TargetMapCannotHoldAllData");

    $.Constant({Static:true , Public:true }, "FrugalList_CannotPromoteBeyondArray", $.String, "FrugalList_CannotPromoteBeyondArray");

    $.Constant({Static:true , Public:true }, "ValueInArrayIsNull", $.String, "ValueInArrayIsNull");

    $.Constant({Static:true , Public:true }, "InvalidEvent", $.String, "InvalidEvent");

    $.Constant({Static:true , Public:true }, "InvalidClosingBracketCharacers", $.String, "InvalidClosingBracketCharacers");

    $.Constant({Static:true , Public:true }, "MalformedBracketCharacters", $.String, "MalformedBracketCharacters");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.SR */ 

(function SR$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Xaml.SR", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Get", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.Field({Static:true , Public:false}, "_resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xaml.Replacements");
/* class System.Xaml.Replacements.DateTimeConverter2 */ 

(function DateTimeConverter2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xaml.Replacements.DateTimeConverter2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.Field({Static:false, Public:false}, "_dateTimeValueSerializer", $asm2D.TypeRef("System.Windows.Markup.DateTimeValueSerializer"));

    $.Field({Static:false, Public:false}, "_valueSerializerContext", $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Replacements.DateTimeValueSerializerContext */ 

(function DateTimeValueSerializerContext$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Replacements.DateTimeValueSerializerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Container", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.IContainer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyDescriptor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetService", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValueSerializerFor", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValueSerializerFor", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnComponentChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnComponentChanging", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Container", $asm0A.TypeRef("System.ComponentModel.IContainer"));

    $.Property({Static:false, Public:true , Virtual:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "PropertyDescriptor", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), 
      /* 1 */ $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), 
      /* 2 */ $asm07.TypeRef("System.IServiceProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Replacements.TypeListConverter */ 

(function TypeListConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xaml.Replacements.TypeListConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "typeTypeConverter", $asm2D.TypeRef("System.Xaml.Replacements.TypeTypeConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Replacements.StringHelpers */ 

(function StringHelpers$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Xaml.Replacements.StringHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "SplitTypeList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Replacements.TypeTypeConverter */ 

(function TypeTypeConverter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xaml.Replacements.TypeTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTypeToString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetService", 
      new JSIL.MethodSignature("!!0", [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")], ["TService"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xaml.Permissions");
/* class System.Xaml.Permissions.XamlAccessLevel */ 

(function XamlAccessLevel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };








  function XamlAccessLevel_get_AssemblyNameString () {
    return this.XamlAccessLevel$AssemblyNameString$value;
  }; 

  function XamlAccessLevel_get_PrivateAccessToTypeName () {
    return this.XamlAccessLevel$PrivateAccessToTypeName$value;
  }; 




  function XamlAccessLevel_set_AssemblyNameString (value) {
    this.XamlAccessLevel$AssemblyNameString$value = value;
  }; 

  function XamlAccessLevel_set_PrivateAccessToTypeName (value) {
    this.XamlAccessLevel$PrivateAccessToTypeName$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Permissions.XamlAccessLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssemblyAccessTo", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssemblyAccessTo", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssemblyOnly", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXml", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.SecurityElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyAccessToAssemblyName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.Method({Static:false, Public:false}, "get_AssemblyNameString", 
      JSIL.MethodSignature.Return($.String), 
      XamlAccessLevel_get_AssemblyNameString
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PrivateAccessToTypeName", 
      JSIL.MethodSignature.Return($.String), 
      XamlAccessLevel_get_PrivateAccessToTypeName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Includes", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrivateAccessTo", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "PrivateAccessTo", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.Method({Static:false, Public:false}, "set_AssemblyNameString", 
      JSIL.MethodSignature.Action($.String), 
      XamlAccessLevel_set_AssemblyNameString
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PrivateAccessToTypeName", 
      JSIL.MethodSignature.Action($.String), 
      XamlAccessLevel_set_PrivateAccessToTypeName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ToXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAssemblyName", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.AssemblyName"), $.String])
    );

    $.Field({Static:false, Public:false}, "XamlAccessLevel$PrivateAccessToTypeName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAccessLevel$AssemblyNameString$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AssemblyAccessToAssemblyName", $asm07.TypeRef("System.Reflection.AssemblyName"));

    $.Property({Static:false, Public:true }, "PrivateAccessToTypeName", $.String);

    $.Property({Static:false, Public:false}, "AssemblyNameString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Permissions.XamlAccessLevel+XmlConstants */ 

(function XmlConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xaml.Permissions.XamlAccessLevel+XmlConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "XamlAccessLevel", $.String, "XamlAccessLevel");

    $.Constant({Static:true , Public:true }, "AssemblyName", $.String, "AssemblyName");

    $.Constant({Static:true , Public:true }, "TypeName", $.String, "TypeName");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Permissions.XamlLoadPermission */ 

(function XamlLoadPermission$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm2D.System.Xaml.Permissions.XamlAccessLevel))) ();
  };









  function XamlLoadPermission_get_AllowedAccess () {
    return this.XamlLoadPermission$AllowedAccess$value;
  }; 






  function XamlLoadPermission_set_AllowedAccess (value) {
    this.XamlLoadPermission$AllowedAccess$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Xaml.Permissions.XamlLoadPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CastPermission", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.IPermission"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.Method({Static:false, Public:true }, "get_AllowedAccess", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")])), 
      XamlLoadPermission_get_AllowedAccess
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Includes", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_AllowedAccess", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")])), 
      XamlLoadPermission_set_AllowedAccess
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:true , Public:false}, "s_emptyAccessLevel", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")]));

    $.Field({Static:false, Public:false}, "_isUnrestricted", $.Boolean);

    $.Field({Static:false, Public:false}, "XamlLoadPermission$AllowedAccess$value", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AllowedAccess", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")]));

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Permissions.XamlLoadPermission+XmlConstants */ 

(function XmlConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xaml.Permissions.XamlLoadPermission+XmlConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "IPermission", $.String, "IPermission");

    $.Constant({Static:true , Public:true }, "Class", $.String, "class");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version");

    $.Constant({Static:true , Public:true }, "VersionNumber", $.String, "1");

    $.Constant({Static:true , Public:true }, "Unrestricted", $.String, "Unrestricted");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xaml.MS");
JSIL.DeclareNamespace("System.Xaml.MS.Impl");
/* class System.Xaml.MS.Impl.AssemblyNamespacePair */ 

(function AssemblyNamespacePair$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.AssemblyNamespacePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Assembly"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClrNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_assembly", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_clrNamespace", $.String);

    $.Property({Static:false, Public:true }, "Assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "ClrNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ClrNamespace} {Assembly.FullName}"]; });

})();

/* class System.Xaml.MS.Impl.KnownStrings */ 

(function KnownStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Xaml.MS.Impl.KnownStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "XmlPrefix", $.String, "xml");

    $.Constant({Static:true , Public:true }, "XmlNsPrefix", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "Preserve", $.String, "preserve");

    $.Constant({Static:true , Public:true }, "Default", $.String, "default");

    $.Constant({Static:true , Public:true }, "UriClrNamespace", $.String, "clr-namespace");

    $.Constant({Static:true , Public:true }, "UriAssembly", $.String, "assembly");

    $.Constant({Static:true , Public:true }, "StringType", $.String, "String");

    $.Constant({Static:true , Public:true }, "ObjectType", $.String, "Object");

    $.Constant({Static:true , Public:true }, "Get", $.String, "Get");

    $.Constant({Static:true , Public:true }, "Set", $.String, "Set");

    $.Constant({Static:true , Public:true }, "Add", $.String, "Add");

    $.Constant({Static:true , Public:true }, "Handler", $.String, "Handler");

    $.Constant({Static:true , Public:true }, "Extension", $.String, "Extension");

    $.Constant({Static:true , Public:true }, "IsReadOnly", $.String, "IsReadOnly");

    $.Constant({Static:true , Public:true }, "ShouldSerialize", $.String, "ShouldSerialize");

    $.Constant({Static:true , Public:true }, "FrameworkElement", $.String, "FrameworkElement");

    $.Constant({Static:true , Public:true }, "TypeExtension", $.String, "TypeExtension");

    $.Constant({Static:true , Public:true }, "GraveQuote", $.Char, "`");

    $.Constant({Static:true , Public:true }, "NestedTypeDelimiter", $.Char, "+");

    $.Constant({Static:true , Public:true }, "GetEnumerator", $.String, "GetEnumerator");

    $.Constant({Static:true , Public:true }, "ICollectionOfT", $.String, "System.Collections.Generic.ICollection`1");

    $.Constant({Static:true , Public:true }, "IDictionary", $.String, "System.Collections.IDictionary");

    $.Constant({Static:true , Public:true }, "IDictionaryOfKT", $.String, "System.Collections.Generic.IDictionary`2");

    $.Constant({Static:true , Public:true }, "NullableOfT", $.String, "Nullable`1");

    $.Constant({Static:true , Public:true }, "KeyValuePairOfTT", $.String, "KeyValuePair`2");

    $.Constant({Static:true , Public:true }, "AmbientPropertyAttribute", $.String, "AmbientPropertyAttribute");

    $.Constant({Static:true , Public:true }, "DependencyPropertySuffix", $.String, "Property");

    $.Constant({Static:true , Public:true }, "XpsNamespace", $.String, "http://schemas.microsoft.com/xps/2005/06");

    $.Constant({Static:true , Public:true }, "LocalPrefix", $.String, "local");

    $.Constant({Static:true , Public:true }, "DefaultPrefix", $.String, "p");

    $.Constant({Static:true , Public:true }, "ReferenceName", $.String, "__ReferenceID");

    $.Field({Static:true , Public:true , ReadOnly:true }, "WhitespaceChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SpaceChar", $.Char, " ");

    $.Field({Static:true , Public:true , ReadOnly:true }, "TabChar", $.Char, "\t");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NewlineChar", $.Char, "\n");

    $.Field({Static:true , Public:true , ReadOnly:true }, "ReturnChar", $.Char, "\r");

    $.Constant({Static:true , Public:true }, "ClrNamespaceFormat", $.String, "clr-namespace:{0};assembly={1}");

    $.Constant({Static:true , Public:true }, "CreateDelegateHelper", $.String, "_CreateDelegate");

    $.Constant({Static:true , Public:true }, "CreateDelegate", $.String, "CreateDelegate");

    $.Constant({Static:true , Public:true }, "InvokeMember", $.String, "InvokeMember");

    $.Constant({Static:true , Public:true }, "GetTypeFromHandle", $.String, "GetTypeFromHandle");

    $.Constant({Static:true , Public:true }, "Member", $.String, "Member");

    $.Constant({Static:true , Public:true }, "Property", $.String, "Property");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.KS */ 

(function KS$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Xaml.MS.Impl.KS", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "EndsWith", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Eq", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fmt", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "otherArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.PositionalParameterDescriptor */ 

(function PositionalParameterDescriptor$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function PositionalParameterDescriptor_get_Value () {
    return this.PositionalParameterDescriptor$Value$value;
  }; 

  function PositionalParameterDescriptor_get_WasText () {
    return this.PositionalParameterDescriptor$WasText$value;
  }; 

  function PositionalParameterDescriptor_set_Value (value) {
    this.PositionalParameterDescriptor$Value$value = value;
  }; 

  function PositionalParameterDescriptor_set_WasText (value) {
    this.PositionalParameterDescriptor$WasText$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.PositionalParameterDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object), 
      PositionalParameterDescriptor_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_WasText", 
      JSIL.MethodSignature.Return($.Boolean), 
      PositionalParameterDescriptor_get_WasText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object), 
      PositionalParameterDescriptor_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_WasText", 
      JSIL.MethodSignature.Action($.Boolean), 
      PositionalParameterDescriptor_set_WasText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterDescriptor$Value$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PositionalParameterDescriptor$WasText$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "WasText", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.XmlNsInfo */ 

(function XmlNsInfo$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.XmlNsInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Assembly"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureReflectionOnlyAttributeData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Assembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClrToXmlNs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalsVisibleTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.AssemblyName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NsDefs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OldToNewNs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPreferredPrefix", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadClrToXmlNs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInternalsVisibleTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.AssemblyName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInternalsVisibleToHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.AssemblyName")]), $.String, 
          $asm07.TypeRef("System.Reflection.Assembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNsDefHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition")]), $.String, 
          $.String, $asm07.TypeRef("System.Reflection.Assembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNsDefs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadOldToNewNs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadOldToNewNsHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), $.String, 
          $.String, $asm07.TypeRef("System.Reflection.Assembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadPrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadPrefixesHelper", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), $.String, 
          $.String, $asm07.TypeRef("System.Reflection.Assembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadRootNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeListsImmutable", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]))
    );

    $.Field({Static:false, Public:false}, "_nsDefs", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition")]));

    $.Field({Static:false, Public:false}, "_clrToXmlNs", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]));

    $.Field({Static:false, Public:false}, "_internalsVisibleTo", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.AssemblyName")]));

    $.Field({Static:false, Public:false}, "_oldToNewNs", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_prefixes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_rootNamespace", $.String);

    $.Field({Static:false, Public:false}, "_assembly", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "_attributeData", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")]));

    $.Field({Static:false, Public:false}, "_fullyQualifyAssemblyName", $.Boolean);

    $.Property({Static:false, Public:false}, "Assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:false}, "NsDefs", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition")]));

    $.Property({Static:false, Public:false}, "ClrToXmlNs", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]));

    $.Property({Static:false, Public:false}, "InternalsVisibleTo", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.AssemblyName")]));

    $.Property({Static:false, Public:false}, "OldToNewNs", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "Prefixes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "RootNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.XmlNsInfo+NamespaceComparer */ 

(function NamespaceComparer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.XmlNsInfo+NamespaceComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"), $asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareNamespacesByPreference", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewNs", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementSubsumeCount", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_nsInfo", $asm2D.TypeRef("System.Xaml.MS.Impl.XmlNsInfo"));

    $.Field({Static:false, Public:false}, "_subsumeCount", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition */ 

(function XmlNsDefinition$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function XmlNsDefinition_get_ClrNamespace () {
    return this.XmlNsDefinition$ClrNamespace$value;
  }; 

  function XmlNsDefinition_get_XmlNamespace () {
    return this.XmlNsDefinition$XmlNamespace$value;
  }; 

  function XmlNsDefinition_set_ClrNamespace (value) {
    this.XmlNsDefinition$ClrNamespace$value = value;
  }; 

  function XmlNsDefinition_set_XmlNamespace (value) {
    this.XmlNsDefinition$XmlNamespace$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.XmlNsInfo+XmlNsDefinition", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_ClrNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XmlNsDefinition_get_ClrNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XmlNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XmlNsDefinition_get_XmlNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ClrNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XmlNsDefinition_set_ClrNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XmlNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XmlNsDefinition_set_XmlNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNsDefinition$ClrNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XmlNsDefinition$XmlNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "ClrNamespace", $.String);

    $.Property({Static:false, Public:true }, "XmlNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.MS.Impl.FrugalListStoreState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.MS.Impl.FrugalListStoreState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    SingleItemList: 1, 
    ThreeItemList: 2, 
    SixItemList: 3, 
    Array: 4, 
  }
);

/* class System.Xaml.MS.Impl.FrugalListBase`1 */ 

(function FrugalListBase$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.FrugalListBase`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListStoreState"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EntryAt", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NewCompacter", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1+Compacter", [$.GenericParameter("T")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrustedSetCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_count", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.FrugalListBase`1+Compacter */ 

(function Compacter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.FrugalListBase`1+Compacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Finish", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Include", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IncludeOverride", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "_store", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_validItemCount", $.Int32);

    $.Field({Static:false, Public:false}, "_previousEnd", $.Int32);

    $.Field({Static:false, Public:false}, "_newCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.SingleItemList`1 */ 

(function SingleItemList$b1$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [new JSIL.GenericParameter("T", "System.Xaml.MS.Impl.SingleItemList`1")]), 
      Name: "System.Xaml.MS.Impl.SingleItemList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListStoreState"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EntryAt", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.SingleItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Constant({Static:true , Public:false}, "SIZE", $.Int32, 1);

    $.Field({Static:false, Public:false}, "_loneEntry", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.ThreeItemList`1 */ 

(function ThreeItemList$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [new JSIL.GenericParameter("T", "System.Xaml.MS.Impl.ThreeItemList`1")]), 
      Name: "System.Xaml.MS.Impl.ThreeItemList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListStoreState"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EntryAt", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.SingleItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.ThreeItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Constant({Static:true , Public:false}, "SIZE", $.Int32, 3);

    $.Field({Static:false, Public:false}, "_entry0", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry1", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry2", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.SixItemList`1 */ 

(function SixItemList$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [new JSIL.GenericParameter("T", "System.Xaml.MS.Impl.SixItemList`1")]), 
      Name: "System.Xaml.MS.Impl.SixItemList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListStoreState"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EntryAt", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.ThreeItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.SixItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Constant({Static:true , Public:false}, "SIZE", $.Int32, 6);

    $.Field({Static:false, Public:false}, "_entry0", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry1", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry2", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry3", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry4", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_entry5", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.ArrayItemList`1 */ 

(function ArrayItemList$b1$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [new JSIL.GenericParameter("T", "System.Xaml.MS.Impl.ArrayItemList`1")]), 
      Name: "System.Xaml.MS.Impl.ArrayItemList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListStoreState"), [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EntryAt", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NewCompacter", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1+Compacter", [$.GenericParameter("T")]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.SixItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Promote", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.ArrayItemList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Constant({Static:true , Public:false}, "MINSIZE", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "GROWTH", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "LARGEGROWTH", $.Int32, 18);

    $.Field({Static:false, Public:false}, "_entries", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.ArrayItemList`1+ArrayCompacter */ 

(function ArrayCompacter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1+Compacter", [new JSIL.GenericParameter("T", "System.Xaml.MS.Impl.ArrayItemList`1+ArrayCompacter")]), 
      Name: "System.Xaml.MS.Impl.ArrayItemList`1+ArrayCompacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.ArrayItemList`1", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Finish", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IncludeOverride", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "_targetStore", $asm2D.TypeRef("System.Xaml.MS.Impl.ArrayItemList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_sourceArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_targetArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.MS.Impl.FrugalObjectList`1 */ 

(function FrugalObjectList$b1$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.FrugalObjectList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "_listStore", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xaml.MS.Impl.FrugalObjectList`1+Compacter */ 

(function Compacter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.MS.Impl.FrugalObjectList`1+Compacter", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Include", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "_list", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "_storeCompacter", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1+Compacter", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xaml.MS.Impl.FrugalStructList`1 */ 

(function FrugalStructList$b1$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Xaml.MS.Impl.FrugalStructList`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.MS.Impl.FrugalStructList`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "_listStore", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalListBase`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.DeclareNamespace("System.Xaml.Context");
/* class System.Xaml.Context.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("T", "System.Xaml.Context.HashSet`1"), $asm07.TypeRef("System.Object")]), 
      Name: "System.Xaml.Context.HashSet`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("T"), $.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xaml.Schema");
/* enum System.Xaml.Schema.AllowedMemberLocations */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.Schema.AllowedMemberLocations", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Attribute: 1, 
    MemberElement: 2, 
    Any: 3, 
  }
);

/* class System.Xaml.Schema.XamlValueConverter`1 */ 

(function XamlValueConverter$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };








  function XamlValueConverter$b1_get_ConverterType () {
    return this.XamlValueConverter$b1$ConverterType$value;
  }; 


  function XamlValueConverter$b1_get_Name () {
    return this.XamlValueConverter$b1$Name$value;
  }; 

  function XamlValueConverter$b1_get_TargetType () {
    return this.XamlValueConverter$b1$TargetType$value;
  }; 





  function XamlValueConverter$b1_set_ConverterType (value) {
    this.XamlValueConverter$b1$ConverterType$value = value;
  }; 

  function XamlValueConverter$b1_set_Name (value) {
    this.XamlValueConverter$b1$Name$value = value;
  }; 

  function XamlValueConverter$b1_set_TargetType (value) {
    this.XamlValueConverter$b1$TargetType$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.XamlValueConverter`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TConverterBase"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.GenericParameter("TConverterBase"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConverterInstance", 
      new JSIL.MethodSignature($.GenericParameter("TConverterBase"), null)
    );

    $.Method({Static:false, Public:true }, "get_ConverterType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      XamlValueConverter$b1_get_ConverterType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      XamlValueConverter$b1_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlValueConverter$b1_get_TargetType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")]), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")]), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")])])
    );

    $.Method({Static:false, Public:false}, "set_ConverterType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      XamlValueConverter$b1_set_ConverterType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      XamlValueConverter$b1_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlValueConverter$b1_set_TargetType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_instance", $.GenericParameter("TConverterBase"));

    $.Field({Static:false, Public:false}, "_isPublic", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"));

    $.Field({Static:false, Public:false}, "_instanceIsSet", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "XamlValueConverter$b1$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlValueConverter$b1$ConverterType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlValueConverter$b1$TargetType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ConverterType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TargetType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "ConverterInstance", $.GenericParameter("TConverterBase"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsPublic", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$.GenericParameter("TConverterBase")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.BuiltInValueConverter`1 */ 

(function BuiltInValueConverter$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [new JSIL.GenericParameter("TConverterBase", "System.Xaml.Schema.BuiltInValueConverter`1")]), 
      Name: "System.Xaml.Schema.BuiltInValueConverter`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TConverterBase"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Func`1", [$.GenericParameter("TConverterBase")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.GenericParameter("TConverterBase"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_factory", $asm07.TypeRef("System.Func`1", [$.GenericParameter("TConverterBase")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsPublic", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.BuiltInValueConverter */ 

(function BuiltInValueConverter$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Xaml.Schema.BuiltInValueConverter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Event", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Int32", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Object", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_String", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeConverter", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValueSerializer", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]), [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:false}, "s_String", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Object", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Int32", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Int16", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Int64", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_UInt32", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_UInt16", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_UInt64", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Boolean", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Double", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Single", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Byte", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_SByte", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Char", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Decimal", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_TimeSpan", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Guid", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_Type", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_TypeList", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_DateTime", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_DateTimeOffset", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_CultureInfo", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:false}, "s_StringSerializer", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]));

    $.Field({Static:true , Public:false}, "s_Delegate", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:true , Public:false}, "Int32", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:true , Public:false}, "String", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:true , Public:false}, "Object", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:true , Public:false}, "Event", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.BuiltInValueConverter+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.BuiltInValueConverter+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lget_Event$gb__31_0", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lget_Int32$gb__25_0", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lget_String$gb__27_0", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_0", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_1", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_10", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_11", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_12", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_13", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_14", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_15", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_16", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_17", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_18", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_19", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_2", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_3", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_4", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_5", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_6", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_7", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_8", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTypeConverter$gb__32_9", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__25_0", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__27_0", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__31_0", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_0", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_1", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_2", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_3", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_4", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_5", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_6", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_7", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_8", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_9", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_10", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_11", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_12", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_13", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_14", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_15", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_16", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_17", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_18", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Field({Static:true , Public:true }, "$l$g9__32_19", $asm07.TypeRef("System.Func`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.Schema.BuiltInValueConverter+<>c__DisplayClass33_0 */ 

(function $l$gc__DisplayClass33_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.BuiltInValueConverter+<>c__DisplayClass33_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetValueSerializer$gb__0", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"))
    );

    $.Field({Static:false, Public:true }, "stringSerializer", $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Xaml.Schema.ClrNamespaceUriParser */ 

(function ClrNamespaceUriParser$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Xaml.Schema.ClrNamespaceUriParser", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetUri", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParseUri", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseUri", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.CollectionReflector */ 

(function CollectionReflector$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("System.Xaml.Schema.CollectionReflector", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_IDictionaryAddMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IEnumerableGetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IListAddMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfObjectArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfTwoObjectArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBindingFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.BindingFlags"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGenericInterface", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsReadOnlyMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupAddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupCollectionKind", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupEnumeratorMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetCollectionAdder", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetDictionaryAdder", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetICollectionAdder", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetIDictionaryAdder", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
    );

    $.Field({Static:true , Public:false}, "s_typeOfObjectArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "s_typeOfTwoObjectArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "s_getEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "s_listAddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "s_dictionaryAddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "TypeOfObjectArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "TypeOfTwoObjectArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "IEnumerableGetEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IListAddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IDictionaryAddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.Reflector */ 

(function Reflector$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.Reflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureAttributeData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Extract", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.Reflection.CustomAttributeData")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.CustomAttributeData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.CustomAttributeTypedArgument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Reflection.CustomAttributeData"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CustomAttributeProviderIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CustomAttributeProviderIsSetVolatile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllAttributeContents", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm07.TypeRef("System.Type")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.CustomAttributeData"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Type"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", ["!!0"]), [$asm07.TypeRef("System.Type")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBracketCharacterAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValidMask", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAttributePresent", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CustomAttributeProvider", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBit", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCustomAttributeProviderVolatile", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidMetadata", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.CustomAttributeData"), $.Int32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TokenizeBracketCharacters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$.Char, $.Char]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypesAreEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "_attributeProvider", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.ICustomAttributeProvider")]));

    $.Field({Static:false, Public:false}, "_attributeData", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.CustomAttributeData")]));

    $.Property({Static:false, Public:false}, "CustomAttributeProvider", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.Property({Static:false, Public:false}, "CustomAttributeProviderIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "CustomAttributeProviderIsSetVolatile", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Member", $asm07.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.MemberReflector */ 

(function MemberReflector$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm2D.System.Xaml.XamlMember))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.Schema.XamlMemberInvoker)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.Generic.IReadOnlyDictionary$b2.Of($asm07.System.Char, $asm07.System.Char))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };














  function MemberReflector_get_DependsOn () {
    return this.MemberReflector$DependsOn$value;
  }; 




  function MemberReflector_get_Invoker () {
    return this.MemberReflector$Invoker$value;
  }; 


  function MemberReflector_get_MarkupExtensionBracketCharactersArgument () {
    return this.MemberReflector$MarkupExtensionBracketCharactersArgument$value;
  }; 

  function MemberReflector_get_MarkupExtensionBracketCharactersArgumentIsSet () {
    return this.MemberReflector$MarkupExtensionBracketCharactersArgumentIsSet$value;
  }; 





  function MemberReflector_get_TargetType () {
    return this.MemberReflector$TargetType$value;
  }; 

  function MemberReflector_get_Type () {
    return this.MemberReflector$Type$value;
  }; 



  function MemberReflector_get_UnderlyingMember () {
    return this.MemberReflector$UnderlyingMember$value;
  }; 











  function MemberReflector_set_DependsOn (value) {
    this.MemberReflector$DependsOn$value = value;
  }; 


  function MemberReflector_set_Invoker (value) {
    this.MemberReflector$Invoker$value = value;
  }; 

  function MemberReflector_set_MarkupExtensionBracketCharactersArgument (value) {
    this.MemberReflector$MarkupExtensionBracketCharactersArgument$value = value;
  }; 

  function MemberReflector_set_MarkupExtensionBracketCharactersArgumentIsSet (value) {
    this.MemberReflector$MarkupExtensionBracketCharactersArgumentIsSet$value = value;
  }; 



  function MemberReflector_set_TargetType (value) {
    this.MemberReflector$TargetType$value = value;
  }; 

  function MemberReflector_set_Type (value) {
    this.MemberReflector$Type$value = value;
  }; 


  function MemberReflector_set_UnderlyingMember (value) {
    this.MemberReflector$UnderlyingMember$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.Schema.Reflector"), 
      Name: "System.Xaml.Schema.MemberReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GenericArgumentsAreVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.Assembly"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorArgument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorArgumentIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueIsNotPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeferringLoaderIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_DependsOn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])), 
      MemberReflector_get_DependsOn
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DesignerSerializationVisibilityIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Getter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GetterIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "get_Invoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")), 
      MemberReflector_get_Invoker
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_MarkupExtensionBracketCharactersArgument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char])), 
      MemberReflector_get_MarkupExtensionBracketCharactersArgument
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_MarkupExtensionBracketCharactersArgumentIsSet", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberReflector_get_MarkupExtensionBracketCharactersArgumentIsSet
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationVisibility", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Setter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SetterIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "get_TargetType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      MemberReflector_get_TargetType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      MemberReflector_get_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeConverterIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_UnderlyingMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo")), 
      MemberReflector_get_UnderlyingMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownReflector", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueSerializerIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$asm2D.TypeRef("System.Xaml.BoolMemberBits")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInternalVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.Assembly"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsProtectedVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Type"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConstructorArgument", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DefaultValueIsNotPresent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeferringLoader", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.Method({Static:false, Public:false}, "set_DependsOn", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])), 
      MemberReflector_set_DependsOn
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Getter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_Invoker", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker")), 
      MemberReflector_set_Invoker
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MarkupExtensionBracketCharactersArgument", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char])), 
      MemberReflector_set_MarkupExtensionBracketCharactersArgument
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MarkupExtensionBracketCharactersArgumentIsSet", 
      JSIL.MethodSignature.Action($.Boolean), 
      MemberReflector_set_MarkupExtensionBracketCharactersArgumentIsSet
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_SerializationVisibility", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Setter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      MemberReflector_set_TargetType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      MemberReflector_set_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_TypeConverter", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.Method({Static:false, Public:false}, "set_UnderlyingMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo")), 
      MemberReflector_set_UnderlyingMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ValueSerializer", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.BoolMemberBits"), $.Boolean])
    );

    $.Constant({Static:true , Public:false}, "VisibilityInvalid", $asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"), 2147483647);

    $.Constant({Static:true , Public:false}, "VisibilityNone", $asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"), 2147483646);

    $.Field({Static:true , Public:false}, "s_UnknownReflector", $.Type);

    $.Field({Static:false, Public:false}, "_constructorArgument", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$.String]));

    $.Field({Static:false, Public:false}, "_deferringLoader", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")])]));

    $.Field({Static:false, Public:false}, "_defaultValue", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$.Object]));

    $.Field({Static:false, Public:false}, "_getter", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_setter", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_typeConverter", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")])]));

    $.Field({Static:false, Public:false}, "_valueSerializer", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")])]));

    $.Field({Static:false, Public:false}, "_designerSerializationVisibility", $asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility"));

    $.Field({Static:false, Public:false}, "_memberBits", $.Int32);

    $.Field({Static:false, Public:false}, "MemberReflector$MarkupExtensionBracketCharactersArgument$value", $asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$MarkupExtensionBracketCharactersArgumentIsSet$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$DependsOn$value", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$Invoker$value", $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$Type$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$TargetType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MemberReflector$UnderlyingMember$value", $asm07.TypeRef("System.Reflection.MemberInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "UnknownReflector", $.Type);

    $.Property({Static:false, Public:false}, "ConstructorArgument", $.String);

    $.Property({Static:false, Public:false}, "ConstructorArgumentIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "MarkupExtensionBracketCharactersArgument", $asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]));

    $.Property({Static:false, Public:false}, "MarkupExtensionBracketCharactersArgumentIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "DefaultValue", $.Object);

    $.Property({Static:false, Public:false}, "DefaultValueIsNotPresent", $.Boolean);

    $.Property({Static:false, Public:false}, "DefaultValueIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "DeferringLoader", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]));

    $.Property({Static:false, Public:false}, "DeferringLoaderIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "DependsOn", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:false}, "SerializationVisibility", $asm07.TypeRef("System.Nullable`1", [$asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibility")]));

    $.Property({Static:false, Public:false}, "DesignerSerializationVisibilityIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "Getter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "GetterIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "Invoker", $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"));

    $.Property({Static:false, Public:false}, "IsUnknown", $.Boolean);

    $.Property({Static:false, Public:false}, "Setter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "SetterIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "TargetType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "TypeConverter", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:false, Public:false}, "TypeConverterIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "UnderlyingMember", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "ValueSerializer", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]));

    $.Property({Static:false, Public:false}, "ValueSerializerIsSet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Member", $asm07.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.ReferenceEqualityComparer`1 */ 

(function ReferenceEqualityComparer$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.EqualityComparer`1", [new JSIL.GenericParameter("T", "System.Xaml.Schema.ReferenceEqualityComparer`1")]), 
      Name: "System.Xaml.Schema.ReferenceEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.Field({Static:true , Public:false}, "Singleton", $asm2D.TypeRef("System.Xaml.Schema.ReferenceEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.ReferenceEqualityTuple`2 */ 

(function ReferenceEqualityTuple$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Tuple`2", [new JSIL.GenericParameter("T1", "System.Xaml.Schema.ReferenceEqualityTuple`2"), new JSIL.GenericParameter("T2", "System.Xaml.Schema.ReferenceEqualityTuple`2")]), 
      Name: "System.Xaml.Schema.ReferenceEqualityTuple`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T1"), $.GenericParameter("T2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.ReferenceEqualityTuple`3 */ 

(function ReferenceEqualityTuple$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Tuple`3", [
          new JSIL.GenericParameter("T1", "System.Xaml.Schema.ReferenceEqualityTuple`3"), new JSIL.GenericParameter("T2", "System.Xaml.Schema.ReferenceEqualityTuple`3"), 
          new JSIL.GenericParameter("T3", "System.Xaml.Schema.ReferenceEqualityTuple`3")
        ]), 
      Name: "System.Xaml.Schema.ReferenceEqualityTuple`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1", "T2", "T3"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T1"), $.GenericParameter("T2"), 
          $.GenericParameter("T3")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.SafeReflectionInvoker */ 

(function SafeReflectionInvoker$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("System.Xaml.Schema.SafeReflectionInvoker", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $.Object, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegateCritical", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegateCritical", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDynamicAssembly", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceCritical", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "DemandMemberAccessPermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InvokeMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InvokeMethodCritical", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsInSystemXaml", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsSystemXamlNonPublic", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UseDynamicAssembly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_UseDynamicAssembly", $.Boolean, false);

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "s_CreateDelegate1", $asm2D.TypeRef("System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate1Delegate"));

    $.Field({Static:true , Public:false}, "s_CreateDelegate2", $asm2D.TypeRef("System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate2Delegate"));

    $.Field({Static:true , Public:false}, "s_CreateInstance", $asm2D.TypeRef("System.Xaml.Schema.SafeReflectionInvoker+CreateInstanceDelegate"));

    $.Field({Static:true , Public:false}, "s_InvokeMethod", $asm2D.TypeRef("System.Xaml.Schema.SafeReflectionInvoker+InvokeMethodDelegate"));

    $.Field({Static:true , Public:false}, "s_reflectionMemberAccess", $asm07.TypeRef("System.Security.Permissions.ReflectionPermission"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SystemXaml", $asm07.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate1Delegate */ 

JSIL.MakeDelegate("System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate1Delegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
      $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
      $asm07.TypeRef("System.String")
    ]));

/* delegate System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate2Delegate */ 

JSIL.MakeDelegate("System.Xaml.Schema.SafeReflectionInvoker+CreateDelegate2Delegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
      $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Object"), 
      $asm07.TypeRef("System.String")
    ]));

/* delegate System.Xaml.Schema.SafeReflectionInvoker+CreateInstanceDelegate */ 

JSIL.MakeDelegate("System.Xaml.Schema.SafeReflectionInvoker+CreateInstanceDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Object")])]));

/* delegate System.Xaml.Schema.SafeReflectionInvoker+InvokeMethodDelegate */ 

JSIL.MakeDelegate("System.Xaml.Schema.SafeReflectionInvoker+InvokeMethodDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
      $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Object"), 
      $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Object")])
    ]));

/* class System.Xaml.Schema.TypeReflector */ 

(function TypeReflector$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm2D.System.Xaml.XamlType))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1.Of($asm2D.System.Xaml.XamlMember))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.Schema.XamlTypeInvoker)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.Int32, $asm07.System.Collections.Generic.IList$b1.Of($asm2D.System.Xaml.XamlType)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Type)) ();
  };









  function TypeReflector_get_AllowedContentTypes () {
    return this.TypeReflector$AllowedContentTypes$value;
  }; 








  function TypeReflector_get_ContentWrappers () {
    return this.TypeReflector$ContentWrappers$value;
  }; 



  function TypeReflector_get_ExcludedReadOnlyMembers () {
    return this.TypeReflector$ExcludedReadOnlyMembers$value;
  }; 



  function TypeReflector_get_Invoker () {
    return this.TypeReflector$Invoker$value;
  }; 




  function TypeReflector_get_ItemType () {
    return this.TypeReflector$ItemType$value;
  }; 

  function TypeReflector_get_KeyType () {
    return this.TypeReflector$KeyType$value;
  }; 

  function TypeReflector_get_MarkupExtensionReturnType () {
    return this.TypeReflector$MarkupExtensionReturnType$value;
  }; 



  function TypeReflector_get_ReflectedPositionalParameters () {
    return this.TypeReflector$ReflectedPositionalParameters$value;
  }; 



  function TypeReflector_get_UnderlyingType () {
    return this.TypeReflector$UnderlyingType$value;
  }; 












































  function TypeReflector_set_AllowedContentTypes (value) {
    this.TypeReflector$AllowedContentTypes$value = value;
  }; 




  function TypeReflector_set_ContentWrappers (value) {
    this.TypeReflector$ContentWrappers$value = value;
  }; 


  function TypeReflector_set_ExcludedReadOnlyMembers (value) {
    this.TypeReflector$ExcludedReadOnlyMembers$value = value;
  }; 


  function TypeReflector_set_Invoker (value) {
    this.TypeReflector$Invoker$value = value;
  }; 


  function TypeReflector_set_ItemType (value) {
    this.TypeReflector$ItemType$value = value;
  }; 

  function TypeReflector_set_KeyType (value) {
    this.TypeReflector$KeyType$value = value;
  }; 

  function TypeReflector_set_MarkupExtensionReturnType (value) {
    this.TypeReflector$MarkupExtensionReturnType$value = value;
  }; 

  function TypeReflector_set_ReflectedPositionalParameters (value) {
    this.TypeReflector$ReflectedPositionalParameters$value = value;
  }; 


  function TypeReflector_set_UnderlyingType (value) {
    this.TypeReflector$UnderlyingType$value = value;
  }; 









  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.Schema.Reflector"), 
      Name: "System.Xaml.Schema.TypeReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToMultiDict", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), $.String, 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterEvents", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.EventInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.EventInfo")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethodIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_AllowedContentTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])), 
      TypeReflector_get_AllowedContentTypes
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_AttachableMembers", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseTypeIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollectionKind", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollectionKindIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContentPropertyIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_ContentWrappers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])), 
      TypeReflector_get_ContentWrappers
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DeferringLoader", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeferringLoaderIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_ExcludedReadOnlyMembers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])), 
      TypeReflector_get_ExcludedReadOnlyMembers
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethodIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_Invoker", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")), 
      TypeReflector_get_Invoker
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnlyMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnlyMethodIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_get_ItemType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_KeyType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_get_KeyType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_MarkupExtensionReturnType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_get_MarkupExtensionReturnType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.Method({Static:false, Public:false}, "get_ReflectedPositionalParameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])])), 
      TypeReflector_get_ReflectedPositionalParameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TypeConverter", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeConverterIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_UnderlyingType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TypeReflector_get_UnderlyingType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownReflector", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueSerializer", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueSerializerIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XamlSetMarkupExtensionHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XamlSetMarkupExtensionHandlerIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XamlSetTypeConverterHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XamlSetTypeConverterHandlerIsSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomAttribute", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlag", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$asm2D.TypeRef("System.Xaml.BoolTypeBits")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonIndexerProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrCreateAttachableEvents", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), 
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrCreateAttachableProperties", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), 
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVisibility", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.TypeReflector+TypeVisibility"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachableEventAdder", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachableEventAdder", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachablePropertyAccessor", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachablePropertyGetter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachablePropertyGetter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachablePropertySetter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttachablePropertySetter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrivate", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrivate", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.EventInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrivateOrNull", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPublicOrInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsVisibleTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.Assembly"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllAttachableMembers", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]), [$asm2D.TypeRef("System.Xaml.XamlSchemaContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllMembers", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.PropertyInfo")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Reflection.EventInfo")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllStaticAccessors", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllStaticAccessorsHelper", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), 
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAttachableEvent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAttachableProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupEvent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.EventInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupNameScopeProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupRemainingProperties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.PropertyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupStaticAdders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupStaticGetters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupStaticSetters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PickAttachableEventAdder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PickAttachablePropertyAccessors", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrioritizeAccessors", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AddMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Method({Static:false, Public:false}, "set_AllowedContentTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])), 
      TypeReflector_set_AllowedContentTypes
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_BaseType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CollectionKind", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ContentProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.Method({Static:false, Public:false}, "set_ContentWrappers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])), 
      TypeReflector_set_ContentWrappers
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_DeferringLoader", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]))
    );

    $.Method({Static:false, Public:false}, "set_ExcludedReadOnlyMembers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")])), 
      TypeReflector_set_ExcludedReadOnlyMembers
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_GetEnumeratorMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Method({Static:false, Public:false}, "set_Invoker", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")), 
      TypeReflector_set_Invoker
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsReadOnlyMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.Method({Static:false, Public:false}, "set_ItemType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_set_ItemType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_KeyType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_set_KeyType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MarkupExtensionReturnType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      TypeReflector_set_MarkupExtensionReturnType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ReflectedPositionalParameters", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])])), 
      TypeReflector_set_ReflectedPositionalParameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_TypeConverter", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]))
    );

    $.Method({Static:false, Public:false}, "set_UnderlyingType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      TypeReflector_set_UnderlyingType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ValueSerializer", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XamlSetMarkupExtensionHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XamlSetTypeConverterHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.BoolTypeBits"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryAddAliasedProperty", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlDirective"), $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryAddPositionalParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetAliasedProperty", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlDirective"), $jsilcore.TypeRef("JSIL.Reference", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetPositionalParameters", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])])])
    );

    $.Constant({Static:true , Public:false}, "XamlCollectionKindInvalid", $asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"), 255);

    $.Constant({Static:true , Public:false}, "AllProperties_BF", $asm07.TypeRef("System.Reflection.BindingFlags"), 52);

    $.Constant({Static:true , Public:false}, "AttachableProperties_BF", $asm07.TypeRef("System.Reflection.BindingFlags"), 120);

    $.Field({Static:true , Public:false}, "s_UnknownReflector", $.Type);

    $.Field({Static:false, Public:false}, "_nonAttachableMemberCache", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_attachableMemberCache", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_boolTypeBits", $.Int32);

    $.Field({Static:false, Public:false}, "_positionalParameterTypes", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])]));

    $.Field({Static:false, Public:false}, "_aliasedProperties", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm2D.TypeRef("System.Xaml.XamlDirective"), $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_collectionKind", $asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"));

    $.Field({Static:false, Public:false}, "_contentProperty", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_runtimeNameProperty", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_xmlLangProperty", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_dictionaryKeyProperty", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_uidProperty", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_isReadOnlyMethod", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false}, "_typeConverter", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")])]));

    $.Field({Static:false, Public:false}, "_valueSerializer", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")])]));

    $.Field({Static:false, Public:false}, "_deferringLoader", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")])]));

    $.Field({Static:false, Public:false}, "_xamlSetMarkupExtensionHandler", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")])]));

    $.Field({Static:false, Public:false}, "_xamlSetTypeConverterHandler", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")])]));

    $.Field({Static:false, Public:false}, "_addMethod", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false}, "_baseType", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:false, Public:false}, "_getEnumeratorMethod", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false}, "TypeReflector$AllowedContentTypes$value", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$ContentWrappers$value", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$ExcludedReadOnlyMembers$value", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$KeyType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$Invoker$value", $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$ItemType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$MarkupExtensionReturnType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$ReflectedPositionalParameters$value", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeReflector$UnderlyingType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "UnknownReflector", $.Type);

    $.Property({Static:false, Public:false}, "AllowedContentTypes", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Property({Static:false, Public:false}, "AttachableMembers", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:false}, "BaseType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "BaseTypeIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "CollectionKind", $asm2D.TypeRef("System.Xaml.Schema.XamlCollectionKind"));

    $.Property({Static:false, Public:false}, "CollectionKindIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "ContentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:false}, "ContentPropertyIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "ContentWrappers", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Property({Static:false, Public:false}, "DeferringLoader", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]));

    $.Property({Static:false, Public:false}, "DeferringLoaderIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "ExcludedReadOnlyMembers", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:false}, "KeyType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "Invoker", $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"));

    $.Property({Static:false, Public:false}, "IsReadOnlyMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "IsReadOnlyMethodIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnknown", $.Boolean);

    $.Property({Static:false, Public:false}, "ItemType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "MarkupExtensionReturnType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "Members", $asm2D.TypeRef("System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:false}, "ReflectedPositionalParameters", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])]));

    $.Property({Static:false, Public:false}, "TypeConverter", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]));

    $.Property({Static:false, Public:false}, "TypeConverterIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "UnderlyingType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ValueSerializer", $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Windows.Markup.ValueSerializer")]));

    $.Property({Static:false, Public:false}, "ValueSerializerIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "XamlSetMarkupExtensionHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]));

    $.Property({Static:false, Public:false}, "XamlSetMarkupExtensionHandlerIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "XamlSetTypeConverterHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]));

    $.Property({Static:false, Public:false}, "XamlSetTypeConverterHandlerIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "AddMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AddMethodIsSet", $.Boolean);

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "GetEnumeratorMethodIsSet", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Member", $asm07.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.Schema.TypeReflector+TypeVisibility */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.Schema.TypeReflector+TypeVisibility", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotVisible: 0, 
    Internal: 1, 
    Public: 2, 
  }
);

/* class System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2 */ 

(function ThreadSafeDictionary$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("K", "System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2"), new JSIL.GenericParameter("V", "System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2")]), 
      Name: "System.Xaml.Schema.TypeReflector+ThreadSafeDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsComplete", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TryAdd", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean);

    $.Property({Static:false, Public:true }, "IsComplete", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.Schema.XamlCollectionKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.Schema.XamlCollectionKind", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Collection: 1, 
    Dictionary: 2, 
    Array: 3, 
  }
);

/* class System.Xaml.Schema.XamlMemberInvoker */ 

(function XamlMemberInvoker$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.XamlMemberInvoker", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DirectiveInvoker", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingGetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnderlyingSetter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnknownInvoker", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueSafeCritical", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsSystemXamlNonPublic", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm2D.TypeRef("System.Xaml.ThreeValuedBool")]), $asm07.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueSafeCritical", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.ShouldSerializeResult"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfUnknown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_Directive", $.Type);

    $.Field({Static:true , Public:false}, "s_Unknown", $.Type);

    $.Field({Static:true , Public:false}, "s_emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });

    $.Field({Static:false, Public:false}, "_member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "_shouldSerializeMethod", $asm2D.TypeRef("System.Xaml.NullableReference`1", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Property({Static:true , Public:true }, "UnknownInvoker", $.Type);

    $.Property({Static:false, Public:true }, "UnderlyingGetter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "UnderlyingSetter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DirectiveInvoker", $.Type);

    $.Property({Static:false, Public:false}, "IsUnknown", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.XamlMemberInvoker+DirectiveMemberInvoker */ 

(function DirectiveMemberInvoker$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.Schema.XamlMemberInvoker"), 
      Name: "System.Xaml.Schema.XamlMemberInvoker+DirectiveMemberInvoker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xaml.Schema.ShouldSerializeResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xaml.Schema.ShouldSerializeResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    True: 1, 
    False: 2, 
  }
);

/* class System.Xaml.Schema.XamlNamespace */ 

(function XamlNamespace$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };






  function XamlNamespace_get_IsClrNamespace () {
    return this.XamlNamespace$IsClrNamespace$value;
  }; 













  function XamlNamespace_set_IsClrNamespace (value) {
    this.XamlNamespace$IsClrNamespace$value = value;
  }; 




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.XamlNamespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyNamespacePair", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.MS.Impl.AssemblyNamespacePair"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertArrayOfXamlTypesToTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    );

    $.Method({Static:false, Public:true }, "get_IsClrNamespace", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlNamespace_get_IsClrNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsResolved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RevisionNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllXamlTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClrNamespacePair", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.AssemblyNamespacePair")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeExtensionName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFromFullTypeName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String, $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    )
      .Parameter(1, "typeArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupAllTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeArrayType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MangleGenericTypeName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SearchAssembliesForShortName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.Method({Static:false, Public:false}, "set_IsClrNamespace", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlNamespace_set_IsClrNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryGetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_assemblyNamespaces", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.MS.Impl.AssemblyNamespacePair")]));

    $.Field({Static:false, Public:false}, "_typeCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:false, Public:false}, "_allPublicTypes", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm2D.TypeRef("System.Xaml.XamlType")]));

    $.Field({Static:false, Public:false}, "XamlNamespace$IsClrNamespace$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "IsClrNamespace", $.Boolean);

    $.Property({Static:false, Public:true }, "IsResolved", $.Boolean);

    $.Property({Static:false, Public:false}, "RevisionNumber", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.XamlTypeInvoker */ 

(function XamlTypeInvoker$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };








  function XamlTypeInvoker_get_EnumeratorMethod () {
    return this.XamlTypeInvoker$EnumeratorMethod$value;
  }; 










  function XamlTypeInvoker_set_EnumeratorMethod (value) {
    this.XamlTypeInvoker$EnumeratorMethod$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.XamlTypeInvoker", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToCollection", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToDictionary", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInstanceWithActivator", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "get_EnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo")), 
      XamlTypeInvoker_get_EnumeratorMethod
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsInSystemXaml", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsPublic", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnknown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SetMarkupExtensionHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SetTypeConverterHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnknownInvoker", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAddMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumeratorMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$.Object])
    );

    $.Method({Static:false, Public:false}, "set_EnumeratorMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      XamlTypeInvoker_set_EnumeratorMethod
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfUnknown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_Unknown", $.Type);

    $.Field({Static:true , Public:false}, "s_emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });

    $.Field({Static:false, Public:false}, "_addMethods", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlType"), $asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false}, "XamlTypeInvoker$EnumeratorMethod$value", $asm07.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_xamlType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "_constructorDelegate", $asm07.TypeRef("System.Action`1", [$.Object]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_isPublic", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_isInSystemXaml", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "EnumeratorMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "UnknownInvoker", $.Type);

    $.Property({Static:false, Public:true }, "SetMarkupExtensionHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetMarkupExtensionEventArgs")]));

    $.Property({Static:false, Public:true }, "SetTypeConverterHandler", $asm07.TypeRef("System.EventHandler`1", [$asm2D.TypeRef("System.Windows.Markup.XamlSetTypeConverterEventArgs")]));

    $.Property({Static:false, Public:false}, "IsInSystemXaml", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPublic", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnknown", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.XamlTypeInvoker+DefaultCtorXamlActivator */ 

(function DefaultCtorXamlActivator$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Xaml.Schema.XamlTypeInvoker+DefaultCtorXamlActivator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CallCtorDelegate", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureConstructorDelegate", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InvokeDelegate", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Action`1", [$.Object]), $.Object])
    );

    $.Field({Static:true , Public:false}, "s_securityFailureWithCtorDelegate", $asm2D.TypeRef("System.Xaml.ThreeValuedBool"));

    $.Field({Static:true , Public:false}, "s_actionCtor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.XamlTypeInvoker+UnknownTypeInvoker */ 

(function UnknownTypeInvoker$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.Schema.XamlTypeInvoker"), 
      Name: "System.Xaml.Schema.XamlTypeInvoker+UnknownTypeInvoker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToCollection", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToDictionary", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xaml.Schema.XamlTypeName */ 

(function XamlTypeName$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };











  function XamlTypeName_get_Name () {
    return this.XamlTypeName$Name$value;
  }; 

  function XamlTypeName_get_Namespace () {
    return this.XamlTypeName$Namespace$value;
  }; 






  function XamlTypeName_set_Name (value) {
    this.XamlTypeName$Name$value = value;
  }; 

  function XamlTypeName_set_Namespace (value) {
    this.XamlTypeName$Namespace$value = value;
  }; 






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Xaml.Schema.XamlTypeName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertListToStringInternal", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), $asm07.TypeRef("System.Func`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertListToStringInternal", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), 
          $asm07.TypeRef("System.Func`2", [$.String, $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToStringInternal", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Func`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToStringInternal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $asm07.TypeRef("System.Func`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTypeArgs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      XamlTypeName_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String), 
      XamlTypeName_get_Namespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TypeArguments", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInternal", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Func`2", [$.String, $.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [$.String, $asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseListInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [
          $.String, $asm07.TypeRef("System.Func`2", [$.String, $.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      XamlTypeName_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String), 
      XamlTypeName_set_Namespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("System.Xaml.INamespacePrefixLookup")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]), $asm2D.TypeRef("System.Xaml.INamespacePrefixLookup")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParseList", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type])])
        ])
    );

    $.Field({Static:false, Public:false}, "_typeArguments", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "XamlTypeName$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlTypeName$Namespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "TypeArguments", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:false}, "HasTypeArgs", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{{{Namespace}}}{Name}{TypeArgStringForDebugger}"]; });

})();

/* class System.Xaml.Schema.XamlTypeTypeConverter */ 

(function XamlTypeTypeConverter$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xaml.Schema.XamlTypeTypeConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertStringToXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertXamlTypeToString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetService", 
      new JSIL.MethodSignature("!!0", [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")], ["TService"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXamlTypeOrUnknown", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Windows");
JSIL.DeclareNamespace("System.Windows.Markup");
/* class System.Windows.Markup.MarkupExtensionBracketCharactersAttribute */ 

(function MarkupExtensionBracketCharactersAttribute$Members () {
  var $, $thisType;


  function MarkupExtensionBracketCharactersAttribute_get_ClosingBracket () {
    return this.MarkupExtensionBracketCharactersAttribute$ClosingBracket$value;
  }; 

  function MarkupExtensionBracketCharactersAttribute_get_OpeningBracket () {
    return this.MarkupExtensionBracketCharactersAttribute$OpeningBracket$value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.MarkupExtensionBracketCharactersAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.Method({Static:false, Public:true }, "get_ClosingBracket", 
      JSIL.MethodSignature.Return($.Char), 
      MarkupExtensionBracketCharactersAttribute_get_ClosingBracket
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_OpeningBracket", 
      JSIL.MethodSignature.Return($.Char), 
      MarkupExtensionBracketCharactersAttribute_get_OpeningBracket
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "MarkupExtensionBracketCharactersAttribute$OpeningBracket$value", $.Char)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "MarkupExtensionBracketCharactersAttribute$ClosingBracket$value", $.Char)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "OpeningBracket", $.Char);

    $.Property({Static:false, Public:true }, "ClosingBracket", $.Char);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Property]; });

})();

/* class System.Windows.Markup.MemberDefinition */ 

(function MemberDefinition$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Windows.Markup.MemberDefinition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.PropertyDefinition */ 

(function PropertyDefinition$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };




  function PropertyDefinition_get_Modifier () {
    return this.PropertyDefinition$Modifier$value;
  }; 

  function PropertyDefinition_get_Name () {
    return this.PropertyDefinition$Name$value;
  }; 

  function PropertyDefinition_get_Type () {
    return this.PropertyDefinition$Type$value;
  }; 

  function PropertyDefinition_set_Modifier (value) {
    this.PropertyDefinition$Modifier$value = value;
  }; 

  function PropertyDefinition_set_Name (value) {
    this.PropertyDefinition$Name$value = value;
  }; 

  function PropertyDefinition_set_Type (value) {
    this.PropertyDefinition$Type$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MemberDefinition"), 
      Name: "System.Windows.Markup.PropertyDefinition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Attribute")]))
    );

    $.Method({Static:false, Public:true }, "get_Modifier", 
      JSIL.MethodSignature.Return($.String), 
      PropertyDefinition_get_Modifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      PropertyDefinition_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      PropertyDefinition_get_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Modifier", 
      JSIL.MethodSignature.Action($.String), 
      PropertyDefinition_set_Modifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      PropertyDefinition_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      PropertyDefinition_set_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Attribute")]));

    $.Field({Static:false, Public:false}, "PropertyDefinition$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PropertyDefinition$Type$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PropertyDefinition$Modifier$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm2D.System.Xaml.Schema.XamlTypeTypeConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "Modifier", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Attribute")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute */ 

(function AcceptedMarkupExtensionExpressionTypeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };



  function AcceptedMarkupExtensionExpressionTypeAttribute_get_Type () {
    return this.AcceptedMarkupExtensionExpressionTypeAttribute$Type$value;
  }; 

  function AcceptedMarkupExtensionExpressionTypeAttribute_set_Type (value) {
    this.AcceptedMarkupExtensionExpressionTypeAttribute$Type$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      AcceptedMarkupExtensionExpressionTypeAttribute_get_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      AcceptedMarkupExtensionExpressionTypeAttribute_set_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AcceptedMarkupExtensionExpressionTypeAttribute$Type$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute."]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Windows.Markup.AmbientAttribute */ 

(function AmbientAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.AmbientAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Method", "Property")]; });

})();

/* class System.Windows.Markup.UsableDuringInitializationAttribute */ 

(function UsableDuringInitializationAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.UsableDuringInitializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Usable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_usable", $.Boolean);

    $.Property({Static:false, Public:true }, "Usable", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Windows.Markup.ConstructorArgumentAttribute */ 

(function ConstructorArgumentAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.ConstructorArgumentAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_argumentName", $.String);

    $.Property({Static:false, Public:true }, "ArgumentName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Property]; });

})();

/* class System.Windows.Markup.ContentPropertyAttribute */ 

(function ContentPropertyAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.ContentPropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.ContentWrapperAttribute */ 

(function ContentWrapperAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.ContentWrapperAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentWrapper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeId", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_contentWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ContentWrapper", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeId", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.DependsOnAttribute */ 

(function DependsOnAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.DependsOnAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeId", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TypeId", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Method", "Property")]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.MarkupExtensionReturnTypeAttribute */ 

(function MarkupExtensionReturnTypeAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.MarkupExtensionReturnTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["The expressionType argument is not used by the XAML parser. To specify the expected return type, use MarkupExtensionReturnTypeAttribute(Type). To specify custom handling for expression types, use XamlSetMarkupExtensionAttribute."]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpressionType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_returnType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_expressionType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ExpressionType", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute."]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Windows.Markup.NameScopePropertyAttribute */ 

(function NameScopePropertyAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.NameScopePropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.RootNamespaceAttribute */ 

(function RootNamespaceAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.RootNamespaceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_nameSpace", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Assembly]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.TrimSurroundingWhitespaceAttribute */ 

(function TrimSurroundingWhitespaceAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.TrimSurroundingWhitespaceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.UidPropertyAttribute */ 

(function UidPropertyAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.UidPropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.WhitespaceSignificantCollectionAttribute */ 

(function WhitespaceSignificantCollectionAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.WhitespaceSignificantCollectionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.XamlSetMarkupExtensionAttribute */ 

(function XamlSetMarkupExtensionAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function XamlSetMarkupExtensionAttribute_get_XamlSetMarkupExtensionHandler () {
    return this.XamlSetMarkupExtensionAttribute$XamlSetMarkupExtensionHandler$value;
  }; 

  function XamlSetMarkupExtensionAttribute_set_XamlSetMarkupExtensionHandler (value) {
    this.XamlSetMarkupExtensionAttribute$XamlSetMarkupExtensionHandler$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XamlSetMarkupExtensionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "get_XamlSetMarkupExtensionHandler", 
      JSIL.MethodSignature.Return($.String), 
      XamlSetMarkupExtensionAttribute_get_XamlSetMarkupExtensionHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_XamlSetMarkupExtensionHandler", 
      JSIL.MethodSignature.Action($.String), 
      XamlSetMarkupExtensionAttribute_set_XamlSetMarkupExtensionHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetMarkupExtensionAttribute$XamlSetMarkupExtensionHandler$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "XamlSetMarkupExtensionHandler", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Windows.Markup.XmlLangPropertyAttribute */ 

(function XmlLangPropertyAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XmlLangPropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.XmlnsCompatibleWithAttribute */ 

(function XmlnsCompatibleWithAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XmlnsCompatibleWithAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_oldNamespace", $.String);

    $.Field({Static:false, Public:false}, "_newNamespace", $.String);

    $.Property({Static:false, Public:true }, "OldNamespace", $.String);

    $.Property({Static:false, Public:true }, "NewNamespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Assembly]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.XmlnsDefinitionAttribute */ 

(function XmlnsDefinitionAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XmlnsDefinitionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClrNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_xmlNamespace", $.String);

    $.Field({Static:false, Public:false}, "_clrNamespace", $.String);

    $.Field({Static:false, Public:false}, "_assemblyName", $.String);

    $.Property({Static:false, Public:true }, "XmlNamespace", $.String);

    $.Property({Static:false, Public:true }, "ClrNamespace", $.String);

    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Assembly]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.XmlnsPrefixAttribute */ 

(function XmlnsPrefixAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XmlnsPrefixAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_xmlNamespace", $.String);

    $.Field({Static:false, Public:false}, "_prefix", $.String);

    $.Property({Static:false, Public:true }, "XmlNamespace", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Assembly]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.ValueSerializer */ 

(function ValueSerializer$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Windows.Markup.ValueSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFromString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConvertFromException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConvertToException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializerFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializerFor", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializerFor", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializerFor", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"), $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDescriptorRefreshed", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.RefreshEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TypeReferences", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Type")]), [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.Field({Static:true , Public:false}, "Empty", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "_valueSerializersLock", $.Object);

    $.Field({Static:true , Public:false}, "_valueSerializers", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.DateTimeValueSerializer */ 

(function DateTimeValueSerializer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
      Name: "System.Windows.Markup.DateTimeValueSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFromString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* interface System.Windows.Markup.INameScope */ 

JSIL.MakeInterface(
  "System.Windows.Markup.INameScope", true, [], function ($) {
    $.Method({}, "RegisterName", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "UnregisterName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "FindName", new JSIL.MethodSignature($.Object, [$.String]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* interface System.Windows.Markup.INameScopeDictionary */ 

JSIL.MakeInterface(
  "System.Windows.Markup.INameScopeDictionary", true, [], function ($) {
  }, [$asm2D.TypeRef("System.Windows.Markup.INameScope"), $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), $asm07.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Windows.Markup.IProvideValueTarget */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IProvideValueTarget", true, [], function ($) {
    $.Method({}, "get_TargetObject", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "get_TargetProperty", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "TargetObject");
    $.Property({}, "TargetProperty");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* interface System.Windows.Markup.IQueryAmbient */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IQueryAmbient", true, [], function ($) {
    $.Method({}, "IsAmbientPropertyAvailable", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, []);

/* interface System.Windows.Markup.IUriContext */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IUriContext", true, [], function ($) {
    $.Method({}, "get_BaseUri", JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")));
    $.Method({}, "set_BaseUri", JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")));
    $.Property({}, "BaseUri");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationCore, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* interface System.Windows.Markup.IValueSerializerContext */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IValueSerializerContext", true, [], function ($) {
    $.Method({}, "GetValueSerializerFor", new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm07.TypeRef("System.Type")]));
    $.Method({}, "GetValueSerializerFor", new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), [$asm0A.TypeRef("System.ComponentModel.PropertyDescriptor")]));
  }, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.IServiceProvider")])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* interface System.Windows.Markup.IXamlTypeResolver */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IXamlTypeResolver", true, [], function ($) {
    $.Method({}, "Resolve", new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* class System.Windows.Markup.XamlSetValueEventArgs */ 

(function XamlSetValueEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };




  function XamlSetValueEventArgs_get_Handled () {
    return this.XamlSetValueEventArgs$Handled$value;
  }; 

  function XamlSetValueEventArgs_get_Member () {
    return this.XamlSetValueEventArgs$Member$value;
  }; 

  function XamlSetValueEventArgs_get_Value () {
    return this.XamlSetValueEventArgs$Value$value;
  }; 

  function XamlSetValueEventArgs_set_Handled (value) {
    this.XamlSetValueEventArgs$Handled$value = value;
  }; 

  function XamlSetValueEventArgs_set_Member (value) {
    this.XamlSetValueEventArgs$Member$value = value;
  }; 

  function XamlSetValueEventArgs_set_Value (value) {
    this.XamlSetValueEventArgs$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Windows.Markup.XamlSetValueEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallBase", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Handled", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlSetValueEventArgs_get_Handled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlSetValueEventArgs_get_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object), 
      XamlSetValueEventArgs_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Handled", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlSetValueEventArgs_set_Handled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Member", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlSetValueEventArgs_set_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.Object), 
      XamlSetValueEventArgs_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetValueEventArgs$Member$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetValueEventArgs$Value$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetValueEventArgs$Handled$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "Handled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.XamlSetMarkupExtensionEventArgs */ 

(function XamlSetMarkupExtensionEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IServiceProvider)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };





  function XamlSetMarkupExtensionEventArgs_get_CurrentType () {
    return this.XamlSetMarkupExtensionEventArgs$CurrentType$value;
  }; 


  function XamlSetMarkupExtensionEventArgs_get_ServiceProvider () {
    return this.XamlSetMarkupExtensionEventArgs$ServiceProvider$value;
  }; 

  function XamlSetMarkupExtensionEventArgs_get_TargetObject () {
    return this.XamlSetMarkupExtensionEventArgs$TargetObject$value;
  }; 

  function XamlSetMarkupExtensionEventArgs_set_CurrentType (value) {
    this.XamlSetMarkupExtensionEventArgs$CurrentType$value = value;
  }; 

  function XamlSetMarkupExtensionEventArgs_set_ServiceProvider (value) {
    this.XamlSetMarkupExtensionEventArgs$ServiceProvider$value = value;
  }; 

  function XamlSetMarkupExtensionEventArgs_set_TargetObject (value) {
    this.XamlSetMarkupExtensionEventArgs$TargetObject$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs"), 
      Name: "System.Windows.Markup.XamlSetMarkupExtensionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
          $asm07.TypeRef("System.IServiceProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
          $asm07.TypeRef("System.IServiceProvider"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallBase", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_CurrentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlSetMarkupExtensionEventArgs_get_CurrentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MarkupExtension", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.MarkupExtension"))
    );

    $.Method({Static:false, Public:true }, "get_ServiceProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IServiceProvider")), 
      XamlSetMarkupExtensionEventArgs_get_ServiceProvider
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TargetObject", 
      JSIL.MethodSignature.Return($.Object), 
      XamlSetMarkupExtensionEventArgs_get_TargetObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CurrentType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlSetMarkupExtensionEventArgs_set_CurrentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ServiceProvider", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IServiceProvider")), 
      XamlSetMarkupExtensionEventArgs_set_ServiceProvider
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetObject", 
      JSIL.MethodSignature.Action($.Object), 
      XamlSetMarkupExtensionEventArgs_set_TargetObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetMarkupExtensionEventArgs$ServiceProvider$value", $asm07.TypeRef("System.IServiceProvider"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetMarkupExtensionEventArgs$CurrentType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetMarkupExtensionEventArgs$TargetObject$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "MarkupExtension", $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"));

    $.Property({Static:false, Public:true }, "ServiceProvider", $asm07.TypeRef("System.IServiceProvider"));

    $.Property({Static:false, Public:false}, "CurrentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "TargetObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.XamlSetTypeConverterAttribute */ 

(function XamlSetTypeConverterAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function XamlSetTypeConverterAttribute_get_XamlSetTypeConverterHandler () {
    return this.XamlSetTypeConverterAttribute$XamlSetTypeConverterHandler$value;
  }; 

  function XamlSetTypeConverterAttribute_set_XamlSetTypeConverterHandler (value) {
    this.XamlSetTypeConverterAttribute$XamlSetTypeConverterHandler$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XamlSetTypeConverterAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "get_XamlSetTypeConverterHandler", 
      JSIL.MethodSignature.Return($.String), 
      XamlSetTypeConverterAttribute_get_XamlSetTypeConverterHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_XamlSetTypeConverterHandler", 
      JSIL.MethodSignature.Action($.String), 
      XamlSetTypeConverterAttribute_set_XamlSetTypeConverterHandler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterAttribute$XamlSetTypeConverterHandler$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "XamlSetTypeConverterHandler", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Windows.Markup.XamlSetTypeConverterEventArgs */ 

(function XamlSetTypeConverterEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Globalization.CultureInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.System.ComponentModel.TypeConverter)) ();
  };





  function XamlSetTypeConverterEventArgs_get_CultureInfo () {
    return this.XamlSetTypeConverterEventArgs$CultureInfo$value;
  }; 

  function XamlSetTypeConverterEventArgs_get_CurrentType () {
    return this.XamlSetTypeConverterEventArgs$CurrentType$value;
  }; 

  function XamlSetTypeConverterEventArgs_get_ServiceProvider () {
    return this.XamlSetTypeConverterEventArgs$ServiceProvider$value;
  }; 

  function XamlSetTypeConverterEventArgs_get_TargetObject () {
    return this.XamlSetTypeConverterEventArgs$TargetObject$value;
  }; 

  function XamlSetTypeConverterEventArgs_get_TypeConverter () {
    return this.XamlSetTypeConverterEventArgs$TypeConverter$value;
  }; 

  function XamlSetTypeConverterEventArgs_set_CultureInfo (value) {
    this.XamlSetTypeConverterEventArgs$CultureInfo$value = value;
  }; 

  function XamlSetTypeConverterEventArgs_set_CurrentType (value) {
    this.XamlSetTypeConverterEventArgs$CurrentType$value = value;
  }; 

  function XamlSetTypeConverterEventArgs_set_ServiceProvider (value) {
    this.XamlSetTypeConverterEventArgs$ServiceProvider$value = value;
  }; 

  function XamlSetTypeConverterEventArgs_set_TargetObject (value) {
    this.XamlSetTypeConverterEventArgs$TargetObject$value = value;
  }; 

  function XamlSetTypeConverterEventArgs_set_TypeConverter (value) {
    this.XamlSetTypeConverterEventArgs$TypeConverter$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.XamlSetValueEventArgs"), 
      Name: "System.Windows.Markup.XamlSetTypeConverterEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object, $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object, $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallBase", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_CultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo")), 
      XamlSetTypeConverterEventArgs_get_CultureInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_CurrentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlSetTypeConverterEventArgs_get_CurrentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ServiceProvider", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")), 
      XamlSetTypeConverterEventArgs_get_ServiceProvider
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TargetObject", 
      JSIL.MethodSignature.Return($.Object), 
      XamlSetTypeConverterEventArgs_get_TargetObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TypeConverter", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.TypeConverter")), 
      XamlSetTypeConverterEventArgs_get_TypeConverter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CultureInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo")), 
      XamlSetTypeConverterEventArgs_set_CultureInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CurrentType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlSetTypeConverterEventArgs_set_CurrentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ServiceProvider", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")), 
      XamlSetTypeConverterEventArgs_set_ServiceProvider
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetObject", 
      JSIL.MethodSignature.Action($.Object), 
      XamlSetTypeConverterEventArgs_set_TargetObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TypeConverter", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.TypeConverter")), 
      XamlSetTypeConverterEventArgs_set_TypeConverter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterEventArgs$TypeConverter$value", $asm0A.TypeRef("System.ComponentModel.TypeConverter"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterEventArgs$ServiceProvider$value", $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterEventArgs$CultureInfo$value", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterEventArgs$TargetObject$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlSetTypeConverterEventArgs$CurrentType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TypeConverter", $asm0A.TypeRef("System.ComponentModel.TypeConverter"));

    $.Property({Static:false, Public:true }, "ServiceProvider", $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"));

    $.Property({Static:false, Public:true }, "CultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:false}, "TargetObject", $.Object);

    $.Property({Static:false, Public:false}, "CurrentType", $asm2D.TypeRef("System.Xaml.XamlType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.MarkupExtension */ 

(function MarkupExtension$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Windows.Markup.MarkupExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.ArrayExtension */ 

(function ArrayExtension$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
      Name: "System.Windows.Markup.ArrayExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddChild", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_arrayList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "_arrayType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"))
      .Attribute($asm2D.TypeRef("System.Windows.Markup.ConstructorArgumentAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "Items", $asm07.TypeRef("System.Collections.IList"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.ContentPropertyAttribute"), function () { return ["Items"]; })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.MarkupExtensionReturnTypeAttribute"), function () { return [$asm07.System.Array.__Type__]; });

})();

/* class System.Windows.Markup.DictionaryKeyPropertyAttribute */ 

(function DictionaryKeyPropertyAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.DictionaryKeyPropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* interface System.Windows.Markup.IComponentConnector */ 

JSIL.MakeInterface(
  "System.Windows.Markup.IComponentConnector", true, [], function ($) {
    $.Method({}, "Connect", new JSIL.MethodSignature(null, [$.Int32, $.Object]));
    $.Method({}, "InitializeComponent", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

/* class System.Windows.Markup.NullExtension */ 

(function NullExtension$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
      Name: "System.Windows.Markup.NullExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.MarkupExtensionReturnTypeAttribute"), function () { return [$asm07.System.Object.__Type__]; });

})();

/* class System.Windows.Markup.StaticExtension */ 

(function StaticExtension$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
      Name: "System.Windows.Markup.StaticExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldOrPropertyValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Member", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_member", $.String);

    $.Field({Static:false, Public:false}, "_memberType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Member", $.String)
      .Attribute($asm2D.TypeRef("System.Windows.Markup.ConstructorArgumentAttribute"), function () { return ["member"]; });

    $.Property({Static:false, Public:true }, "MemberType", $asm07.TypeRef("System.Type"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm2D.System.Windows.Markup.StaticExtensionConverter.__Type__]; })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.MarkupExtensionReturnTypeAttribute"), function () { return [$asm07.System.Object.__Type__]; });

})();

/* class System.Windows.Markup.TypeExtension */ 

(function TypeExtension$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
      Name: "System.Windows.Markup.TypeExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_typeName", $.String);

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TypeName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm2D.TypeRef("System.Windows.Markup.ConstructorArgumentAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm2D.System.Windows.Markup.TypeExtensionConverter.__Type__]; })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.MarkupExtensionReturnTypeAttribute"), function () { return [$asm07.System.Type.__Type__]; });

})();

/* class System.Windows.Markup.StaticExtensionConverter */ 

(function StaticExtensionConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Windows.Markup.StaticExtensionConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.TypeExtensionConverter */ 

(function TypeExtensionConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Windows.Markup.TypeExtensionConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.RuntimeNamePropertyAttribute */ 

(function RuntimeNamePropertyAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.RuntimeNamePropertyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Windows.Markup.NameReferenceConverter */ 

(function NameReferenceConverter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Windows.Markup.NameReferenceConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.DateTimeOffsetConverter2 */ 

(function DateTimeOffsetConverter2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Windows.Markup.DateTimeOffsetConverter2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Windows.Markup.Reference */ 

(function Reference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };




  function Reference_get_Name () {
    return this.Reference$Name$value;
  }; 


  function Reference_set_Name (value) {
    this.Reference$Name$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), 
      Name: "System.Windows.Markup.Reference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Reference_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IServiceProvider")])
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Reference_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Reference$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2D.TypeRef("System.Windows.Markup.ConstructorArgumentAttribute"), function () { return ["name"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.ContentPropertyAttribute"), function () { return ["Name"]; });

})();

/* class System.Windows.Markup.XamlDeferLoadAttribute */ 

(function XamlDeferLoadAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };




  function XamlDeferLoadAttribute_get_ContentType () {
    return this.XamlDeferLoadAttribute$ContentType$value;
  }; 


  function XamlDeferLoadAttribute_get_LoaderType () {
    return this.XamlDeferLoadAttribute$LoaderType$value;
  }; 


  function XamlDeferLoadAttribute_set_ContentType (value) {
    this.XamlDeferLoadAttribute$ContentType$value = value;
  }; 

  function XamlDeferLoadAttribute_set_LoaderType (value) {
    this.XamlDeferLoadAttribute$LoaderType$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Windows.Markup.XamlDeferLoadAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Method({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      XamlDeferLoadAttribute_get_ContentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_LoaderType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      XamlDeferLoadAttribute_get_LoaderType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LoaderTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:false}, "set_ContentType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      XamlDeferLoadAttribute_set_ContentType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LoaderType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      XamlDeferLoadAttribute_set_LoaderType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_contentTypeName", $.String);

    $.Field({Static:false, Public:false}, "_loaderTypeName", $.String);

    $.Field({Static:false, Public:false}, "XamlDeferLoadAttribute$LoaderType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlDeferLoadAttribute$ContentType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "LoaderTypeName", $.String);

    $.Property({Static:false, Public:true }, "ContentTypeName", $.String);

    $.Property({Static:false, Public:true }, "LoaderType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ContentType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Property")]; });

})();

/* class System.Windows.Markup.XData */ 

(function XData$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Windows.Markup.XData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlReader", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlReader", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "_reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "_text", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "XmlReader", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2D.TypeRef("System.Windows.Markup.ContentPropertyAttribute"), function () { return ["Text"]; });

})();

JSIL.DeclareNamespace("MS");
JSIL.DeclareNamespace("MS.Internal");
JSIL.DeclareNamespace("MS.Internal.WindowsBase");
/* class MS.Internal.WindowsBase.FriendAccessAllowedAttribute */ 

(function FriendAccessAllowedAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "MS.Internal.WindowsBase.FriendAccessAllowedAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Class", "Constructor", "Delegate", "Enum", 
          "Field", "Interface", "Method", "Property", 
          "Struct"
      )]; });

})();

JSIL.DeclareNamespace("MS.Internal.Xaml");
/* struct MS.Internal.Xaml.SecurityCriticalDataForSet`1 */ 

(function SecurityCriticalDataForSet$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xaml.SecurityCriticalDataForSet`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_value", $.GenericParameter("T"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:false}, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2D.TypeRef("MS.Internal.WindowsBase.FriendAccessAllowedAttribute"));

})();

/* class MS.Internal.Xaml.ServiceProviderContext */ 

(function ServiceProviderContext$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.ServiceProviderContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDestinationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.get_Container", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.IContainer"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), "get_Container");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.get_Instance", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), "get_Instance");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"))
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), "get_PropertyDescriptor");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.OnComponentChanged", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), "OnComponentChanged");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.OnComponentChanging", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), "OnComponentChanging");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IServiceProvider.GetService", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm07.TypeRef("System.IServiceProvider"), "GetService");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IProvideValueTarget.get_TargetObject", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm2D.TypeRef("System.Windows.Markup.IProvideValueTarget"), "get_TargetObject");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IProvideValueTarget.get_TargetProperty", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm2D.TypeRef("System.Windows.Markup.IProvideValueTarget"), "get_TargetProperty");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IUriContext.get_BaseUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Overrides($asm2D.TypeRef("System.Windows.Markup.IUriContext"), "get_BaseUri");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IUriContext.set_BaseUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Overrides($asm2D.TypeRef("System.Windows.Markup.IUriContext"), "set_BaseUri");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IXamlTypeResolver.Resolve", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    )
      .Overrides($asm2D.TypeRef("System.Windows.Markup.IXamlTypeResolver"), "Resolve");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IAmbientProvider.GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IAmbientProvider"), "GetAllAmbientValues")
      .Parameter(1, "properties", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IAmbientProvider.GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IAmbientProvider"), "GetAllAmbientValues")
      .Parameter(0, "types", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IAmbientProvider.GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])
        ])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IAmbientProvider"), "GetAllAmbientValues")
      .Parameter(3, "properties", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IAmbientProvider.GetFirstAmbientValue", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.AmbientPropertyValue"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IAmbientProvider"), "GetFirstAmbientValue")
      .Parameter(1, "properties", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IAmbientProvider.GetFirstAmbientValue", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IAmbientProvider"), "GetFirstAmbientValue")
      .Parameter(0, "types", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IRootObjectProvider.get_RootObject", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IRootObjectProvider"), "get_RootObject");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.add_OnNameScopeInitializationComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "add_OnNameScopeInitializationComplete");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.get_IsFixupTokenAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "get_IsFixupTokenAvailable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "GetAllNamesAndValuesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.GetFixupToken", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "GetFixupToken");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.GetFixupToken", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.Boolean])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "GetFixupToken");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.remove_OnNameScopeInitializationComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "remove_OnNameScopeInitializationComplete");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.Resolve", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "Resolve");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.Resolve", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNameResolver"), "Resolve");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNamespaceResolver.GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver"), "GetNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver"), "GetNamespacePrefixes");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlSchemaContextProvider.get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    )
      .Overrides($asm2D.TypeRef("System.Xaml.IXamlSchemaContextProvider"), "get_SchemaContext");

    $.Field({Static:false, Public:false}, "_xamlContext", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.Container", $asm0A.TypeRef("System.ComponentModel.IContainer"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.Instance", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor", $asm0A.TypeRef("System.ComponentModel.PropertyDescriptor"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IUriContext.BaseUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlSchemaContextProvider.SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IProvideValueTarget.TargetObject", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Windows.Markup.IProvideValueTarget.TargetProperty", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xaml.IRootObjectProvider.RootObject", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.IsFixupTokenAvailable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasLineInfo", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Event({Static:false, Public:false, Virtual:true }, "System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete", $asm07.TypeRef("System.EventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), 
      /* 1 */ $asm07.TypeRef("System.IServiceProvider"), 
      /* 2 */ $asm2D.TypeRef("System.Windows.Markup.IXamlTypeResolver"), 
      /* 3 */ $asm2D.TypeRef("System.Windows.Markup.IUriContext"), 
      /* 4 */ $asm2D.TypeRef("System.Xaml.IAmbientProvider"), 
      /* 5 */ $asm2D.TypeRef("System.Xaml.IXamlSchemaContextProvider"), 
      /* 6 */ $asm2D.TypeRef("System.Xaml.IRootObjectProvider"), 
      /* 7 */ $asm2D.TypeRef("System.Xaml.IXamlNamespaceResolver"), 
      /* 8 */ $asm2D.TypeRef("System.Windows.Markup.IProvideValueTarget"), 
      /* 9 */ $asm2D.TypeRef("System.Xaml.IXamlNameResolver"), 
      /* 10 */ $asm2D.TypeRef("System.Xaml.IDestinationTypeProvider"), 
      /* 11 */ $asm2D.TypeRef("System.Xaml.IXamlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.XamlContext */ 

(function XamlContext$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.XamlContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespacePrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownAttachableMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespaceByPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvePrefixCachedDelegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Func`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSchemaContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeNamespace", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDottedProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstanceOrAttachableProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacePrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNoDotAttributeProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $asm2D.TypeRef("System.Xaml.XamlType"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXamlAttachableProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetXamlProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [
          $asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.XamlType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlTypeName", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlTypeOrUnknown", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyTypeMatchesGenericTagType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDirectiveProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveXamlNameNS", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LocalAssembly", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_resolvePrefixCachedDelegate", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_localAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "SchemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:false}, "ResolvePrefixCachedDelegate", $asm07.TypeRef("System.Func`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.NodeStreamSorter */ 

(function NodeStreamSorter$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.NodeStreamSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceOverNoninstancingDirectives", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceTo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm2D.TypeRef("System.Xaml.XamlNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceToNextCtorDirective", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceToNextInstancingMember", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BackupTo", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm2D.TypeRef("System.Xaml.XamlNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSortingBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForOutOfOrderCtorDirectives", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndObjectFrame", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueInitialExtraXmlNses", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueInitialXmlState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueOneXmlDirectiveProperty", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMember"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HaveSeenInstancingProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HaveSeenOutOfOrderCtorDirective", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeObjectFrameStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCtorDirective", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInstancingMember", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveList_Process", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveList_RemoveStartMemberIndexWithGreatestDepth", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadAndSortCtorProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadToEndObjectOrFirstPropertyElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadToEndOfAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadToFirstInstancingProperty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReloadSortedBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HaveSeenInstancingProperty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HaveSeenOutOfOrderCtorDirective", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SortContentsOfReadAheadBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SortMembers", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartNewNodeStreamWithSettingsPreamble", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartObjectFrame", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SwapRanges", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_settings", $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings"));

    $.Field({Static:false, Public:false}, "_source", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_buffer", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "_sortingInfoArray", $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("MS.Internal.Xaml.NodeStreamSorter+ReorderInfo")]));

    $.Field({Static:false, Public:false}, "_originalNodesInOrder", $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "_xmlnsDictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_seenStack", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.NodeStreamSorter+SeenCtorDirectiveFlags")]));

    $.Field({Static:false, Public:false}, "_startObjectDepth", $.Int32);

    $.Field({Static:false, Public:false}, "_moveList", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Int32]));

    $.Property({Static:false, Public:false}, "HaveSeenInstancingProperty", $.Boolean);

    $.Property({Static:false, Public:false}, "HaveSeenOutOfOrderCtorDirective", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.NodeStreamSorter+SeenCtorDirectiveFlags */ 

(function SeenCtorDirectiveFlags$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.NodeStreamSorter+SeenCtorDirectiveFlags", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "SeenInstancingProperty", $.Boolean);

    $.Field({Static:false, Public:true }, "SeenOutOfOrderCtorDirective", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct MS.Internal.Xaml.NodeStreamSorter+ReorderInfo */ 

(function ReorderInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlNodeType)) ();
  };


  function ReorderInfo_get_Depth () {
    return this.ReorderInfo$Depth$value;
  }; 

  function ReorderInfo_get_OriginalOrderIndex () {
    return this.ReorderInfo$OriginalOrderIndex$value;
  }; 

  function ReorderInfo_get_XamlNodeType () {
    return this.ReorderInfo$XamlNodeType$value;
  }; 

  function ReorderInfo_set_Depth (value) {
    this.ReorderInfo$Depth$value = (value | 0);
  }; 

  function ReorderInfo_set_OriginalOrderIndex (value) {
    this.ReorderInfo$OriginalOrderIndex$value = (value | 0);
  }; 

  function ReorderInfo_set_XamlNodeType (value) {
    this.ReorderInfo$XamlNodeType$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xaml.NodeStreamSorter+ReorderInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32), 
      ReorderInfo_get_Depth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_OriginalOrderIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      ReorderInfo_get_OriginalOrderIndex
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlNodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      ReorderInfo_get_XamlNodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32), 
      ReorderInfo_set_Depth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_OriginalOrderIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      ReorderInfo_set_OriginalOrderIndex
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlNodeType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlNodeType")), 
      ReorderInfo_set_XamlNodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ReorderInfo$Depth$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ReorderInfo$OriginalOrderIndex$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ReorderInfo$XamlNodeType$value", $asm2D.TypeRef("System.Xaml.XamlNodeType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "OriginalOrderIndex", $.Int32);

    $.Property({Static:false, Public:true }, "XamlNodeType", $asm2D.TypeRef("System.Xaml.XamlNodeType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MS.Internal.Xaml.Runtime");
/* class MS.Internal.Xaml.Runtime.XamlRuntime */ 

(function XamlRuntime$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Runtime.XamlRuntime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToDictionary", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AttachedPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), $asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToValue", 
      new JSIL.MethodSignature("!!0", [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWithFactoryMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredLoad", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $asm2D.TypeRef("System.Xaml.XamlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredSave", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlReader"), [
          $asm07.TypeRef("System.IServiceProvider"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttachedProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCollectionItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConverterInstance", 
      new JSIL.MethodSignature("!!0", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverterBase"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDictionaryItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializationGuard", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_LineInfo", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetConnectionId", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetUriBase", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXmlInstance", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Windows.Markup.XData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.ShouldSerializeResult"), [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "LineInfo", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Runtime.ClrObjectRuntime */ 

(function ClrObjectRuntime$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Runtime.IAddLineInfo)) ();
  };


























  function ClrObjectRuntime_get_LineInfo () {
    return this.ClrObjectRuntime$LineInfo$value;
  }; 












  function ClrObjectRuntime_set_LineInfo (value) {
    this.ClrObjectRuntime$LineInfo$value = value;
  }; 








  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"), 
      Name: "MS.Internal.Xaml.Runtime.ClrObjectRuntime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntimeSettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToDictionary", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AttachedPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindToMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), $asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToValue", 
      new JSIL.MethodSignature("!!0", [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstanceWithCtor", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObjectWithTypeConverter", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWithFactoryMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredLoad", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $asm2D.TypeRef("System.Xaml.XamlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredSave", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlReader"), [
          $asm07.TypeRef("System.IServiceProvider"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DictionaryEntriesFromIDictionaryEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$asm07.TypeRef("System.Collections.IDictionaryEnumerator")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Runtime.ClrObjectRuntime_$lDictionaryEntriesFromIDictionaryEnumerator$gd__45.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "DictionaryEntriesFromIEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$asm07.TypeRef("System.Collections.IEnumerator")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Runtime.ClrObjectRuntime_$lDictionaryEntriesFromIEnumerator$gd__46.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "DictionaryEntriesFromIEnumeratorKvp", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", ["!!0", "!!1"])])], ["TKey", "TValue"])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Runtime.ClrObjectRuntime_$lDictionaryEntriesFromIEnumeratorKvp$gd__47$b2.__Type__]; });

    $.Method({Static:false, Public:true , Virtual:true }, "get_LineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")), 
      ClrObjectRuntime_get_LineInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttachedProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCollectionItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConverterInstance", 
      new JSIL.MethodSignature("!!0", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverterBase"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDictionaryItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFactoryMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSettings", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntimeSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializationGuard", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LineInfo", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")), 
      ClrObjectRuntime_set_LineInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetConnectionId", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetUriBase", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXmlInstance", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Windows.Markup.XData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.ShouldSerializeResult"), [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnwrapTargetInvocationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.Field({Static:false, Public:false}, "_ignoreCanConvert", $.Boolean);

    $.Field({Static:false, Public:false}, "_isWriter", $.Boolean);

    $.Field({Static:false, Public:false}, "ClrObjectRuntime$LineInfo$value", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineInfo", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIDictionaryEnumerator>d__45 */ 

(function $lDictionaryEntriesFromIDictionaryEnumerator$gd__45$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIDictionaryEnumerator>d__45", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.DictionaryEntry$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g3__enumerator", $asm07.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.Current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIEnumerator>d__46 */ 

(function $lDictionaryEntriesFromIEnumerator$gd__46$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIEnumerator>d__46", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.DictionaryEntry$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g3__enumerator", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.Current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIEnumeratorKvp>d__47`2 */ 

(function $lDictionaryEntriesFromIEnumeratorKvp$gd__47$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Runtime.ClrObjectRuntime+<DictionaryEntriesFromIEnumeratorKvp>d__47`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.DictionaryEntry$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:true }, "$l$g3__enumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.DictionaryEntry$g.Current", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Runtime.DynamicMethodRuntime */ 

(function DynamicMethodRuntime$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"), 
      Name: "MS.Internal.Xaml.Runtime.DynamicMethodRuntime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntimeSettings"), $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), 
          $asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
          $asm07.TypeRef("System.Type"), $.Object, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateDelegateCreator", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDelegateCreatorWithoutHelper", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDynamicMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    )
      .Parameter(2, "argTypes", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "CreateFactoryDelegate", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate"), [$asm07.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFactoryDelegate", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateGetDelegate", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateInstanceWithCtor", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateInstanceWithCtor", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSetDelegate", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandXamlLoadPermission", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit_BoxIfValueType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit_Call", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit_CastTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit_ConstInt", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit_LateBoundInvoke", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type"), 
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Int16, $jsilcore.TypeRef("System.Array", [$.Int16])
        ])
    )
      .Parameter(5, "paramArgNums", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "Emit_TypeOf", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConverterInstances", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DelegateCreators", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryDelegates", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodBase"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PropertyGetDelegates", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PropertySetDelegates", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConverterInstance", 
      new JSIL.MethodSignature("!!0", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverterBase"])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetTargetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "LoadArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.Emit.LocalBuilder")]), [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlMember"), $.Object, 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnloadArguments", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.Emit.LocalBuilder")])])
    );

    $.Constant({Static:true , Public:false}, "BF_AllInstanceMembers", $asm07.TypeRef("System.Reflection.BindingFlags"), 52);

    $.Constant({Static:true , Public:false}, "BF_AllStaticMembers", $asm07.TypeRef("System.Reflection.BindingFlags"), 56);

    $.Field({Static:true , Public:false}, "s_FullTrustPermission", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:true , Public:false}, "s_GetTypeFromHandleMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "s_InvokeMemberMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "_xamlLoadPermission", $asm2D.TypeRef("System.Xaml.Permissions.XamlLoadPermission"));

    $.Field({Static:false, Public:false}, "_localAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "_localType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Field({Static:false, Public:false}, "_propertyGetDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate")]));

    $.Field({Static:false, Public:false}, "_propertySetDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate")]));

    $.Field({Static:false, Public:false}, "_factoryDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodBase"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate")]));

    $.Field({Static:false, Public:false}, "_converterInstances", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Object]));

    $.Field({Static:false, Public:false}, "_delegateCreators", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator")]));

    $.Field({Static:false, Public:false}, "_delegateCreatorWithoutHelper", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator"));

    $.Property({Static:false, Public:false}, "PropertyGetDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate")]));

    $.Property({Static:false, Public:false}, "PropertySetDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate")]));

    $.Property({Static:false, Public:false}, "FactoryDelegates", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Reflection.MethodBase"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate")]));

    $.Property({Static:false, Public:false}, "ConverterInstances", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $.Object]));

    $.Property({Static:false, Public:false}, "DelegateCreators", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate */ 

JSIL.MakeDelegate("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertySetDelegate", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm07.TypeRef("System.Object")]));

/* delegate MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate */ 

JSIL.MakeDelegate("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+PropertyGetDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [$asm07.TypeRef("System.Object")]));

/* delegate MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate */ 

JSIL.MakeDelegate("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+FactoryDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Object")])]));

/* delegate MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator */ 

JSIL.MakeDelegate("MS.Internal.Xaml.Runtime.DynamicMethodRuntime+DelegateCreator", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [
      $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Object"), 
      $asm07.TypeRef("System.String")
    ]));

/* class MS.Internal.Xaml.Runtime.PartialTrustTolerantRuntime */ 

(function PartialTrustTolerantRuntime$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"), 
      Name: "MS.Internal.Xaml.Runtime.PartialTrustTolerantRuntime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntimeSettings"), $asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel"), 
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddToDictionary", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AttachedPropertyCount", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CallProvideValue", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Windows.Markup.MarkupExtension"), $asm07.TypeRef("System.IServiceProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [
          $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext"), $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToValue", 
      new JSIL.MethodSignature("!!0", [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
          $.Object
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFromValue", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm0A.TypeRef("System.ComponentModel.TypeConverter")]), 
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("System.Xaml.XamlType"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWithFactoryMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredLoad", 
      new JSIL.MethodSignature($.Object, [
          $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $asm2D.TypeRef("System.Xaml.XamlReader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeferredSave", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlReader"), [
          $asm07.TypeRef("System.IServiceProvider"), $asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", [$asm2D.TypeRef("System.Xaml.XamlDeferringLoader")]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureElevatedRuntime", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberAccessPermissionDenied", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttachedProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm2D.TypeRef("System.Xaml.AttachableMemberIdentifier"), $.Object])]), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCollectionItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConverterInstance", 
      new JSIL.MethodSignature("!!0", [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverterBase"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDictionaryItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.DictionaryEntry")]), [$.Object, $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasDefaultInvoker", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasDefaultInvoker", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializationGuard", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDefaultConverter", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.Schema.XamlValueConverter`1", ["!!0"])], ["TConverterBase"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_LineInfo", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberAccessPermissionDenied", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetConnectionId", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetUriBase", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlType"), $.Object, 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXmlInstance", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm2D.TypeRef("System.Xaml.XamlMember"), 
          $asm2D.TypeRef("System.Windows.Markup.XData")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerialize", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.ShouldSerializeResult"), [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object])
    );

    $.Field({Static:false, Public:false}, "_memberAccessPermissionDenied", $.Boolean);

    $.Field({Static:false, Public:false}, "_transparentRuntime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"));

    $.Field({Static:false, Public:false}, "_elevatedRuntime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.ClrObjectRuntime"));

    $.Field({Static:false, Public:false}, "_accessLevel", $asm2D.TypeRef("System.Xaml.Permissions.XamlAccessLevel"));

    $.Field({Static:false, Public:false}, "_schemaContext", $asm2D.TypeRef("System.Xaml.XamlSchemaContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineInfo", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"));

    $.Property({Static:false, Public:false}, "MemberAccessPermissionDenied", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Runtime.XamlRuntimeSettings */ 

(function XamlRuntimeSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function XamlRuntimeSettings_get_IgnoreCanConvert () {
    return this.XamlRuntimeSettings$IgnoreCanConvert$value;
  }; 

  function XamlRuntimeSettings_set_IgnoreCanConvert (value) {
    this.XamlRuntimeSettings$IgnoreCanConvert$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Runtime.XamlRuntimeSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_IgnoreCanConvert", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlRuntimeSettings_get_IgnoreCanConvert
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IgnoreCanConvert", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlRuntimeSettings_set_IgnoreCanConvert
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlRuntimeSettings$IgnoreCanConvert$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "IgnoreCanConvert", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface MS.Internal.Xaml.Runtime.IAddLineInfo */ 

JSIL.MakeInterface(
  "MS.Internal.Xaml.Runtime.IAddLineInfo", false, [], function ($) {
    $.Method({}, "WithLineInfo", new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")]));
  }, []);

JSIL.DeclareNamespace("MS.Internal.Xaml.Context");
/* class MS.Internal.Xaml.Context.ContextServices */ 

(function ContextServices$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("MS.Internal.Xaml.Context.ContextServices", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetTargetProperty", 
      new JSIL.MethodSignature($.Object, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface MS.Internal.Xaml.Context.ICheckIfInitialized */ 

JSIL.MakeInterface(
  "MS.Internal.Xaml.Context.ICheckIfInitialized", false, [], function ($) {
    $.Method({}, "IsFullyInitialized", new JSIL.MethodSignature($.Boolean, [$.Object]));
  }, []);

/* class MS.Internal.Xaml.Context.NameFixupGraph */ 

(function NameFixupGraph$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.NameFixupGraph", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddDependency", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddEndOfParseDependency", 
      new JSIL.MethodSignature(null, [$.Object, $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToMultiDict", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])]), "!!0", 
          $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDependencies", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasResolvedTokensPendingProcessing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDependentNames", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextResolvedTokenPendingProcessing", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRemainingObjectDependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.NameFixupGraph_$lGetRemainingObjectDependencies$gd__20.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "GetRemainingReparses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.NameFixupGraph_$lGetRemainingReparses$gd__19.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "GetRemainingSimpleFixups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.NameFixupGraph_$lGetRemainingSimpleFixups$gd__18.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "HasUnresolvedChildren", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasUnresolvedOrPendingChildren", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOffTheStack", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveTokenByParent", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveDependenciesTo", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowProvideValueCycle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "WasUninitializedAtEndOfParse", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.Field({Static:false, Public:false}, "_dependenciesByParentObject", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])]));

    $.Field({Static:false, Public:false}, "_dependenciesByChildObject", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "_dependenciesByName", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")])]));

    $.Field({Static:false, Public:false}, "_resolvedTokensPendingProcessing", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "_deferredRootProvideValue", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Field({Static:false, Public:false}, "_uninitializedObjectsAtParseEnd", $asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$.Object]));

    $.Property({Static:false, Public:true }, "HasResolvedTokensPendingProcessing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingSimpleFixups>d__18 */ 

(function $lGetRemainingSimpleFixups$gd__18$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingSimpleFixups>d__18", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMS.Internal.Xaml.Context.NameFixupToken$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"));

    $.Field({Static:false, Public:false}, "$ldependencies$g5__1", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lname$g5__3", $.String);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.Current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingReparses>d__19 */ 

(function $lGetRemainingReparses$gd__19$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingReparses>d__19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMS.Internal.Xaml.Context.NameFixupToken$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"));

    $.Field({Static:false, Public:false}, "$ldependencies$g5__1", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$lparentObj$g5__3", $.Object);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.Current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingObjectDependencies>d__20 */ 

(function $lGetRemainingObjectDependencies$gd__20$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.NameFixupGraph+<GetRemainingObjectDependencies>d__20", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMS.Internal.Xaml.Context.NameFixupToken$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupGraph"));

    $.Field({Static:false, Public:false}, "$lmarkupExtensionTokens$g5__1", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$li$g5__2", $.Int32);

    $.Field({Static:false, Public:false}, "$ldependencies$g5__3", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$lj$g5__4", $.Int32);

    $.Field({Static:false, Public:false}, "$lstartNodeOutEdges$g5__5", $asm2D.TypeRef("System.Xaml.MS.Impl.FrugalObjectList`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$ldependencies$g5__6", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]));

    $.Field({Static:false, Public:false}, "$lj$g5__7", $.Int32);

    $.Field({Static:false, Public:false}, "$li$g5__8", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMS.Internal.Xaml.Context.NameFixupToken$g.Current", $asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.NameFixupToken")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum MS.Internal.Xaml.Context.FixupType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Context.FixupType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    MarkupExtensionFirstRun: 0, 
    MarkupExtensionRerun: 1, 
    PropertyValue: 2, 
    ObjectInitializationValue: 3, 
    UnresolvedChildren: 4, 
  }
);

/* class MS.Internal.Xaml.Context.FixupTargetKeyHolder */ 

(function FixupTargetKeyHolder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };



  function FixupTargetKeyHolder_get_Key () {
    return this.FixupTargetKeyHolder$Key$value;
  }; 

  function FixupTargetKeyHolder_set_Key (value) {
    this.FixupTargetKeyHolder$Key$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.FixupTargetKeyHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Method({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object), 
      FixupTargetKeyHolder_get_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Key", 
      JSIL.MethodSignature.Action($.Object), 
      FixupTargetKeyHolder_set_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTargetKeyHolder$Key$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Key", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.FixupTarget */ 

(function FixupTarget$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Context.FixupTargetKeyHolder)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };



  function FixupTarget_get_EndInstanceLineNumber () {
    return this.FixupTarget$EndInstanceLineNumber$value;
  }; 

  function FixupTarget_get_EndInstanceLinePosition () {
    return this.FixupTarget$EndInstanceLinePosition$value;
  }; 

  function FixupTarget_get_Instance () {
    return this.FixupTarget$Instance$value;
  }; 

  function FixupTarget_get_InstanceIsOnTheStack () {
    return this.FixupTarget$InstanceIsOnTheStack$value;
  }; 

  function FixupTarget_get_InstanceName () {
    return this.FixupTarget$InstanceName$value;
  }; 

  function FixupTarget_get_InstanceType () {
    return this.FixupTarget$InstanceType$value;
  }; 

  function FixupTarget_get_InstanceWasGotten () {
    return this.FixupTarget$InstanceWasGotten$value;
  }; 

  function FixupTarget_get_KeyHolder () {
    return this.FixupTarget$KeyHolder$value;
  }; 

  function FixupTarget_get_Property () {
    return this.FixupTarget$Property$value;
  }; 

  function FixupTarget_get_TemporaryCollectionIndex () {
    return this.FixupTarget$TemporaryCollectionIndex$value;
  }; 


  function FixupTarget_set_EndInstanceLineNumber (value) {
    this.FixupTarget$EndInstanceLineNumber$value = (value | 0);
  }; 

  function FixupTarget_set_EndInstanceLinePosition (value) {
    this.FixupTarget$EndInstanceLinePosition$value = (value | 0);
  }; 

  function FixupTarget_set_Instance (value) {
    this.FixupTarget$Instance$value = value;
  }; 

  function FixupTarget_set_InstanceIsOnTheStack (value) {
    this.FixupTarget$InstanceIsOnTheStack$value = value;
  }; 

  function FixupTarget_set_InstanceName (value) {
    this.FixupTarget$InstanceName$value = value;
  }; 

  function FixupTarget_set_InstanceType (value) {
    this.FixupTarget$InstanceType$value = value;
  }; 

  function FixupTarget_set_InstanceWasGotten (value) {
    this.FixupTarget$InstanceWasGotten$value = value;
  }; 

  function FixupTarget_set_KeyHolder (value) {
    this.FixupTarget$KeyHolder$value = value;
  }; 

  function FixupTarget_set_Property (value) {
    this.FixupTarget$Property$value = value;
  }; 

  function FixupTarget_set_TemporaryCollectionIndex (value) {
    this.FixupTarget$TemporaryCollectionIndex$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.FixupTarget", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_EndInstanceLineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      FixupTarget_get_EndInstanceLineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_EndInstanceLinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      FixupTarget_get_EndInstanceLinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object), 
      FixupTarget_get_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceIsOnTheStack", 
      JSIL.MethodSignature.Return($.Boolean), 
      FixupTarget_get_InstanceIsOnTheStack
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceName", 
      JSIL.MethodSignature.Return($.String), 
      FixupTarget_get_InstanceName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      FixupTarget_get_InstanceType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceWasGotten", 
      JSIL.MethodSignature.Return($.Boolean), 
      FixupTarget_get_InstanceWasGotten
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KeyHolder", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTargetKeyHolder")), 
      FixupTarget_get_KeyHolder
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Property", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      FixupTarget_get_Property
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TemporaryCollectionIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      FixupTarget_get_TemporaryCollectionIndex
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    )
      .Overrides($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"), "WithLineInfo");

    $.Method({Static:false, Public:true }, "set_EndInstanceLineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      FixupTarget_set_EndInstanceLineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EndInstanceLinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      FixupTarget_set_EndInstanceLinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Instance", 
      JSIL.MethodSignature.Action($.Object), 
      FixupTarget_set_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InstanceIsOnTheStack", 
      JSIL.MethodSignature.Action($.Boolean), 
      FixupTarget_set_InstanceIsOnTheStack
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InstanceName", 
      JSIL.MethodSignature.Action($.String), 
      FixupTarget_set_InstanceName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InstanceType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      FixupTarget_set_InstanceType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InstanceWasGotten", 
      JSIL.MethodSignature.Action($.Boolean), 
      FixupTarget_set_InstanceWasGotten
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyHolder", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTargetKeyHolder")), 
      FixupTarget_set_KeyHolder
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Property", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      FixupTarget_set_Property
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TemporaryCollectionIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      FixupTarget_set_TemporaryCollectionIndex
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$Property$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$Instance$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$InstanceName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$InstanceType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$TemporaryCollectionIndex$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$EndInstanceLineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$EndInstanceLinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$KeyHolder$value", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTargetKeyHolder"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$InstanceIsOnTheStack$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FixupTarget$InstanceWasGotten$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Property", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true }, "InstanceName", $.String);

    $.Property({Static:false, Public:true }, "InstanceType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "TemporaryCollectionIndex", $.Int32);

    $.Property({Static:false, Public:true }, "EndInstanceLineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "EndInstanceLinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "KeyHolder", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTargetKeyHolder"));

    $.Property({Static:false, Public:true }, "InstanceIsOnTheStack", $.Boolean);

    $.Property({Static:false, Public:true }, "InstanceWasGotten", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.NameFixupToken */ 

(function NameFixupToken$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Context.FixupType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2D.System.Xaml.XamlSavedContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Context.FixupTarget)) ();
  };



  function NameFixupToken_get_CanAssignDirectly () {
    return this.NameFixupToken$CanAssignDirectly$value;
  }; 

  function NameFixupToken_get_FixupType () {
    return this.NameFixupToken$FixupType$value;
  }; 

  function NameFixupToken_get_LineNumber () {
    return this.NameFixupToken$LineNumber$value;
  }; 

  function NameFixupToken_get_LinePosition () {
    return this.NameFixupToken$LinePosition$value;
  }; 



  function NameFixupToken_get_ReferencedObject () {
    return this.NameFixupToken$ReferencedObject$value;
  }; 


  function NameFixupToken_get_SavedContext () {
    return this.NameFixupToken$SavedContext$value;
  }; 

  function NameFixupToken_get_Target () {
    return this.NameFixupToken$Target$value;
  }; 




  function NameFixupToken_set_CanAssignDirectly (value) {
    this.NameFixupToken$CanAssignDirectly$value = value;
  }; 

  function NameFixupToken_set_FixupType (value) {
    this.NameFixupToken$FixupType$value = value;
  }; 

  function NameFixupToken_set_LineNumber (value) {
    this.NameFixupToken$LineNumber$value = (value | 0);
  }; 

  function NameFixupToken_set_LinePosition (value) {
    this.NameFixupToken$LinePosition$value = (value | 0);
  }; 

  function NameFixupToken_set_ReferencedObject (value) {
    this.NameFixupToken$ReferencedObject$value = value;
  }; 


  function NameFixupToken_set_SavedContext (value) {
    this.NameFixupToken$SavedContext$value = value;
  }; 

  function NameFixupToken_set_Target (value) {
    this.NameFixupToken$Target$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.NameFixupToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_CanAssignDirectly", 
      JSIL.MethodSignature.Return($.Boolean), 
      NameFixupToken_get_CanAssignDirectly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_FixupType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupType")), 
      NameFixupToken_get_FixupType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      NameFixupToken_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      NameFixupToken_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NameScopeDictionaryList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NeededNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.Method({Static:false, Public:true }, "get_ReferencedObject", 
      JSIL.MethodSignature.Return($.Object), 
      NameFixupToken_get_ReferencedObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Runtime", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"))
    );

    $.Method({Static:false, Public:true }, "get_SavedContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlSavedContext")), 
      NameFixupToken_get_SavedContext
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget")), 
      NameFixupToken_get_Target
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TargetContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    )
      .Overrides($asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo"), "WithLineInfo");

    $.ExternalMethod({Static:false, Public:false}, "ResolveName", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Method({Static:false, Public:true }, "set_CanAssignDirectly", 
      JSIL.MethodSignature.Action($.Boolean), 
      NameFixupToken_set_CanAssignDirectly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_FixupType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupType")), 
      NameFixupToken_set_FixupType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      NameFixupToken_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      NameFixupToken_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReferencedObject", 
      JSIL.MethodSignature.Action($.Object), 
      NameFixupToken_set_ReferencedObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Runtime", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"))
    );

    $.Method({Static:false, Public:true }, "set_SavedContext", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlSavedContext")), 
      NameFixupToken_set_SavedContext
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget")), 
      NameFixupToken_set_Target
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_names", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_nameScopeDictionaryList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));

    $.Field({Static:false, Public:false}, "NameFixupToken$CanAssignDirectly$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameFixupToken$FixupType$value", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameFixupToken$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameFixupToken$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameFixupToken$Target$value", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"));

    $.Field({Static:false, Public:false}, "_targetContext", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Field({Static:false, Public:false}, "NameFixupToken$SavedContext$value", $asm2D.TypeRef("System.Xaml.XamlSavedContext"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "NameFixupToken$ReferencedObject$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "CanAssignDirectly", $.Boolean);

    $.Property({Static:false, Public:true }, "FixupType", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupType"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "Target", $asm2D.TypeRef("MS.Internal.Xaml.Context.FixupTarget"));

    $.Property({Static:false, Public:true }, "Runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"));

    $.Property({Static:false, Public:true }, "TargetContext", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Property({Static:false, Public:true }, "SavedContext", $asm2D.TypeRef("System.Xaml.XamlSavedContext"));

    $.Property({Static:false, Public:true }, "NameScopeDictionaryList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));

    $.Property({Static:false, Public:true }, "NeededNames", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "ReferencedObject", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("MS.Internal.Xaml.Runtime.IAddLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext */ 

(function ObjectWriterContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Context.ICheckIfInitialized)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };











  function ObjectWriterContext_get_BaseUri () {
    return this.ObjectWriterContext$BaseUri$value;
  }; 

























  function ObjectWriterContext_get_IsInitializedCallback () {
    return this.ObjectWriterContext$IsInitializedCallback$value;
  }; 

  function ObjectWriterContext_get_LineNumber () {
    return this.ObjectWriterContext$LineNumber$value;
  }; 

  function ObjectWriterContext_get_LineNumber_StartObject () {
    return this.ObjectWriterContext$LineNumber_StartObject$value;
  }; 

  function ObjectWriterContext_get_LinePosition () {
    return this.ObjectWriterContext$LinePosition$value;
  }; 

  function ObjectWriterContext_get_LinePosition_StartObject () {
    return this.ObjectWriterContext$LinePosition_StartObject$value;
  }; 














































  function ObjectWriterContext_set_BaseUri (value) {
    this.ObjectWriterContext$BaseUri$value = value;
  }; 













  function ObjectWriterContext_set_IsInitializedCallback (value) {
    this.ObjectWriterContext$IsInitializedCallback$value = value;
  }; 

  function ObjectWriterContext_set_LineNumber (value) {
    this.ObjectWriterContext$LineNumber$value = (value | 0);
  }; 

  function ObjectWriterContext_set_LineNumber_StartObject (value) {
    this.ObjectWriterContext$LineNumber_StartObject$value = (value | 0);
  }; 

  function ObjectWriterContext_set_LinePosition (value) {
    this.ObjectWriterContext$LinePosition$value = (value | 0);
  }; 

  function ObjectWriterContext_set_LinePosition_StartObject (value) {
    this.ObjectWriterContext$LinePosition_StartObject$value = (value | 0);
  }; 











  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.XamlContext"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSavedContext"), $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"), 
          $asm2D.TypeRef("System.Windows.Markup.INameScope"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"), 
          $asm2D.TypeRef("System.Windows.Markup.INameScope"), $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNameScopeInitializationCompleteSubscriber", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespacePrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAmbient", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAmbient", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespaceByPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Method({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      ObjectWriterContext_get_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentAssignedProperties", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentCollection", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentCtorArgs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentHasPreconstructionPropertyValuesDictionary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInstance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInstanceRegisteredName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentIsKeySet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentIsObjectFromMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentIsTypeConvertedObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentKey", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentKeyIsUnconverted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentPreconstructionPropertyValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentWasAssignedAtCreation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentInstance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentIsObjectFromMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentShouldConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentShouldNotConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GrandParentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.Method({Static:false, Public:false}, "get_IsInitializedCallback", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized")), 
      ObjectWriterContext_get_IsInitializedCallback
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ObjectWriterContext_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber_StartObject", 
      JSIL.MethodSignature.Return($.Int32), 
      ObjectWriterContext_get_LineNumber_StartObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      ObjectWriterContext_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition_StartObject", 
      JSIL.MethodSignature.Return($.Int32), 
      ObjectWriterContext_get_LinePosition_StartObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LiveDepth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameResolutionComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentAssignedProperties", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentCollection", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentInstance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentInstanceRegisteredName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentIsObjectFromMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentIsPropertyValueSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentKey", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentPreconstructionPropertyValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentShouldConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentShouldNotConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootInstance", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootNameScope", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Runtime", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SavedDepth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceProviderContext", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceBamlUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StackWalkOfNameScopes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.ObjectWriterContext_$lget_StackWalkOfNameScopes$gd__172.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "GetAllNamesAndValuesInScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDestinationType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacePrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.ObjectWriterContext_$lGetNamespacePrefixes$gd__34.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "GetSavedContext", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlSavedContext"), [$asm2D.TypeRef("System.Xaml.SavedContextType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTopFrame", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HuntAroundForARootNameScope", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"), [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsOnTheLiveStack", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "LiftScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNameScopeDictionary", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"), [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseNameScopeInitializationCompleteEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNameScopeInitializationCompleteSubscriber", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveName", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetAllAmbientValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.AmbientPropertyValue")]), [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetFirstAmbientValue", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.AmbientPropertyValue"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlType")]), $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlMember")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetFirstAmbientValue", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("System.Xaml.XamlType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_GetSettings", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_Resolve", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceProvider_ResolveXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$.String])
    );

    $.Method({Static:false, Public:true }, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      ObjectWriterContext_set_BaseUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentCollection", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentCtorArgs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentInstance", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentInstanceRegisteredName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentIsObjectFromMember", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentIsPropertyValueSet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentIsTypeConvertedObject", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentKeyIsUnconverted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentWasAssignedAtCreation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GrandParentShouldConvertChildKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_IsInitializedCallback", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized")), 
      ObjectWriterContext_set_IsInitializedCallback
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      ObjectWriterContext_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LineNumber_StartObject", 
      JSIL.MethodSignature.Action($.Int32), 
      ObjectWriterContext_set_LineNumber_StartObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      ObjectWriterContext_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LinePosition_StartObject", 
      JSIL.MethodSignature.Action($.Int32), 
      ObjectWriterContext_set_LinePosition_StartObject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LocalAssembly", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NameResolutionComplete", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentInstanceRegisteredName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentIsPropertyValueSet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentKey", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentKeyIsUnconverted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentShouldConvertChildKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentShouldNotConvertChildKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "UnLiftScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WithLineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    );

    $.Field({Static:false, Public:false}, "_stack", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")]));

    $.Field({Static:false, Public:false}, "_rootInstance", $.Object);

    $.Field({Static:false, Public:false}, "_serviceProviderContext", $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"));

    $.Field({Static:false, Public:false}, "_runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"));

    $.Field({Static:false, Public:false}, "_savedDepth", $.Int32);

    $.Field({Static:false, Public:false}, "_nameResolutionComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_settings", $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"));

    $.Field({Static:false, Public:false}, "_nameScopeInitializationCompleteSubscribers", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext+NameScopeInitializationCompleteSubscriber")]));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$IsInitializedCallback$value", $asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$BaseUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$LineNumber_StartObject$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterContext$LinePosition_StartObject$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:false}, "IsInitializedCallback", $asm2D.TypeRef("MS.Internal.Xaml.Context.ICheckIfInitialized"));

    $.Property({Static:false, Public:false}, "NameResolutionComplete", $.Boolean);

    $.Property({Static:false, Public:false}, "Runtime", $asm2D.TypeRef("MS.Internal.Xaml.Runtime.XamlRuntime"));

    $.Property({Static:false, Public:false}, "ServiceProviderContext", $asm2D.TypeRef("MS.Internal.Xaml.ServiceProviderContext"));

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "SavedDepth", $.Int32);

    $.Property({Static:false, Public:true }, "LiveDepth", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "ParentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "GrandParentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "CurrentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "ParentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "GrandParentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "CurrentInstance", $.Object);

    $.Property({Static:false, Public:true }, "ParentInstance", $.Object);

    $.Property({Static:false, Public:true }, "GrandParentInstance", $.Object);

    $.Property({Static:false, Public:true }, "CurrentCollection", $.Object);

    $.Property({Static:false, Public:true }, "ParentCollection", $.Object);

    $.Property({Static:false, Public:true }, "CurrentWasAssignedAtCreation", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentIsObjectFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentIsObjectFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "GrandParentIsObjectFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentIsPropertyValueSet", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentIsPropertyValueSet", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentIsTypeConvertedObject", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentPreconstructionPropertyValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]));

    $.Property({Static:false, Public:true }, "CurrentHasPreconstructionPropertyValuesDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentPreconstructionPropertyValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]));

    $.Property({Static:false, Public:true }, "CurrentAssignedProperties", $asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:true }, "ParentAssignedProperties", $asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Property({Static:false, Public:true }, "CurrentInstanceRegisteredName", $.String);

    $.Property({Static:false, Public:true }, "ParentInstanceRegisteredName", $.String);

    $.Property({Static:false, Public:true }, "BaseUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SourceBamlUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "LineNumber_StartObject", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition_StartObject", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:true }, "ParentNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:true }, "GrandParentNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:true }, "RootNameScope", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:true }, "CurrentCtorArgs", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "CurrentKey", $.Object);

    $.Property({Static:false, Public:true }, "CurrentIsKeySet", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentKey", $.Object);

    $.Property({Static:false, Public:true }, "CurrentKeyIsUnconverted", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentKeyIsUnconverted", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentShouldConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "GrandParentShouldConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "ParentShouldNotConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "GrandParentShouldNotConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "RootInstance", $.Object);

    $.Property({Static:false, Public:true }, "StackWalkOfNameScopes", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+NameScopeInitializationCompleteSubscriber */ 

(function NameScopeInitializationCompleteSubscriber$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventHandler)) ();
  };



  function NameScopeInitializationCompleteSubscriber_get_Handler () {
    return this.NameScopeInitializationCompleteSubscriber$Handler$value;
  }; 


  function NameScopeInitializationCompleteSubscriber_set_Handler (value) {
    this.NameScopeInitializationCompleteSubscriber$Handler$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+NameScopeInitializationCompleteSubscriber", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Handler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.EventHandler")), 
      NameScopeInitializationCompleteSubscriber_get_Handler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NameScopeDictionaryList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]))
    );

    $.Method({Static:false, Public:true }, "set_Handler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler")), 
      NameScopeInitializationCompleteSubscriber_set_Handler
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_nameScopeDictionaryList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));

    $.Field({Static:false, Public:false}, "NameScopeInitializationCompleteSubscriber$Handler$value", $asm07.TypeRef("System.EventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Handler", $asm07.TypeRef("System.EventHandler"));

    $.Property({Static:false, Public:true }, "NameScopeDictionaryList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+StackWalkNameResolver */ 

(function StackWalkNameResolver$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+StackWalkNameResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_OnNameScopeInitializationComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixupTokenAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllNamesAndValuesInScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFixupToken", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFixupToken", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_OnNameScopeInitializationComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:false, Public:false}, "_nameScopeDictionaryList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixupTokenAvailable", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "OnNameScopeInitializationComplete", $asm07.TypeRef("System.EventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Xaml.IXamlNameResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+StackWalkNameResolver+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+StackWalkNameResolver+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetAllNamesAndValuesInScope$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    );

    $.Field({Static:false, Public:true }, "nameValuePair", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__9_0", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__9_0", $asm07.TypeRef("System.Func`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+<GetNamespacePrefixes>d__34 */ 

(function $lGetNamespacePrefixes$gd__34$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+<GetNamespacePrefixes>d__34", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.NamespaceDeclaration$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.NamespaceDeclaration$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Field({Static:false, Public:false}, "$lkeys$g5__1", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "$lframe$g5__2", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.NamespaceDeclaration$g.Current", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+<get_StackWalkOfNameScopes>d__172 */ 

(function $lget_StackWalkOfNameScopes$gd__172$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+<get_StackWalkOfNameScopes>d__172", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Windows.Markup.INameScopeDictionary$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Windows.Markup.INameScopeDictionary$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"));

    $.Field({Static:false, Public:false}, "$lpreviousNameScopeDictionary$g5__1", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Field({Static:false, Public:false}, "$lframe$g5__2", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Windows.Markup.INameScopeDictionary$g.Current", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+<>c__DisplayClass177_0 */ 

(function $l$gc__DisplayClass177_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+<>c__DisplayClass177_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetAllNamesAndValuesInScope$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])])
    );

    $.Field({Static:false, Public:true }, "nameValuePair", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.ObjectWriterContext+<>c__DisplayClass179_0 */ 

(function $l$gc__DisplayClass179_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterContext+<>c__DisplayClass179_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRemoveNameScopeInitializationCompleteSubscriber$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext+NameScopeInitializationCompleteSubscriber")])
    );

    $.Field({Static:false, Public:true }, "handler", $asm07.TypeRef("System.EventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.XamlFrame */ 

(function XamlFrame$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.XamlFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Previous", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Previous", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Field({Static:false, Public:false}, "_previous", $.Type);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "Previous", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.XamlCommonFrame */ 

(function XamlCommonFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };





  function XamlCommonFrame_get_Member () {
    return this.XamlCommonFrame$Member$value;
  }; 


  function XamlCommonFrame_get_XamlType () {
    return this.XamlCommonFrame$XamlType$value;
  }; 



  function XamlCommonFrame_set_Member (value) {
    this.XamlCommonFrame$Member$value = value;
  }; 

  function XamlCommonFrame_set_XamlType (value) {
    this.XamlCommonFrame$XamlType$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlFrame"), 
      Name: "MS.Internal.Xaml.Context.XamlCommonFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Method({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlCommonFrame_get_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.Method({Static:false, Public:true }, "get_XamlType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlCommonFrame_get_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetNamespacePrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_Member", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlCommonFrame_set_Member
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlCommonFrame_set_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetNamespaceByPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "_namespaces", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "XamlCommonFrame$XamlType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlCommonFrame$Member$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "XamlType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "Member", $asm2D.TypeRef("System.Xaml.XamlMember"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.ObjectWriterFrame */ 

(function ObjectWriterFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Windows.Markup.INameScopeDictionary)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };






  function ObjectWriterFrame_get_Collection () {
    return this.ObjectWriterFrame$Collection$value;
  }; 


  function ObjectWriterFrame_get_Instance () {
    return this.ObjectWriterFrame$Instance$value;
  }; 

  function ObjectWriterFrame_get_InstanceRegisteredName () {
    return this.ObjectWriterFrame$InstanceRegisteredName$value;
  }; 







  function ObjectWriterFrame_get_NameScopeDictionary () {
    return this.ObjectWriterFrame$NameScopeDictionary$value;
  }; 

  function ObjectWriterFrame_get_PositionalCtorArgs () {
    return this.ObjectWriterFrame$PositionalCtorArgs$value;
  }; 







  function ObjectWriterFrame_set_Collection (value) {
    this.ObjectWriterFrame$Collection$value = value;
  }; 

  function ObjectWriterFrame_set_Instance (value) {
    this.ObjectWriterFrame$Instance$value = value;
  }; 

  function ObjectWriterFrame_set_InstanceRegisteredName (value) {
    this.ObjectWriterFrame$InstanceRegisteredName$value = value;
  }; 







  function ObjectWriterFrame_set_NameScopeDictionary (value) {
    this.ObjectWriterFrame$NameScopeDictionary$value = value;
  }; 

  function ObjectWriterFrame_set_PositionalCtorArgs (value) {
    this.ObjectWriterFrame$PositionalCtorArgs$value = value;
  }; 






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlCommonFrame"), 
      Name: "MS.Internal.Xaml.Context.ObjectWriterFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.XamlFrame"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedProperties", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]))
    );

    $.Method({Static:false, Public:true }, "get_Collection", 
      JSIL.MethodSignature.Return($.Object), 
      ObjectWriterFrame_get_Collection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_HasPreconstructionPropertyValuesDictionary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Object), 
      ObjectWriterFrame_get_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceRegisteredName", 
      JSIL.MethodSignature.Return($.String), 
      ObjectWriterFrame_get_InstanceRegisteredName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsKeySet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsObjectFromMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPropertyValueSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTypeConvertedObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIsUnconverted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_NameScopeDictionary", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")), 
      ObjectWriterFrame_get_NameScopeDictionary
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PositionalCtorArgs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object])), 
      ObjectWriterFrame_get_PositionalCtorArgs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PreconstructionPropertyValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldNotConvertChildKeys", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WasAssignedAtCreation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame+ObjectWriterFrameFlags")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_Collection", 
      JSIL.MethodSignature.Action($.Object), 
      ObjectWriterFrame_set_Collection
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Instance", 
      JSIL.MethodSignature.Action($.Object), 
      ObjectWriterFrame_set_Instance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InstanceRegisteredName", 
      JSIL.MethodSignature.Action($.String), 
      ObjectWriterFrame_set_InstanceRegisteredName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsKeySet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsObjectFromMember", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsPropertyValueSet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsTypeConvertedObject", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Key", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIsUnconverted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_NameScopeDictionary", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary")), 
      ObjectWriterFrame_set_NameScopeDictionary
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PositionalCtorArgs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object])), 
      ObjectWriterFrame_set_PositionalCtorArgs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ShouldConvertChildKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ShouldNotConvertChildKeys", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WasAssignedAtCreation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame+ObjectWriterFrameFlags"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_flags", $asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterFrame+ObjectWriterFrameFlags"));

    $.Field({Static:false, Public:false}, "_preconstructionPropertyValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]));

    $.Field({Static:false, Public:false}, "_assignedProperties", $asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));

    $.Field({Static:false, Public:false}, "_key", $.Object);

    $.Field({Static:false, Public:false}, "ObjectWriterFrame$Instance$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterFrame$Collection$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterFrame$NameScopeDictionary$value", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterFrame$PositionalCtorArgs$value", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ObjectWriterFrame$InstanceRegisteredName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Instance", $.Object);

    $.Property({Static:false, Public:true }, "Collection", $.Object);

    $.Property({Static:false, Public:true }, "WasAssignedAtCreation", $.Boolean);

    $.Property({Static:false, Public:true }, "IsObjectFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPropertyValueSet", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKeySet", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTypeConvertedObject", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyIsUnconverted", $.Boolean);

    $.Property({Static:false, Public:true }, "ShouldConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "ShouldNotConvertChildKeys", $.Boolean);

    $.Property({Static:false, Public:true }, "NameScopeDictionary", $asm2D.TypeRef("System.Windows.Markup.INameScopeDictionary"));

    $.Property({Static:false, Public:true }, "PositionalCtorArgs", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "Key", $.Object);

    $.Property({Static:false, Public:true }, "InstanceRegisteredName", $.String);

    $.Property({Static:false, Public:true }, "PreconstructionPropertyValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm2D.TypeRef("System.Xaml.XamlMember"), $.Object]));

    $.Property({Static:false, Public:true }, "HasPreconstructionPropertyValuesDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "AssignedProperties", $asm2D.TypeRef("System.Xaml.Context.HashSet`1", [$asm2D.TypeRef("System.Xaml.XamlMember")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* enum MS.Internal.Xaml.Context.ObjectWriterFrame+ObjectWriterFrameFlags */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Context.ObjectWriterFrame+ObjectWriterFrameFlags", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    WasAssignedAtCreation: 1, 
    IsObjectFromMember: 2, 
    IsPropertyValueSet: 4, 
    IsKeySet: 8, 
    IsTypeConvertedObject: 16, 
    KeyIsUnconverted: 32, 
    ShouldConvertChildKeys: 64, 
    ShouldNotConvertChildKeys: 128, 
  }
);

/* class MS.Internal.Xaml.Context.XamlContextStack`1 */ 

(function XamlContextStack$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.XamlContextStack`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Func`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$.GenericParameter("T")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentFrame", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Frames", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreviousFrame", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreviousPreviousFrame", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFrame", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PopScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShowFrame", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_depth", $.Int32);

    $.Field({Static:false, Public:false}, "_currentFrame", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_recycledFrame", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "_creationDelegate", $asm07.TypeRef("System.Func`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "CurrentFrame", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "PreviousFrame", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "PreviousPreviousFrame", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "Frames", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.XamlParserContext */ 

(function XamlParserContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Func$b2.Of($asm07.System.String, $asm07.System.String))) ();
  };







  function XamlParserContext_get_AllowProtectedMembersOnRoot () {
    return this.XamlParserContext$AllowProtectedMembersOnRoot$value;
  }; 

















  function XamlParserContext_get_XmlNamespaceResolver () {
    return this.XamlParserContext$XmlNamespaceResolver$value;
  }; 







  function XamlParserContext_set_AllowProtectedMembersOnRoot (value) {
    this.XamlParserContext$AllowProtectedMembersOnRoot$value = value;
  }; 













  function XamlParserContext_set_XmlNamespaceResolver (value) {
    this.XamlParserContext$XmlNamespaceResolver$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.XamlContext"), 
      Name: "MS.Internal.Xaml.Context.XamlParserContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlSchemaContext"), $asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespacePrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CurrentMemberIsWriteVisible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindNamespaceByPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindNamespaceByPrefixInParseStack", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Method({Static:false, Public:true }, "get_AllowProtectedMembersOnRoot", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlParserContext_get_AllowProtectedMembersOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentArgCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentBracketModeParseParameters", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentEscapeCharacterMapForMarkupExtension", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentForcedToUseConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInCollectionFromMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInContainerDirective", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInImplicitArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInInitProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInItemsProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentInUnknownContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLongestConstructorOfMarkupExtension", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentPreviousChildType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentTypeIsRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentTypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_XmlNamespaceResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Func`2", [$.String, $.String])), 
      XamlParserContext_get_XmlNamespaceResolver
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacePrefixes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Context.XamlParserContext_$lGetNamespacePrefixes$gd__14.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "InitBracketCharacterCacheForType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitLongestConstructor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_AllowProtectedMembersOnRoot", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlParserContext_set_AllowProtectedMembersOnRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentArgCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentBracketModeParseParameters", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentEscapeCharacterMapForMarkupExtension", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentForcedToUseConstructor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentInCollectionFromMember", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentInContainerDirective", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentInImplicitArray", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CurrentLongestConstructorOfMarkupExtension", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentMember", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentPreviousChildType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentTypeNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_XmlNamespaceResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Func`2", [$.String, $.String])), 
      XamlParserContext_set_XmlNamespaceResolver
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_stack", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlContextStack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserFrame")]));

    $.Field({Static:false, Public:false}, "_prescopeNamespaces", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "XamlParserContext$AllowProtectedMembersOnRoot$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserContext$XmlNamespaceResolver$value", $asm07.TypeRef("System.Func`2", [$.String, $.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AllowProtectedMembersOnRoot", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlNamespaceResolver", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "CurrentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "CurrentBracketModeParseParameters", $asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters"));

    $.Property({Static:false, Public:false}, "CurrentLongestConstructorOfMarkupExtension", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:false}, "CurrentEscapeCharacterMapForMarkupExtension", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]));

    $.Property({Static:false, Public:true }, "CurrentTypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "CurrentInContainerDirective", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentMember", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "CurrentArgCount", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentForcedToUseConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentInItemsProperty", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentInInitProperty", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentInUnknownContent", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentInImplicitArray", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentInCollectionFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentPreviousChildType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "CurrentTypeIsRoot", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.XamlParserContext+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.XamlParserContext+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__10_0", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserFrame"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__10_0", $asm07.TypeRef("System.Func`1", [$asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserFrame")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.XamlParserContext+<GetNamespacePrefixes>d__14 */ 

(function $lGetNamespacePrefixes$gd__14$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.XamlParserContext+<GetNamespacePrefixes>d__14", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.NamespaceDeclaration$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.NamespaceDeclaration$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.NamespaceDeclaration"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "$lkeys$g5__1", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "$lframe$g5__2", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserFrame"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap2", $asm07.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.String, $.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.NamespaceDeclaration$g.Current", $asm2D.TypeRef("System.Xaml.NamespaceDeclaration"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Context.XamlParserFrame */ 

(function XamlParserFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Parser.BracketModeParseParameters)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm2D.MS.Internal.Xaml.Parser.SpecialBracketCharacters))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };



  function XamlParserFrame_get_BracketModeParseParameters () {
    return this.XamlParserFrame$BracketModeParseParameters$value;
  }; 

  function XamlParserFrame_get_CtorArgCount () {
    return this.XamlParserFrame$CtorArgCount$value;
  }; 

  function XamlParserFrame_get_EscapeCharacterMapForMarkupExtension () {
    return this.XamlParserFrame$EscapeCharacterMapForMarkupExtension$value;
  }; 

  function XamlParserFrame_get_ForcedToUseConstructor () {
    return this.XamlParserFrame$ForcedToUseConstructor$value;
  }; 

  function XamlParserFrame_get_InCollectionFromMember () {
    return this.XamlParserFrame$InCollectionFromMember$value;
  }; 

  function XamlParserFrame_get_InContainerDirective () {
    return this.XamlParserFrame$InContainerDirective$value;
  }; 

  function XamlParserFrame_get_InImplicitArray () {
    return this.XamlParserFrame$InImplicitArray$value;
  }; 

  function XamlParserFrame_get_LongestConstructorOfCurrentMarkupExtensionType () {
    return this.XamlParserFrame$LongestConstructorOfCurrentMarkupExtensionType$value;
  }; 

  function XamlParserFrame_get_PreviousChildType () {
    return this.XamlParserFrame$PreviousChildType$value;
  }; 

  function XamlParserFrame_get_TypeNamespace () {
    return this.XamlParserFrame$TypeNamespace$value;
  }; 


  function XamlParserFrame_set_BracketModeParseParameters (value) {
    this.XamlParserFrame$BracketModeParseParameters$value = value;
  }; 

  function XamlParserFrame_set_CtorArgCount (value) {
    this.XamlParserFrame$CtorArgCount$value = (value | 0);
  }; 

  function XamlParserFrame_set_EscapeCharacterMapForMarkupExtension (value) {
    this.XamlParserFrame$EscapeCharacterMapForMarkupExtension$value = value;
  }; 

  function XamlParserFrame_set_ForcedToUseConstructor (value) {
    this.XamlParserFrame$ForcedToUseConstructor$value = value;
  }; 

  function XamlParserFrame_set_InCollectionFromMember (value) {
    this.XamlParserFrame$InCollectionFromMember$value = value;
  }; 

  function XamlParserFrame_set_InContainerDirective (value) {
    this.XamlParserFrame$InContainerDirective$value = value;
  }; 

  function XamlParserFrame_set_InImplicitArray (value) {
    this.XamlParserFrame$InImplicitArray$value = value;
  }; 

  function XamlParserFrame_set_LongestConstructorOfCurrentMarkupExtensionType (value) {
    this.XamlParserFrame$LongestConstructorOfCurrentMarkupExtensionType$value = value;
  }; 

  function XamlParserFrame_set_PreviousChildType (value) {
    this.XamlParserFrame$PreviousChildType$value = value;
  }; 

  function XamlParserFrame_set_TypeNamespace (value) {
    this.XamlParserFrame$TypeNamespace$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlCommonFrame"), 
      Name: "MS.Internal.Xaml.Context.XamlParserFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_BracketModeParseParameters", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters")), 
      XamlParserFrame_get_BracketModeParseParameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CtorArgCount", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlParserFrame_get_CtorArgCount
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_EscapeCharacterMapForMarkupExtension", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")])), 
      XamlParserFrame_get_EscapeCharacterMapForMarkupExtension
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ForcedToUseConstructor", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlParserFrame_get_ForcedToUseConstructor
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InCollectionFromMember", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlParserFrame_get_InCollectionFromMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InContainerDirective", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlParserFrame_get_InContainerDirective
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InImplicitArray", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlParserFrame_get_InImplicitArray
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LongestConstructorOfCurrentMarkupExtensionType", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])), 
      XamlParserFrame_get_LongestConstructorOfCurrentMarkupExtensionType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreviousChildType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlParserFrame_get_PreviousChildType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TypeNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XamlParserFrame_get_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "set_BracketModeParseParameters", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters")), 
      XamlParserFrame_set_BracketModeParseParameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CtorArgCount", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlParserFrame_set_CtorArgCount
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EscapeCharacterMapForMarkupExtension", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")])), 
      XamlParserFrame_set_EscapeCharacterMapForMarkupExtension
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ForcedToUseConstructor", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlParserFrame_set_ForcedToUseConstructor
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InCollectionFromMember", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlParserFrame_set_InCollectionFromMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InContainerDirective", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlParserFrame_set_InContainerDirective
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InImplicitArray", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlParserFrame_set_InImplicitArray
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LongestConstructorOfCurrentMarkupExtensionType", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])), 
      XamlParserFrame_set_LongestConstructorOfCurrentMarkupExtensionType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreviousChildType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlParserFrame_set_PreviousChildType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TypeNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XamlParserFrame_set_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$PreviousChildType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$CtorArgCount$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$ForcedToUseConstructor$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$InCollectionFromMember$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$InImplicitArray$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$InContainerDirective$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$TypeNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$LongestConstructorOfCurrentMarkupExtensionType$value", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$EscapeCharacterMapForMarkupExtension$value", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlParserFrame$BracketModeParseParameters$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "PreviousChildType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "CtorArgCount", $.Int32);

    $.Property({Static:false, Public:true }, "ForcedToUseConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "InCollectionFromMember", $.Boolean);

    $.Property({Static:false, Public:true }, "InImplicitArray", $.Boolean);

    $.Property({Static:false, Public:true }, "InContainerDirective", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "LongestConstructorOfCurrentMarkupExtensionType", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true }, "EscapeCharacterMapForMarkupExtension", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters")]));

    $.Property({Static:false, Public:true }, "BracketModeParseParameters", $asm2D.TypeRef("MS.Internal.Xaml.Parser.BracketModeParseParameters"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Context.XamlObjectWriterFactory */ 

(function XamlObjectWriterFactory$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Context.XamlObjectWriterFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.ObjectWriterContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParentSettings", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlObjectWriter", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlObjectWriter"), [$asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings")])
    );

    $.Field({Static:false, Public:false}, "_savedContext", $asm2D.TypeRef("System.Xaml.XamlSavedContext"));

    $.Field({Static:false, Public:false}, "_parentSettings", $asm2D.TypeRef("System.Xaml.XamlObjectWriterSettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Xaml.IXamlObjectWriterFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MS.Internal.Xaml.Parser");
/* class MS.Internal.Xaml.Parser.SpecialBracketCharacters */ 

(function SpecialBracketCharacters$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.SpecialBracketCharacters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBracketCharacters", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndInit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndsEscapeSequence", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndBracketCharacters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StartBracketCharacters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSpecialCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidBracketCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartsEscapeSequence", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "Tokenize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IReadOnlyDictionary`2", [$.Char, $.Char]))
    );

    $.Field({Static:false, Public:false}, "_startChars", $.String);

    $.Field({Static:false, Public:false}, "_endChars", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_restrictedCharSet", $asm0A.TypeRef("System.Collections.Generic.ISet`1", [$.Char]));

    $.Field({Static:false, Public:false}, "_initializing", $.Boolean);

    $.Field({Static:false, Public:false}, "_startCharactersStringBuilder", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "_endCharactersStringBuilder", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:false}, "StartBracketCharacters", $.String);

    $.Property({Static:false, Public:false}, "EndBracketCharacters", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.ISupportInitialize")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.NamespacePrefixLookup */ 

(function NamespacePrefixLookup$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.NamespacePrefixLookup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")])]), $asm07.TypeRef("System.Func`2", [$.String, $.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newNamespaces", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nsResolver", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "n", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm2D.TypeRef("System.Xaml.INamespacePrefixLookup")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.GenericTypeNameParser */ 

(function GenericTypeNameParser$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.GenericTypeNameParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Func`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Callout_EndOfType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Callout_FoundName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Callout_Subscript", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectNameFromStack", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectNameListFromStack", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "P_NameListExt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_RepeatingSubscript", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_SimpleTypeName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_TypeParameters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_XamlTypeName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_XamlTypeNameList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseIfTrivalName", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"), [
          $.String, $asm07.TypeRef("System.Func`2", [$.String, $.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")]), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseName", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnBadInput", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_scanner", $asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScanner"));

    $.Field({Static:false, Public:false}, "_inputText", $.String);

    $.Field({Static:false, Public:false}, "_prefixResolver", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "_stack", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.TypeNameFrame")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.GenericTypeNameParser+TypeNameParserException */ 

(function TypeNameParserException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "MS.Internal.Xaml.Parser.GenericTypeNameParser+TypeNameParserException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.TypeNameFrame */ 

(function TypeNameFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };




  function TypeNameFrame_get_Name () {
    return this.TypeNameFrame$Name$value;
  }; 

  function TypeNameFrame_get_Namespace () {
    return this.TypeNameFrame$Namespace$value;
  }; 


  function TypeNameFrame_set_Name (value) {
    this.TypeNameFrame$Name$value = value;
  }; 

  function TypeNameFrame_set_Namespace (value) {
    this.TypeNameFrame$Namespace$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.TypeNameFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AllocateTypeArgs", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      TypeNameFrame_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String), 
      TypeNameFrame_get_Namespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TypeArgs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")]))
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      TypeNameFrame_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String), 
      TypeNameFrame_set_Namespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_typeArgs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")]));

    $.Field({Static:false, Public:false}, "TypeNameFrame$Namespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TypeNameFrame$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "TypeArgs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.Schema.XamlTypeName")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xaml.Parser.GenericTypeNameScannerToken */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.GenericTypeNameScannerToken", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NONE: 0, 
    ERROR: 1, 
    OPEN: 2, 
    CLOSE: 3, 
    COLON: 4, 
    COMMA: 5, 
    SUBSCRIPT: 6, 
    NAME: 7, 
  }
);

/* class MS.Internal.Xaml.Parser.Sample_StringParserBase */ 

(function Sample_StringParserBase$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.Sample_StringParserBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceOverWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAtEndOfInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespaceChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.Constant({Static:true , Public:false}, "NullChar", $.Char, "\x00");

    $.Field({Static:false, Public:false}, "_inputText", $.String);

    $.Field({Static:false, Public:false}, "_idx", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentChar", $.Char);

    $.Property({Static:false, Public:true }, "IsAtEndOfInput", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.GenericTypeNameScanner */ 

(function GenericTypeNameScanner$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Parser.Sample_StringParserBase"), 
      Name: "MS.Internal.Xaml.Parser.GenericTypeNameScanner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToMultiCharToken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectMultiCharToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCurrentChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MultiCharTokenText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScannerToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSubscriptSegment", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartMultiCharToken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "State_InName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "State_InSubscript", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "State_Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StripSubscript", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Constant({Static:true , Public:true }, "Space", $.Char, " ");

    $.Constant({Static:true , Public:true }, "OpenParen", $.Char, "(");

    $.Constant({Static:true , Public:true }, "CloseParen", $.Char, ")");

    $.Constant({Static:true , Public:true }, "Comma", $.Char, ",");

    $.Constant({Static:true , Public:true }, "OpenBracket", $.Char, "[");

    $.Constant({Static:true , Public:true }, "CloseBracket", $.Char, "]");

    $.Constant({Static:true , Public:true }, "Colon", $.Char, ":");

    $.Field({Static:false, Public:false}, "_token", $asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScannerToken"));

    $.Field({Static:false, Public:false}, "_tokenText", $.String);

    $.Field({Static:false, Public:false}, "_state", $asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScanner+State"));

    $.Field({Static:false, Public:false}, "_pushedBackSymbol", $asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScannerToken"));

    $.Field({Static:false, Public:false}, "_multiCharTokenStartIdx", $.Int32);

    $.Field({Static:false, Public:false}, "_multiCharTokenLength", $.Int32);

    $.Field({Static:false, Public:false}, "_lastChar", $.Char);

    $.Property({Static:false, Public:true }, "Token", $asm2D.TypeRef("MS.Internal.Xaml.Parser.GenericTypeNameScannerToken"));

    $.Property({Static:false, Public:true }, "MultiCharTokenText", $.String);

    $.Property({Static:false, Public:true }, "ErrorCurrentChar", $.Char);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xaml.Parser.GenericTypeNameScanner+State */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.GenericTypeNameScanner+State", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    START: 0, 
    INNAME: 1, 
    INSUBSCRIPT: 2, 
  }
);

/* class MS.Internal.Xaml.Parser.MePullParser */ 

(function MePullParser$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Expect", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MeTokenType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndObject", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndPositionalParameters", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartElement", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartPositionalParameters", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_Text", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "P_Arguments", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_Arguments$gd__10.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "P_MarkupExtension", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_MarkupExtension$gd__9.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "P_NamedArg", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_NamedArg$gd__14.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "P_NamedArgs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_NamedArgs$gd__12.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "P_PositionalArgs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_PositionalArgs$gd__11.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "P_Value", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lP_Value$gd__13.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), [
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.MePullParser_$lParse$gd__6.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBrokenRuleString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_originalText", $.String);

    $.Field({Static:false, Public:false}, "_tokenizer", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MeScanner"));

    $.Field({Static:false, Public:false}, "_brokenRule", $.String);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.MePullParser+Found */ 

(function Found$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+Found", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "found", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{found}"]; });

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<Parse>d__6 */ 

(function $lParse$gd__6$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<Parse>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__text", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "$lf$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_MarkupExtension>d__9 */ 

(function $lP_MarkupExtension$gd__9$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_MarkupExtension>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_Arguments>d__10 */ 

(function $lP_Arguments$gd__10$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_Arguments>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_PositionalArgs>d__11 */ 

(function $lP_PositionalArgs$gd__11$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_PositionalArgs>d__11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf3$g5__2", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_NamedArgs>d__12 */ 

(function $lP_NamedArgs$gd__12$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_NamedArgs>d__12", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_Value>d__13 */ 

(function $lP_Value$gd__13$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_Value>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.MePullParser+<P_NamedArg>d__14 */ 

(function $lP_NamedArg$gd__14$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MePullParser+<P_NamedArg>d__14", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser"));

    $.Field({Static:false, Public:false}, "f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:true }, "$l$g3__f", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$lf2$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MePullParser+Found"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum MS.Internal.Xaml.Parser.MeTokenType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.MeTokenType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Comma: 44, 
    TypeName: 45, 
    PropertyName: 46, 
    String: 47, 
    QuotedMarkupExtension: 48, 
    EqualSign: 61, 
    Open: 123, 
    Close: 125, 
  }
);

/* class MS.Internal.Xaml.Parser.MeScanner */ 

(function MeScanner$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.MeScanner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceOverWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasTrailingWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAtEndOfInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.MeTokenType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBracketCharacterForProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespaceChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushBack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveEscapes", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePropertyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:true }, "Space", $.Char, " ");

    $.Constant({Static:true , Public:true }, "OpenCurlie", $.Char, "{");

    $.Constant({Static:true , Public:true }, "CloseCurlie", $.Char, "}");

    $.Constant({Static:true , Public:true }, "Comma", $.Char, ",");

    $.Constant({Static:true , Public:true }, "EqualSign", $.Char, "=");

    $.Constant({Static:true , Public:true }, "Quote1", $.Char, "'");

    $.Constant({Static:true , Public:true }, "Quote2", $.Char, "\"");

    $.Constant({Static:true , Public:true }, "Backslash", $.Char, "\\");

    $.Constant({Static:true , Public:true }, "NullChar", $.Char, "\x00");

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_inputText", $.String);

    $.Field({Static:false, Public:false}, "_idx", $.Int32);

    $.Field({Static:false, Public:false}, "_token", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MeTokenType"));

    $.Field({Static:false, Public:false}, "_tokenXamlType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "_tokenProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "_tokenNamespace", $.String);

    $.Field({Static:false, Public:false}, "_tokenText", $.String);

    $.Field({Static:false, Public:false}, "_state", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MeScanner+StringState"));

    $.Field({Static:false, Public:false}, "_hasTrailingWhitespace", $.Boolean);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_startPosition", $.Int32);

    $.Field({Static:false, Public:false}, "_currentParameterName", $.String);

    $.Field({Static:false, Public:false}, "_currentSpecialBracketCharacters", $asm2D.TypeRef("MS.Internal.Xaml.Parser.SpecialBracketCharacters"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Token", $asm2D.TypeRef("MS.Internal.Xaml.Parser.MeTokenType"));

    $.Property({Static:false, Public:true }, "TokenType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "TokenProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "TokenText", $.String);

    $.Property({Static:false, Public:true }, "IsAtEndOfInput", $.Boolean);

    $.Property({Static:false, Public:true }, "HasTrailingWhitespace", $.Boolean);

    $.Property({Static:false, Public:false}, "CurrentChar", $.Char);

    $.Property({Static:false, Public:false}, "NextChar", $.Char);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xaml.Parser.MeScanner+StringState */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.MeScanner+StringState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Value: 0, 
    Type: 1, 
    Property: 2, 
  }
);

/* class MS.Internal.Xaml.Parser.BracketModeParseParameters */ 

(function BracketModeParseParameters$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Collections.Generic.Stack$b1.Of($asm07.System.Char))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function BracketModeParseParameters_get_BracketCharacterStack () {
    return this.BracketModeParseParameters$BracketCharacterStack$value;
  }; 

  function BracketModeParseParameters_get_CurrentConstructorParam () {
    return this.BracketModeParseParameters$CurrentConstructorParam$value;
  }; 

  function BracketModeParseParameters_get_IsBracketEscapeMode () {
    return this.BracketModeParseParameters$IsBracketEscapeMode$value;
  }; 

  function BracketModeParseParameters_get_IsConstructorParsingMode () {
    return this.BracketModeParseParameters$IsConstructorParsingMode$value;
  }; 

  function BracketModeParseParameters_get_MaxConstructorParams () {
    return this.BracketModeParseParameters$MaxConstructorParams$value;
  }; 

  function BracketModeParseParameters_set_BracketCharacterStack (value) {
    this.BracketModeParseParameters$BracketCharacterStack$value = value;
  }; 

  function BracketModeParseParameters_set_CurrentConstructorParam (value) {
    this.BracketModeParseParameters$CurrentConstructorParam$value = (value | 0);
  }; 

  function BracketModeParseParameters_set_IsBracketEscapeMode (value) {
    this.BracketModeParseParameters$IsBracketEscapeMode$value = value;
  }; 

  function BracketModeParseParameters_set_IsConstructorParsingMode (value) {
    this.BracketModeParseParameters$IsConstructorParsingMode$value = value;
  }; 

  function BracketModeParseParameters_set_MaxConstructorParams (value) {
    this.BracketModeParseParameters$MaxConstructorParams$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.BracketModeParseParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"))
    );

    $.Method({Static:false, Public:false}, "get_BracketCharacterStack", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.Stack`1", [$.Char])), 
      BracketModeParseParameters_get_BracketCharacterStack
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_CurrentConstructorParam", 
      JSIL.MethodSignature.Return($.Int32), 
      BracketModeParseParameters_get_CurrentConstructorParam
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_IsBracketEscapeMode", 
      JSIL.MethodSignature.Return($.Boolean), 
      BracketModeParseParameters_get_IsBracketEscapeMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_IsConstructorParsingMode", 
      JSIL.MethodSignature.Return($.Boolean), 
      BracketModeParseParameters_get_IsConstructorParsingMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_MaxConstructorParams", 
      JSIL.MethodSignature.Return($.Int32), 
      BracketModeParseParameters_get_MaxConstructorParams
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BracketCharacterStack", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.Stack`1", [$.Char])), 
      BracketModeParseParameters_set_BracketCharacterStack
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CurrentConstructorParam", 
      JSIL.MethodSignature.Action($.Int32), 
      BracketModeParseParameters_set_CurrentConstructorParam
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsBracketEscapeMode", 
      JSIL.MethodSignature.Action($.Boolean), 
      BracketModeParseParameters_set_IsBracketEscapeMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsConstructorParsingMode", 
      JSIL.MethodSignature.Action($.Boolean), 
      BracketModeParseParameters_set_IsConstructorParsingMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MaxConstructorParams", 
      JSIL.MethodSignature.Action($.Int32), 
      BracketModeParseParameters_set_MaxConstructorParams
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BracketModeParseParameters$CurrentConstructorParam$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BracketModeParseParameters$MaxConstructorParams$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BracketModeParseParameters$IsConstructorParsingMode$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BracketModeParseParameters$IsBracketEscapeMode$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BracketModeParseParameters$BracketCharacterStack$value", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$.Char]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "CurrentConstructorParam", $.Int32);

    $.Property({Static:false, Public:false}, "MaxConstructorParams", $.Int32);

    $.Property({Static:false, Public:false}, "IsConstructorParsingMode", $.Boolean);

    $.Property({Static:false, Public:false}, "IsBracketEscapeMode", $.Boolean);

    $.Property({Static:false, Public:false}, "BracketCharacterStack", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xaml.Parser.ScannerNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.ScannerNodeType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NONE: 0, 
    ELEMENT: 1, 
    EMPTYELEMENT: 2, 
    ATTRIBUTE: 3, 
    DIRECTIVE: 4, 
    PREFIXDEFINITION: 5, 
    PROPERTYELEMENT: 6, 
    EMPTYPROPERTYELEMENT: 7, 
    TEXT: 8, 
    ENDTAG: 9, 
  }
);

/* enum MS.Internal.Xaml.Parser.ScannerAttributeKind */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xaml.Parser.ScannerAttributeKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Namespace: 0, 
    CtorDirective: 1, 
    Name: 2, 
    Directive: 3, 
    XmlSpace: 4, 
    Event: 5, 
    Property: 6, 
    AttachableProperty: 7, 
    Unknown: 8, 
  }
);

/* class MS.Internal.Xaml.Parser.XamlAttribute */ 

(function XamlAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Parser.ScannerAttributeKind)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Parser.XamlPropertyName)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.String)) ();
  };




  function XamlAttribute_get_Kind () {
    return this.XamlAttribute$Kind$value;
  }; 

  function XamlAttribute_get_LineNumber () {
    return this.XamlAttribute$LineNumber$value;
  }; 

  function XamlAttribute_get_LinePosition () {
    return this.XamlAttribute$LinePosition$value;
  }; 

  function XamlAttribute_get_Name () {
    return this.XamlAttribute$Name$value;
  }; 

  function XamlAttribute_get_Property () {
    return this.XamlAttribute$Property$value;
  }; 

  function XamlAttribute_get_Value () {
    return this.XamlAttribute$Value$value;
  }; 





  function XamlAttribute_set_Kind (value) {
    this.XamlAttribute$Kind$value = value;
  }; 

  function XamlAttribute_set_LineNumber (value) {
    this.XamlAttribute$LineNumber$value = (value | 0);
  }; 

  function XamlAttribute_set_LinePosition (value) {
    this.XamlAttribute$LinePosition$value = (value | 0);
  }; 

  function XamlAttribute_set_Name (value) {
    this.XamlAttribute$Name$value = value;
  }; 

  function XamlAttribute_set_Property (value) {
    this.XamlAttribute$Property$value = value;
  }; 

  function XamlAttribute_set_Value (value) {
    this.XamlAttribute$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), $.String, 
          $asm2F.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIsXmlNamespaceDefinition", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Method({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerAttributeKind")), 
      XamlAttribute_get_Kind
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlAttribute_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlAttribute_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName")), 
      XamlAttribute_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Property", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlAttribute_get_Property
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String), 
      XamlAttribute_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_XmlNsPrefixDefined", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlNsUriDefined", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlAttributeProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlMember"), [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), 
          $asm2D.TypeRef("System.Xaml.XamlType"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.String, $.Boolean
        ])
    );

    $.Method({Static:false, Public:false}, "set_Kind", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerAttributeKind")), 
      XamlAttribute_set_Kind
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlAttribute_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlAttribute_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName")), 
      XamlAttribute_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Property", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlAttribute_set_Property
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.String), 
      XamlAttribute_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_xmlnsDefinitionPrefix", $.String);

    $.Field({Static:false, Public:false}, "_xmlnsDefinitionUri", $.String);

    $.Field({Static:false, Public:false}, "XamlAttribute$Name$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAttribute$Value$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAttribute$Kind$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerAttributeKind"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAttribute$Property$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAttribute$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlAttribute$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Name", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"));

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Kind", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerAttributeKind"));

    $.Property({Static:false, Public:true }, "Property", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "XmlNsPrefixDefined", $.String);

    $.Property({Static:false, Public:true }, "XmlNsUriDefined", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{Name.ScopedName}='{Value}'  {Kind}"]; });

})();

/* class MS.Internal.Xaml.Parser.XamlName */ 

(function XamlName$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };






  function XamlName_get_Name () {
    return this.XamlName$Name$value;
  }; 









  function XamlName_set_Name (value) {
    this.XamlName$Name$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ContainsDot", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      XamlName_get_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ScopedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidNameStartChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidQualifiedNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidQualifiedNameCharPlus", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidXamlName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      XamlName_set_Name
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:true }, "PlusSign", $.Char, "+");

    $.Constant({Static:true , Public:true }, "UnderScore", $.Char, "_");

    $.Constant({Static:true , Public:true }, "Dot", $.Char, ".");

    $.Field({Static:false, Public:false}, "XamlName$Name$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_prefix", $.String);

    $.Field({Static:false, Public:false}, "_namespace", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ScopedName", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlPropertyName */ 

(function XamlPropertyName$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), 
      Name: "MS.Internal.Xaml.Parser.XamlPropertyName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDotted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwnerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ScopedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Owner", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"));

    $.Property({Static:false, Public:true , Virtual:true }, "ScopedName", $.String);

    $.Property({Static:false, Public:true }, "OwnerName", $.String);

    $.Property({Static:false, Public:true }, "IsDotted", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser */ 

(function XamlPullParser$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScanner"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanAcceptString", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayExtensionType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayTypeMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemsTypeMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProvideLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_ApplyFinalTextTrimming", 
      new JSIL.MethodSignature($.String, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndMember", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndObject", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_EndOfAttributes", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_IsDiscardableWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_LineInfo", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_PrefixDefinition", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartContentProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartGetObjectFromMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartInitProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartItemsProperty", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartMember", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlMember")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Logic_StartObject", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlNode"), [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogicStream_Attribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lLogicStream_Attribute$gd__24.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "LogicStream_CheckForStartGetCollectionFromMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lLogicStream_CheckForStartGetCollectionFromMember$gd__43.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_Element", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_Element$gd__5.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_ElementBody", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_ElementBody$gd__8.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_ElementContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_ElementContent$gd__12.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_EmptyElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_EmptyElement$gd__6.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_EmptyPropertyElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_EmptyPropertyElement$gd__10.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_NonemptyPropertyElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_NonemptyPropertyElement$gd__11.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_PropertyContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_PropertyContent$gd__13.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_PropertyElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_PropertyElement$gd__9.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "P_StartElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lP_StartElement$gd__7.__Type__]; });

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm2D.MS.Internal.Xaml.Parser.XamlPullParser_$lParse$gd__4.__Type__]; });

    $.Field({Static:false, Public:false}, "_context", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_xamlScanner", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScanner"));

    $.Field({Static:false, Public:false}, "_settings", $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "arrayType", $asm2D.TypeRef("System.Xaml.Schema.XamlTypeName"));

    $.Field({Static:false, Public:false}, "_arrayExtensionType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "_arrayTypeMember", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "_itemsTypeMember", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "ProvideLineInfo", $.Boolean);

    $.Property({Static:false, Public:false}, "ArrayExtensionType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:false}, "ArrayTypeMember", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:false}, "ItemsTypeMember", $asm2D.TypeRef("System.Xaml.XamlMember"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<Parse>d__4 */ 

(function $lParse$gd__4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<Parse>d__4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_Element>d__5 */ 

(function $lP_Element$gd__5$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_Element>d__5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$lnodeType$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_EmptyElement>d__6 */ 

(function $lP_EmptyElement$gd__6$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_EmptyElement>d__6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_StartElement>d__7 */ 

(function $lP_StartElement$gd__7$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_StartElement>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_ElementBody>d__8 */ 

(function $lP_ElementBody$gd__8$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_ElementBody>d__8", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$lhasContent$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "$ldoneWithElementContent$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_PropertyElement>d__9 */ 

(function $lP_PropertyElement$gd__9$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_PropertyElement>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$lnodeType$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_EmptyPropertyElement>d__10 */ 

(function $lP_EmptyPropertyElement$gd__10$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_EmptyPropertyElement>d__10", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_NonemptyPropertyElement>d__11 */ 

(function $lP_NonemptyPropertyElement$gd__11$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_NonemptyPropertyElement>d__11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$ldoingPropertyContent$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_ElementContent>d__12 */ 

(function $lP_ElementContent$gd__12$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_ElementContent>d__12", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$lsavedPrefixDefinitions$g5__1", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "$lnodeType$g5__2", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Field({Static:false, Public:false}, "$lcurrentType$g5__3", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "$lisContentProperty$g5__4", $.Boolean);

    $.Field({Static:false, Public:false}, "$li$g5__5", $.Int32);

    $.Field({Static:false, Public:false}, "$ltrimmed$g5__6", $.String);

    $.Field({Static:false, Public:false}, "$lisTextInitialization$g5__7", $.Boolean);

    $.Field({Static:false, Public:false}, "$lisXDataText$g5__8", $.Boolean);

    $.Field({Static:false, Public:false}, "$lxDataTextProperty$g5__9", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<P_PropertyContent>d__13 */ 

(function $lP_PropertyContent$gd__13$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<P_PropertyContent>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$ltrimmed$g5__1", $.String);

    $.Field({Static:false, Public:false}, "$l_savedPrefixDefinitions$g5__2", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Field({Static:false, Public:false}, "$lnodeType$g5__3", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Field({Static:false, Public:false}, "$lisTextXML$g5__4", $.Boolean);

    $.Field({Static:false, Public:false}, "$lxDataTextProperty$g5__5", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Field({Static:false, Public:false}, "$li$g5__6", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<LogicStream_Attribute>d__24 */ 

(function $lLogicStream_Attribute$gd__24$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<LogicStream_Attribute>d__24", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$ltext$g5__1", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlPullParser+<LogicStream_CheckForStartGetCollectionFromMember>d__43 */ 

(function $lLogicStream_CheckForStartGetCollectionFromMember$gd__43$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlPullParser+<LogicStream_CheckForStartGetCollectionFromMember>d__43", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xaml.XamlNode$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.get_Current", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlNode"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPullParser"));

    $.Field({Static:false, Public:false}, "$ltypeNameString$g5__1", $.String);

    $.Field({Static:false, Public:false}, "$lvalueElementType$g5__2", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "$lpropertyType$g5__3", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.NamespaceDeclaration")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Xaml.XamlNode$g.Current", $asm2D.TypeRef("System.Xaml.XamlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2D.TypeRef("System.Xaml.XamlNode")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class MS.Internal.Xaml.Parser.XamlUnexpectedParseException */ 

(function XamlUnexpectedParseException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Xaml.XamlParseException"), 
      Name: "MS.Internal.Xaml.Parser.XamlUnexpectedParseException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScanner"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlQualifiedName */ 

(function XamlQualifiedName$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), 
      Name: "MS.Internal.Xaml.Parser.XamlQualifiedName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ScopedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNameValid", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNameValid_WithPlus", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ScopedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlScanner */ 

(function XamlScanner$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlScanner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"), $asm2F.TypeRef("System.Xml.XmlReader"), 
          $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAccumulatedText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateErrorXamlType", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlType"), [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoXmlRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueAnotherAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueAnyText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueuePrefixDefinition", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueTextNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AccumulatedText", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasKeyAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HaveAccumulatedText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HaveUnprocessedAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCtorForcingMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXDataText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PeekNodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PeekType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyAttribute", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyAttributeText", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyElement", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextContent", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXDataElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LineInfo", 
      new JSIL.MethodSignature($asm2D.TypeRef("System.Xaml.XamlException"), [$asm2D.TypeRef("System.Xaml.XamlException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadQueue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PostprocessAttributes", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessForTypeArguments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessCurrentXmlNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInnerXDataSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectElement", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectElement_DirectiveProperty", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlMember"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectElement_NoNamespace", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlName"), $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectElement_Object", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPropertyElement", 
      new JSIL.MethodSignature(null, [
          $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlPropertyName"), $asm2D.TypeRef("System.Xaml.XamlType"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StripUidProperty", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_xmlReader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "_xmlLineInfo", $asm2F.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "_scannerStack", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerStack"));

    $.Field({Static:false, Public:false}, "_parserContext", $asm2D.TypeRef("MS.Internal.Xaml.Context.XamlParserContext"));

    $.Field({Static:false, Public:false}, "_accumulatedText", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Field({Static:false, Public:false}, "_attributes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlAttribute")]));

    $.Field({Static:false, Public:false}, "_nextAttribute", $.Int32);

    $.Field({Static:false, Public:false}, "_currentNode", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode"));

    $.Field({Static:false, Public:false}, "_readNodesQueue", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerNode")]));

    $.Field({Static:false, Public:false}, "_settings", $asm2D.TypeRef("System.Xaml.XamlXmlReaderSettings"));

    $.Field({Static:false, Public:false}, "_typeArgumentAttribute", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlAttribute"));

    $.Field({Static:false, Public:false}, "_hasKeyAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "PeekNodeType", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Property({Static:false, Public:true }, "PeekType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "NodeType", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Property({Static:false, Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "PropertyAttribute", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "PropertyAttributeText", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Property({Static:false, Public:true }, "IsCtorForcingMember", $.Boolean);

    $.Property({Static:false, Public:true }, "PropertyElement", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "TextContent", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Property({Static:false, Public:true }, "IsXDataText", $.Boolean);

    $.Property({Static:false, Public:true }, "HasKeyAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "AccumulatedText", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Property({Static:false, Public:false}, "HaveAccumulatedText", $.Boolean);

    $.Property({Static:false, Public:false}, "HaveUnprocessedAttributes", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlScannerNode */ 

(function XamlScannerNode$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Parser.ScannerNodeType)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm2D.MS.Internal.Xaml.Parser.XamlText)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };




  function XamlScannerNode_get_IsCtorForcingMember () {
    return this.XamlScannerNode$IsCtorForcingMember$value;
  }; 

  function XamlScannerNode_get_IsEmptyTag () {
    return this.XamlScannerNode$IsEmptyTag$value;
  }; 

  function XamlScannerNode_get_IsXDataText () {
    return this.XamlScannerNode$IsXDataText$value;
  }; 

  function XamlScannerNode_get_LineNumber () {
    return this.XamlScannerNode$LineNumber$value;
  }; 

  function XamlScannerNode_get_LinePosition () {
    return this.XamlScannerNode$LinePosition$value;
  }; 

  function XamlScannerNode_get_NodeType () {
    return this.XamlScannerNode$NodeType$value;
  }; 

  function XamlScannerNode_get_Prefix () {
    return this.XamlScannerNode$Prefix$value;
  }; 

  function XamlScannerNode_get_PropertyAttribute () {
    return this.XamlScannerNode$PropertyAttribute$value;
  }; 

  function XamlScannerNode_get_PropertyAttributeText () {
    return this.XamlScannerNode$PropertyAttributeText$value;
  }; 

  function XamlScannerNode_get_PropertyElement () {
    return this.XamlScannerNode$PropertyElement$value;
  }; 

  function XamlScannerNode_get_TextContent () {
    return this.XamlScannerNode$TextContent$value;
  }; 

  function XamlScannerNode_get_Type () {
    return this.XamlScannerNode$Type$value;
  }; 

  function XamlScannerNode_get_TypeNamespace () {
    return this.XamlScannerNode$TypeNamespace$value;
  }; 

  function XamlScannerNode_set_IsCtorForcingMember (value) {
    this.XamlScannerNode$IsCtorForcingMember$value = value;
  }; 

  function XamlScannerNode_set_IsEmptyTag (value) {
    this.XamlScannerNode$IsEmptyTag$value = value;
  }; 

  function XamlScannerNode_set_IsXDataText (value) {
    this.XamlScannerNode$IsXDataText$value = value;
  }; 

  function XamlScannerNode_set_LineNumber (value) {
    this.XamlScannerNode$LineNumber$value = (value | 0);
  }; 

  function XamlScannerNode_set_LinePosition (value) {
    this.XamlScannerNode$LinePosition$value = (value | 0);
  }; 

  function XamlScannerNode_set_NodeType (value) {
    this.XamlScannerNode$NodeType$value = value;
  }; 

  function XamlScannerNode_set_Prefix (value) {
    this.XamlScannerNode$Prefix$value = value;
  }; 

  function XamlScannerNode_set_PropertyAttribute (value) {
    this.XamlScannerNode$PropertyAttribute$value = value;
  }; 

  function XamlScannerNode_set_PropertyAttributeText (value) {
    this.XamlScannerNode$PropertyAttributeText$value = value;
  }; 

  function XamlScannerNode_set_PropertyElement (value) {
    this.XamlScannerNode$PropertyElement$value = value;
  }; 

  function XamlScannerNode_set_TextContent (value) {
    this.XamlScannerNode$TextContent$value = value;
  }; 

  function XamlScannerNode_set_Type (value) {
    this.XamlScannerNode$Type$value = value;
  }; 

  function XamlScannerNode_set_TypeNamespace (value) {
    this.XamlScannerNode$TypeNamespace$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlScannerNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlAttribute"))
    );

    $.Method({Static:false, Public:true }, "get_IsCtorForcingMember", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlScannerNode_get_IsCtorForcingMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsEmptyTag", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlScannerNode_get_IsEmptyTag
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsXDataText", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlScannerNode_get_IsXDataText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlScannerNode_get_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32), 
      XamlScannerNode_get_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType")), 
      XamlScannerNode_get_NodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String), 
      XamlScannerNode_get_Prefix
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PropertyAttribute", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerNode_get_PropertyAttribute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PropertyAttributeText", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")), 
      XamlScannerNode_get_PropertyAttributeText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PropertyElement", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerNode_get_PropertyElement
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TextContent", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")), 
      XamlScannerNode_get_TextContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlScannerNode_get_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TypeNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XamlScannerNode_get_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsCtorForcingMember", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlScannerNode_set_IsCtorForcingMember
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsEmptyTag", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlScannerNode_set_IsEmptyTag
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsXDataText", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlScannerNode_set_IsXDataText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlScannerNode_set_LineNumber
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32), 
      XamlScannerNode_set_LinePosition
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_NodeType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType")), 
      XamlScannerNode_set_NodeType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String), 
      XamlScannerNode_set_Prefix
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PropertyAttribute", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerNode_set_PropertyAttribute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PropertyAttributeText", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")), 
      XamlScannerNode_set_PropertyAttributeText
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PropertyElement", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerNode_set_PropertyElement
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TextContent", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText")), 
      XamlScannerNode_set_TextContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlScannerNode_set_Type
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TypeNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XamlScannerNode_set_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$NodeType$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$Type$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$TypeNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$PropertyAttribute$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$PropertyAttributeText$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$IsCtorForcingMember$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$PropertyElement$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$IsEmptyTag$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$TextContent$value", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$IsXDataText$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$Prefix$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$LineNumber$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerNode$LinePosition$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "NodeType", $asm2D.TypeRef("MS.Internal.Xaml.Parser.ScannerNodeType"));

    $.Property({Static:false, Public:true }, "Type", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "PropertyAttribute", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "PropertyAttributeText", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Property({Static:false, Public:true }, "IsCtorForcingMember", $.Boolean);

    $.Property({Static:false, Public:true }, "PropertyElement", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "IsEmptyTag", $.Boolean);

    $.Property({Static:false, Public:true }, "TextContent", $asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText"));

    $.Property({Static:false, Public:true }, "IsXDataText", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{_nodeType}"]; });

})();

/* class MS.Internal.Xaml.Parser.XamlScannerFrame */ 

(function XamlScannerFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2D.System.Xaml.XamlMember)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2D.System.Xaml.XamlType)) ();
  };



  function XamlScannerFrame_get_InContent () {
    return this.XamlScannerFrame$InContent$value;
  }; 

  function XamlScannerFrame_get_TypeNamespace () {
    return this.XamlScannerFrame$TypeNamespace$value;
  }; 

  function XamlScannerFrame_get_XamlProperty () {
    return this.XamlScannerFrame$XamlProperty$value;
  }; 

  function XamlScannerFrame_get_XamlType () {
    return this.XamlScannerFrame$XamlType$value;
  }; 

  function XamlScannerFrame_get_XmlSpacePreserve () {
    return this.XamlScannerFrame$XmlSpacePreserve$value;
  }; 

  function XamlScannerFrame_set_InContent (value) {
    this.XamlScannerFrame$InContent$value = value;
  }; 

  function XamlScannerFrame_set_TypeNamespace (value) {
    this.XamlScannerFrame$TypeNamespace$value = value;
  }; 

  function XamlScannerFrame_set_XamlProperty (value) {
    this.XamlScannerFrame$XamlProperty$value = value;
  }; 

  function XamlScannerFrame_set_XamlType (value) {
    this.XamlScannerFrame$XamlType$value = value;
  }; 

  function XamlScannerFrame_set_XmlSpacePreserve (value) {
    this.XamlScannerFrame$XmlSpacePreserve$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlScannerFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.Method({Static:false, Public:true }, "get_InContent", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlScannerFrame_get_InContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TypeNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XamlScannerFrame_get_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerFrame_get_XamlProperty
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XamlType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlScannerFrame_get_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XmlSpacePreserve", 
      JSIL.MethodSignature.Return($.Boolean), 
      XamlScannerFrame_get_XmlSpacePreserve
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_InContent", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlScannerFrame_set_InContent
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TypeNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XamlScannerFrame_set_TypeNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember")), 
      XamlScannerFrame_set_XamlProperty
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XamlType", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlType")), 
      XamlScannerFrame_set_XamlType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_XmlSpacePreserve", 
      JSIL.MethodSignature.Action($.Boolean), 
      XamlScannerFrame_set_XmlSpacePreserve
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerFrame$XamlType$value", $asm2D.TypeRef("System.Xaml.XamlType"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerFrame$XamlProperty$value", $asm2D.TypeRef("System.Xaml.XamlMember"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerFrame$XmlSpacePreserve$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerFrame$InContent$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlScannerFrame$TypeNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "XamlType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "XamlProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "XmlSpacePreserve", $.Boolean);

    $.Property({Static:false, Public:true }, "InContent", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlScannerStack */ 

(function XamlScannerStack$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlScannerStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentlyInContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentProperty", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentType", 
      JSIL.MethodSignature.Return($asm2D.TypeRef("System.Xaml.XamlType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentTypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentXmlSpacePreserve", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [$asm2D.TypeRef("System.Xaml.XamlType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentlyInContent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentProperty", 
      JSIL.MethodSignature.Action($asm2D.TypeRef("System.Xaml.XamlMember"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentXmlSpacePreserve", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_stack", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlScannerFrame")]));

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentType", $asm2D.TypeRef("System.Xaml.XamlType"));

    $.Property({Static:false, Public:true }, "CurrentTypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "CurrentProperty", $asm2D.TypeRef("System.Xaml.XamlMember"));

    $.Property({Static:false, Public:true }, "CurrentXmlSpacePreserve", $.Boolean);

    $.Property({Static:false, Public:true }, "CurrentlyInContent", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xaml.Parser.XamlText */ 

(function XamlText$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "MS.Internal.Xaml.Parser.XamlText", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CollapseWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeUnicodeScalarValue", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSpacePreserved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWhiteSpaceOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LooksLikeAMarkupExtension", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasSurroundingEastAsianChars", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEastAsianCodePoint", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespaceChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "Paste", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimLeadingWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimTrailingWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "SPACE", $.Char, " ");

    $.Constant({Static:true , Public:false}, "NEWLINE", $.Char, "\n");

    $.Constant({Static:true , Public:false}, "RETURN", $.Char, "\r");

    $.Constant({Static:true , Public:false}, "TAB", $.Char, "\t");

    $.Constant({Static:true , Public:false}, "OPENCURLIE", $.Char, "{");

    $.Constant({Static:true , Public:false}, "CLOSECURLIE", $.Char, "}");

    $.Constant({Static:true , Public:false}, "ME_ESCAPE", $.String, "{}");

    $.Constant({Static:true , Public:false}, "RETURN_STRING", $.String, "\r");

    $.Field({Static:false, Public:false}, "_sb", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_isSpacePreserve", $.Boolean);

    $.Field({Static:false, Public:false}, "_isWhiteSpaceOnly", $.Boolean);

    $.Field({Static:true , Public:false}, "EastAsianCodePointRanges", $jsilcore.TypeRef("System.Array", [$asm2D.TypeRef("MS.Internal.Xaml.Parser.XamlText+CodePointRange")]));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "AttributeText", $.String);

    $.Property({Static:false, Public:true }, "IsSpacePreserved", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWhiteSpaceOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "LooksLikeAMarkupExtension", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{Text}"]; });

})();

/* struct MS.Internal.Xaml.Parser.XamlText+CodePointRange */ 

(function CodePointRange$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xaml.Parser.XamlText+CodePointRange", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Min", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Max", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MS.Internal.Serialization");
/* class MS.Internal.Serialization.StringValueSerializer */ 

(function StringValueSerializer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
      Name: "MS.Internal.Serialization.StringValueSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFromString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Serialization.TypeConverterValueSerializer */ 

(function TypeConverterValueSerializer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2D.TypeRef("System.Windows.Markup.ValueSerializer"), 
      Name: "MS.Internal.Serialization.TypeConverterValueSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.TypeConverter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFromString", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertToString", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm2D.TypeRef("System.Windows.Markup.IValueSerializerContext")])
    );

    $.Field({Static:false, Public:false}, "converter", $asm0A.TypeRef("System.ComponentModel.TypeConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "E5E4BA5321666674068681065EAFD8B35F68F922", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

