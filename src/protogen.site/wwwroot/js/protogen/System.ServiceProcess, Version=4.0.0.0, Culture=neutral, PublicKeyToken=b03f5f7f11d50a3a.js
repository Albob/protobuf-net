/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm26 = JSIL.DeclareAssembly("System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class SafeServiceHandle */ 

(function SafeServiceHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "SafeServiceHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.ServiceProcess.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.ServiceProcess.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.ServiceProcess.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activeds", $.String, "activeds.dll");

    $.Constant({Static:true , Public:true }, "Advapi32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:true }, "Comctl32", $.String, "comctl32.dll");

    $.Constant({Static:true , Public:true }, "Comdlg32", $.String, "comdlg32.dll");

    $.Constant({Static:true , Public:true }, "Gdi32", $.String, "gdi32.dll");

    $.Constant({Static:true , Public:true }, "Gdiplus", $.String, "gdiplus.dll");

    $.Constant({Static:true , Public:true }, "Hhctrl", $.String, "hhctrl.ocx");

    $.Constant({Static:true , Public:true }, "Imm32", $.String, "imm32.dll");

    $.Constant({Static:true , Public:true }, "Kernel32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:true }, "Loadperf", $.String, "Loadperf.dll");

    $.Constant({Static:true , Public:true }, "Mscoree", $.String, "mscoree.dll");

    $.Constant({Static:true , Public:true }, "Clr", $.String, "clr.dll");

    $.Constant({Static:true , Public:true }, "Msi", $.String, "msi.dll");

    $.Constant({Static:true , Public:true }, "Mqrt", $.String, "mqrt.dll");

    $.Constant({Static:true , Public:true }, "Ntdll", $.String, "ntdll.dll");

    $.Constant({Static:true , Public:true }, "Ole32", $.String, "ole32.dll");

    $.Constant({Static:true , Public:true }, "Oleacc", $.String, "oleacc.dll");

    $.Constant({Static:true , Public:true }, "Oleaut32", $.String, "oleaut32.dll");

    $.Constant({Static:true , Public:true }, "Olepro32", $.String, "olepro32.dll");

    $.Constant({Static:true , Public:true }, "PerfCounter", $.String, "perfcounter.dll");

    $.Constant({Static:true , Public:true }, "Powrprof", $.String, "Powrprof.dll");

    $.Constant({Static:true , Public:true }, "Psapi", $.String, "psapi.dll");

    $.Constant({Static:true , Public:true }, "Shell32", $.String, "shell32.dll");

    $.Constant({Static:true , Public:true }, "User32", $.String, "user32.dll");

    $.Constant({Static:true , Public:true }, "Uxtheme", $.String, "uxtheme.dll");

    $.Constant({Static:true , Public:true }, "WinMM", $.String, "winmm.dll");

    $.Constant({Static:true , Public:true }, "Winspool", $.String, "winspool.drv");

    $.Constant({Static:true , Public:true }, "Wtsapi32", $.String, "wtsapi32.dll");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version.dll");

    $.Constant({Static:true , Public:true }, "Vsassert", $.String, "vsassert.dll");

    $.Constant({Static:true , Public:true }, "Fxassert", $.String, "Fxassert.dll");

    $.Constant({Static:true , Public:true }, "Shlwapi", $.String, "shlwapi.dll");

    $.Constant({Static:true , Public:true }, "Crypt32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:true }, "ShCore", $.String, "SHCore.dll");

    $.Constant({Static:true , Public:false}, "Odbc32", $.String, "odbc32.dll");

    $.Constant({Static:true , Public:false}, "SNI", $.String, "System.Data.dll");

    $.Constant({Static:true , Public:false}, "OciDll", $.String, "oci.dll");

    $.Constant({Static:true , Public:false}, "OraMtsDll", $.String, "oramts.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.HResults */ 

(function HResults$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.HResults", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Configuration", $.Int32, -2146232062);

    $.Constant({Static:true , Public:false}, "Xml", $.Int32, -2146232000);

    $.Constant({Static:true , Public:false}, "XmlSchema", $.Int32, -2146231999);

    $.Constant({Static:true , Public:false}, "XmlXslt", $.Int32, -2146231998);

    $.Constant({Static:true , Public:false}, "XmlXPath", $.Int32, -2146231997);

    $.Constant({Static:true , Public:false}, "Data", $.Int32, -2146232032);

    $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", $.Int32, -2146232031);

    $.Constant({Static:true , Public:false}, "DataDuplicateName", $.Int32, -2146232030);

    $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", $.Int32, -2146232029);

    $.Constant({Static:true , Public:false}, "DataInvalidConstraint", $.Int32, -2146232028);

    $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", $.Int32, -2146232027);

    $.Constant({Static:true , Public:false}, "DataNoNullAllowed", $.Int32, -2146232026);

    $.Constant({Static:true , Public:false}, "DataReadOnly", $.Int32, -2146232025);

    $.Constant({Static:true , Public:false}, "DataRowNotInTable", $.Int32, -2146232024);

    $.Constant({Static:true , Public:false}, "DataVersionNotFound", $.Int32, -2146232023);

    $.Constant({Static:true , Public:false}, "DataConstraint", $.Int32, -2146232022);

    $.Constant({Static:true , Public:false}, "StrongTyping", $.Int32, -2146232021);

    $.Constant({Static:true , Public:false}, "SqlType", $.Int32, -2146232016);

    $.Constant({Static:true , Public:false}, "SqlNullValue", $.Int32, -2146232015);

    $.Constant({Static:true , Public:false}, "SqlTruncate", $.Int32, -2146232014);

    $.Constant({Static:true , Public:false}, "AdapterMapping", $.Int32, -2146232013);

    $.Constant({Static:true , Public:false}, "DataAdapter", $.Int32, -2146232012);

    $.Constant({Static:true , Public:false}, "DBConcurrency", $.Int32, -2146232011);

    $.Constant({Static:true , Public:false}, "OperationAborted", $.Int32, -2146232010);

    $.Constant({Static:true , Public:false}, "InvalidUdt", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "Metadata", $.Int32, -2146232007);

    $.Constant({Static:true , Public:false}, "InvalidQuery", $.Int32, -2146232006);

    $.Constant({Static:true , Public:false}, "CommandCompilation", $.Int32, -2146232005);

    $.Constant({Static:true , Public:false}, "CommandExecution", $.Int32, -2146232004);

    $.Constant({Static:true , Public:false}, "SqlException", $.Int32, -2146232060);

    $.Constant({Static:true , Public:false}, "OdbcException", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "OracleException", $.Int32, -2146232008);

    $.Constant({Static:true , Public:false}, "ConnectionPlanException", $.Int32, -2146232003);

    $.Constant({Static:true , Public:false}, "NteBadKeySet", $.Int32, -2146893802);

    $.Constant({Static:true , Public:false}, "Win32AccessDenied", $.Int32, -2147024891);

    $.Constant({Static:true , Public:false}, "Win32InvalidHandle", $.Int32, -2147024890);

    $.Constant({Static:true , Public:false}, "License", $.Int32, -2146232063);

    $.Constant({Static:true , Public:false}, "InternalBufferOverflow", $.Int32, -2146232059);

    $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", $.Int32, -2146232058);

    $.Constant({Static:true , Public:false}, "Install", $.Int32, -2146232057);

    $.Constant({Static:true , Public:false}, "EFail", $.Int32, -2147467259);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceProcess");
/* class System.ServiceProcess.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.ServiceProcess.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "ChangeServiceConfig2", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_DESCRIPTION")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ChangeServiceConfig2", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_DELAYED_AUTOSTART_INFO")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CreateService", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.String, 
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.String, 
          $.String, $.IntPtr, 
          $.String, $.String, 
          $.String
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DeleteService", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetComputerName", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LookupAccountName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Char]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaAddAccountRights", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm26.TypeRef("System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING"), $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaEnumerateAccountRights", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaOpenPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $asm26.TypeRef("System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING"), $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaRemoveAccountRights", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean, $asm26.TypeRef("System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING"), 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenService", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.String, 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "RegisterServiceCtrlHandler", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $asm07.TypeRef("System.Delegate")]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "RegisterServiceCtrlHandlerEx", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $asm07.TypeRef("System.Delegate"), 
          $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SetServiceStatus", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_STATUS")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "StartServiceCtrlDispatcher", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.Constant({Static:true , Public:true }, "MAX_COMPUTERNAME_LENGTH", $.Int32, 31);

    $.Constant({Static:true , Public:true }, "WM_POWERBROADCAST", $.Int32, 536);

    $.Constant({Static:true , Public:true }, "NO_ERROR", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "BROADCAST_QUERY_DENY", $.Int32, 1112363332);

    $.Constant({Static:true , Public:true }, "PBT_APMBATTERYLOW", $.Int32, 9);

    $.Constant({Static:true , Public:true }, "PBT_APMOEMEVENT", $.Int32, 11);

    $.Constant({Static:true , Public:true }, "PBT_APMPOWERSTATUSCHANGE", $.Int32, 10);

    $.Constant({Static:true , Public:true }, "PBT_APMQUERYSUSPEND", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "PBT_APMQUERYSUSPENDFAILED", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "PBT_APMRESUMEAUTOMATIC", $.Int32, 18);

    $.Constant({Static:true , Public:true }, "PBT_APMRESUMECRITICAL", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "PBT_APMRESUMESUSPEND", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "PBT_APMSUSPEND", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "ERROR_MORE_DATA", $.Int32, 234);

    $.Constant({Static:true , Public:true }, "ERROR_INSUFFICIENT_BUFFER", $.Int32, 122);

    $.Constant({Static:true , Public:true }, "MB_OK", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "MB_OKCANCEL", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "MB_ABORTRETRYIGNORE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "MB_YESNOCANCEL", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "MB_YESNO", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "MB_RETRYCANCEL", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "MB_ICONHAND", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "MB_ICONQUESTION", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "MB_ICONEXCLAMATION", $.Int32, 48);

    $.Constant({Static:true , Public:true }, "MB_ICONASTERISK", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "MB_USERICON", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "MB_ICONWARNING", $.Int32, 48);

    $.Constant({Static:true , Public:true }, "MB_ICONERROR", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "MB_ICONINFORMATION", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "MB_DEFBUTTON1", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "MB_DEFBUTTON2", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "MB_DEFBUTTON3", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "MB_DEFBUTTON4", $.Int32, 768);

    $.Constant({Static:true , Public:true }, "MB_APPLMODAL", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "MB_SYSTEMMODAL", $.Int32, 4096);

    $.Constant({Static:true , Public:true }, "MB_TASKMODAL", $.Int32, 8192);

    $.Constant({Static:true , Public:true }, "MB_HELP", $.Int32, 16384);

    $.Constant({Static:true , Public:true }, "MB_NOFOCUS", $.Int32, 32768);

    $.Constant({Static:true , Public:true }, "MB_SETFOREGROUND", $.Int32, 65536);

    $.Constant({Static:true , Public:true }, "MB_DEFAULT_DESKTOP_ONLY", $.Int32, 131072);

    $.Constant({Static:true , Public:true }, "MB_TOPMOST", $.Int32, 262144);

    $.Constant({Static:true , Public:true }, "MB_RIGHT", $.Int32, 524288);

    $.Constant({Static:true , Public:true }, "MB_RTLREADING", $.Int32, 1048576);

    $.Constant({Static:true , Public:true }, "MB_SERVICE_NOTIFICATION", $.Int32, 2097152);

    $.Constant({Static:true , Public:true }, "MB_SERVICE_NOTIFICATION_NT3X", $.Int32, 262144);

    $.Constant({Static:true , Public:true }, "MB_TYPEMASK", $.Int32, 15);

    $.Constant({Static:true , Public:true }, "MB_ICONMASK", $.Int32, 240);

    $.Constant({Static:true , Public:true }, "MB_DEFMASK", $.Int32, 3840);

    $.Constant({Static:true , Public:true }, "MB_MODEMASK", $.Int32, 12288);

    $.Constant({Static:true , Public:true }, "MB_MISCMASK", $.Int32, 49152);

    $.Constant({Static:true , Public:true }, "STANDARD_RIGHTS_DELETE", $.Int32, 65536);

    $.Constant({Static:true , Public:true }, "STANDARD_RIGHTS_REQUIRED", $.Int32, 983040);

    $.Constant({Static:true , Public:true }, "SERVICE_NO_CHANGE", $.Int32, -1);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_CHANGE_CONFIG", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_ENUMERATE_DEPENDENTS", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_INTERROGATE", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_PAUSE_CONTINUE", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_QUERY_CONFIG", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_QUERY_STATUS", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_START", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_STOP", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_USER_DEFINED_CONTROL", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "ACCESS_TYPE_ALL", $.Int32, 983551);

    $.Constant({Static:true , Public:true }, "ACCEPT_NETBINDCHANGE", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "ACCEPT_PAUSE_CONTINUE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "ACCEPT_PARAMCHANGE", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "ACCEPT_POWEREVENT", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "ACCEPT_SHUTDOWN", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "ACCEPT_STOP", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "ACCEPT_SESSIONCHANGE", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "CONTROL_CONTINUE", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "CONTROL_INTERROGATE", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "CONTROL_NETBINDADD", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "CONTROL_NETBINDDISABLE", $.Int32, 10);

    $.Constant({Static:true , Public:true }, "CONTROL_NETBINDENABLE", $.Int32, 9);

    $.Constant({Static:true , Public:true }, "CONTROL_NETBINDREMOVE", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "CONTROL_PARAMCHANGE", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "CONTROL_PAUSE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "CONTROL_POWEREVENT", $.Int32, 13);

    $.Constant({Static:true , Public:true }, "CONTROL_SHUTDOWN", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "CONTROL_STOP", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "CONTROL_DEVICEEVENT", $.Int32, 11);

    $.Constant({Static:true , Public:true }, "CONTROL_SESSIONCHANGE", $.Int32, 14);

    $.Constant({Static:true , Public:true }, "SERVICE_CONFIG_DESCRIPTION", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SERVICE_CONFIG_FAILURE_ACTIONS", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SERVICE_CONFIG_DELAYED_AUTO_START_INFO", $.Int32, 3);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DATABASE_ACTIVE", $.String, "ServicesActive");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DATABASE_FAILED", $.String, "ServicesFailed");

    $.Constant({Static:true , Public:true }, "ERROR_CONTROL_CRITICAL", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "ERROR_CONTROL_IGNORE", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "ERROR_CONTROL_NORMAL", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "ERROR_CONTROL_SEVERE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_CONNECT", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_CREATE_SERVICE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_ENUMERATE_SERVICE", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_LOCK", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_MODIFY_BOOT_CONFIG", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_QUERY_LOCK_STATUS", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "SC_MANAGER_ALL", $.Int32, 983103);

    $.Constant({Static:true , Public:true }, "SC_ENUM_PROCESS_INFO", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "SERVICE_QUERY_CONFIG", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SERVICE_CHANGE_CONFIG", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SERVICE_QUERY_STATUS", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "SERVICE_ENUMERATE_DEPENDENTS", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "SERVICE_START", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "SERVICE_STOP", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "SERVICE_PAUSE_CONTINUE", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "SERVICE_INTERROGATE", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "SERVICE_USER_DEFINED_CONTROL", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "SERVICE_ALL_ACCESS", $.Int32, 983551);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_ADAPTER", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_FILE_SYSTEM_DRIVER", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_INTERACTIVE_PROCESS", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_KERNEL_DRIVER", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_RECOGNIZER_DRIVER", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_WIN32_OWN_PROCESS", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_WIN32_SHARE_PROCESS", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_WIN32", $.Int32, 48);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_DRIVER", $.Int32, 11);

    $.Constant({Static:true , Public:true }, "SERVICE_TYPE_ALL", $.Int32, 319);

    $.Constant({Static:true , Public:true }, "START_TYPE_AUTO", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "START_TYPE_BOOT", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "START_TYPE_DEMAND", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "START_TYPE_DISABLED", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "START_TYPE_SYSTEM", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SERVICE_ACTIVE", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "SERVICE_INACTIVE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SERVICE_STATE_ALL", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "STATE_CONTINUE_PENDING", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "STATE_PAUSED", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "STATE_PAUSE_PENDING", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "STATE_RUNNING", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "STATE_START_PENDING", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "STATE_STOPPED", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "STATE_STOP_PENDING", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "STATUS_ACTIVE", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "STATUS_INACTIVE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "STATUS_ALL", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "POLICY_VIEW_LOCAL_INFORMATION", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "POLICY_VIEW_AUDIT_INFORMATION", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "POLICY_GET_PRIVATE_INFORMATION", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "POLICY_TRUST_ADMIN", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "POLICY_CREATE_ACCOUNT", $.Int32, 16);

    $.Constant({Static:true , Public:true }, "POLICY_CREATE_SECRET", $.Int32, 32);

    $.Constant({Static:true , Public:true }, "POLICY_CREATE_PRIVILEGE", $.Int32, 64);

    $.Constant({Static:true , Public:true }, "POLICY_SET_DEFAULT_QUOTA_LIMITS", $.Int32, 128);

    $.Constant({Static:true , Public:true }, "POLICY_SET_AUDIT_REQUIREMENTS", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "POLICY_AUDIT_LOG_ADMIN", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "POLICY_SERVER_ADMIN", $.Int32, 1024);

    $.Constant({Static:true , Public:true }, "POLICY_LOOKUP_NAMES", $.Int32, 2048);

    $.Constant({Static:true , Public:true }, "POLICY_ALL_ACCESS", $.Int32, 985087);

    $.Constant({Static:true , Public:true }, "STATUS_OBJECT_NAME_NOT_FOUND", $.Int32, -1073741772);

    $.Constant({Static:true , Public:true }, "WTS_CONSOLE_CONNECT", $.Int32, 1);

    $.Constant({Static:true , Public:true }, "WTS_CONSOLE_DISCONNECT", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "WTS_REMOTE_CONNECT", $.Int32, 3);

    $.Constant({Static:true , Public:true }, "WTS_REMOTE_DISCONNECT", $.Int32, 4);

    $.Constant({Static:true , Public:true }, "WTS_SESSION_LOGON", $.Int32, 5);

    $.Constant({Static:true , Public:true }, "WTS_SESSION_LOGOFF", $.Int32, 6);

    $.Constant({Static:true , Public:true }, "WTS_SESSION_LOCK", $.Int32, 7);

    $.Constant({Static:true , Public:true }, "WTS_SESSION_UNLOCK", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "WTS_SESSION_REMOTE_CONTROL", $.Int32, 9);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceProcess.NativeMethods+StructFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.NativeMethods+StructFormat", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ansi: 1, 
    Unicode: 2, 
    Auto: 3, 
  }
);

/* class System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS */ 

(function ENUM_SERVICE_STATUS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "serviceName", $.String);

    $.Field({Static:false, Public:true }, "displayName", $.String);

    $.Field({Static:false, Public:true }, "serviceType", $.Int32);

    $.Field({Static:false, Public:true }, "currentState", $.Int32);

    $.Field({Static:false, Public:true }, "controlsAccepted", $.Int32);

    $.Field({Static:false, Public:true }, "win32ExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "serviceSpecificExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "checkPoint", $.Int32);

    $.Field({Static:false, Public:true }, "waitHint", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS_PROCESS */ 

(function ENUM_SERVICE_STATUS_PROCESS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS_PROCESS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "serviceName", $.String);

    $.Field({Static:false, Public:true }, "displayName", $.String);

    $.Field({Static:false, Public:true }, "serviceType", $.Int32);

    $.Field({Static:false, Public:true }, "currentState", $.Int32);

    $.Field({Static:false, Public:true }, "controlsAccepted", $.Int32);

    $.Field({Static:false, Public:true }, "win32ExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "serviceSpecificExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "checkPoint", $.Int32);

    $.Field({Static:false, Public:true }, "waitHint", $.Int32);

    $.Field({Static:false, Public:true }, "processID", $.Int32);

    $.Field({Static:false, Public:true }, "serviceFlags", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceProcess.NativeMethods+SERVICE_STATUS */ 

(function SERVICE_STATUS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.NativeMethods+SERVICE_STATUS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "serviceType", $.Int32);

    $.Field({Static:false, Public:true }, "currentState", $.Int32);

    $.Field({Static:false, Public:true }, "controlsAccepted", $.Int32);

    $.Field({Static:false, Public:true }, "win32ExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "serviceSpecificExitCode", $.Int32);

    $.Field({Static:false, Public:true }, "checkPoint", $.Int32);

    $.Field({Static:false, Public:true }, "waitHint", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+QUERY_SERVICE_CONFIG */ 

(function QUERY_SERVICE_CONFIG$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+QUERY_SERVICE_CONFIG", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "dwServiceType", $.Int32);

    $.Field({Static:false, Public:true }, "dwStartType", $.Int32);

    $.Field({Static:false, Public:true }, "dwErrorControl", $.Int32);

    $.Field({Static:false, Public:true }, "lpBinaryPathName", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));

    $.Field({Static:false, Public:true }, "lpLoadOrderGroup", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));

    $.Field({Static:false, Public:true }, "dwTagId", $.Int32);

    $.Field({Static:false, Public:true }, "lpDependencies", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));

    $.Field({Static:false, Public:true }, "lpServiceStartName", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));

    $.Field({Static:false, Public:true }, "lpDisplayName", $jsilcore.TypeRef("JSIL.Pointer", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+SERVICE_TABLE_ENTRY */ 

(function SERVICE_TABLE_ENTRY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+SERVICE_TABLE_ENTRY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "$name", $.IntPtr);

    $.Field({Static:false, Public:true }, "callback", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING */ 

(function LSA_UNICODE_STRING$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "$length", $.Int16);

    $.Field({Static:false, Public:true }, "maximumLength", $.Int16);

    $.Field({Static:false, Public:true }, "buffer", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING_withPointer */ 

(function LSA_UNICODE_STRING_withPointer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+LSA_UNICODE_STRING_withPointer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "$length", $.Int16);

    $.Field({Static:false, Public:true }, "maximumLength", $.Int16);

    $.Field({Static:false, Public:true }, "pwstr", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+LSA_OBJECT_ATTRIBUTES */ 

(function LSA_OBJECT_ATTRIBUTES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+LSA_OBJECT_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "rootDirectory", $.IntPtr);

    $.Field({Static:false, Public:true }, "pointerLsaString", $.IntPtr);

    $.Field({Static:false, Public:true }, "attributes", $.Int32);

    $.Field({Static:false, Public:true }, "pointerSecurityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:true }, "pointerSecurityQualityOfService", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceProcess.NativeMethods+SERVICE_DESCRIPTION */ 

(function SERVICE_DESCRIPTION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.NativeMethods+SERVICE_DESCRIPTION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "description", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceProcess.NativeMethods+SERVICE_DELAYED_AUTOSTART_INFO */ 

(function SERVICE_DELAYED_AUTOSTART_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.NativeMethods+SERVICE_DELAYED_AUTOSTART_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "fDelayedAutostart", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceProcess.NativeMethods+SERVICE_FAILURE_ACTIONS */ 

(function SERVICE_FAILURE_ACTIONS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.NativeMethods+SERVICE_FAILURE_ACTIONS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwResetPeriod", $.UInt32);

    $.Field({Static:false, Public:true }, "rebootMsg", $.IntPtr);

    $.Field({Static:false, Public:true }, "command", $.IntPtr);

    $.Field({Static:false, Public:true }, "numActions", $.UInt32);

    $.Field({Static:false, Public:true }, "actions", $jsilcore.TypeRef("JSIL.Pointer", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SC_ACTION")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceProcess.NativeMethods+SC_ACTION */ 

(function SC_ACTION$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.NativeMethods+SC_ACTION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "type", $.Int32);

    $.Field({Static:false, Public:true }, "delay", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.NativeMethods+WTSSESSION_NOTIFICATION */ 

(function WTSSESSION_NOTIFICATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.NativeMethods+WTSSESSION_NOTIFICATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "size", $.Int32);

    $.Field({Static:false, Public:true }, "sessionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.ServiceProcess.NativeMethods+ServiceMainCallback */ 

JSIL.MakeDelegate("System.ServiceProcess.NativeMethods+ServiceMainCallback", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.IntPtr")]));

/* delegate System.ServiceProcess.NativeMethods+ServiceControlCallback */ 

JSIL.MakeDelegate("System.ServiceProcess.NativeMethods+ServiceControlCallback", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")));

/* delegate System.ServiceProcess.NativeMethods+ServiceControlCallbackEx */ 

JSIL.MakeDelegate("System.ServiceProcess.NativeMethods+ServiceControlCallbackEx", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")
    ]));

/* enum System.ServiceProcess.PowerBroadcastStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.PowerBroadcastStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    QuerySuspend: 0, 
    QuerySuspendFailed: 2, 
    Suspend: 4, 
    ResumeCritical: 6, 
    ResumeSuspend: 7, 
    BatteryLow: 9, 
    PowerStatusChange: 10, 
    OemEvent: 11, 
    ResumeAutomatic: 18, 
  }
);

/* class System.ServiceProcess.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.ServiceProcess.SafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "CloseServiceHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:true }, "GetServiceDisplayName", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.String, 
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetServiceKeyName", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.String, 
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaClose", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaFreeMemory", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaNtStatusToWinError", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenSCManager", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.ServiceProcess.ServiceAccount */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.ServiceAccount", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LocalService: 0, 
    NetworkService: 1, 
    LocalSystem: 2, 
    User: 3, 
  }
);

/* class System.ServiceProcess.ServiceBase */ 

(function ServiceBase$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.ServiceProcess.ServiceBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredContinue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredCustomCommand", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredPause", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredPowerEvent", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredSessionChange", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredShutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DeferredStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoLog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanHandlePowerEvent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanHandleSessionChangeEvent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanPauseAndContinue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanShutdown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanStop", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EventLog", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.EventLog"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExitCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsRTLResources", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntry", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_TABLE_ENTRY"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "LateBoundMessageBoxShow", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnContinue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCustomCommand", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPause", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnPowerEvent", 
      new JSIL.MethodSignature($.Boolean, [$asm26.TypeRef("System.ServiceProcess.PowerBroadcastStatus")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSessionChange", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.SessionChangeDescription"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnShutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnStart", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RequestAdditionalTime", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Run", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Run", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceCommandCallback", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceCommandCallbackEx", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ServiceMainCallback", 
      new JSIL.MethodSignature(null, [$.Int32, $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "ServiceQueuedMainCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoLog", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanHandlePowerEvent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanHandleSessionChangeEvent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanPauseAndContinue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanShutdown", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanStop", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExitCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEventLogEntry", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEventLogEntry", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Diagnostics.EventLogEntryType")])
    );

    $.Field({Static:false, Public:false}, "status", $asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_STATUS"));

    $.Field({Static:false, Public:false}, "statusHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "commandCallback", $asm26.TypeRef("System.ServiceProcess.NativeMethods+ServiceControlCallback"));

    $.Field({Static:false, Public:false}, "commandCallbackEx", $asm26.TypeRef("System.ServiceProcess.NativeMethods+ServiceControlCallbackEx"));

    $.Field({Static:false, Public:false}, "mainCallback", $asm26.TypeRef("System.ServiceProcess.NativeMethods+ServiceMainCallback"));

    $.Field({Static:false, Public:false}, "handleName", $.IntPtr);

    $.Field({Static:false, Public:false}, "startCompletedSignal", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "acceptedCommands", $.Int32);

    $.Field({Static:false, Public:false}, "autoLog", $.Boolean);

    $.Field({Static:false, Public:false}, "serviceName", $.String);

    $.Field({Static:false, Public:false}, "eventLog", $asm0A.TypeRef("System.Diagnostics.EventLog"));

    $.Field({Static:false, Public:false}, "nameFrozen", $.Boolean);

    $.Field({Static:false, Public:false}, "commandPropsFrozen", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isServiceHosted", $.Boolean);

    $.Constant({Static:true , Public:true }, "MaxNameLength", $.Int32, 80);

    $.Property({Static:false, Public:true }, "AutoLog", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SBAutoLog"]; });

    $.Property({Static:false, Public:true }, "ExitCode", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CanHandlePowerEvent", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CanHandleSessionChangeEvent", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CanPauseAndContinue", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CanShutdown", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "CanStop", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true , Virtual:true }, "EventLog", $asm0A.TypeRef("System.Diagnostics.EventLog"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:false}, "ServiceHandle", $.IntPtr)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "ServiceName", $.String)
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SBServiceName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:true , Public:false}, "IsRTLResources", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.InstallerTypeAttribute"), function () { return [$asm26.System.ServiceProcess.ServiceProcessInstaller.__Type__]; });

})();

/* delegate System.ServiceProcess.ServiceBase+DeferredHandlerDelegate */ 

JSIL.MakeDelegate("System.ServiceProcess.ServiceBase+DeferredHandlerDelegate", false, [], 
  JSIL.MethodSignature.Void);

/* delegate System.ServiceProcess.ServiceBase+DeferredHandlerDelegateCommand */ 

JSIL.MakeDelegate("System.ServiceProcess.ServiceBase+DeferredHandlerDelegateCommand", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")));

/* delegate System.ServiceProcess.ServiceBase+DeferredHandlerDelegateAdvanced */ 

JSIL.MakeDelegate("System.ServiceProcess.ServiceBase+DeferredHandlerDelegateAdvanced", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.IntPtr")]));

/* delegate System.ServiceProcess.ServiceBase+DeferredHandlerDelegateAdvancedSession */ 

JSIL.MakeDelegate("System.ServiceProcess.ServiceBase+DeferredHandlerDelegateAdvancedSession", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32")]));

/* class System.ServiceProcess.ServiceController */ 

(function ServiceController$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.ServiceProcess.ServiceController", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm26.TypeRef("System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm26.TypeRef("System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS_PROCESS")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckEnvironment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Continue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSafeWin32Exception", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.ComponentModel.Win32Exception"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExecuteCommand", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateStatus", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanPauseAndContinue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanShutdown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanStop", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependentServices", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicesDependedOn", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceType", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartType", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceStartMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceControllerStatus"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataBaseHandleWithAccess", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataBaseHandleWithConnectAccess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataBaseHandleWithEnumerateAccess", 
      new JSIL.MethodSignature($.IntPtr, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDevices", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDevices", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServiceHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetServices", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetServices", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetServicesInGroup", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+ENUM_SERVICE_STATUS_PROCESS")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetServicesOfType", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Refresh", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MachineName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidServiceName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForStatus", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceControllerStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForStatus", 
      new JSIL.MethodSignature(null, [$asm26.TypeRef("System.ServiceProcess.ServiceControllerStatus"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "eitherName", $.String);

    $.Field({Static:false, Public:false}, "commandsAccepted", $.Int32);

    $.Field({Static:false, Public:false}, "status", $asm26.TypeRef("System.ServiceProcess.ServiceControllerStatus"));

    $.Field({Static:false, Public:false}, "serviceManagerHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "statusGenerated", $.Boolean);

    $.Field({Static:false, Public:false}, "controlGranted", $.Boolean);

    $.Field({Static:false, Public:false}, "browseGranted", $.Boolean);

    $.Field({Static:false, Public:false}, "dependentServices", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:false, Public:false}, "servicesDependedOn", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:false, Public:false}, "type", $.Int32);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "startTypeInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "startType", $asm26.TypeRef("System.ServiceProcess.ServiceStartMode"));

    $.Constant({Static:true , Public:false}, "DISPLAYNAMEBUFFERSIZE", $.Int32, 256);

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnknownEnvironment", $.Int32, 0);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NtEnvironment", $.Int32, 1);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NonNtEnvironment", $.Int32, 2);

    $.Field({Static:true , Public:false}, "environment", $.Int32, function ($pi) {
        return $pi.UnknownEnvironment;
      });

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "CanPauseAndContinue", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPCanPauseAndContinue"]; });

    $.Property({Static:false, Public:true }, "CanShutdown", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPCanShutdown"]; });

    $.Property({Static:false, Public:true }, "CanStop", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPCanStop"]; });

    $.Property({Static:false, Public:true }, "DisplayName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPDisplayName"]; });

    $.Property({Static:false, Public:true }, "DependentServices", $jsilcore.TypeRef("System.Array", [$.Type]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPDependentServices"]; });

    $.Property({Static:false, Public:true }, "MachineName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPMachineName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["."]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "ServiceName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.ReadOnlyAttribute"), function () { return [true]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPServiceName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm26.System.ServiceProcess.Design.ServiceNameConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "ServicesDependedOn", $jsilcore.TypeRef("System.Array", [$.Type]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPServicesDependedOn"]; });

    $.Property({Static:false, Public:true }, "ServiceHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Status", $asm26.TypeRef("System.ServiceProcess.ServiceControllerStatus"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPStatus"]; });

    $.Property({Static:false, Public:true }, "ServiceType", $asm26.TypeRef("System.ServiceProcess.ServiceType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPServiceType"]; });

    $.Property({Static:false, Public:true }, "StartType", $asm26.TypeRef("System.ServiceProcess.ServiceStartMode"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["SPStartType"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerAttribute"), function () { return ["System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
    .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceControllerDesc"]; });

})();

/* class System.ServiceProcess.ServiceControllerPermission */ 

(function ServiceControllerPermission$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBase"), 
      Name: "System.ServiceProcess.ServiceControllerPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionAccess", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionEntries", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntryCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePermissionAccess", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNames", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "innerCollection", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntryCollection"));

    $.Property({Static:false, Public:true }, "PermissionEntries", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntryCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceProcess.ServiceControllerPermissionAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.ServiceControllerPermissionAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Browse: 2, 
    Control: 6, 
  }
);

/* class System.ServiceProcess.ServiceControllerPermissionAttribute */ 

(function ServiceControllerPermissionAttribute$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.ServiceProcess.ServiceControllerPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MachineName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PermissionAccess", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "serviceName", $.String);

    $.Field({Static:false, Public:false}, "permissionAccess", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"));

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"));

    $.Property({Static:false, Public:true }, "ServiceName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Event", 
          "Method", "Struct"
      )]; });

})();

/* class System.ServiceProcess.ServiceControllerPermissionEntry */ 

(function ServiceControllerPermissionEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.ServiceControllerPermissionEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseEntry", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.Field({Static:false, Public:false}, "machineName", $.String);

    $.Field({Static:false, Public:false}, "serviceName", $.String);

    $.Field({Static:false, Public:false}, "permissionAccess", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"));

    $.Property({Static:false, Public:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionAccess"));

    $.Property({Static:false, Public:true }, "ServiceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.ServiceControllerPermissionEntryCollection */ 

(function ServiceControllerPermissionEntryCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.ServiceProcess.ServiceControllerPermissionEntryCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermission"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry")])
    );

    $.Field({Static:false, Public:false}, "owner", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermission"));

    $.Property({Static:false, Public:true }, "Item", $asm26.TypeRef("System.ServiceProcess.ServiceControllerPermissionEntry"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.ServiceProcess.ServiceControllerStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.ServiceControllerStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Stopped: 1, 
    StartPending: 2, 
    StopPending: 3, 
    Running: 4, 
    ContinuePending: 5, 
    PausePending: 6, 
    Paused: 7, 
  }
);

/* class System.ServiceProcess.ServiceInstaller */ 

(function ServiceInstaller$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.ComponentInstaller"), 
      Name: "System.ServiceProcess.ServiceInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckEnvironment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFromComponent", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.IComponent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelayedAutoStart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicesDependedOn", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartType", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceStartMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsEquivalentInstaller", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Configuration.Install.ComponentInstaller")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveService", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelayedAutoStart", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServicesDependedOn", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StartType", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceStartMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeServicesDependedOn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateServiceName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Constant({Static:true , Public:false}, "NetworkServiceName", $.String, "NT AUTHORITY\\NetworkService");

    $.Constant({Static:true , Public:false}, "LocalServiceName", $.String, "NT AUTHORITY\\LocalService");

    $.Field({Static:false, Public:false}, "eventLogInstaller", $asm0F.TypeRef("System.Diagnostics.EventLogInstaller"));

    $.Field({Static:false, Public:false}, "serviceName", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "servicesDependedOn", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "startType", $asm26.TypeRef("System.ServiceProcess.ServiceStartMode"));

    $.Field({Static:false, Public:false}, "delayedStartMode", $.Boolean);

    $.Field({Static:true , Public:false}, "environmentChecked", $.Boolean);

    $.Field({Static:true , Public:false}, "isWin9x", $.Boolean);

    $.Property({Static:false, Public:true }, "DisplayName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerDisplayName"]; });

    $.Property({Static:false, Public:true }, "Description", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerDescription"]; });

    $.Property({Static:false, Public:true }, "ServicesDependedOn", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerServicesDependedOn"]; });

    $.Property({Static:false, Public:true }, "ServiceName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerServiceName"]; });

    $.Property({Static:false, Public:true }, "StartType", $asm26.TypeRef("System.ServiceProcess.ServiceStartMode"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm26.System.ServiceProcess.ServiceStartMode.Manual]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerStartType"]; });

    $.Property({Static:false, Public:true }, "DelayedAutoStart", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceInstallerDelayedAutoStart"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.ServiceProcessDescriptionAttribute */ 

(function ServiceProcessDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.ServiceProcess.ServiceProcessDescriptionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.ServiceProcess.ServiceProcessInstaller */ 

(function ServiceProcessInstaller$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.ComponentInstaller"), 
      Name: "System.ServiceProcess.ServiceProcessInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AccountHasRight", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFromComponent", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.IComponent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Account", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.ServiceAccount"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HelpText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Username", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAccountSid", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLoginInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GrantAccountRight", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenSecurityPolicy", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveAccountRight", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Account", 
      JSIL.MethodSignature.Action($asm26.TypeRef("System.ServiceProcess.ServiceAccount"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Username", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "serviceAccount", $asm26.TypeRef("System.ServiceProcess.ServiceAccount"));

    $.Field({Static:false, Public:false}, "haveLoginInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "password", $.String);

    $.Field({Static:false, Public:false}, "username", $.String);

    $.Field({Static:true , Public:false}, "helpPrinted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HelpText", $.String);

    $.Property({Static:false, Public:true }, "Password", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Account", $asm26.TypeRef("System.ServiceProcess.ServiceAccount"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm26.System.ServiceProcess.ServiceAccount.User]; })
      .Attribute($asm26.TypeRef("System.ServiceProcess.ServiceProcessDescriptionAttribute"), function () { return ["ServiceProcessInstallerAccount"]; });

    $.Property({Static:false, Public:true }, "Username", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceProcess.ServiceStartMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.ServiceStartMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Boot: 0, 
    System: 1, 
    Automatic: 2, 
    Manual: 3, 
    Disabled: 4, 
  }
);

/* enum System.ServiceProcess.ServiceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.ServiceType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    KernelDriver: 1, 
    FileSystemDriver: 2, 
    Adapter: 4, 
    RecognizerDriver: 8, 
    Win32OwnProcess: 16, 
    Win32ShareProcess: 32, 
    InteractiveProcess: 256, 
  }
);

/* enum System.ServiceProcess.SessionChangeReason */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.SessionChangeReason", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ConsoleConnect: 1, 
    ConsoleDisconnect: 2, 
    RemoteConnect: 3, 
    RemoteDisconnect: 4, 
    SessionLogon: 5, 
    SessionLogoff: 6, 
    SessionLock: 7, 
    SessionUnlock: 8, 
    SessionRemoteControl: 9, 
  }
);

/* struct System.ServiceProcess.SessionChangeDescription */ 

(function SessionChangeDescription$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceProcess.SessionChangeDescription", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm26.TypeRef("System.ServiceProcess.SessionChangeReason"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reason", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.SessionChangeReason"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "_reason", $asm26.TypeRef("System.ServiceProcess.SessionChangeReason"));

    $.Field({Static:false, Public:false}, "_id", $.Int32);

    $.Property({Static:false, Public:true }, "Reason", $asm26.TypeRef("System.ServiceProcess.SessionChangeReason"));

    $.Property({Static:false, Public:true }, "SessionId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.TimeoutException */ 

(function TimeoutException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.ServiceProcess.TimeoutException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.ServiceProcess.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "ControlService", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_STATUS")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EnumDependentServices", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EnumServicesStatus", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Int32, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EnumServicesStatusEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.String
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenService", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.String, 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "QueryServiceConfig", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "QueryServiceStatus", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$asm26.TypeRef("System.ServiceProcess.NativeMethods+SERVICE_STATUS")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "StartService", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.ServiceProcess.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.ServiceProcess.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.ServiceProcess.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.ServiceProcess.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.ServiceProcess.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceProcess.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "RTL", $.String, "RTL");

    $.Constant({Static:true , Public:false}, "FileName", $.String, "FileName");

    $.Constant({Static:true , Public:false}, "ServiceStartedIncorrectly", $.String, "ServiceStartedIncorrectly");

    $.Constant({Static:true , Public:false}, "CallbackHandler", $.String, "CallbackHandler");

    $.Constant({Static:true , Public:false}, "OpenService", $.String, "OpenService");

    $.Constant({Static:true , Public:false}, "StartService", $.String, "StartService");

    $.Constant({Static:true , Public:false}, "StopService", $.String, "StopService");

    $.Constant({Static:true , Public:false}, "PauseService", $.String, "PauseService");

    $.Constant({Static:true , Public:false}, "ResumeService", $.String, "ResumeService");

    $.Constant({Static:true , Public:false}, "ControlService", $.String, "ControlService");

    $.Constant({Static:true , Public:false}, "ServiceName", $.String, "ServiceName");

    $.Constant({Static:true , Public:false}, "ServiceStartType", $.String, "ServiceStartType");

    $.Constant({Static:true , Public:false}, "ServiceDependency", $.String, "ServiceDependency");

    $.Constant({Static:true , Public:false}, "InstallService", $.String, "InstallService");

    $.Constant({Static:true , Public:false}, "InstallError", $.String, "InstallError");

    $.Constant({Static:true , Public:false}, "UserName", $.String, "UserName");

    $.Constant({Static:true , Public:false}, "UserPassword", $.String, "UserPassword");

    $.Constant({Static:true , Public:false}, "ButtonOK", $.String, "ButtonOK");

    $.Constant({Static:true , Public:false}, "ServiceUsage", $.String, "ServiceUsage");

    $.Constant({Static:true , Public:false}, "ServiceNameTooLongForNt4", $.String, "ServiceNameTooLongForNt4");

    $.Constant({Static:true , Public:false}, "DisplayNameTooLong", $.String, "DisplayNameTooLong");

    $.Constant({Static:true , Public:false}, "NoService", $.String, "NoService");

    $.Constant({Static:true , Public:false}, "NoDisplayName", $.String, "NoDisplayName");

    $.Constant({Static:true , Public:false}, "OpenSC", $.String, "OpenSC");

    $.Constant({Static:true , Public:false}, "Timeout", $.String, "Timeout");

    $.Constant({Static:true , Public:false}, "CannotChangeProperties", $.String, "CannotChangeProperties");

    $.Constant({Static:true , Public:false}, "CannotChangeName", $.String, "CannotChangeName");

    $.Constant({Static:true , Public:false}, "NoServices", $.String, "NoServices");

    $.Constant({Static:true , Public:false}, "NoMachineName", $.String, "NoMachineName");

    $.Constant({Static:true , Public:false}, "BadMachineName", $.String, "BadMachineName");

    $.Constant({Static:true , Public:false}, "NoGivenName", $.String, "NoGivenName");

    $.Constant({Static:true , Public:false}, "CannotStart", $.String, "CannotStart");

    $.Constant({Static:true , Public:false}, "NotAService", $.String, "NotAService");

    $.Constant({Static:true , Public:false}, "NoInstaller", $.String, "NoInstaller");

    $.Constant({Static:true , Public:false}, "UserCanceledInstall", $.String, "UserCanceledInstall");

    $.Constant({Static:true , Public:false}, "UnattendedCannotPrompt", $.String, "UnattendedCannotPrompt");

    $.Constant({Static:true , Public:false}, "InvalidParameter", $.String, "InvalidParameter");

    $.Constant({Static:true , Public:false}, "FailedToUnloadAppDomain", $.String, "FailedToUnloadAppDomain");

    $.Constant({Static:true , Public:false}, "NotInPendingState", $.String, "NotInPendingState");

    $.Constant({Static:true , Public:false}, "ArgsCantBeNull", $.String, "ArgsCantBeNull");

    $.Constant({Static:true , Public:false}, "StartSuccessful", $.String, "StartSuccessful");

    $.Constant({Static:true , Public:false}, "StopSuccessful", $.String, "StopSuccessful");

    $.Constant({Static:true , Public:false}, "PauseSuccessful", $.String, "PauseSuccessful");

    $.Constant({Static:true , Public:false}, "ContinueSuccessful", $.String, "ContinueSuccessful");

    $.Constant({Static:true , Public:false}, "InstallSuccessful", $.String, "InstallSuccessful");

    $.Constant({Static:true , Public:false}, "UninstallSuccessful", $.String, "UninstallSuccessful");

    $.Constant({Static:true , Public:false}, "CommandSuccessful", $.String, "CommandSuccessful");

    $.Constant({Static:true , Public:false}, "StartFailed", $.String, "StartFailed");

    $.Constant({Static:true , Public:false}, "StopFailed", $.String, "StopFailed");

    $.Constant({Static:true , Public:false}, "PauseFailed", $.String, "PauseFailed");

    $.Constant({Static:true , Public:false}, "ContinueFailed", $.String, "ContinueFailed");

    $.Constant({Static:true , Public:false}, "SessionChangeFailed", $.String, "SessionChangeFailed");

    $.Constant({Static:true , Public:false}, "InstallFailed", $.String, "InstallFailed");

    $.Constant({Static:true , Public:false}, "UninstallFailed", $.String, "UninstallFailed");

    $.Constant({Static:true , Public:false}, "CommandFailed", $.String, "CommandFailed");

    $.Constant({Static:true , Public:false}, "ErrorNumber", $.String, "ErrorNumber");

    $.Constant({Static:true , Public:false}, "ShutdownOK", $.String, "ShutdownOK");

    $.Constant({Static:true , Public:false}, "ShutdownFailed", $.String, "ShutdownFailed");

    $.Constant({Static:true , Public:false}, "PowerEventOK", $.String, "PowerEventOK");

    $.Constant({Static:true , Public:false}, "PowerEventFailed", $.String, "PowerEventFailed");

    $.Constant({Static:true , Public:false}, "InstallOK", $.String, "InstallOK");

    $.Constant({Static:true , Public:false}, "TryToStop", $.String, "TryToStop");

    $.Constant({Static:true , Public:false}, "ServiceRemoving", $.String, "ServiceRemoving");

    $.Constant({Static:true , Public:false}, "ServiceRemoved", $.String, "ServiceRemoved");

    $.Constant({Static:true , Public:false}, "HelpText", $.String, "HelpText");

    $.Constant({Static:true , Public:false}, "CantStartFromCommandLine", $.String, "CantStartFromCommandLine");

    $.Constant({Static:true , Public:false}, "CantStartFromCommandLineTitle", $.String, "CantStartFromCommandLineTitle");

    $.Constant({Static:true , Public:false}, "CantRunOnWin9x", $.String, "CantRunOnWin9x");

    $.Constant({Static:true , Public:false}, "CantRunOnWin9xTitle", $.String, "CantRunOnWin9xTitle");

    $.Constant({Static:true , Public:false}, "CantControlOnWin9x", $.String, "CantControlOnWin9x");

    $.Constant({Static:true , Public:false}, "CantInstallOnWin9x", $.String, "CantInstallOnWin9x");

    $.Constant({Static:true , Public:false}, "InstallingService", $.String, "InstallingService");

    $.Constant({Static:true , Public:false}, "StartingService", $.String, "StartingService");

    $.Constant({Static:true , Public:false}, "SBAutoLog", $.String, "SBAutoLog");

    $.Constant({Static:true , Public:false}, "SBServiceName", $.String, "SBServiceName");

    $.Constant({Static:true , Public:false}, "SBServiceDescription", $.String, "SBServiceDescription");

    $.Constant({Static:true , Public:false}, "ServiceControllerDesc", $.String, "ServiceControllerDesc");

    $.Constant({Static:true , Public:false}, "SPCanPauseAndContinue", $.String, "SPCanPauseAndContinue");

    $.Constant({Static:true , Public:false}, "SPCanShutdown", $.String, "SPCanShutdown");

    $.Constant({Static:true , Public:false}, "SPCanStop", $.String, "SPCanStop");

    $.Constant({Static:true , Public:false}, "SPDisplayName", $.String, "SPDisplayName");

    $.Constant({Static:true , Public:false}, "SPDependentServices", $.String, "SPDependentServices");

    $.Constant({Static:true , Public:false}, "SPMachineName", $.String, "SPMachineName");

    $.Constant({Static:true , Public:false}, "SPServiceName", $.String, "SPServiceName");

    $.Constant({Static:true , Public:false}, "SPServicesDependedOn", $.String, "SPServicesDependedOn");

    $.Constant({Static:true , Public:false}, "SPStatus", $.String, "SPStatus");

    $.Constant({Static:true , Public:false}, "SPServiceType", $.String, "SPServiceType");

    $.Constant({Static:true , Public:false}, "SPStartType", $.String, "SPStartType");

    $.Constant({Static:true , Public:false}, "ServiceProcessInstallerAccount", $.String, "ServiceProcessInstallerAccount");

    $.Constant({Static:true , Public:false}, "ServiceInstallerDescription", $.String, "ServiceInstallerDescription");

    $.Constant({Static:true , Public:false}, "ServiceInstallerServicesDependedOn", $.String, "ServiceInstallerServicesDependedOn");

    $.Constant({Static:true , Public:false}, "ServiceInstallerServiceName", $.String, "ServiceInstallerServiceName");

    $.Constant({Static:true , Public:false}, "ServiceInstallerStartType", $.String, "ServiceInstallerStartType");

    $.Constant({Static:true , Public:false}, "ServiceInstallerDelayedAutoStart", $.String, "ServiceInstallerDelayedAutoStart");

    $.Constant({Static:true , Public:false}, "ServiceInstallerDisplayName", $.String, "ServiceInstallerDisplayName");

    $.Constant({Static:true , Public:false}, "Label_SetServiceLogin", $.String, "Label_SetServiceLogin");

    $.Constant({Static:true , Public:false}, "Label_MissmatchedPasswords", $.String, "Label_MissmatchedPasswords");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceProcess.Design");
/* enum System.ServiceProcess.Design.ServiceInstallerDialogResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceProcess.Design.ServiceInstallerDialogResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    OK: 0, 
    UseSystem: 1, 
    Canceled: 2, 
  }
);

/* class System.ServiceProcess.Design.ServiceInstallerDialog */ 

(function ServiceInstallerDialog$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm2C.TypeRef("System.Windows.Forms.Form"), 
      Name: "System.ServiceProcess.Design.ServiceInstallerDialog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "cancelButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm26.TypeRef("System.ServiceProcess.Design.ServiceInstallerDialogResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Username", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Main", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.STAThreadAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "okButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ServiceInstallerDialog_HelpButtonClicked", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.CancelEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Username", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "okButton", $asm2C.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "passwordEdit", $asm2C.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "cancelButton", $asm2C.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "confirmPassword", $asm2C.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "usernameEdit", $asm2C.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "label1", $asm2C.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "label2", $asm2C.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "label3", $asm2C.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "okCancelTableLayoutPanel", $asm2C.TypeRef("System.Windows.Forms.TableLayoutPanel"));

    $.Field({Static:false, Public:false}, "overarchingTableLayoutPanel", $asm2C.TypeRef("System.Windows.Forms.TableLayoutPanel"));

    $.Field({Static:false, Public:false}, "result", $asm26.TypeRef("System.ServiceProcess.Design.ServiceInstallerDialogResult"));

    $.Property({Static:false, Public:true }, "Password", $.String);

    $.Property({Static:false, Public:true }, "Result", $asm26.TypeRef("System.ServiceProcess.Design.ServiceInstallerDialogResult"));

    $.Property({Static:false, Public:true }, "Username", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceProcess.Design.ServiceNameConverter */ 

(function ServiceNameConverter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.ServiceProcess.Design.ServiceNameConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:false, Public:false}, "values", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));

    $.Field({Static:false, Public:false}, "previousMachineName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

