/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm06 = JSIL.DeclareAssembly("Microsoft.VisualBasic.Activities.Compiler, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Compiler");
JSIL.DeclareNamespace("Microsoft.Compiler.VisualBasic");
/* class Microsoft.Compiler.VisualBasic.TypeEmitter */ 

(function TypeEmitter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.TypeEmitter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.SymbolMap"), $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DynamicModuleBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"))
    );

    $.Field({Static:false, Public:false}, "m_moduleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Field({Static:false, Public:false}, "m_symbolMap", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SymbolMap"));

    $.Field({Static:true , Public:false}, "VoidType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Void.__Type__;
      });

    $.Property({Static:false, Public:false}, "DynamicModuleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.AnonymousDelegateEmitter */ 

(function AnonymousDelegateEmitter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm06.TypeRef("Microsoft.Compiler.VisualBasic.TypeEmitter"), 
      Name: "Microsoft.Compiler.VisualBasic.AnonymousDelegateEmitter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.SymbolMap"), $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder")])
    );

    $.Field({Static:false, Public:false}, "m_types", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter */ 

(function AnonymousTypeEmitter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm06.TypeRef("Microsoft.Compiler.VisualBasic.TypeEmitter"), 
      Name: "Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.SymbolMap"), $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCtor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField")]), $asm07.TypeRef("System.Reflection.Emit.ConstructorBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitEqualsObj", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"), 
          $asm07.TypeRef("System.Reflection.Emit.MethodBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitEqualsTyped", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField")]), $asm07.TypeRef("System.Reflection.Emit.MethodBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGetHashCode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField")]), $asm07.TypeRef("System.Reflection.Emit.MethodBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitProperty", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitToString", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField")]), $asm07.TypeRef("System.Reflection.Emit.MethodBuilder")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Object.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "StringType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.String.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "StringBuilderType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Text.StringBuilder.__Type__;
      });

    $.Field({Static:false, Public:false}, "m_types", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField */ 

(function PropertyAndField$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter+PropertyAndField", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Field", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.FieldBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Property", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Field", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.FieldBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Property", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"))
    );

    $.Field({Static:false, Public:false}, "_Property", $asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"));

    $.Field({Static:false, Public:false}, "_Field", $asm07.TypeRef("System.Reflection.Emit.FieldBuilder"));

    $.Property({Static:false, Public:true }, "Field", $asm07.TypeRef("System.Reflection.Emit.FieldBuilder"));

    $.Property({Static:false, Public:true }, "Property", $asm07.TypeRef("System.Reflection.Emit.PropertyBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Compiler.VisualBasic.IScriptScope */ 

JSIL.MakeInterface(
  "Microsoft.Compiler.VisualBasic.IScriptScope", false, [], function ($) {
    $.Method({}, "FindVariable", new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String]));
  }, []);

/* interface Microsoft.Compiler.VisualBasic.ITypeScope */ 

JSIL.MakeInterface(
  "Microsoft.Compiler.VisualBasic.ITypeScope", false, [], function ($) {
    $.Method({}, "NamespaceExists", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "FindTypes", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$.String, $.String]));
  }, []);

/* class Microsoft.Compiler.VisualBasic.Import */ 

(function Import$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.Import", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Alias", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImportedEntity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_alias", $.String);

    $.Field({Static:false, Public:false}, "m_importedEntity", $.String);

    $.Property({Static:false, Public:true }, "ImportedEntity", $.String);

    $.Property({Static:false, Public:true }, "Alias", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Compiler.VisualBasic.IImportScope */ 

JSIL.MakeInterface(
  "Microsoft.Compiler.VisualBasic.IImportScope", false, [], function ($) {
    $.Method({}, "GetImports", JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Import")])));
  }, []);

/* class Microsoft.Compiler.VisualBasic.CompilerOptions */ 

(function CompilerOptions$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.CompilerOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreWarnings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionCompare", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionCompareSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionInfer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionStrict", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionStrictSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoveIntChecks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningLevel", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreWarnings", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionCompare", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionCompareSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionInfer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionStrict", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionStrictSetting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemoveIntChecks", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningLevel", 
      JSIL.MethodSignature.Action($asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting"))
    );

    $.Field({Static:false, Public:false}, "m_optionCompare", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionCompareSetting"));

    $.Field({Static:false, Public:false}, "m_optionStrict", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionStrictSetting"));

    $.Field({Static:false, Public:false}, "m_optionInfer", $.Boolean);

    $.Field({Static:false, Public:false}, "m_removeIntChecks", $.Boolean);

    $.Field({Static:false, Public:false}, "m_warningLevel", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting"));

    $.Field({Static:false, Public:false}, "m_ignoreWarnings", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_treatWarningsAsErrors", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_empty", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "TreatWarningsAsErrors", $jsilcore.TypeRef("System.Array", [$.Int32]))
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays"]; });

    $.Property({Static:false, Public:true }, "IgnoreWarnings", $jsilcore.TypeRef("System.Array", [$.Int32]))
      .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays"]; });

    $.Property({Static:false, Public:true }, "WarningLevel", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting"));

    $.Property({Static:false, Public:true }, "RemoveIntChecks", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionInfer", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionStrict", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionStrictSetting"));

    $.Property({Static:false, Public:true }, "OptionCompare", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.OptionCompareSetting"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.CompilerContext */ 

(function CompilerContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.CompilerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IScriptScope"), $asm06.TypeRef("Microsoft.Compiler.VisualBasic.ITypeScope"), 
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IImportScope"), $asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImportScope", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.IImportScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ScriptScope", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.IScriptScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeScope", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.ITypeScope"))
    );

    $.Field({Static:true , Public:false}, "m_empty", $.Type);

    $.Field({Static:false, Public:false}, "m_scriptScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IScriptScope"));

    $.Field({Static:false, Public:false}, "m_typeScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.ITypeScope"));

    $.Field({Static:false, Public:false}, "m_importScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IImportScope"));

    $.Field({Static:false, Public:false}, "m_options", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerOptions"));

    $.Property({Static:false, Public:true }, "Options", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerOptions"));

    $.Property({Static:false, Public:true }, "ImportScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IImportScope"));

    $.Property({Static:false, Public:true }, "TypeScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.ITypeScope"));

    $.Property({Static:false, Public:true }, "ScriptScope", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IScriptScope"));

    $.Property({Static:true , Public:false}, "Empty", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.SourceLocation */ 

(function SourceLocation$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.SourceLocation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnBegin", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ColumnEnd", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineBegin", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineEnd", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_columnBegin", $.Int32);

    $.Field({Static:false, Public:false}, "m_columnEnd", $.Int32);

    $.Field({Static:false, Public:false}, "m_lineBegin", $.Int32);

    $.Field({Static:false, Public:false}, "m_lineEnd", $.Int32);

    $.Property({Static:false, Public:true }, "LineEnd", $.Int32);

    $.Property({Static:false, Public:true }, "LineBegin", $.Int32);

    $.Property({Static:false, Public:true }, "ColumnEnd", $.Int32);

    $.Property({Static:false, Public:true }, "ColumnBegin", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.Error */ 

(function Error$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.Error", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceLocation", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"))
    );

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_sourceLocation", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"));

    $.Field({Static:false, Public:false}, "m_errorCode", $.Int32);

    $.Property({Static:false, Public:true }, "SourceLocation", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords"]; });

})();

/* class Microsoft.Compiler.VisualBasic.Warning */ 

(function Warning$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.Warning", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceLocation", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_sourceLocation", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"));

    $.Field({Static:false, Public:false}, "m_warningCode", $.Int32);

    $.Property({Static:false, Public:true }, "SourceLocation", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "WarningCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.CompilerResults */ 

(function CompilerResults$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.CompilerResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWarning", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm06.TypeRef("Microsoft.Compiler.VisualBasic.SourceLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeBlock", 
      JSIL.MethodSignature.Return($asm10.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Error")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Warning")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCodeBlock", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.Field({Static:false, Public:false}, "m_codeBlock", $asm10.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false}, "m_errors", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Error")]));

    $.Field({Static:false, Public:false}, "m_warnings", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Warning")]));

    $.Property({Static:false, Public:true }, "Warnings", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Warning")]));

    $.Property({Static:false, Public:true }, "Errors", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Error")]));

    $.Property({Static:false, Public:true }, "CodeBlock", $asm10.TypeRef("System.Linq.Expressions.LambdaExpression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.SymbolMap */ 

(function SymbolMap$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.SymbolMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$tSymbolMap", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DynamicAnonymousDelegateEmitter", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousDelegateEmitter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DynamicAnonymousTypeEmitter", 
      JSIL.MethodSignature.Return($asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DynamicAssemblyBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DynamicModuleBuilder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"))
    );

    $.Field({Static:false, Public:false}, "m_anonymousTypeEmitter", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter"));

    $.Field({Static:false, Public:false}, "m_anonymousDelegateEmitter", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousDelegateEmitter"));

    $.Field({Static:false, Public:false}, "m_assemblyBuilder", $asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder"));

    $.Field({Static:false, Public:false}, "m_moduleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Property({Static:false, Public:false}, "DynamicAnonymousDelegateEmitter", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousDelegateEmitter"));

    $.Property({Static:false, Public:false}, "DynamicAnonymousTypeEmitter", $asm06.TypeRef("Microsoft.Compiler.VisualBasic.AnonymousTypeEmitter"));

    $.Property({Static:false, Public:false}, "DynamicModuleBuilder", $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder"));

    $.Property({Static:false, Public:false}, "DynamicAssemblyBuilder", $asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.HostedCompiler */ 

(function HostedCompiler$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.HostedCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "$exHostedCompiler", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Reflection.Assembly")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "$tHostedCompiler", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckInvalid", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileExpression", 
      new JSIL.MethodSignature($asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerResults"), [
          $.String, $asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerContext"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileExpression", 
      new JSIL.MethodSignature($asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerResults"), [$.String, $asm06.TypeRef("Microsoft.Compiler.VisualBasic.CompilerContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.ImportScope */ 

(function ImportScope$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.ImportScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetImports", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm06.TypeRef("Microsoft.Compiler.VisualBasic.Import")]))
    );

    $.Field({Static:true , Public:false}, "m_empty", $.Type);

    $.Property({Static:true , Public:false}, "Empty", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IImportScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.ScriptScope */ 

(function ScriptScope$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.ScriptScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "m_empty", $.Type);

    $.Property({Static:true , Public:false}, "Empty", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("Microsoft.Compiler.VisualBasic.IScriptScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Compiler.VisualBasic.TypeScope */ 

(function TypeScope$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Compiler.VisualBasic.TypeScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "NamespaceExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:true , Public:false}, "m_empty", $.Type);

    $.Property({Static:true , Public:false}, "Empty", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("Microsoft.Compiler.VisualBasic.ITypeScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Compiler.VisualBasic.OptionCompareSetting */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Compiler.VisualBasic.OptionCompareSetting", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Binary: 0, 
    Text: 1, 
  }
);

/* enum Microsoft.Compiler.VisualBasic.OptionStrictSetting */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Compiler.VisualBasic.OptionStrictSetting", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Off: 0, 
    On: 1, 
    Custom: 2, 
  }
);

/* enum Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Compiler.VisualBasic.OptionWarningLevelSetting", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Regular: 1, 
    AsError: 2, 
  }
);

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
/* class <CrtImplementationDetails>.ModuleLoadException */ 

(function ModuleLoadException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "<CrtImplementationDetails>.ModuleLoadException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:true }, "Nested", $.String, "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleLoadExceptionHandlerException */ 

(function ModuleLoadExceptionHandlerException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm06.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), 
      Name: "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "formatString", $.String, "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n");

    $.Field({Static:false, Public:false}, "$lbacking_store$gNestedException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "NestedException", $asm07.TypeRef("System.Exception"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleUninitializer */ 

(function ModuleUninitializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Stack"), 
      Name: "<CrtImplementationDetails>.ModuleUninitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.EventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Field({Static:true , Public:false}, "lock", $.Object);

    $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

