/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm2B = JSIL.DeclareAssembly("System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("System");
/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activeds", $.String, "activeds.dll");

    $.Constant({Static:true , Public:true }, "Advapi32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:true }, "Comctl32", $.String, "comctl32.dll");

    $.Constant({Static:true , Public:true }, "Comdlg32", $.String, "comdlg32.dll");

    $.Constant({Static:true , Public:true }, "Gdi32", $.String, "gdi32.dll");

    $.Constant({Static:true , Public:true }, "Gdiplus", $.String, "gdiplus.dll");

    $.Constant({Static:true , Public:true }, "Hhctrl", $.String, "hhctrl.ocx");

    $.Constant({Static:true , Public:true }, "Imm32", $.String, "imm32.dll");

    $.Constant({Static:true , Public:true }, "Kernel32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:true }, "Loadperf", $.String, "Loadperf.dll");

    $.Constant({Static:true , Public:true }, "Mscoree", $.String, "mscoree.dll");

    $.Constant({Static:true , Public:true }, "Clr", $.String, "clr.dll");

    $.Constant({Static:true , Public:true }, "Msi", $.String, "msi.dll");

    $.Constant({Static:true , Public:true }, "Mqrt", $.String, "mqrt.dll");

    $.Constant({Static:true , Public:true }, "Ntdll", $.String, "ntdll.dll");

    $.Constant({Static:true , Public:true }, "Ole32", $.String, "ole32.dll");

    $.Constant({Static:true , Public:true }, "Oleacc", $.String, "oleacc.dll");

    $.Constant({Static:true , Public:true }, "Oleaut32", $.String, "oleaut32.dll");

    $.Constant({Static:true , Public:true }, "Olepro32", $.String, "olepro32.dll");

    $.Constant({Static:true , Public:true }, "PerfCounter", $.String, "perfcounter.dll");

    $.Constant({Static:true , Public:true }, "Powrprof", $.String, "Powrprof.dll");

    $.Constant({Static:true , Public:true }, "Psapi", $.String, "psapi.dll");

    $.Constant({Static:true , Public:true }, "Shell32", $.String, "shell32.dll");

    $.Constant({Static:true , Public:true }, "Shfolder", $.String, "shfolder.dll");

    $.Constant({Static:true , Public:true }, "User32", $.String, "user32.dll");

    $.Constant({Static:true , Public:true }, "Uxtheme", $.String, "uxtheme.dll");

    $.Constant({Static:true , Public:true }, "WinMM", $.String, "winmm.dll");

    $.Constant({Static:true , Public:true }, "Winspool", $.String, "winspool.drv");

    $.Constant({Static:true , Public:true }, "Wtsapi32", $.String, "wtsapi32.dll");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version.dll");

    $.Constant({Static:true , Public:true }, "Vsassert", $.String, "vsassert.dll");

    $.Constant({Static:true , Public:true }, "Fxassert", $.String, "Fxassert.dll");

    $.Constant({Static:true , Public:true }, "Shlwapi", $.String, "shlwapi.dll");

    $.Constant({Static:true , Public:true }, "Crypt32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:false}, "Odbc32", $.String, "odbc32.dll");

    $.Constant({Static:true , Public:false}, "SNI", $.String, "System.Data.dll");

    $.Constant({Static:true , Public:false}, "OciDll", $.String, "oci.dll");

    $.Constant({Static:true , Public:false}, "OraMtsDll", $.String, "oramts.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.InvariantComparer */ 

(function InvariantComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.InvariantComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "m_compareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Web");
JSIL.DeclareNamespace("System.Web.Services");
/* class System.Web.Services.PartialTrustHelpers */ 

(function PartialTrustHelpers$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Web.Services.PartialTrustHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FailIfInPartialTrustOutsideAspNet", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isInPartialTrustOutsideAspNet", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isInPartialTrustOutsideAspNetInitialized", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap */ 

(function Soap$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "XmlNamespace", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "Encoding", $.String, "http://schemas.xmlsoap.org/soap/encoding/");

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://schemas.xmlsoap.org/soap/envelope/");

    $.Constant({Static:true , Public:false}, "ConformanceClaim", $.String, "http://ws-i.org/schemas/conformanceClaim/");

    $.Constant({Static:true , Public:false}, "BasicProfile1_1", $.String, "http://ws-i.org/profiles/basic/1.1");

    $.Constant({Static:true , Public:false}, "Action", $.String, "SOAPAction");

    $.Constant({Static:true , Public:false}, "ArrayType", $.String, "Array");

    $.Constant({Static:true , Public:false}, "Prefix", $.String, "soap");

    $.Constant({Static:true , Public:false}, "ClaimPrefix", $.String, "wsi");

    $.Constant({Static:true , Public:false}, "DimeContentType", $.String, "application/dime");

    $.Constant({Static:true , Public:false}, "SoapContentType", $.String, "text/xml");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap+Attribute */ 

(function Attribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap+Attribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "MustUnderstand", $.String, "mustUnderstand");

    $.Constant({Static:true , Public:false}, "Actor", $.String, "actor");

    $.Constant({Static:true , Public:false}, "EncodingStyle", $.String, "encodingStyle");

    $.Constant({Static:true , Public:false}, "Lang", $.String, "lang");

    $.Constant({Static:true , Public:false}, "ConformsTo", $.String, "conformsTo");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap+Element */ 

(function Element$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap+Element", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Envelope", $.String, "Envelope");

    $.Constant({Static:true , Public:false}, "Header", $.String, "Header");

    $.Constant({Static:true , Public:false}, "Body", $.String, "Body");

    $.Constant({Static:true , Public:false}, "Fault", $.String, "Fault");

    $.Constant({Static:true , Public:false}, "FaultActor", $.String, "faultactor");

    $.Constant({Static:true , Public:false}, "FaultCode", $.String, "faultcode");

    $.Constant({Static:true , Public:false}, "FaultDetail", $.String, "detail");

    $.Constant({Static:true , Public:false}, "FaultString", $.String, "faultstring");

    $.Constant({Static:true , Public:false}, "StackTrace", $.String, "StackTrace");

    $.Constant({Static:true , Public:false}, "Message", $.String, "Message");

    $.Constant({Static:true , Public:false}, "Claim", $.String, "Claim");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap+Code */ 

(function Code$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap+Code", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Server", $.String, "Server");

    $.Constant({Static:true , Public:false}, "VersionMismatch", $.String, "VersionMismatch");

    $.Constant({Static:true , Public:false}, "MustUnderstand", $.String, "MustUnderstand");

    $.Constant({Static:true , Public:false}, "Client", $.String, "Client");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap12 */ 

(function Soap12$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap12", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://www.w3.org/2003/05/soap-envelope");

    $.Constant({Static:true , Public:false}, "Encoding", $.String, "http://www.w3.org/2003/05/soap-encoding");

    $.Constant({Static:true , Public:false}, "RpcNamespace", $.String, "http://www.w3.org/2003/05/soap-rpc");

    $.Constant({Static:true , Public:false}, "Prefix", $.String, "soap12");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap12+Attribute */ 

(function Attribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap12+Attribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "UpgradeEnvelopeQname", $.String, "qname");

    $.Constant({Static:true , Public:false}, "Role", $.String, "role");

    $.Constant({Static:true , Public:false}, "Relay", $.String, "relay");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap12+Element */ 

(function Element$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap12+Element", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Upgrade", $.String, "Upgrade");

    $.Constant({Static:true , Public:false}, "UpgradeEnvelope", $.String, "SupportedEnvelope");

    $.Constant({Static:true , Public:false}, "FaultRole", $.String, "Role");

    $.Constant({Static:true , Public:false}, "FaultReason", $.String, "Reason");

    $.Constant({Static:true , Public:false}, "FaultReasonText", $.String, "Text");

    $.Constant({Static:true , Public:false}, "FaultCode", $.String, "Code");

    $.Constant({Static:true , Public:false}, "FaultNode", $.String, "Node");

    $.Constant({Static:true , Public:false}, "FaultCodeValue", $.String, "Value");

    $.Constant({Static:true , Public:false}, "FaultSubcode", $.String, "Subcode");

    $.Constant({Static:true , Public:false}, "FaultDetail", $.String, "Detail");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Soap12+Code */ 

(function Code$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Soap12+Code", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "VersionMismatch", $.String, "VersionMismatch");

    $.Constant({Static:true , Public:false}, "MustUnderstand", $.String, "MustUnderstand");

    $.Constant({Static:true , Public:false}, "DataEncodingUnknown", $.String, "DataEncodingUnknown");

    $.Constant({Static:true , Public:false}, "Sender", $.String, "Sender");

    $.Constant({Static:true , Public:false}, "Receiver", $.String, "Receiver");

    $.Constant({Static:true , Public:false}, "RpcProcedureNotPresentSubcode", $.String, "ProcedureNotPresent");

    $.Constant({Static:true , Public:false}, "RpcBadArgumentsSubcode", $.String, "BadArguments");

    $.Constant({Static:true , Public:false}, "EncodingMissingIDFaultSubcode", $.String, "MissingID");

    $.Constant({Static:true , Public:false}, "EncodingUntypedValueFaultSubcode", $.String, "UntypedValue");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CoCreateInstance", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Object, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      {
        Module: "ole32.dll", 
        Parameters: [
          {
            NativeType: "IntF"
          }, null
          , null
          , 
          {
            NativeType: "IntF", 
            Out: true
          }
        ]
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "OnSyncCallEnter", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), $asm2B.TypeRef("System.Web.Services.Interop.CallId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnSyncCallExit", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), $asm2B.TypeRef("System.Web.Services.Interop.CallId"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnSyncCallOut", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), $asm2B.TypeRef("System.Web.Services.Interop.CallId"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnSyncCallReturn", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), $asm2B.TypeRef("System.Web.Services.Interop.CallId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegisterNotifySource", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), [$asm2B.TypeRef("System.Web.Services.Interop.INotifyConnection2"), $asm2B.TypeRef("System.Web.Services.Interop.INotifySource2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnregisterNotifySource", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Interop.INotifyConnection2"), $asm2B.TypeRef("System.Web.Services.Interop.INotifySource2")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Web.Services.WebMethodAttribute */ 

(function WebMethodAttribute$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.WebMethodAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm34.TypeRef("System.EnterpriseServices.TransactionOption")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm34.TypeRef("System.EnterpriseServices.TransactionOption"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm34.TypeRef("System.EnterpriseServices.TransactionOption"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BufferResponseSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheDuration", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheDurationSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DescriptionSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableSession", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableSessionSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MessageNameSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionOption", 
      JSIL.MethodSignature.Return($asm34.TypeRef("System.EnterpriseServices.TransactionOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionOptionSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BufferResponse", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CacheDuration", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableSession", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MessageName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransactionOption", 
      JSIL.MethodSignature.Action($asm34.TypeRef("System.EnterpriseServices.TransactionOption"))
    );

    $.Field({Static:false, Public:false}, "transactionOption", $.Int32);

    $.Field({Static:false, Public:false}, "enableSession", $.Boolean);

    $.Field({Static:false, Public:false}, "cacheDuration", $.Int32);

    $.Field({Static:false, Public:false}, "bufferResponse", $.Boolean);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "messageName", $.String);

    $.Field({Static:false, Public:false}, "transactionOptionSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "enableSessionSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "cacheDurationSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "bufferResponseSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "descriptionSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "messageNameSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:false}, "DescriptionSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableSession", $.Boolean);

    $.Property({Static:false, Public:false}, "EnableSessionSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "CacheDuration", $.Int32);

    $.Property({Static:false, Public:false}, "CacheDurationSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "BufferResponse", $.Boolean);

    $.Property({Static:false, Public:false}, "BufferResponseSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "TransactionOption", $asm34.TypeRef("System.EnterpriseServices.TransactionOption"));

    $.Property({Static:false, Public:false}, "TransactionOptionSpecified", $.Boolean);

    $.Property({Static:false, Public:false}, "TransactionEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "MessageName", $.String);

    $.Property({Static:false, Public:false}, "MessageNameSpecified", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class System.Web.Services.WebMethodReflector */ 

(function WebMethodReflector$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.WebMethodReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FindInterfaceMethodInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WebMethodAttribute"), [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethods", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]), $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.WebMethod */ 

(function WebMethod$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.WebMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"), 
          $asm2B.TypeRef("System.Web.Services.WebMethodAttribute")
        ])
    );

    $.Field({Static:false, Public:false}, "declaration", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Field({Static:false, Public:false}, "attribute", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.WebService */ 

(function WebService$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.MarshalByValueComponent"), 
      Name: "System.Web.Services.WebService", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Application", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpApplicationState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Server", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpServerUtility"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.SessionState.HttpSessionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapVersion", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_User", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContext", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.Field({Static:false, Public:false}, "context", $asm28.TypeRef("System.Web.HttpContext"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SoapVersionContextSlot", $.String, "WebServiceSoapVersion");

    $.Property({Static:false, Public:true }, "Application", $asm28.TypeRef("System.Web.HttpApplicationState"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), function () { return ["The ASP.NET application object for the current request."]; });

    $.Property({Static:false, Public:true }, "Context", $asm28.TypeRef("System.Web.HttpContext"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["WebServiceContext"]; });

    $.Property({Static:false, Public:true }, "Session", $asm28.TypeRef("System.Web.SessionState.HttpSessionState"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["WebServiceSession"]; });

    $.Property({Static:false, Public:true }, "Server", $asm28.TypeRef("System.Web.HttpServerUtility"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["WebServiceServer"]; });

    $.Property({Static:false, Public:true }, "User", $asm07.TypeRef("System.Security.Principal.IPrincipal"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["WebServiceUser"]; });

    $.Property({Static:false, Public:true }, "SoapVersion", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["WebServiceSoapVersion"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.WebServiceAttribute */ 

(function WebServiceAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.WebServiceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Constant({Static:true , Public:true }, "DefaultNamespace", $.String, "http://tempuri.org/");

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class System.Web.Services.WebServiceReflector */ 

(function WebServiceReflector$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.WebServiceReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WebServiceAttribute"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WebServiceAttribute"), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMostDerivedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.WebServiceBindingAttribute */ 

(function WebServiceBindingAttribute$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.WebServiceBindingAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformsTo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmitConformanceClaims", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConformsTo", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EmitConformanceClaims", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Field({Static:false, Public:false}, "claims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Field({Static:false, Public:false}, "emitClaims", $.Boolean);

    $.Property({Static:false, Public:true }, "ConformsTo", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true }, "EmitConformanceClaims", $.Boolean);

    $.Property({Static:false, Public:true }, "Location", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class System.Web.Services.WebServiceBindingReflector */ 

(function WebServiceBindingReflector$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.WebServiceBindingReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"), [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.WebServicesDescriptionAttribute */ 

(function WebServicesDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Web.Services.WebServicesDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* enum System.Web.Services.WsiProfiles */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.WsiProfiles", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    BasicProfile1_1: 1, 
  }
);

/* class System.Web.Services.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Web.Services.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Web.Services.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Web.Services.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Web.Services.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "NonClsCompliantException", $.String, "NonClsCompliantException");

    $.Constant({Static:true , Public:false}, "WebConfigInvalidExtensionPriority", $.String, "WebConfigInvalidExtensionPriority");

    $.Constant({Static:true , Public:false}, "ConfigKeyNotFoundInElementCollection", $.String, "ConfigKeyNotFoundInElementCollection");

    $.Constant({Static:true , Public:false}, "ConfigKeysDoNotMatch", $.String, "ConfigKeysDoNotMatch");

    $.Constant({Static:true , Public:false}, "Invalid_priority_group_value", $.String, "Invalid_priority_group_value");

    $.Constant({Static:true , Public:false}, "WebSchemaNotFound", $.String, "WebSchemaNotFound");

    $.Constant({Static:true , Public:false}, "WebReflectionError", $.String, "WebReflectionError");

    $.Constant({Static:true , Public:false}, "WebInvalidMethodName", $.String, "WebInvalidMethodName");

    $.Constant({Static:true , Public:false}, "WebInvalidMethodNameCase", $.String, "WebInvalidMethodNameCase");

    $.Constant({Static:true , Public:false}, "WebInvalidRequestFormat", $.String, "WebInvalidRequestFormat");

    $.Constant({Static:true , Public:false}, "WebInvalidRequestFormatDetails", $.String, "WebInvalidRequestFormatDetails");

    $.Constant({Static:true , Public:false}, "WebMethodStatic", $.String, "WebMethodStatic");

    $.Constant({Static:true , Public:false}, "WebMethodMissingParams", $.String, "WebMethodMissingParams");

    $.Constant({Static:true , Public:false}, "WebBadOutParameter", $.String, "WebBadOutParameter");

    $.Constant({Static:true , Public:false}, "WebInOutParameter", $.String, "WebInOutParameter");

    $.Constant({Static:true , Public:false}, "WebAsyncMissingEnd", $.String, "WebAsyncMissingEnd");

    $.Constant({Static:true , Public:false}, "WebMissingPath", $.String, "WebMissingPath");

    $.Constant({Static:true , Public:false}, "WebResponseKnownError", $.String, "WebResponseKnownError");

    $.Constant({Static:true , Public:false}, "WebResponseUnknownError", $.String, "WebResponseUnknownError");

    $.Constant({Static:true , Public:false}, "WebResponseUnknownErrorEmptyBody", $.String, "WebResponseUnknownErrorEmptyBody");

    $.Constant({Static:true , Public:false}, "WebResponseContent", $.String, "WebResponseContent");

    $.Constant({Static:true , Public:false}, "WebBadStreamState", $.String, "WebBadStreamState");

    $.Constant({Static:true , Public:false}, "WebResponseBadXml", $.String, "WebResponseBadXml");

    $.Constant({Static:true , Public:false}, "WebCannotUnderstandHeader", $.String, "WebCannotUnderstandHeader");

    $.Constant({Static:true , Public:false}, "WebMissingHeader", $.String, "WebMissingHeader");

    $.Constant({Static:true , Public:false}, "WebNoReturnValue", $.String, "WebNoReturnValue");

    $.Constant({Static:true , Public:false}, "WebCannotAccessValue", $.String, "WebCannotAccessValue");

    $.Constant({Static:true , Public:false}, "WebCannotAccessValueStage", $.String, "WebCannotAccessValueStage");

    $.Constant({Static:true , Public:false}, "WebInvalidBindingPlacement", $.String, "WebInvalidBindingPlacement");

    $.Constant({Static:true , Public:false}, "WebInvalidBindingName", $.String, "WebInvalidBindingName");

    $.Constant({Static:true , Public:false}, "WebBothMethodAttrs", $.String, "WebBothMethodAttrs");

    $.Constant({Static:true , Public:false}, "WebBothServiceAttrs", $.String, "WebBothServiceAttrs");

    $.Constant({Static:true , Public:false}, "WebOneWayOutParameters", $.String, "WebOneWayOutParameters");

    $.Constant({Static:true , Public:false}, "WebOneWayReturnValue", $.String, "WebOneWayReturnValue");

    $.Constant({Static:true , Public:false}, "WebReflectionErrorMethod", $.String, "WebReflectionErrorMethod");

    $.Constant({Static:true , Public:false}, "WebMultiDimArray", $.String, "WebMultiDimArray");

    $.Constant({Static:true , Public:false}, "WebHeaderMissing", $.String, "WebHeaderMissing");

    $.Constant({Static:true , Public:false}, "WebHeaderStatic", $.String, "WebHeaderStatic");

    $.Constant({Static:true , Public:false}, "WebHeaderRead", $.String, "WebHeaderRead");

    $.Constant({Static:true , Public:false}, "WebHeaderWrite", $.String, "WebHeaderWrite");

    $.Constant({Static:true , Public:false}, "WebHeaderType", $.String, "WebHeaderType");

    $.Constant({Static:true , Public:false}, "WebHeaderOneWayOut", $.String, "WebHeaderOneWayOut");

    $.Constant({Static:true , Public:false}, "WebHeaderInvalidMustUnderstand", $.String, "WebHeaderInvalidMustUnderstand");

    $.Constant({Static:true , Public:false}, "WebMultiplyDeclaredHeaderTypes", $.String, "WebMultiplyDeclaredHeaderTypes");

    $.Constant({Static:true , Public:false}, "WebHttpHeader", $.String, "WebHttpHeader");

    $.Constant({Static:true , Public:false}, "WebRequestContent", $.String, "WebRequestContent");

    $.Constant({Static:true , Public:false}, "WebRequestUnableToRead", $.String, "WebRequestUnableToRead");

    $.Constant({Static:true , Public:false}, "WebRequestUnableToProcess", $.String, "WebRequestUnableToProcess");

    $.Constant({Static:true , Public:false}, "WebMissingParameter", $.String, "WebMissingParameter");

    $.Constant({Static:true , Public:false}, "WebUnrecognizedRequestFormat", $.String, "WebUnrecognizedRequestFormat");

    $.Constant({Static:true , Public:false}, "WebUnrecognizedRequestFormatUrl", $.String, "WebUnrecognizedRequestFormatUrl");

    $.Constant({Static:true , Public:false}, "WebTimeout", $.String, "WebTimeout");

    $.Constant({Static:true , Public:false}, "WebMissingHelpContext", $.String, "WebMissingHelpContext");

    $.Constant({Static:true , Public:false}, "WebMissingCustomAttribute", $.String, "WebMissingCustomAttribute");

    $.Constant({Static:true , Public:false}, "WebMissingClientProtocol", $.String, "WebMissingClientProtocol");

    $.Constant({Static:true , Public:false}, "WebResolveMissingClientProtocol", $.String, "WebResolveMissingClientProtocol");

    $.Constant({Static:true , Public:false}, "WebPathNotFound", $.String, "WebPathNotFound");

    $.Constant({Static:true , Public:false}, "WebMissingResource", $.String, "WebMissingResource");

    $.Constant({Static:true , Public:false}, "WebContractReferenceName", $.String, "WebContractReferenceName");

    $.Constant({Static:true , Public:false}, "WebShemaReferenceName", $.String, "WebShemaReferenceName");

    $.Constant({Static:true , Public:false}, "WebDiscoveryDocumentReferenceName", $.String, "WebDiscoveryDocumentReferenceName");

    $.Constant({Static:true , Public:false}, "WebMissingDocument", $.String, "WebMissingDocument");

    $.Constant({Static:true , Public:false}, "WebInvalidContentType", $.String, "WebInvalidContentType");

    $.Constant({Static:true , Public:false}, "WebInvalidFormat", $.String, "WebInvalidFormat");

    $.Constant({Static:true , Public:false}, "WebInvalidEnvelopeNamespace", $.String, "WebInvalidEnvelopeNamespace");

    $.Constant({Static:true , Public:false}, "WebResultNotXml", $.String, "WebResultNotXml");

    $.Constant({Static:true , Public:false}, "WebDescriptionMissingItem", $.String, "WebDescriptionMissingItem");

    $.Constant({Static:true , Public:false}, "WebDescriptionMissing", $.String, "WebDescriptionMissing");

    $.Constant({Static:true , Public:false}, "WebDescriptionPartElementRequired", $.String, "WebDescriptionPartElementRequired");

    $.Constant({Static:true , Public:false}, "WebDescriptionPartTypeRequired", $.String, "WebDescriptionPartTypeRequired");

    $.Constant({Static:true , Public:false}, "WebDescriptionPartElementWarning", $.String, "WebDescriptionPartElementWarning");

    $.Constant({Static:true , Public:false}, "WebDescriptionPartTypeWarning", $.String, "WebDescriptionPartTypeWarning");

    $.Constant({Static:true , Public:false}, "WebDescriptionMissingBodyUseAttribute", $.String, "WebDescriptionMissingBodyUseAttribute");

    $.Constant({Static:true , Public:false}, "WebDescriptionTooManyMessages", $.String, "WebDescriptionTooManyMessages");

    $.Constant({Static:true , Public:false}, "WebDescriptionHeaderAndBodyUseMismatch", $.String, "WebDescriptionHeaderAndBodyUseMismatch");

    $.Constant({Static:true , Public:false}, "WebQNamePrefixUndefined", $.String, "WebQNamePrefixUndefined");

    $.Constant({Static:true , Public:false}, "WebNegativeValue", $.String, "WebNegativeValue");

    $.Constant({Static:true , Public:false}, "WebEmptyRef", $.String, "WebEmptyRef");

    $.Constant({Static:true , Public:false}, "WebNullRef", $.String, "WebNullRef");

    $.Constant({Static:true , Public:false}, "WebRefInvalidAttribute", $.String, "WebRefInvalidAttribute");

    $.Constant({Static:true , Public:false}, "WebRefInvalidAttribute2", $.String, "WebRefInvalidAttribute2");

    $.Constant({Static:true , Public:false}, "WebInvalidDocType", $.String, "WebInvalidDocType");

    $.Constant({Static:true , Public:false}, "WebDiscoRefReport", $.String, "WebDiscoRefReport");

    $.Constant({Static:true , Public:false}, "WebTextMatchMissingPattern", $.String, "WebTextMatchMissingPattern");

    $.Constant({Static:true , Public:false}, "WebTextMatchIgnoredTypeWarning", $.String, "WebTextMatchIgnoredTypeWarning");

    $.Constant({Static:true , Public:false}, "WebTextMatchBadCaptureIndex", $.String, "WebTextMatchBadCaptureIndex");

    $.Constant({Static:true , Public:false}, "WebTextMatchBadGroupIndex", $.String, "WebTextMatchBadGroupIndex");

    $.Constant({Static:true , Public:false}, "WebServiceDescriptionIgnoredOptional", $.String, "WebServiceDescriptionIgnoredOptional");

    $.Constant({Static:true , Public:false}, "WebServiceDescriptionIgnoredRequired", $.String, "WebServiceDescriptionIgnoredRequired");

    $.Constant({Static:true , Public:false}, "WebDuplicateServiceDescription", $.String, "WebDuplicateServiceDescription");

    $.Constant({Static:true , Public:false}, "WebDuplicateFormatExtension", $.String, "WebDuplicateFormatExtension");

    $.Constant({Static:true , Public:false}, "WebDuplicateOperationMessage", $.String, "WebDuplicateOperationMessage");

    $.Constant({Static:true , Public:false}, "WebDuplicateImport", $.String, "WebDuplicateImport");

    $.Constant({Static:true , Public:false}, "WebDuplicateMessage", $.String, "WebDuplicateMessage");

    $.Constant({Static:true , Public:false}, "WebDuplicatePort", $.String, "WebDuplicatePort");

    $.Constant({Static:true , Public:false}, "WebDuplicatePortType", $.String, "WebDuplicatePortType");

    $.Constant({Static:true , Public:false}, "WebDuplicateBinding", $.String, "WebDuplicateBinding");

    $.Constant({Static:true , Public:false}, "WebDuplicateService", $.String, "WebDuplicateService");

    $.Constant({Static:true , Public:false}, "WebDuplicateMessagePart", $.String, "WebDuplicateMessagePart");

    $.Constant({Static:true , Public:false}, "WebDuplicateOperationBinding", $.String, "WebDuplicateOperationBinding");

    $.Constant({Static:true , Public:false}, "WebDuplicateFaultBinding", $.String, "WebDuplicateFaultBinding");

    $.Constant({Static:true , Public:false}, "WebDuplicateOperation", $.String, "WebDuplicateOperation");

    $.Constant({Static:true , Public:false}, "WebDuplicateOperationFault", $.String, "WebDuplicateOperationFault");

    $.Constant({Static:true , Public:false}, "WebDuplicateUnknownElement", $.String, "WebDuplicateUnknownElement");

    $.Constant({Static:true , Public:false}, "WebUnknownEncodingStyle", $.String, "WebUnknownEncodingStyle");

    $.Constant({Static:true , Public:false}, "WebSoap11EncodingStyleNotSupported1", $.String, "WebSoap11EncodingStyleNotSupported1");

    $.Constant({Static:true , Public:false}, "WebNullAsyncResultInBegin", $.String, "WebNullAsyncResultInBegin");

    $.Constant({Static:true , Public:false}, "WebNullAsyncResultInEnd", $.String, "WebNullAsyncResultInEnd");

    $.Constant({Static:true , Public:false}, "WebAsyncTransaction", $.String, "WebAsyncTransaction");

    $.Constant({Static:true , Public:false}, "WebConfigExtensionError", $.String, "WebConfigExtensionError");

    $.Constant({Static:true , Public:false}, "WebExtensionError", $.String, "WebExtensionError");

    $.Constant({Static:true , Public:false}, "WebChangeTypeFailed", $.String, "WebChangeTypeFailed");

    $.Constant({Static:true , Public:false}, "WebBadEnum", $.String, "WebBadEnum");

    $.Constant({Static:true , Public:false}, "WebBadHex", $.String, "WebBadHex");

    $.Constant({Static:true , Public:false}, "WebClientBindingAttributeRequired", $.String, "WebClientBindingAttributeRequired");

    $.Constant({Static:true , Public:false}, "WebHeaderInvalidRelay", $.String, "WebHeaderInvalidRelay");

    $.Constant({Static:true , Public:false}, "WebVirtualDisoRoot", $.String, "WebVirtualDisoRoot");

    $.Constant({Static:true , Public:false}, "WebRefDuplicateSchema", $.String, "WebRefDuplicateSchema");

    $.Constant({Static:true , Public:false}, "WebRefDuplicateService", $.String, "WebRefDuplicateService");

    $.Constant({Static:true , Public:false}, "WebWsiContentTypeEncoding", $.String, "WebWsiContentTypeEncoding");

    $.Constant({Static:true , Public:false}, "WebWsiViolation", $.String, "WebWsiViolation");

    $.Constant({Static:true , Public:false}, "WebNullReaderForMessage", $.String, "WebNullReaderForMessage");

    $.Constant({Static:true , Public:false}, "WebNullWriterForMessage", $.String, "WebNullWriterForMessage");

    $.Constant({Static:true , Public:false}, "NeedConcreteType", $.String, "NeedConcreteType");

    $.Constant({Static:true , Public:false}, "WebUnknownElement", $.String, "WebUnknownElement");

    $.Constant({Static:true , Public:false}, "WebUnknownElement1", $.String, "WebUnknownElement1");

    $.Constant({Static:true , Public:false}, "WebUnknownElement2", $.String, "WebUnknownElement2");

    $.Constant({Static:true , Public:false}, "WebUnknownAttribute", $.String, "WebUnknownAttribute");

    $.Constant({Static:true , Public:false}, "WebUnknownAttribute2", $.String, "WebUnknownAttribute2");

    $.Constant({Static:true , Public:false}, "WebUnknownAttribute3", $.String, "WebUnknownAttribute3");

    $.Constant({Static:true , Public:false}, "WebUnreferencedObject", $.String, "WebUnreferencedObject");

    $.Constant({Static:true , Public:false}, "WebSuppressedExceptionMessage", $.String, "WebSuppressedExceptionMessage");

    $.Constant({Static:true , Public:false}, "CannotRunInPartialTrustOutsideAspNet", $.String, "CannotRunInPartialTrustOutsideAspNet");

    $.Constant({Static:true , Public:false}, "WebServiceContext", $.String, "WebServiceContext");

    $.Constant({Static:true , Public:false}, "WebServiceSession", $.String, "WebServiceSession");

    $.Constant({Static:true , Public:false}, "WebServiceServer", $.String, "WebServiceServer");

    $.Constant({Static:true , Public:false}, "WebServiceUser", $.String, "WebServiceUser");

    $.Constant({Static:true , Public:false}, "WebServiceSoapVersion", $.String, "WebServiceSoapVersion");

    $.Constant({Static:true , Public:false}, "ClientProtocolAllowAutoRedirect", $.String, "ClientProtocolAllowAutoRedirect");

    $.Constant({Static:true , Public:false}, "ClientProtocolCookieContainer", $.String, "ClientProtocolCookieContainer");

    $.Constant({Static:true , Public:false}, "ClientProtocolPreAuthenticate", $.String, "ClientProtocolPreAuthenticate");

    $.Constant({Static:true , Public:false}, "ClientProtocolClientCertificates", $.String, "ClientProtocolClientCertificates");

    $.Constant({Static:true , Public:false}, "ClientProtocolUrl", $.String, "ClientProtocolUrl");

    $.Constant({Static:true , Public:false}, "ClientProtocolEncoding", $.String, "ClientProtocolEncoding");

    $.Constant({Static:true , Public:false}, "ClientProtocolTimeout", $.String, "ClientProtocolTimeout");

    $.Constant({Static:true , Public:false}, "ClientProtocolUserAgent", $.String, "ClientProtocolUserAgent");

    $.Constant({Static:true , Public:false}, "ClientProtocolUsername", $.String, "ClientProtocolUsername");

    $.Constant({Static:true , Public:false}, "ClientProtocolPassword", $.String, "ClientProtocolPassword");

    $.Constant({Static:true , Public:false}, "ClientProtocolDomain", $.String, "ClientProtocolDomain");

    $.Constant({Static:true , Public:false}, "ClientProtocolProxyName", $.String, "ClientProtocolProxyName");

    $.Constant({Static:true , Public:false}, "ClientProtocolProxyPort", $.String, "ClientProtocolProxyPort");

    $.Constant({Static:true , Public:false}, "ClientProtocolSoapVersion", $.String, "ClientProtocolSoapVersion");

    $.Constant({Static:true , Public:false}, "ClientProtocolEnableDecompression", $.String, "ClientProtocolEnableDecompression");

    $.Constant({Static:true , Public:false}, "XmlLang", $.String, "XmlLang");

    $.Constant({Static:true , Public:false}, "HelpGeneratorHttpGetTitle", $.String, "HelpGeneratorHttpGetTitle");

    $.Constant({Static:true , Public:false}, "HelpGeneratorHttpGetText", $.String, "HelpGeneratorHttpGetText");

    $.Constant({Static:true , Public:false}, "HelpGeneratorHttpPostTitle", $.String, "HelpGeneratorHttpPostTitle");

    $.Constant({Static:true , Public:false}, "HelpGeneratorHttpPostText", $.String, "HelpGeneratorHttpPostText");

    $.Constant({Static:true , Public:false}, "HelpGeneratorSoapTitle", $.String, "HelpGeneratorSoapTitle");

    $.Constant({Static:true , Public:false}, "HelpGeneratorSoap1_2Title", $.String, "HelpGeneratorSoap1_2Title");

    $.Constant({Static:true , Public:false}, "HelpGeneratorSoapText", $.String, "HelpGeneratorSoapText");

    $.Constant({Static:true , Public:false}, "HelpGeneratorSoap1_2Text", $.String, "HelpGeneratorSoap1_2Text");

    $.Constant({Static:true , Public:false}, "HelpGeneratorInvokeButton", $.String, "HelpGeneratorInvokeButton");

    $.Constant({Static:true , Public:false}, "HelpGeneratorParameter", $.String, "HelpGeneratorParameter");

    $.Constant({Static:true , Public:false}, "HelpGeneratorValue", $.String, "HelpGeneratorValue");

    $.Constant({Static:true , Public:false}, "HelpGeneratorTestHeader", $.String, "HelpGeneratorTestHeader");

    $.Constant({Static:true , Public:false}, "HelpGeneratorTestText", $.String, "HelpGeneratorTestText");

    $.Constant({Static:true , Public:false}, "HelpGeneratorNoTestFormRemote", $.String, "HelpGeneratorNoTestFormRemote");

    $.Constant({Static:true , Public:false}, "HelpGeneratorLinkBack", $.String, "HelpGeneratorLinkBack");

    $.Constant({Static:true , Public:false}, "HelpGeneratorEnableHttpPostHeader", $.String, "HelpGeneratorEnableHttpPostHeader");

    $.Constant({Static:true , Public:false}, "HelpGeneratorEnableHttpPostInstructions", $.String, "HelpGeneratorEnableHttpPostInstructions");

    $.Constant({Static:true , Public:false}, "HelpGeneratorOperationsIntro", $.String, "HelpGeneratorOperationsIntro");

    $.Constant({Static:true , Public:false}, "HelpGeneratorWebService", $.String, "HelpGeneratorWebService");

    $.Constant({Static:true , Public:false}, "HelpGeneratorNoHttpGetTest", $.String, "HelpGeneratorNoHttpGetTest");

    $.Constant({Static:true , Public:false}, "HelpGeneratorNoHttpPostTest", $.String, "HelpGeneratorNoHttpPostTest");

    $.Constant({Static:true , Public:false}, "HelpGeneratorNoTestNonPrimitive", $.String, "HelpGeneratorNoTestNonPrimitive");

    $.Constant({Static:true , Public:false}, "HelpGeneratorMethodNotFound", $.String, "HelpGeneratorMethodNotFound");

    $.Constant({Static:true , Public:false}, "HelpGeneratorMethodNotFoundText", $.String, "HelpGeneratorMethodNotFoundText");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleBODY", $.String, "HelpGeneratorStyleBODY");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylecontent", $.String, "HelpGeneratorStylecontent");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleAlink", $.String, "HelpGeneratorStyleAlink");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleAvisited", $.String, "HelpGeneratorStyleAvisited");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleAactive", $.String, "HelpGeneratorStyleAactive");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleAhover", $.String, "HelpGeneratorStyleAhover");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleP", $.String, "HelpGeneratorStyleP");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylepre", $.String, "HelpGeneratorStylepre");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyletd", $.String, "HelpGeneratorStyletd");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleh2", $.String, "HelpGeneratorStyleh2");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleh3", $.String, "HelpGeneratorStyleh3");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleul", $.String, "HelpGeneratorStyleul");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleol", $.String, "HelpGeneratorStyleol");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleli", $.String, "HelpGeneratorStyleli");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefontvalue", $.String, "HelpGeneratorStylefontvalue");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefontkey", $.String, "HelpGeneratorStylefontkey");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefontError", $.String, "HelpGeneratorStylefontError");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleheading1", $.String, "HelpGeneratorStyleheading1");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylebutton", $.String, "HelpGeneratorStylebutton");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefrmheader", $.String, "HelpGeneratorStylefrmheader");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefrmtext", $.String, "HelpGeneratorStylefrmtext");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStylefrmInput", $.String, "HelpGeneratorStylefrmInput");

    $.Constant({Static:true , Public:false}, "HelpGeneratorStyleintro", $.String, "HelpGeneratorStyleintro");

    $.Constant({Static:true , Public:false}, "HelpGeneratorImplementation", $.String, "HelpGeneratorImplementation");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceWarning1", $.String, "HelpGeneratorDefaultNamespaceWarning1");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceWarning2", $.String, "HelpGeneratorDefaultNamespaceWarning2");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp1", $.String, "HelpGeneratorDefaultNamespaceHelp1");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp2", $.String, "HelpGeneratorDefaultNamespaceHelp2");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp3", $.String, "HelpGeneratorDefaultNamespaceHelp3");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp4", $.String, "HelpGeneratorDefaultNamespaceHelp4");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp5", $.String, "HelpGeneratorDefaultNamespaceHelp5");

    $.Constant({Static:true , Public:false}, "HelpGeneratorDefaultNamespaceHelp6", $.String, "HelpGeneratorDefaultNamespaceHelp6");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformance", $.String, "HelpGeneratorServiceConformance");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceDetails", $.String, "HelpGeneratorServiceConformanceDetails");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceConfig", $.String, "HelpGeneratorServiceConformanceConfig");

    $.Constant({Static:true , Public:false}, "HelpGeneratorRecommendation", $.String, "HelpGeneratorRecommendation");

    $.Constant({Static:true , Public:false}, "Rxxxx", $.String, "Rxxxx");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceRxxxx", $.String, "HelpGeneratorServiceConformanceRxxxx");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceRxxxx_r", $.String, "HelpGeneratorServiceConformanceRxxxx_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2028", $.String, "HelpGeneratorServiceConformanceR2028");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2026", $.String, "HelpGeneratorServiceConformanceR2026");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2705", $.String, "HelpGeneratorServiceConformanceR2705");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2705_r", $.String, "HelpGeneratorServiceConformanceR2705_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2706", $.String, "HelpGeneratorServiceConformanceR2706");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2706_r", $.String, "HelpGeneratorServiceConformanceR2706_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2007", $.String, "HelpGeneratorServiceConformanceR2007");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2007_r", $.String, "HelpGeneratorServiceConformanceR2007_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2803", $.String, "HelpGeneratorServiceConformanceR2803");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2803_r", $.String, "HelpGeneratorServiceConformanceR2803_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2105", $.String, "HelpGeneratorServiceConformanceR2105");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2105_r", $.String, "HelpGeneratorServiceConformanceR2105_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR1014", $.String, "HelpGeneratorServiceConformanceR1014");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR1014_r", $.String, "HelpGeneratorServiceConformanceR1014_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2201", $.String, "HelpGeneratorServiceConformanceR2201");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2210", $.String, "HelpGeneratorServiceConformanceR2210");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2210_r", $.String, "HelpGeneratorServiceConformanceR2210_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2306", $.String, "HelpGeneratorServiceConformanceR2306");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2203", $.String, "HelpGeneratorServiceConformanceR2203");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2204", $.String, "HelpGeneratorServiceConformanceR2204");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2205", $.String, "HelpGeneratorServiceConformanceR2205");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2303", $.String, "HelpGeneratorServiceConformanceR2303");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2304", $.String, "HelpGeneratorServiceConformanceR2304");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2304_r", $.String, "HelpGeneratorServiceConformanceR2304_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2701", $.String, "HelpGeneratorServiceConformanceR2701");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2702", $.String, "HelpGeneratorServiceConformanceR2702");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2710", $.String, "HelpGeneratorServiceConformanceR2710");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2710_r", $.String, "HelpGeneratorServiceConformanceR2710_r");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2716", $.String, "HelpGeneratorServiceConformanceR2716");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2717", $.String, "HelpGeneratorServiceConformanceR2717");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2726", $.String, "HelpGeneratorServiceConformanceR2726");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2718", $.String, "HelpGeneratorServiceConformanceR2718");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2720", $.String, "HelpGeneratorServiceConformanceR2720");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2749", $.String, "HelpGeneratorServiceConformanceR2749");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2721", $.String, "HelpGeneratorServiceConformanceR2721");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceR2754", $.String, "HelpGeneratorServiceConformanceR2754");

    $.Constant({Static:true , Public:false}, "HelpGeneratorServiceConformanceHelp", $.String, "HelpGeneratorServiceConformanceHelp");

    $.Constant({Static:true , Public:false}, "BindingMissingAttribute", $.String, "BindingMissingAttribute");

    $.Constant({Static:true , Public:false}, "BindingInvalidAttribute", $.String, "BindingInvalidAttribute");

    $.Constant({Static:true , Public:false}, "OperationFlowNotification", $.String, "OperationFlowNotification");

    $.Constant({Static:true , Public:false}, "OperationFlowSolicitResponse", $.String, "OperationFlowSolicitResponse");

    $.Constant({Static:true , Public:false}, "PortTypeOperationMissing", $.String, "PortTypeOperationMissing");

    $.Constant({Static:true , Public:false}, "BindingOperationMissing", $.String, "BindingOperationMissing");

    $.Constant({Static:true , Public:false}, "BindingMultipleParts", $.String, "BindingMultipleParts");

    $.Constant({Static:true , Public:false}, "ElementEncodedExtension", $.String, "ElementEncodedExtension");

    $.Constant({Static:true , Public:false}, "InputElement", $.String, "InputElement");

    $.Constant({Static:true , Public:false}, "OutputElement", $.String, "OutputElement");

    $.Constant({Static:true , Public:false}, "Fault", $.String, "Fault");

    $.Constant({Static:true , Public:false}, "HeaderFault", $.String, "HeaderFault");

    $.Constant({Static:true , Public:false}, "Binding", $.String, "Binding");

    $.Constant({Static:true , Public:false}, "Operation", $.String, "Operation");

    $.Constant({Static:true , Public:false}, "OperationBinding", $.String, "OperationBinding");

    $.Constant({Static:true , Public:false}, "FaultBinding", $.String, "FaultBinding");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Description");

    $.Constant({Static:true , Public:false}, "Element", $.String, "Element");

    $.Constant({Static:true , Public:false}, "Port", $.String, "Port");

    $.Constant({Static:true , Public:false}, "Message", $.String, "Message");

    $.Constant({Static:true , Public:false}, "Part", $.String, "Part");

    $.Constant({Static:true , Public:false}, "OperationMissingBinding", $.String, "OperationMissingBinding");

    $.Constant({Static:true , Public:false}, "UriValueRelative", $.String, "UriValueRelative");

    $.Constant({Static:true , Public:false}, "HelpGeneratorLanguageConfig", $.String, "HelpGeneratorLanguageConfig");

    $.Constant({Static:true , Public:false}, "HelpGeneratorInternalError", $.String, "HelpGeneratorInternalError");

    $.Constant({Static:true , Public:false}, "OperationOverload", $.String, "OperationOverload");

    $.Constant({Static:true , Public:false}, "WireSignature", $.String, "WireSignature");

    $.Constant({Static:true , Public:false}, "WireSignatureEmpty", $.String, "WireSignatureEmpty");

    $.Constant({Static:true , Public:false}, "WsdlInstanceValidation", $.String, "WsdlInstanceValidation");

    $.Constant({Static:true , Public:false}, "WsdlInstanceValidationDetails", $.String, "WsdlInstanceValidationDetails");

    $.Constant({Static:true , Public:false}, "WhenUsingAMessageStyleOfParametersAsDocument0", $.String, "WhenUsingAMessageStyleOfParametersAsDocument0");

    $.Constant({Static:true , Public:false}, "UnsupportedMessageStyle1", $.String, "UnsupportedMessageStyle1");

    $.Constant({Static:true , Public:false}, "TheMethodsAndUseTheSameSoapActionWhenTheService3", $.String, "TheMethodsAndUseTheSameSoapActionWhenTheService3");

    $.Constant({Static:true , Public:false}, "TheMethodDoesNotHaveARequestElementEither1", $.String, "TheMethodDoesNotHaveARequestElementEither1");

    $.Constant({Static:true , Public:false}, "TheMethodsAndUseTheSameRequestElementXmlns4", $.String, "TheMethodsAndUseTheSameRequestElementXmlns4");

    $.Constant({Static:true , Public:false}, "TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6", $.String, "TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6");

    $.Constant({Static:true , Public:false}, "TheRootElementForTheRequestCouldNotBeDetermined0", $.String, "TheRootElementForTheRequestCouldNotBeDetermined0");

    $.Constant({Static:true , Public:false}, "TheRequestElementXmlnsWasNotRecognized2", $.String, "TheRequestElementXmlnsWasNotRecognized2");

    $.Constant({Static:true , Public:false}, "ServiceDescriptionWasNotFound0", $.String, "ServiceDescriptionWasNotFound0");

    $.Constant({Static:true , Public:false}, "internalError0", $.String, "internalError0");

    $.Constant({Static:true , Public:false}, "DiscoveryIsNotPossibleBecauseTypeIsMissing1", $.String, "DiscoveryIsNotPossibleBecauseTypeIsMissing1");

    $.Constant({Static:true , Public:false}, "TheBindingNamedFromNamespaceWasNotFoundIn3", $.String, "TheBindingNamedFromNamespaceWasNotFoundIn3");

    $.Constant({Static:true , Public:false}, "Missing2", $.String, "Missing2");

    $.Constant({Static:true , Public:false}, "MissingHttpOperationElement0", $.String, "MissingHttpOperationElement0");

    $.Constant({Static:true , Public:false}, "MessageHasNoParts1", $.String, "MessageHasNoParts1");

    $.Constant({Static:true , Public:false}, "DuplicateInputOutputNames0", $.String, "DuplicateInputOutputNames0");

    $.Constant({Static:true , Public:false}, "MissingBinding0", $.String, "MissingBinding0");

    $.Constant({Static:true , Public:false}, "MissingInputBinding0", $.String, "MissingInputBinding0");

    $.Constant({Static:true , Public:false}, "MissingOutputBinding0", $.String, "MissingOutputBinding0");

    $.Constant({Static:true , Public:false}, "UnableToImportOperation1", $.String, "UnableToImportOperation1");

    $.Constant({Static:true , Public:false}, "UnableToImportBindingFromNamespace2", $.String, "UnableToImportBindingFromNamespace2");

    $.Constant({Static:true , Public:false}, "TheOperationFromNamespaceHadInvalidSyntax3", $.String, "TheOperationFromNamespaceHadInvalidSyntax3");

    $.Constant({Static:true , Public:false}, "TheOperationBindingFromNamespaceHadInvalid3", $.String, "TheOperationBindingFromNamespaceHadInvalid3");

    $.Constant({Static:true , Public:false}, "IfAppSettingBaseUrlArgumentIsSpecifiedThen0", $.String, "IfAppSettingBaseUrlArgumentIsSpecifiedThen0");

    $.Constant({Static:true , Public:false}, "MissingMessagePartForMessageFromNamespace3", $.String, "MissingMessagePartForMessageFromNamespace3");

    $.Constant({Static:true , Public:false}, "MissingMessage2", $.String, "MissingMessage2");

    $.Constant({Static:true , Public:false}, "OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0", $.String, "OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0");

    $.Constant({Static:true , Public:false}, "OnlyOperationInputOrOperationOutputTypes", $.String, "OnlyOperationInputOrOperationOutputTypes");

    $.Constant({Static:true , Public:false}, "ProtocolWithNameIsNotRecognized1", $.String, "ProtocolWithNameIsNotRecognized1");

    $.Constant({Static:true , Public:false}, "BothAndUseTheMessageNameUseTheMessageName3", $.String, "BothAndUseTheMessageNameUseTheMessageName3");

    $.Constant({Static:true , Public:false}, "MissingSoapOperationBinding0", $.String, "MissingSoapOperationBinding0");

    $.Constant({Static:true , Public:false}, "OnlyOneWebServiceBindingAttributeMayBeSpecified1", $.String, "OnlyOneWebServiceBindingAttributeMayBeSpecified1");

    $.Constant({Static:true , Public:false}, "ContractOverride", $.String, "ContractOverride");

    $.Constant({Static:true , Public:false}, "TypeIsMissingWebServiceBindingAttributeThat2", $.String, "TypeIsMissingWebServiceBindingAttributeThat2");

    $.Constant({Static:true , Public:false}, "MultipleBindingsWithSameName2", $.String, "MultipleBindingsWithSameName2");

    $.Constant({Static:true , Public:false}, "UnknownWebServicesProtocolInConfigFile1", $.String, "UnknownWebServicesProtocolInConfigFile1");

    $.Constant({Static:true , Public:false}, "RequiredXmlFormatExtensionAttributeIsMissing1", $.String, "RequiredXmlFormatExtensionAttributeIsMissing1");

    $.Constant({Static:true , Public:false}, "TheSyntaxOfTypeMayNotBeExtended1", $.String, "TheSyntaxOfTypeMayNotBeExtended1");

    $.Constant({Static:true , Public:false}, "InternalConfigurationError0", $.String, "InternalConfigurationError0");

    $.Constant({Static:true , Public:false}, "ThereIsNoSoapTransportImporterThatUnderstands1", $.String, "ThereIsNoSoapTransportImporterThatUnderstands1");

    $.Constant({Static:true , Public:false}, "MissingSoapBodyInputBinding0", $.String, "MissingSoapBodyInputBinding0");

    $.Constant({Static:true , Public:false}, "MissingSoapBodyOutputBinding0", $.String, "MissingSoapBodyOutputBinding0");

    $.Constant({Static:true , Public:false}, "TheOperationStyleRpcButBothMessagesAreNot0", $.String, "TheOperationStyleRpcButBothMessagesAreNot0");

    $.Constant({Static:true , Public:false}, "TheCombinationOfStyleRpcWithUseLiteralIsNot0", $.String, "TheCombinationOfStyleRpcWithUseLiteralIsNot0");

    $.Constant({Static:true , Public:false}, "TheEncodingIsNotSupported1", $.String, "TheEncodingIsNotSupported1");

    $.Constant({Static:true , Public:false}, "SpecifyingAnElementForUseEncodedMessageParts0", $.String, "SpecifyingAnElementForUseEncodedMessageParts0");

    $.Constant({Static:true , Public:false}, "EachMessagePartInAnUseEncodedMessageMustSpecify0", $.String, "EachMessagePartInAnUseEncodedMessageMustSpecify0");

    $.Constant({Static:true , Public:false}, "SpecifyingATypeForUseLiteralMessagesIs0", $.String, "SpecifyingATypeForUseLiteralMessagesIs0");

    $.Constant({Static:true , Public:false}, "SpecifyingATypeForUseLiteralMessagesIsAny", $.String, "SpecifyingATypeForUseLiteralMessagesIsAny");

    $.Constant({Static:true , Public:false}, "EachMessagePartInAUseLiteralMessageMustSpecify0", $.String, "EachMessagePartInAUseLiteralMessageMustSpecify0");

    $.Constant({Static:true , Public:false}, "EachMessagePartInRpcUseLiteralMessageMustSpecify0", $.String, "EachMessagePartInRpcUseLiteralMessageMustSpecify0");

    $.Constant({Static:true , Public:false}, "NoInputMIMEFormatsWereRecognized0", $.String, "NoInputMIMEFormatsWereRecognized0");

    $.Constant({Static:true , Public:false}, "NoInputHTTPFormatsWereRecognized0", $.String, "NoInputHTTPFormatsWereRecognized0");

    $.Constant({Static:true , Public:false}, "NoOutputMIMEFormatsWereRecognized0", $.String, "NoOutputMIMEFormatsWereRecognized0");

    $.Constant({Static:true , Public:false}, "MissingMatchElement0", $.String, "MissingMatchElement0");

    $.Constant({Static:true , Public:false}, "SolicitResponseIsNotSupported0", $.String, "SolicitResponseIsNotSupported0");

    $.Constant({Static:true , Public:false}, "RequestResponseIsNotSupported0", $.String, "RequestResponseIsNotSupported0");

    $.Constant({Static:true , Public:false}, "OneWayIsNotSupported0", $.String, "OneWayIsNotSupported0");

    $.Constant({Static:true , Public:false}, "NotificationIsNotSupported0", $.String, "NotificationIsNotSupported0");

    $.Constant({Static:true , Public:false}, "SyntaxErrorInWSDLDocumentMessageDoesNotHave1", $.String, "SyntaxErrorInWSDLDocumentMessageDoesNotHave1");

    $.Constant({Static:true , Public:false}, "WebMissingBodyElement", $.String, "WebMissingBodyElement");

    $.Constant({Static:true , Public:false}, "WebMissingEnvelopeElement", $.String, "WebMissingEnvelopeElement");

    $.Constant({Static:true , Public:false}, "UnableToHandleRequestActionNotRecognized1", $.String, "UnableToHandleRequestActionNotRecognized1");

    $.Constant({Static:true , Public:false}, "UnableToHandleRequestActionRequired0", $.String, "UnableToHandleRequestActionRequired0");

    $.Constant({Static:true , Public:false}, "UnableToHandleRequest0", $.String, "UnableToHandleRequest0");

    $.Constant({Static:true , Public:false}, "FailedToHandleRequest0", $.String, "FailedToHandleRequest0");

    $.Constant({Static:true , Public:false}, "CodeGenSupportReferenceParameters", $.String, "CodeGenSupportReferenceParameters");

    $.Constant({Static:true , Public:false}, "CodeGenSupportParameterAttributes", $.String, "CodeGenSupportParameterAttributes");

    $.Constant({Static:true , Public:false}, "CodeGenSupportReturnTypeAttributes", $.String, "CodeGenSupportReturnTypeAttributes");

    $.Constant({Static:true , Public:false}, "TheBinding0FromNamespace1WasIgnored2", $.String, "TheBinding0FromNamespace1WasIgnored2");

    $.Constant({Static:true , Public:false}, "TheOperation0FromNamespace1WasIgnored2", $.String, "TheOperation0FromNamespace1WasIgnored2");

    $.Constant({Static:true , Public:false}, "TheOperationBinding0FromNamespace1WasIgnored", $.String, "TheOperationBinding0FromNamespace1WasIgnored");

    $.Constant({Static:true , Public:false}, "NoMethodsWereFoundInTheWSDLForThisProtocol", $.String, "NoMethodsWereFoundInTheWSDLForThisProtocol");

    $.Constant({Static:true , Public:false}, "UnexpectedFlush", $.String, "UnexpectedFlush");

    $.Constant({Static:true , Public:false}, "ThereWasAnErrorDuringAsyncProcessing", $.String, "ThereWasAnErrorDuringAsyncProcessing");

    $.Constant({Static:true , Public:false}, "CanTCallTheEndMethodOfAnAsyncCallMoreThan", $.String, "CanTCallTheEndMethodOfAnAsyncCallMoreThan");

    $.Constant({Static:true , Public:false}, "AsyncDuplicateUserState", $.String, "AsyncDuplicateUserState");

    $.Constant({Static:true , Public:false}, "StreamDoesNotSeek", $.String, "StreamDoesNotSeek");

    $.Constant({Static:true , Public:false}, "StreamDoesNotRead", $.String, "StreamDoesNotRead");

    $.Constant({Static:true , Public:false}, "ElementTypeMustBeObjectOrSoapReflectedException", $.String, "ElementTypeMustBeObjectOrSoapReflectedException");

    $.Constant({Static:true , Public:false}, "ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException", $.String, "ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException");

    $.Constant({Static:true , Public:false}, "ProtocolDoesNotAsyncSerialize", $.String, "ProtocolDoesNotAsyncSerialize");

    $.Constant({Static:true , Public:false}, "ThereWasAnErrorDownloading0", $.String, "ThereWasAnErrorDownloading0");

    $.Constant({Static:true , Public:false}, "TheHTMLDocumentDoesNotContainDiscoveryInformation", $.String, "TheHTMLDocumentDoesNotContainDiscoveryInformation");

    $.Constant({Static:true , Public:false}, "TheDocumentWasNotRecognizedAsAKnownDocumentType", $.String, "TheDocumentWasNotRecognizedAsAKnownDocumentType");

    $.Constant({Static:true , Public:false}, "TheDocumentWasUnderstoodButContainsErrors", $.String, "TheDocumentWasUnderstoodButContainsErrors");

    $.Constant({Static:true , Public:false}, "TheWSDLDocumentContainsLinksThatCouldNotBeResolved", $.String, "TheWSDLDocumentContainsLinksThatCouldNotBeResolved");

    $.Constant({Static:true , Public:false}, "TheSchemaDocumentContainsLinksThatCouldNotBeResolved", $.String, "TheSchemaDocumentContainsLinksThatCouldNotBeResolved");

    $.Constant({Static:true , Public:false}, "CanTSpecifyElementOnEncodedMessagePartsPart", $.String, "CanTSpecifyElementOnEncodedMessagePartsPart");

    $.Constant({Static:true , Public:false}, "CanTMergeMessage", $.String, "CanTMergeMessage");

    $.Constant({Static:true , Public:false}, "CanTMergePortType", $.String, "CanTMergePortType");

    $.Constant({Static:true , Public:false}, "CanTMergeBinding", $.String, "CanTMergeBinding");

    $.Constant({Static:true , Public:false}, "CanTMergeTypes", $.String, "CanTMergeTypes");

    $.Constant({Static:true , Public:false}, "CanTMergeService", $.String, "CanTMergeService");

    $.Constant({Static:true , Public:false}, "indexMustBeBetweenAnd0Inclusive", $.String, "indexMustBeBetweenAnd0Inclusive");

    $.Constant({Static:true , Public:false}, "BPConformanceSoapEncodedMethod", $.String, "BPConformanceSoapEncodedMethod");

    $.Constant({Static:true , Public:false}, "BPConformanceHeaderFault", $.String, "BPConformanceHeaderFault");

    $.Constant({Static:true , Public:false}, "WsdlGenRpcLitAnonimousType", $.String, "WsdlGenRpcLitAnonimousType");

    $.Constant({Static:true , Public:false}, "WsdlGenRpcLitAccessorNamespace", $.String, "WsdlGenRpcLitAccessorNamespace");

    $.Constant({Static:true , Public:false}, "StackTraceEnd", $.String, "StackTraceEnd");

    $.Constant({Static:true , Public:false}, "CodeRemarks", $.String, "CodeRemarks");

    $.Constant({Static:true , Public:false}, "CodegenWarningDetails", $.String, "CodegenWarningDetails");

    $.Constant({Static:true , Public:false}, "ValidationError", $.String, "ValidationError");

    $.Constant({Static:true , Public:false}, "SchemaValidationError", $.String, "SchemaValidationError");

    $.Constant({Static:true , Public:false}, "SchemaValidationWarning", $.String, "SchemaValidationWarning");

    $.Constant({Static:true , Public:false}, "SchemaSyntaxErrorDetails", $.String, "SchemaSyntaxErrorDetails");

    $.Constant({Static:true , Public:false}, "SchemaSyntaxErrorItemDetails", $.String, "SchemaSyntaxErrorItemDetails");

    $.Constant({Static:true , Public:false}, "InitFailed", $.String, "InitFailed");

    $.Constant({Static:true , Public:false}, "XmlSchemaElementReference", $.String, "XmlSchemaElementReference");

    $.Constant({Static:true , Public:false}, "XmlSchemaAttributeReference", $.String, "XmlSchemaAttributeReference");

    $.Constant({Static:true , Public:false}, "XmlSchemaItem", $.String, "XmlSchemaItem");

    $.Constant({Static:true , Public:false}, "XmlSchemaNamedItem", $.String, "XmlSchemaNamedItem");

    $.Constant({Static:true , Public:false}, "XmlSchemaContentDef", $.String, "XmlSchemaContentDef");

    $.Constant({Static:true , Public:false}, "XmlSchema", $.String, "XmlSchema");

    $.Constant({Static:true , Public:false}, "TraceCallEnter", $.String, "TraceCallEnter");

    $.Constant({Static:true , Public:false}, "TraceCallEnterDetails", $.String, "TraceCallEnterDetails");

    $.Constant({Static:true , Public:false}, "TraceCallExit", $.String, "TraceCallExit");

    $.Constant({Static:true , Public:false}, "TraceExceptionThrown", $.String, "TraceExceptionThrown");

    $.Constant({Static:true , Public:false}, "TraceExceptionCought", $.String, "TraceExceptionCought");

    $.Constant({Static:true , Public:false}, "TraceExceptionIgnored", $.String, "TraceExceptionIgnored");

    $.Constant({Static:true , Public:false}, "TraceExceptionDetails", $.String, "TraceExceptionDetails");

    $.Constant({Static:true , Public:false}, "TracePostWorkItemIn", $.String, "TracePostWorkItemIn");

    $.Constant({Static:true , Public:false}, "TracePostWorkItemOut", $.String, "TracePostWorkItemOut");

    $.Constant({Static:true , Public:false}, "TraceUserHostName", $.String, "TraceUserHostName");

    $.Constant({Static:true , Public:false}, "TraceUserHostAddress", $.String, "TraceUserHostAddress");

    $.Constant({Static:true , Public:false}, "TraceUrl", $.String, "TraceUrl");

    $.Constant({Static:true , Public:false}, "TraceUrlReferrer", $.String, "TraceUrlReferrer");

    $.Constant({Static:true , Public:false}, "TraceCreateSerializer", $.String, "TraceCreateSerializer");

    $.Constant({Static:true , Public:false}, "TraceWriteRequest", $.String, "TraceWriteRequest");

    $.Constant({Static:true , Public:false}, "TraceWriteResponse", $.String, "TraceWriteResponse");

    $.Constant({Static:true , Public:false}, "TraceWriteHeaders", $.String, "TraceWriteHeaders");

    $.Constant({Static:true , Public:false}, "TraceReadRequest", $.String, "TraceReadRequest");

    $.Constant({Static:true , Public:false}, "TraceReadResponse", $.String, "TraceReadResponse");

    $.Constant({Static:true , Public:false}, "TraceReadHeaders", $.String, "TraceReadHeaders");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Web.Services.Configuration");
/* enum System.Web.Services.Configuration.PriorityGroup */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Configuration.PriorityGroup", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    High: 0, 
    Low: 1, 
  }
);

/* class System.Web.Services.Configuration.DiagnosticsElement */ 

(function DiagnosticsElement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.DiagnosticsElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuppressReturningExceptions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuppressReturningExceptions", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "suppressReturningExceptions", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "SuppressReturningExceptions", $.Boolean)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["suppressReturningExceptions"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.SoapEnvelopeProcessingElement */ 

(function SoapEnvelopeProcessingElement$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.SoapEnvelopeProcessingElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStrict", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsStrict", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "readTimeout", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "strict", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "ReadTimeout", $.Int32)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["readTimeout"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0E.System.Configuration.InfiniteIntConverter.__Type__]; });

    $.Property({Static:false, Public:true }, "IsStrict", $.Boolean)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["strict"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.SoapExtensionTypeElement */ 

(function SoapExtensionTypeElement$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.SoapExtensionTypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.Int32, 
          $asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Group", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Priority", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Priority", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "group", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "priority", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Group", $asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["group"]; });

    $.Property({Static:false, Public:true }, "Priority", $.Int32)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["priority"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.IntegerValidatorAttribute"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.TypeTypeConverter.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.TypeAndNameConverter */ 

(function TypeAndNameConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Web.Services.Configuration.TypeAndNameConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.TypeTypeConverter */ 

(function TypeTypeConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Configuration.TypeAndNameConverter"), 
      Name: "System.Web.Services.Configuration.TypeTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.SoapExtensionTypeElementCollection */ 

(function SoapExtensionTypeElementCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Web.Services.Configuration.SoapExtensionTypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.SoapExtensionTypeElement.__Type__]; });

})();

/* class System.Web.Services.Configuration.TypeElement */ 

(function TypeElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.TypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.TypeAndNameConverter.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.TypeAndName */ 

(function TypeAndName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Configuration.TypeAndName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.TypeElementCollection */ 

(function TypeElementCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Web.Services.Configuration.TypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Configuration.TypeElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Configuration.TypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $asm2B.TypeRef("System.Web.Services.Configuration.TypeElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Configuration.TypeElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.TypeElement.__Type__]; });

})();

/* class System.Web.Services.Configuration.WebServicesSection */ 

(function WebServicesSection$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Web.Services.Configuration.WebServicesSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformanceWarnings", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElementCollection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Diagnostics", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.DiagnosticsElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DiscoveryDocumentSerializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DiscoveryReferenceTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnabledConformanceWarnings", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnabledProtocols", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MimeImporterTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MimeReflectorTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterReaderTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtocolImporterTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtocolReflectorTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocols", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReturnWriterTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerProtocolFactories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceDescriptionExtended", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptionFormatExtensionTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapEnvelopeProcessing", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.SoapEnvelopeProcessingElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapExtensionImporterTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapExtensionReflectorTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapExtensionTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapServerProtocolFactory", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapServerProtocolFactoryType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapTransportImporters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapTransportImporterTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WsdlHelpGenerator", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WsdlHelpGeneratorElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllFormatExtensionTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConfigFromHttpContext", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExtensionPointAttribute", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSection", 
      new JSIL.MethodSignature($.Type, [$asm0E.TypeRef("System.Configuration.Configuration")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadXmlFormatExtensions", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm2F.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Diagnostics", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.DiagnosticsElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtocolImporterTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtocolReflectorTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapEnvelopeProcessing", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.SoapEnvelopeProcessingElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TurnOnGetAndPost", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Constant({Static:true , Public:false}, "SectionName", $.String, "system.web/webServices");

    $.Field({Static:false, Public:false, ReadOnly:true }, "conformanceWarnings", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "protocols", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serviceDescriptionFormatExtensionTypes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapEnvelopeProcessing", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapExtensionImporterTypes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapExtensionReflectorTypes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapExtensionTypes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapTransportImporterTypes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "wsdlHelpGenerator", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "soapServerProtocolFactoryType", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "diagnostics", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "defaultFormatTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "discoveryReferenceTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "discoveryDocumentSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "enabledProtocols", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Field({Static:false, Public:false}, "mimeImporterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "mimeReflectorTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "parameterReaderTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "protocolImporterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "protocolReflectorTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "returnWriterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "serverProtocolFactories", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory")]));

    $.Field({Static:false, Public:false}, "soapServerProtocolFactory", $asm07.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "ConformanceWarnings", $asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["conformanceWarnings"]; });

    $.Property({Static:false, Public:false}, "EnabledConformanceWarnings", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:true , Public:true }, "Current", $.Type);

    $.Property({Static:false, Public:false}, "DiscoveryDocumentSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Property({Static:false, Public:false}, "DiscoveryReferenceTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "EnabledProtocols", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Property({Static:false, Public:false}, "MimeImporterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "MimeReflectorTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "ParameterReaderTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "ProtocolImporterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "ProtocolReflectorTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "Protocols", $asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["protocols"]; });

    $.Property({Static:false, Public:true }, "SoapEnvelopeProcessing", $asm2B.TypeRef("System.Web.Services.Configuration.SoapEnvelopeProcessingElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapEnvelopeProcessing"]; });

    $.Property({Static:false, Public:true }, "Diagnostics", $asm2B.TypeRef("System.Web.Services.Configuration.DiagnosticsElement"));

    $.Property({Static:false, Public:false}, "ReturnWriterTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "ServerProtocolFactories", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory")]));

    $.Property({Static:false, Public:false}, "ServiceDescriptionExtended", $.Boolean);

    $.Property({Static:false, Public:true }, "ServiceDescriptionFormatExtensionTypes", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["serviceDescriptionFormatExtensionTypes"]; });

    $.Property({Static:false, Public:true }, "SoapExtensionImporterTypes", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapExtensionImporterTypes"]; });

    $.Property({Static:false, Public:true }, "SoapExtensionReflectorTypes", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapExtensionReflectorTypes"]; });

    $.Property({Static:false, Public:true }, "SoapExtensionTypes", $asm2B.TypeRef("System.Web.Services.Configuration.SoapExtensionTypeElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapExtensionTypes"]; });

    $.Property({Static:false, Public:true }, "SoapServerProtocolFactoryType", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapServerProtocolFactory"]; });

    $.Property({Static:false, Public:false}, "SoapServerProtocolFactory", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "SoapTransportImporterTypes", $asm2B.TypeRef("System.Web.Services.Configuration.TypeElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["soapTransportImporterTypes"]; });

    $.Property({Static:false, Public:false}, "SoapTransportImporters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "WsdlHelpGenerator", $asm2B.TypeRef("System.Web.Services.Configuration.WsdlHelpGeneratorElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["wsdlHelpGenerator"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.WsdlHelpGeneratorElement */ 

(function WsdlHelpGeneratorElement$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.WsdlHelpGeneratorElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIOReadPermission", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HelpGeneratorPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HelpGeneratorVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Href", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigurationDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Href", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaults", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "href", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false}, "virtualPath", $.String);

    $.Field({Static:false, Public:false}, "actualPath", $.String);

    $.Field({Static:false, Public:false}, "needToValidateHref", $.Boolean);

    $.Property({Static:false, Public:false}, "HelpGeneratorVirtualPath", $.String);

    $.Property({Static:false, Public:false}, "HelpGeneratorPath", $.String);

    $.Property({Static:false, Public:true }, "Href", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["href"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.ProtocolElement */ 

(function ProtocolElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.ProtocolElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidProtocolsValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.ProtocolElementCollection */ 

(function ProtocolElementCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Web.Services.Configuration.ProtocolElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaults", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.ProtocolElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.ProtocolElement.__Type__]; });

})();

/* enum System.Web.Services.Configuration.WebServiceProtocols */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Configuration.WebServiceProtocols", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Unknown: 0, 
    HttpSoap: 1, 
    HttpGet: 2, 
    HttpPost: 4, 
    Documentation: 8, 
    HttpPostLocalhost: 16, 
    HttpSoap12: 32, 
    AnyHttpSoap: 33, 
  }
);

/* class System.Web.Services.Configuration.WsiProfilesElement */ 

(function WsiProfilesElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Web.Services.Configuration.WsiProfilesElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidWsiProfilesValue", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.WsiProfiles")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $asm2B.TypeRef("System.Web.Services.WsiProfiles"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Configuration.WsiProfilesElementCollection */ 

(function WsiProfilesElementCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Web.Services.Configuration.WsiProfilesElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaults", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Configuration.WsiProfilesElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm2B.System.Web.Services.Configuration.WsiProfilesElement.__Type__]; });

})();

/* class System.Web.Services.Configuration.XmlFormatExtensionAttribute */ 

(function XmlFormatExtensionAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Configuration.XmlFormatExtensionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtensionPoints", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExtensionPoints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Property({Static:false, Public:true }, "ExtensionPoints", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Web.Services.Configuration.XmlFormatExtensionPointAttribute */ 

(function XmlFormatExtensionPointAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Configuration.XmlFormatExtensionPointAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowElements", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowElements", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "allowElements", $.Boolean);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "AllowElements", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute */ 

(function XmlFormatExtensionPrefixAttribute$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

JSIL.DeclareNamespace("System.Web.Services.Diagnostics");
/* class System.Web.Services.Diagnostics.Tracing */ 

(function Tracing$Members () {
  var $, $thisType;































  JSIL.MakeStaticClass("System.Web.Services.Diagnostics.Tracing", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AppDomainUnloadEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Details", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), [$asm28.TypeRef("System.Web.HttpRequest")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [$.String, $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Enter", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionCatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionCatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionCatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Object, 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionIgnore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exit", 
      new JSIL.MethodSignature(null, [$.String, $asm2B.TypeRef("System.Web.Services.Diagnostics.TraceMethod")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Asmx", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_On", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeserializationEvents", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHostByAddress", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Information", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "InitializeLogging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnknownAttribute", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlAttributeEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnknownElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlElementEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessExitEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StackTrace", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceId", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettings", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceSource"), $asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "tracingInitialized", $.Boolean);

    $.Field({Static:true , Public:false}, "appDomainShutdown", $.Boolean);

    $.Constant({Static:true , Public:false}, "TraceSourceAsmx", $.String, "System.Web.Services.Asmx");

    $.Field({Static:true , Public:false}, "asmxTraceSource", $asm0A.TypeRef("System.Diagnostics.TraceSource"));

    $.Field({Static:true , Public:false}, "internalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "On", $.Boolean);

    $.Property({Static:true , Public:false}, "IsVerbose", $.Boolean);

    $.Property({Static:true , Public:false}, "Asmx", $asm0A.TypeRef("System.Diagnostics.TraceSource"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Diagnostics.TraceMethod */ 

(function TraceMethod$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Diagnostics.TraceMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "CallString", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "HashString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodId", 
      new JSIL.MethodSignature($.String, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteObjectId", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Object])
    );

    $.Field({Static:false, Public:false}, "target", $.Object);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "$call", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Web.Services.Description");
/* class System.Web.Services.Description.ServiceDescriptionFormatExtension */ 

(function ServiceDescriptionFormatExtension$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ServiceDescriptionFormatExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Handled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "parent", $.Object);

    $.Field({Static:false, Public:false}, "required", $.Boolean);

    $.Field({Static:false, Public:false}, "handled", $.Boolean);

    $.Property({Static:false, Public:true }, "Parent", $.Object);

    $.Property({Static:false, Public:true }, "Required", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["required"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Handled", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpAddressBinding */ 

(function HttpAddressBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.HttpAddressBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Property({Static:false, Public:true }, "Location", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["location"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["address", "http://schemas.xmlsoap.org/wsdl/http/", $asm2B.System.Web.Services.Description.Port.__Type__]; });

})();

/* class System.Web.Services.Description.HttpBinding */ 

(function HttpBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.HttpBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verb", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Verb", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "verb", $.String);

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/http/");

    $.Property({Static:false, Public:true }, "Verb", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["verb"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["binding", "http://schemas.xmlsoap.org/wsdl/http/", $asm2B.System.Web.Services.Description.Binding.__Type__]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["http", "http://schemas.xmlsoap.org/wsdl/http/"]; });

})();

/* class System.Web.Services.Description.HttpOperationBinding */ 

(function HttpOperationBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.HttpOperationBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Property({Static:false, Public:true }, "Location", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["location"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["operation", "http://schemas.xmlsoap.org/wsdl/http/", $asm2B.System.Web.Services.Description.OperationBinding.__Type__]; });

})();

/* class System.Web.Services.Description.HttpUrlEncodedBinding */ 

(function HttpUrlEncodedBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.HttpUrlEncodedBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["urlEncoded", "http://schemas.xmlsoap.org/wsdl/http/", $asm2B.System.Web.Services.Description.InputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.HttpUrlReplacementBinding */ 

(function HttpUrlReplacementBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.HttpUrlReplacementBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["urlReplacement", "http://schemas.xmlsoap.org/wsdl/http/", $asm2B.System.Web.Services.Description.InputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.ProtocolImporter */ 

(function ProtocolImporter$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ProtocolImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddExtensionWarningComments", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddWarningComment", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassForBinding", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm2F.TypeRef("System.Xml.Serialization.ImportContext"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbstractSchemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClassNames", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeNamespace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeTypeDeclaration", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConcreteSchemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExportContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtraCodeClasses", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportContext", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.ImportContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputMessage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEncodedBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodNames", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationBinding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputMessage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Port"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Service", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceImporter", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImporter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBindingSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsOperationFlowSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationFlow")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodSignature", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.CodeFlags")]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToBinding", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.Binding"), $asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToBinding", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Service"), $asm2B.TypeRef("System.Web.Services.Description.Port"), 
          $asm2B.TypeRef("System.Web.Services.Description.Binding"), $asm2B.TypeRef("System.Web.Services.Description.PortType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToOperation", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NoMethodsGeneratedWarning", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "OperationBindingSyntaxException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "OperationSyntaxException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsEncodedBinding", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Warnings", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UniqueName", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsupportedBindingWarning", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsupportedOperationBindingWarning", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsupportedOperationWarning", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "importer", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImporter"));

    $.Field({Static:false, Public:false}, "codeNamespace", $asm0A.TypeRef("System.CodeDom.CodeNamespace"));

    $.Field({Static:false, Public:false}, "methodNames", $asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Field({Static:false, Public:false}, "codeClass", $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"));

    $.Field({Static:false, Public:false}, "classes", $asm0A.TypeRef("System.CodeDom.CodeTypeDeclarationCollection"));

    $.Field({Static:false, Public:false}, "warnings", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"));

    $.Field({Static:false, Public:false}, "port", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.Field({Static:false, Public:false}, "portType", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Field({Static:false, Public:false}, "operation", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Field({Static:false, Public:false}, "operationBinding", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.Field({Static:false, Public:false}, "encodedBinding", $.Boolean);

    $.Field({Static:false, Public:false}, "importContext", $asm2F.TypeRef("System.Xml.Serialization.ImportContext"));

    $.Field({Static:false, Public:false}, "exportContext", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Field({Static:false, Public:false}, "inputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Field({Static:false, Public:false}, "outputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Field({Static:false, Public:false}, "className", $.String);

    $.Field({Static:false, Public:false}, "bindingCount", $.Int32);

    $.Field({Static:false, Public:false}, "anyPorts", $.Boolean);

    $.Property({Static:false, Public:true }, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:true }, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:true }, "AbstractSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:true }, "ConcreteSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:true }, "CodeNamespace", $asm0A.TypeRef("System.CodeDom.CodeNamespace"));

    $.Property({Static:false, Public:true }, "CodeTypeDeclaration", $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"));

    $.Property({Static:false, Public:false}, "ExtraCodeClasses", $asm0A.TypeRef("System.CodeDom.CodeTypeDeclarationCollection"));

    $.Property({Static:false, Public:true }, "Style", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"));

    $.Property({Static:false, Public:true }, "Warnings", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"));

    $.Property({Static:false, Public:true }, "ClassNames", $asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:true }, "MethodName", $.String);

    $.Property({Static:false, Public:true }, "ClassName", $.String);

    $.Property({Static:false, Public:true }, "Port", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.Property({Static:false, Public:true }, "PortType", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Property({Static:false, Public:true }, "Binding", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Property({Static:false, Public:true }, "Service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:false}, "ServiceImporter", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImporter"));

    $.Property({Static:false, Public:true }, "Operation", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Property({Static:false, Public:true }, "OperationBinding", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.Property({Static:false, Public:true }, "InputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:true }, "OutputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:false}, "ImportContext", $asm2F.TypeRef("System.Xml.Serialization.ImportContext"));

    $.Property({Static:false, Public:false}, "IsEncodedBinding", $.Boolean);

    $.Property({Static:false, Public:false}, "ExportContext", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "MethodNames", $asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpProtocolImporter */ 

(function HttpProtocolImporter$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ProtocolImporter"), 
      Name: "System.Web.Services.Description.HttpProtocolImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendMetadata", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvokeParams", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")]), $asm2B.TypeRef("System.Web.Services.Description.HttpMethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethod", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [$asm2B.TypeRef("System.Web.Services.Description.HttpMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseClass", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMimeParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMimeReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStringParametersMessage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportUrlParameter", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeParameter"), [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportUrlParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsOperationFlowSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationFlow")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRepeatingParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.Field({Static:false, Public:false}, "importers", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeImporter")]));

    $.Field({Static:false, Public:false}, "importedParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.ArrayList")]));

    $.Field({Static:false, Public:false}, "importedReturns", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.ArrayList")]));

    $.Field({Static:false, Public:false}, "hasInputPayload", $.Boolean);

    $.Field({Static:false, Public:false}, "codeClasses", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false, Virtual:true }, "BaseClass", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpGetProtocolImporter */ 

(function HttpGetProtocolImporter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"), 
      Name: "System.Web.Services.Description.HttpGetProtocolImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseClass", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBindingSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "BaseClass", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ProtocolReflector */ 

(function ProtocolReflector$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ProtocolReflector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ConformsTo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HeaderMessages", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MessageCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputMessage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodAttribute", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebMethodAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Methods", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationBinding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputMessage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Port", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Port"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReflectionContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReflectionImporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaExporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaExporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Service", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UriFixups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetServiceDescription", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionReflector"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToMethod", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reflect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectBinding", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector+ReflectedBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectDescription", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethodBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "reflector", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionReflector"));

    $.Field({Static:false, Public:false}, "method", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "operation", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Field({Static:false, Public:false}, "operationBinding", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.Field({Static:false, Public:false}, "port", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.Field({Static:false, Public:false}, "portType", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Field({Static:false, Public:false}, "methodAttr", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));

    $.Field({Static:false, Public:false}, "inputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Field({Static:false, Public:false}, "outputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Field({Static:false, Public:false}, "headerMessages", $asm2B.TypeRef("System.Web.Services.Description.MessageCollection"));

    $.Field({Static:false, Public:false}, "bindingServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "portNames", $asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Field({Static:false, Public:false}, "emptyBinding", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmptyBinding", $.Boolean);

    $.Property({Static:false, Public:true }, "Service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:false}, "UriFixups", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]));

    $.Property({Static:false, Public:true }, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:true }, "SchemaExporter", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaExporter"));

    $.Property({Static:false, Public:true }, "ReflectionImporter", $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"));

    $.Property({Static:false, Public:true }, "DefaultNamespace", $.String);

    $.Property({Static:false, Public:true }, "ServiceUrl", $.String);

    $.Property({Static:false, Public:true }, "ServiceType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Method", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:true }, "Binding", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Property({Static:false, Public:true }, "PortType", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Property({Static:false, Public:true }, "Port", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.Property({Static:false, Public:true }, "Operation", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Property({Static:false, Public:true }, "OperationBinding", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.Property({Static:false, Public:true }, "MethodAttribute", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));

    $.Property({Static:false, Public:true }, "Methods", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]));

    $.Property({Static:false, Public:false}, "ReflectionContext", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "InputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:true }, "OutputMessage", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:true }, "HeaderMessages", $asm2B.TypeRef("System.Web.Services.Description.MessageCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "ConformsTo", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ProtocolReflector+ReflectedBinding */ 

(function ReflectedBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ProtocolReflector+ReflectedBinding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"))
    );

    $.Field({Static:false, Public:true }, "bindingAttr", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Field({Static:false, Public:true }, "methodList", $asm07.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpProtocolReflector */ 

(function HttpProtocolReflector$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"), 
      Name: "System.Web.Services.Description.HttpProtocolReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectMimeParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectMimeReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectStringParametersMessage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectUrlParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "reflectors", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeReflector")]));

    $.Property({Static:false, Public:false}, "MethodUrl", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpGetProtocolReflector */ 

(function HttpGetProtocolReflector$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"), 
      Name: "System.Web.Services.Description.HttpGetProtocolReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpGetProtocolReflector+<>c__DisplayClass2_0 */ 

(function $l$gc__DisplayClass2_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.HttpGetProtocolReflector+<>c__DisplayClass2_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginClass$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "httpAddressBinding", $asm2B.TypeRef("System.Web.Services.Description.HttpAddressBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Description.HttpPostProtocolImporter */ 

(function HttpPostProtocolImporter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"), 
      Name: "System.Web.Services.Description.HttpPostProtocolImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BaseClass", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBindingSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "BaseClass", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpPostProtocolReflector */ 

(function HttpPostProtocolReflector$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"), 
      Name: "System.Web.Services.Description.HttpPostProtocolReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.HttpPostProtocolReflector+<>c__DisplayClass2_0 */ 

(function $l$gc__DisplayClass2_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.HttpPostProtocolReflector+<>c__DisplayClass2_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBeginClass$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "httpAddressBinding", $asm2B.TypeRef("System.Web.Services.Description.HttpAddressBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Description.HttpMethodInfo */ 

(function HttpMethodInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.HttpMethodInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "UrlParameters", $asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"));

    $.Field({Static:false, Public:false}, "MimeParameters", $asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"));

    $.Field({Static:false, Public:false}, "MimeReturn", $asm2B.TypeRef("System.Web.Services.Description.MimeReturn"));

    $.Field({Static:false, Public:false}, "Name", $.String);

    $.Field({Static:false, Public:false}, "Href", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeImporter */ 

(function MimeImporter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.MimeImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClassMetadata", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeReturn")]), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportContext", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ImportContext", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"))
    );

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"));

    $.Property({Static:false, Public:false}, "ImportContext", $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolImporter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeAnyImporter */ 

(function MimeAnyImporter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeImporter"), 
      Name: "System.Web.Services.Description.MimeAnyImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeContentBinding */ 

(function MimeContentBinding$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.MimeContentBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Part", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Part", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "part", $.String);

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/mime/");

    $.Property({Static:false, Public:true }, "Part", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["part"]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["content", "http://schemas.xmlsoap.org/wsdl/mime/", $asm2B.System.Web.Services.Description.MimePart.__Type__, $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["mime", "http://schemas.xmlsoap.org/wsdl/mime/"]; });

})();

/* class System.Web.Services.Description.MimePart */ 

(function MimePart$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.MimePart", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.MimeMultipartRelatedBinding */ 

(function MimeMultipartRelatedBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.MimeMultipartRelatedBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parts", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimePartCollection"))
    );

    $.Field({Static:false, Public:false}, "parts", $asm2B.TypeRef("System.Web.Services.Description.MimePartCollection"));

    $.Property({Static:false, Public:true }, "Parts", $asm2B.TypeRef("System.Web.Services.Description.MimePartCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["part"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["multipartRelated", "http://schemas.xmlsoap.org/wsdl/mime/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.MimeXmlBinding */ 

(function MimeXmlBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.MimeXmlBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Part", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Part", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "part", $.String);

    $.Property({Static:false, Public:true }, "Part", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["part"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["mimeXml", "http://schemas.xmlsoap.org/wsdl/mime/", $asm2B.System.Web.Services.Description.MimePart.__Type__, $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.MimePartCollection */ 

(function MimePartCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.MimePartCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.MimePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimePart")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimePart"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MimePart"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimePart")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.MimePart"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.MimeTextBinding */ 

(function MimeTextBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.MimeTextBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Matches", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"))
    );

    $.Field({Static:false, Public:false}, "matches", $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"));

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://microsoft.com/wsdl/mime/textMatching/");

    $.Property({Static:false, Public:true }, "Matches", $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["match", $asm2B.System.Web.Services.Description.MimeTextMatch.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["text", "http://microsoft.com/wsdl/mime/textMatching/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__, $asm2B.System.Web.Services.Description.MimePart.__Type__]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["tm", "http://microsoft.com/wsdl/mime/textMatching/"]; });

})();

/* class System.Web.Services.Description.MimeTextMatch */ 

(function MimeTextMatch$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.MimeTextMatch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capture", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Group", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Matches", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Repeats", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RepeatsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capture", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreCase", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pattern", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Repeats", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RepeatsString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "repeats", $.Int32);

    $.Field({Static:false, Public:false}, "pattern", $.String);

    $.Field({Static:false, Public:false}, "group", $.Int32);

    $.Field({Static:false, Public:false}, "capture", $.Int32);

    $.Field({Static:false, Public:false}, "ignoreCase", $.Boolean);

    $.Field({Static:false, Public:false}, "matches", $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "Group", $.Int32)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["group"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [1]; });

    $.Property({Static:false, Public:true }, "Capture", $.Int32)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["capture"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; });

    $.Property({Static:false, Public:true }, "Repeats", $.Int32)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "RepeatsString", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["repeats"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["1"]; });

    $.Property({Static:false, Public:true }, "Pattern", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["pattern"]; });

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ignoreCase"]; });

    $.Property({Static:false, Public:true }, "Matches", $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["match"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeTextMatchCollection */ 

(function MimeTextMatchCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.MimeTextMatchCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.MimeFormImporter */ 

(function MimeFormImporter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeImporter"), 
      Name: "System.Web.Services.Description.MimeFormImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeReflector */ 

(function MimeReflector$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.MimeReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReflectionContext", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReflectionContext", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"))
    );

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"));

    $.Property({Static:false, Public:false}, "ReflectionContext", $asm2B.TypeRef("System.Web.Services.Description.HttpProtocolReflector"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeFormReflector */ 

(function MimeFormReflector$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeReflector"), 
      Name: "System.Web.Services.Description.MimeFormReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeParameter */ 

(function MimeParameter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.MimeParameter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "attrs", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "Attributes", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeParameterCollection */ 

(function MimeParameterCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.MimeParameterCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimeParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.MimeParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeParameter")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeParameter"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriterType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MimeParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimeParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MimeParameter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MimeParameter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WriterType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "writerType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "WriterType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Item", $asm2B.TypeRef("System.Web.Services.Description.MimeParameter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.MimeReturn */ 

(function MimeReturn$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.MimeReturn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReaderType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "readerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "attrs", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

    $.Property({Static:false, Public:false}, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "ReaderType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Attributes", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeTextReturn */ 

(function MimeTextReturn$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeReturn"), 
      Name: "System.Web.Services.Description.MimeTextReturn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TextBinding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TextBinding", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"))
    );

    $.Field({Static:false, Public:false}, "textBinding", $asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"));

    $.Property({Static:false, Public:false}, "TextBinding", $asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeTextImporter */ 

(function MimeTextImporter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeImporter"), 
      Name: "System.Web.Services.Description.MimeTextImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeReturn")]), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.MimeTextReturn"), $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatchCollection"), 
          $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );

    $.Field({Static:false, Public:false}, "methodName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeXmlReturn */ 

(function MimeXmlReturn$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeReturn"), 
      Name: "System.Web.Services.Description.MimeXmlReturn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeMapping", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeMapping", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.Field({Static:false, Public:false}, "mapping", $asm2F.TypeRef("System.Xml.Serialization.XmlTypeMapping"));

    $.Property({Static:false, Public:false}, "TypeMapping", $asm2F.TypeRef("System.Xml.Serialization.XmlTypeMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeXmlImporter */ 

(function MimeXmlImporter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeImporter"), 
      Name: "System.Web.Services.Description.MimeXmlImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClassMetadata", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeReturn")]), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MimeXmlReturn"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Importer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeParameterCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportReturn", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MimeReturn"))
    );

    $.Field({Static:false, Public:false}, "importer", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"));

    $.Field({Static:false, Public:false}, "exporter", $asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"));

    $.Property({Static:false, Public:false}, "Importer", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"));

    $.Property({Static:false, Public:false}, "Exporter", $asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.MimeXmlReflector */ 

(function MimeXmlReflector$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MimeReflector"), 
      Name: "System.Web.Services.Description.MimeXmlReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectReturn", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ProtocolImporterUtil */ 

(function ProtocolImporterUtil$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ProtocolImporterUtil", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateConstructorStatements", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeConstructor"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.DelegateInfo */ 

(function DelegateInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.DelegateInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "handlerType", $.String);

    $.Field({Static:false, Public:false}, "handlerArgs", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SchemaCompiler */ 

(function SchemaCompiler$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SchemaCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddImports", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.StringCollection"), [$asm2F.TypeRef("System.Xml.Serialization.XmlSchemas")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Warnings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentName", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaItem", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WarningDetails", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaException"), $.String])
    );

    $.Field({Static:true , Public:false}, "warnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:true , Public:false}, "Warnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.DocumentableItem */ 

(function DocumentableItem$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.DocumentableItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Documentation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentationElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtensibleAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDocumentationElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Documentation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocumentationElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExtensibleAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.Field({Static:false, Public:false}, "parent", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "documentation", $.String);

    $.Field({Static:false, Public:false}, "documentationElement", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "anyAttribute", $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]));

    $.Field({Static:false, Public:false}, "namespaces", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Property({Static:false, Public:true }, "Documentation", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "DocumentationElement", $asm2F.TypeRef("System.Xml.XmlElement"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"), function () { return ["documentation"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "ExtensibleAttributes", $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Parent", $asm2F.TypeRef("System.Xml.XmlDocument"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.NamedItem */ 

(function NamedItem$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.DocumentableItem"), 
      Name: "System.Web.Services.Description.NamedItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ServiceDescription */ 

(function ServiceDescription$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.ServiceDescription", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddConformanceClaims", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm2B.TypeRef("System.Web.Services.WsiProfiles")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AppSettingBaseUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AppSettingUrlKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.BindingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Imports", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ImportCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Messages", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MessageCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortTypes", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.PortTypeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RetrievalUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Serializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Services", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SoapEncodingSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Types", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Types"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationWarnings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConformanceClaims", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.WsiProfiles"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceValidation", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.TextReader"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AppSettingBaseUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AppSettingUrlKey", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RetrievalUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Types", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Types"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWarnings", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSerializeTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/");

    $.Constant({Static:true , Public:false}, "Prefix", $.String, "wsdl");

    $.Field({Static:false, Public:false}, "types", $asm2B.TypeRef("System.Web.Services.Description.Types"));

    $.Field({Static:false, Public:false}, "imports", $asm2B.TypeRef("System.Web.Services.Description.ImportCollection"));

    $.Field({Static:false, Public:false}, "messages", $asm2B.TypeRef("System.Web.Services.Description.MessageCollection"));

    $.Field({Static:false, Public:false}, "portTypes", $asm2B.TypeRef("System.Web.Services.Description.PortTypeCollection"));

    $.Field({Static:false, Public:false}, "bindings", $asm2B.TypeRef("System.Web.Services.Description.BindingCollection"));

    $.Field({Static:false, Public:false}, "services", $asm2B.TypeRef("System.Web.Services.Description.ServiceCollection"));

    $.Field({Static:false, Public:false}, "targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "appSettingUrlKey", $.String);

    $.Field({Static:false, Public:false}, "appSettingBaseUrl", $.String);

    $.Field({Static:false, Public:false}, "retrievalUrl", $.String);

    $.Field({Static:true , Public:false}, "serializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:true , Public:false}, "namespaces", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Constant({Static:true , Public:false}, "SupportedClaims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"), 1);

    $.Field({Static:true , Public:false}, "schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), null);

    $.Field({Static:true , Public:false}, "soapEncodingSchema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), null);

    $.Field({Static:false, Public:false}, "validationWarnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:true , Public:false}, "warnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Property({Static:false, Public:true }, "RetrievalUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Imports", $asm2B.TypeRef("System.Web.Services.Description.ImportCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["import"]; });

    $.Property({Static:false, Public:true }, "Types", $asm2B.TypeRef("System.Web.Services.Description.Types"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["types"]; });

    $.Property({Static:false, Public:true }, "Messages", $asm2B.TypeRef("System.Web.Services.Description.MessageCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["message"]; });

    $.Property({Static:false, Public:true }, "PortTypes", $asm2B.TypeRef("System.Web.Services.Description.PortTypeCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["portType"]; });

    $.Property({Static:false, Public:true }, "Bindings", $asm2B.TypeRef("System.Web.Services.Description.BindingCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["binding"]; });

    $.Property({Static:false, Public:true }, "Services", $asm2B.TypeRef("System.Web.Services.Description.ServiceCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["service"]; });

    $.Property({Static:false, Public:true }, "TargetNamespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["targetNamespace"]; });

    $.Property({Static:true , Public:true }, "Schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:true , Public:false}, "SoapEncodingSchema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:true }, "ValidationWarnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:true }, "Serializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "AppSettingBaseUrl", $.String);

    $.Property({Static:false, Public:false}, "AppSettingUrlKey", $.String);

    $.Property({Static:false, Public:false}, "Next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["definitions"]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.ServiceDescription+ServiceDescriptionSerializer */ 

(function ServiceDescriptionSerializer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), 
      Name: "System.Web.Services.Description.ServiceDescription+ServiceDescriptionSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWriter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.Import */ 

(function Import$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.DocumentableItem"), 
      Name: "System.Web.Services.Description.Import", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "Location", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["location"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Port */ 

(function Port$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.Port", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Service", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Field({Static:false, Public:false}, "binding", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:true }, "Service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Binding", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["binding"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Service */ 

(function Service$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.Service", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ports", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.PortCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Field({Static:false, Public:false}, "ports", $asm2B.TypeRef("System.Web.Services.Description.PortCollection"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Ports", $asm2B.TypeRef("System.Web.Services.Description.PortCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["port"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.MessageBinding */ 

(function MessageBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.MessageBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationBinding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.Property({Static:false, Public:true }, "OperationBinding", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.FaultBinding */ 

(function FaultBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
      Name: "System.Web.Services.Description.FaultBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.InputBinding */ 

(function InputBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
      Name: "System.Web.Services.Description.InputBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.OutputBinding */ 

(function OutputBinding$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
      Name: "System.Web.Services.Description.OutputBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.OperationBinding */ 

(function OperationBinding$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.OperationBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Faults", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.FaultBindingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.InputBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Output", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OutputBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Input", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.InputBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Output", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OutputBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Field({Static:false, Public:false}, "faults", $asm2B.TypeRef("System.Web.Services.Description.FaultBindingCollection"));

    $.Field({Static:false, Public:false}, "input", $asm2B.TypeRef("System.Web.Services.Description.InputBinding"));

    $.Field({Static:false, Public:false}, "output", $asm2B.TypeRef("System.Web.Services.Description.OutputBinding"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Property({Static:false, Public:true }, "Binding", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Input", $asm2B.TypeRef("System.Web.Services.Description.InputBinding"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["input"]; });

    $.Property({Static:false, Public:true }, "Output", $asm2B.TypeRef("System.Web.Services.Description.OutputBinding"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["output"]; });

    $.Property({Static:false, Public:true }, "Faults", $asm2B.TypeRef("System.Web.Services.Description.FaultBindingCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fault"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Binding */ 

(function Binding$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.Binding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operations", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationBindingCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Field({Static:false, Public:false}, "operations", $asm2B.TypeRef("System.Web.Services.Description.OperationBindingCollection"));

    $.Field({Static:false, Public:false}, "type", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Operations", $asm2B.TypeRef("System.Web.Services.Description.OperationBindingCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["operation"]; });

    $.Property({Static:false, Public:true }, "Type", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.OperationMessage */ 

(function OperationMessage$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.OperationMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Message", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.Field({Static:false, Public:false}, "message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Property({Static:false, Public:true }, "Operation", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.Property({Static:false, Public:true }, "Message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["message"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.OperationFault */ 

(function OperationFault$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.OperationMessage"), 
      Name: "System.Web.Services.Description.OperationFault", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.OperationInput */ 

(function OperationInput$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.OperationMessage"), 
      Name: "System.Web.Services.Description.OperationInput", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.OperationOutput */ 

(function OperationOutput$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.OperationMessage"), 
      Name: "System.Web.Services.Description.OperationOutput", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Operation */ 

(function Operation$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.Operation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Faults", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationFaultCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Messages", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationMessageCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterOrder", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterOrderString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMessageName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsBoundBy", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterOrder", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterOrderString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "messages", $asm2B.TypeRef("System.Web.Services.Description.OperationMessageCollection"));

    $.Field({Static:false, Public:false}, "faults", $asm2B.TypeRef("System.Web.Services.Description.OperationFaultCollection"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "PortType", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Property({Static:false, Public:true }, "ParameterOrderString", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["parameterOrder"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "ParameterOrder", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Messages", $asm2B.TypeRef("System.Web.Services.Description.OperationMessageCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["input", $asm2B.System.Web.Services.Description.OperationInput.__Type__]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["output", $asm2B.System.Web.Services.Description.OperationOutput.__Type__]; });

    $.Property({Static:false, Public:true }, "Faults", $asm2B.TypeRef("System.Web.Services.Description.OperationFaultCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fault"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.PortType */ 

(function PortType$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.PortType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operations", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.Field({Static:false, Public:false}, "operations", $asm2B.TypeRef("System.Web.Services.Description.OperationCollection"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "Operations", $asm2B.TypeRef("System.Web.Services.Description.OperationCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["operation"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Message */ 

(function Message$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.Message", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FindPartByName", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MessagePart"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindPartsByName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parts", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.MessagePartCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.Field({Static:false, Public:false}, "parts", $asm2B.TypeRef("System.Web.Services.Description.MessagePartCollection"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "Parts", $asm2B.TypeRef("System.Web.Services.Description.MessagePartCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["part"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.MessagePart */ 

(function MessagePart$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.NamedItem"), 
      Name: "System.Web.Services.Description.MessagePart", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Element", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Element", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.Field({Static:false, Public:false}, "type", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "element", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "parent", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Message", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:true }, "Element", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["element"]; });

    $.Property({Static:false, Public:true }, "Type", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.Types */ 

(function Types$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.DocumentableItem"), 
      Name: "System.Web.Services.Description.Types", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasItems", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Extensions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["schema", $asm2F.System.Xml.Schema.XmlSchema.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPointAttribute"), function () { return ["Extensions"]; });

})();

/* class System.Web.Services.Description.ServiceDescriptionBaseCollection */ 

(function ServiceDescriptionBaseCollection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.ServiceDescriptionBaseCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Table", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDuplicateMessage", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "table", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "parent", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "Table", $asm07.TypeRef("System.Collections.IDictionary"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection */ 

(function ServiceDescriptionFormatExtensionCollection$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAll", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAll", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlElement")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsHandled", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsHandled", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsRequired", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRequired", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHandled", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "handledElements", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Web.Services.Description.OperationFlow */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.OperationFlow", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    OneWay: 1, 
    Notification: 2, 
    RequestResponse: 3, 
    SolicitResponse: 4, 
  }
);

/* class System.Web.Services.Description.OperationMessageCollection */ 

(function OperationMessageCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.OperationMessageCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationMessage")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationMessage")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.OperationMessage")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flow", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationFlow"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationInput"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationMessage"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Output", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.OperationOutput"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationMessage")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationMessage")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OperationMessage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationMessage")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.OperationMessage"));

    $.Property({Static:false, Public:true }, "Input", $asm2B.TypeRef("System.Web.Services.Description.OperationInput"));

    $.Property({Static:false, Public:true }, "Output", $asm2B.TypeRef("System.Web.Services.Description.OperationOutput"));

    $.Property({Static:false, Public:true }, "Flow", $asm2B.TypeRef("System.Web.Services.Description.OperationFlow"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.ImportCollection */ 

(function ImportCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.ImportCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Import")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Import")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Import")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Import"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Import")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Import")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Import"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Import")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Import"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.MessageCollection */ 

(function MessageCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.MessageCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Message")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Message")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Message")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Message"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Message"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Message")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Message")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Message")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Message"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.PortCollection */ 

(function PortCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.PortCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Port")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Port")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Port")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Port"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Port"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Port")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Port")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Port"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Port")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Port"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.PortTypeCollection */ 

(function PortTypeCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.PortTypeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.PortType")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.PortType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.PortType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.PortType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.PortType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.BindingCollection */ 

(function BindingCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.BindingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Binding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Binding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Binding")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Binding"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Binding"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Binding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Binding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Binding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Binding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.ServiceCollection */ 

(function ServiceCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.ServiceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Service")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Service")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Service")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Service"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Service"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Service")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Service")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Service")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.MessagePartCollection */ 

(function MessagePartCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.MessagePartCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Message"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MessagePart"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MessagePart"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MessagePart"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.MessagePart")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.MessagePart"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.MessagePart"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.OperationBindingCollection */ 

(function OperationBindingCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.OperationBindingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Binding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.OperationBinding")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.FaultBindingCollection */ 

(function FaultBindingCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.FaultBindingCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.FaultBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.FaultBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.FaultBinding")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.FaultBinding"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.FaultBinding"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.FaultBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.FaultBinding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.FaultBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.FaultBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.FaultBinding"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.FaultBinding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.OperationCollection */ 

(function OperationCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.OperationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.PortType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Operation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.Operation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.Operation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Operation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.Operation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Operation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.Operation")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.Operation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.OperationFaultCollection */ 

(function OperationFaultCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.OperationFaultCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Operation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.OperationFault")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationFault"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationFault"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.OperationFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationFault")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.OperationFault"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.OperationFault")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.OperationFault"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.OperationFault"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.Schemas */ 

(function Schemas$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.Schemas", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Wsdl", $.String, "<?xml version='1.0' encoding='UTF-8' ?> \r\n<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'\r\n           xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'\r\n           targetNamespace='http://schemas.xmlsoap.org/wsdl/'\r\n           elementFormDefault='qualified' >\r\n   \r\n  <xs:complexType mixed='true' name='tDocumentation' >\r\n    <xs:sequence>\r\n      <xs:any minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n    </xs:sequence>\r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tDocumented' >\r\n    <xs:annotation>\r\n      <xs:documentation>\r\n      This type is extended by  component types to allow them to be documented\r\n      </xs:documentation>\r\n    </xs:annotation>\r\n    <xs:sequence>\r\n      <xs:element name='documentation' type='wsdl:tDocumentation' minOccurs='0' />\r\n    </xs:sequence>\r\n  </xs:complexType>\r\n <!-- allow extensibility via elements and attributes on all elements swa124 -->\r\n <xs:complexType name='tExtensibleAttributesDocumented' abstract='true' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tDocumented' >\r\n        <xs:annotation>\r\n          <xs:documentation>\r\n          This type is extended by component types to allow attributes from other namespaces to be added.\r\n          </xs:documentation>\r\n        </xs:annotation>\r\n        <xs:sequence>\r\n          <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n        </xs:sequence>\r\n        <xs:anyAttribute namespace='##other' processContents='lax' />   \r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:complexType name='tExtensibleDocumented' abstract='true' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tDocumented' >\r\n        <xs:annotation>\r\n          <xs:documentation>\r\n          This type is extended by component types to allow elements from other namespaces to be added.\r\n          </xs:documentation>\r\n        </xs:annotation>\r\n        <xs:sequence>\r\n          <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n        </xs:sequence>\r\n        <xs:anyAttribute namespace='##other' processContents='lax' />   \r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <!-- original wsdl removed as part of swa124 resolution\r\n  <xs:complexType name='tExtensibleAttributesDocumented' abstract='true' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tDocumented' >\r\n        <xs:annotation>\r\n          <xs:documentation>\r\n          This type is extended by component types to allow attributes from other namespaces to be added.\r\n          </xs:documentation>\r\n        </xs:annotation>\r\n        <xs:anyAttribute namespace='##other' processContents='lax' />    \r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tExtensibleDocumented' abstract='true' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tDocumented' >\r\n        <xs:annotation>\r\n          <xs:documentation>\r\n          This type is extended by component types to allow elements from other namespaces to be added.\r\n          </xs:documentation>\r\n        </xs:annotation>\r\n        <xs:sequence>\r\n          <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n        </xs:sequence>\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n -->\r\n  <xs:element name='definitions' type='wsdl:tDefinitions' >\r\n    <xs:key name='message' >\r\n      <xs:selector xpath='wsdl:message' />\r\n      <xs:field xpath='@name' />\r\n    </xs:key>\r\n    <xs:key name='portType' >\r\n      <xs:selector xpath='wsdl:portType' />\r\n      <xs:field xpath='@name' />\r\n    </xs:key>\r\n    <xs:key name='binding' >\r\n      <xs:selector xpath='wsdl:binding' />\r\n      <xs:field xpath='@name' />\r\n    </xs:key>\r\n    <xs:key name='service' >\r\n      <xs:selector xpath='wsdl:service' />\r\n      <xs:field xpath='@name' />\r\n    </xs:key>\r\n    <xs:key name='import' >\r\n      <xs:selector xpath='wsdl:import' />\r\n      <xs:field xpath='@namespace' />\r\n    </xs:key>\r\n  </xs:element>\r\n\r\n  <xs:group name='anyTopLevelOptionalElement' >\r\n    <xs:annotation>\r\n      <xs:documentation>\r\n      Any top level optional element allowed to appear more then once - any child of definitions element except wsdl:types. Any extensibility element is allowed in any place.\r\n      </xs:documentation>\r\n    </xs:annotation>\r\n    <xs:choice>\r\n      <xs:element name='import' type='wsdl:tImport' />\r\n      <xs:element name='types' type='wsdl:tTypes' />                     \r\n      <xs:element name='message'  type='wsdl:tMessage' >\r\n        <xs:unique name='part' >\r\n          <xs:selector xpath='wsdl:part' />\r\n          <xs:field xpath='@name' />\r\n        </xs:unique>\r\n      </xs:element>\r\n      <xs:element name='portType' type='wsdl:tPortType' />\r\n      <xs:element name='binding'  type='wsdl:tBinding' />\r\n      <xs:element name='service'  type='wsdl:tService' >\r\n        <xs:unique name='port' >\r\n          <xs:selector xpath='wsdl:port' />\r\n          <xs:field xpath='@name' />\r\n        </xs:unique>\r\n      </xs:element>\r\n    </xs:choice>\r\n  </xs:group>\r\n\r\n  <xs:complexType name='tDefinitions' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:group ref='wsdl:anyTopLevelOptionalElement'  minOccurs='0'   maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='targetNamespace' type='xs:anyURI' use='optional' />\r\n        <xs:attribute name='name' type='xs:NCName' use='optional' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n   \r\n  <xs:complexType name='tImport' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleAttributesDocumented' >\r\n        <xs:attribute name='namespace' type='xs:anyURI' use='required' />\r\n        <xs:attribute name='location' type='xs:anyURI' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n   \r\n  <xs:complexType name='tTypes' >\r\n    <xs:complexContent>   \r\n      <xs:extension base='wsdl:tExtensibleDocumented' />\r\n    </xs:complexContent>   \r\n  </xs:complexType>\r\n     \r\n  <xs:complexType name='tMessage' >\r\n    <xs:complexContent>   \r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:element name='part' type='wsdl:tPart' minOccurs='0' maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>   \r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tPart' >\r\n    <xs:complexContent>   \r\n      <xs:extension base='wsdl:tExtensibleAttributesDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n        <xs:attribute name='element' type='xs:QName' use='optional' />\r\n        <xs:attribute name='type' type='xs:QName' use='optional' />    \r\n      </xs:extension>\r\n    </xs:complexContent>   \r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tPortType' >\r\n    <xs:complexContent>   \r\n      <xs:extension base='wsdl:tExtensibleAttributesDocumented' >\r\n        <xs:sequence>\r\n          <xs:element name='operation' type='wsdl:tOperation' minOccurs='0' maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>   \r\n  </xs:complexType>\r\n   \r\n  <xs:complexType name='tOperation' >\r\n    <xs:complexContent>   \r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:choice>\r\n            <xs:group ref='wsdl:request-response-or-one-way-operation' />\r\n            <xs:group ref='wsdl:solicit-response-or-notification-operation' />\r\n          </xs:choice>\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n        <xs:attribute name='parameterOrder' type='xs:NMTOKENS' use='optional' />\r\n      </xs:extension>\r\n    </xs:complexContent>   \r\n  </xs:complexType>\r\n    \r\n  <xs:group name='request-response-or-one-way-operation' >\r\n    <xs:sequence>\r\n      <xs:element name='input' type='wsdl:tParam' />\r\n      <xs:sequence minOccurs='0' >\r\n        <xs:element name='output' type='wsdl:tParam' />\r\n        <xs:element name='fault' type='wsdl:tFault' minOccurs='0' maxOccurs='unbounded' />\r\n      </xs:sequence>\r\n    </xs:sequence>\r\n  </xs:group>\r\n\r\n  <xs:group name='solicit-response-or-notification-operation' >\r\n    <xs:sequence>\r\n      <xs:element name='output' type='wsdl:tParam' />\r\n      <xs:sequence minOccurs='0' >\r\n        <xs:element name='input' type='wsdl:tParam' />\r\n        <xs:element name='fault' type='wsdl:tFault' minOccurs='0' maxOccurs='unbounded' />\r\n      </xs:sequence>\r\n    </xs:sequence>\r\n  </xs:group>\r\n        \r\n  <xs:complexType name='tParam' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleAttributesDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName' use='optional' />\r\n        <xs:attribute name='message' type='xs:QName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tFault' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleAttributesDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName'  use='required' />\r\n        <xs:attribute name='message' type='xs:QName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n     \r\n  <xs:complexType name='tBinding' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:element name='operation' type='wsdl:tBindingOperation' minOccurs='0' maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n        <xs:attribute name='type' type='xs:QName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n    \r\n  <xs:complexType name='tBindingOperationMessage' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName' use='optional' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  \r\n  <xs:complexType name='tBindingOperationFault' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n\r\n  <xs:complexType name='tBindingOperation' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:element name='input' type='wsdl:tBindingOperationMessage' minOccurs='0' />\r\n          <xs:element name='output' type='wsdl:tBindingOperationMessage' minOccurs='0' />\r\n          <xs:element name='fault' type='wsdl:tBindingOperationFault' minOccurs='0' maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n     \r\n  <xs:complexType name='tService' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:sequence>\r\n          <xs:element name='port' type='wsdl:tPort' minOccurs='0' maxOccurs='unbounded' />\r\n        </xs:sequence>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n     \r\n  <xs:complexType name='tPort' >\r\n    <xs:complexContent>\r\n      <xs:extension base='wsdl:tExtensibleDocumented' >\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n        <xs:attribute name='binding' type='xs:QName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n\r\n  <xs:attribute name='arrayType' type='xs:string' />\r\n  <xs:attribute name='required' type='xs:boolean' />\r\n  <xs:complexType name='tExtensibilityElement' abstract='true' >\r\n    <xs:attribute ref='wsdl:required' use='optional' />\r\n  </xs:complexType>\r\n\r\n</xs:schema>");

    $.Constant({Static:true , Public:false}, "Soap", $.String, "<?xml version='1.0' encoding='UTF-8' ?> \r\n<xs:schema xmlns:soap='http://schemas.xmlsoap.org/wsdl/soap/' xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/' targetNamespace='http://schemas.xmlsoap.org/wsdl/soap/' xmlns:xs='http://www.w3.org/2001/XMLSchema'>\r\n  <xs:import namespace='http://schemas.xmlsoap.org/wsdl/' />\r\n  <xs:simpleType name='encodingStyle'>\r\n    <xs:annotation>\r\n      <xs:documentation>\r\n      'encodingStyle' indicates any canonicalization conventions followed in the contents of the containing element.  For example, the value 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in SOAP specification\r\n      </xs:documentation>\r\n    </xs:annotation>\r\n    <xs:list itemType='xs:anyURI' />\r\n  </xs:simpleType>\r\n  <xs:element name='binding' type='soap:tBinding' />\r\n  <xs:complexType name='tBinding'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='wsdl:tExtensibilityElement'>\r\n        <xs:attribute name='transport' type='xs:anyURI' use='required' />\r\n        <xs:attribute name='style' type='soap:tStyleChoice' use='optional' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:simpleType name='tStyleChoice'>\r\n    <xs:restriction base='xs:string'>\r\n      <xs:enumeration value='rpc' />\r\n      <xs:enumeration value='document' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:element name='operation' type='soap:tOperation' />\r\n  <xs:complexType name='tOperation'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='wsdl:tExtensibilityElement'>\r\n        <xs:attribute name='soapAction' type='xs:anyURI' use='optional' />\r\n        <xs:attribute name='style' type='soap:tStyleChoice' use='optional' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:element name='body' type='soap:tBody' />\r\n  <xs:attributeGroup name='tBodyAttributes'>\r\n    <xs:attribute name='encodingStyle' type='soap:encodingStyle' use='optional' />\r\n    <xs:attribute name='use' type='soap:useChoice' use='optional' />\r\n    <xs:attribute name='namespace' type='xs:anyURI' use='optional' />\r\n  </xs:attributeGroup>\r\n  <xs:complexType name='tBody'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='wsdl:tExtensibilityElement'>\r\n        <xs:attribute name='parts' type='xs:NMTOKENS' use='optional' />\r\n        <xs:attributeGroup ref='soap:tBodyAttributes' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:simpleType name='useChoice'>\r\n    <xs:restriction base='xs:string'>\r\n      <xs:enumeration value='literal' />\r\n      <xs:enumeration value='encoded' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:element name='fault' type='soap:tFault' />\r\n  <xs:complexType name='tFaultRes' abstract='true'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:restriction base='soap:tBody'>\r\n        <xs:attribute ref='wsdl:required' use='optional' />\r\n        <xs:attribute name='parts' type='xs:NMTOKENS' use='prohibited' />\r\n        <xs:attributeGroup ref='soap:tBodyAttributes' />\r\n      </xs:restriction>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:complexType name='tFault'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='soap:tFaultRes'>\r\n        <xs:attribute name='name' type='xs:NCName' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:element name='header' type='soap:tHeader' />\r\n  <xs:attributeGroup name='tHeaderAttributes'>\r\n    <xs:attribute name='message' type='xs:QName' use='required' />\r\n    <xs:attribute name='part' type='xs:NMTOKEN' use='required' />\r\n    <xs:attribute name='use' type='soap:useChoice' use='required' />\r\n    <xs:attribute name='encodingStyle' type='soap:encodingStyle' use='optional' />\r\n    <xs:attribute name='namespace' type='xs:anyURI' use='optional' />\r\n  </xs:attributeGroup>\r\n  <xs:complexType name='tHeader'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='wsdl:tExtensibilityElement'>\r\n        <xs:sequence>\r\n          <xs:element minOccurs='0' maxOccurs='unbounded' ref='soap:headerfault' />\r\n        </xs:sequence>\r\n        <xs:attributeGroup ref='soap:tHeaderAttributes' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n  <xs:element name='headerfault' type='soap:tHeaderFault' />\r\n  <xs:complexType name='tHeaderFault'>\r\n    <xs:attributeGroup ref='soap:tHeaderAttributes' />\r\n  </xs:complexType>\r\n  <xs:element name='address' type='soap:tAddress' />\r\n  <xs:complexType name='tAddress'>\r\n    <xs:complexContent mixed='false'>\r\n      <xs:extension base='wsdl:tExtensibilityElement'>\r\n        <xs:attribute name='location' type='xs:anyURI' use='required' />\r\n      </xs:extension>\r\n    </xs:complexContent>\r\n  </xs:complexType>\r\n</xs:schema>");

    $.Constant({Static:true , Public:false}, "WebRef", $.String, "<?xml version='1.0' encoding='UTF-8' ?>\r\n<xs:schema xmlns:tns='http://microsoft.com/webReference/' elementFormDefault='qualified' targetNamespace='http://microsoft.com/webReference/' xmlns:xs='http://www.w3.org/2001/XMLSchema'>\r\n  <xs:simpleType name='options'>\r\n    <xs:list>\r\n      <xs:simpleType>\r\n        <xs:restriction base='xs:string'>\r\n          <xs:enumeration value='properties' />\r\n          <xs:enumeration value='newAsync' />\r\n          <xs:enumeration value='oldAsync' />\r\n          <xs:enumeration value='order' />\r\n          <xs:enumeration value='enableDataBinding' />\r\n        </xs:restriction>\r\n      </xs:simpleType>\r\n    </xs:list>\r\n  </xs:simpleType>\r\n  <xs:simpleType name='style'>\r\n    <xs:restriction base='xs:string'>\r\n      <xs:enumeration value='client' />\r\n      <xs:enumeration value='server' />\r\n      <xs:enumeration value='serverInterface' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:complexType name='webReferenceOptions'>\r\n    <xs:all>\r\n      <xs:element minOccurs='0' default='oldAsync' name='codeGenerationOptions' type='tns:options' />\r\n      <xs:element minOccurs='0' default='client' name='style' type='tns:style' />\r\n      <xs:element minOccurs='0' default='false' name='verbose' type='xs:boolean' />\r\n      <xs:element minOccurs='0' name='schemaImporterExtensions'>\r\n        <xs:complexType>\r\n          <xs:sequence>\r\n            <xs:element minOccurs='0' maxOccurs='unbounded' name='type' type='xs:string' />\r\n          </xs:sequence>\r\n        </xs:complexType>\r\n      </xs:element>\r\n    </xs:all>\r\n  </xs:complexType>\r\n  <xs:element name='webReferenceOptions' type='tns:webReferenceOptions' />\r\n  <xs:complexType name='wsdlParameters'>\r\n    <xs:all>\r\n      <xs:element minOccurs='0' name='appSettingBaseUrl' type='xs:string' />\r\n      <xs:element minOccurs='0' name='appSettingUrlKey' type='xs:string' />\r\n      <xs:element minOccurs='0' name='domain' type='xs:string' />\r\n      <xs:element minOccurs='0' name='out' type='xs:string' />\r\n      <xs:element minOccurs='0' name='password' type='xs:string' />\r\n      <xs:element minOccurs='0' name='proxy' type='xs:string' />\r\n      <xs:element minOccurs='0' name='proxydomain' type='xs:string' />\r\n      <xs:element minOccurs='0' name='proxypassword' type='xs:string' />\r\n      <xs:element minOccurs='0' name='proxyusername' type='xs:string' />\r\n      <xs:element minOccurs='0' name='username' type='xs:string' />\r\n      <xs:element minOccurs='0' name='namespace' type='xs:string' />\r\n      <xs:element minOccurs='0' name='language' type='xs:string' />\r\n      <xs:element minOccurs='0' name='protocol' type='xs:string' />\r\n      <xs:element minOccurs='0' name='nologo' type='xs:boolean' />\r\n      <xs:element minOccurs='0' name='parsableerrors' type='xs:boolean' />\r\n      <xs:element minOccurs='0' name='sharetypes' type='xs:boolean' />\r\n      <xs:element minOccurs='0' name='webReferenceOptions' type='tns:webReferenceOptions' />\r\n      <xs:element minOccurs='0' name='documents'>\r\n        <xs:complexType>\r\n          <xs:sequence>\r\n            <xs:element minOccurs='0' maxOccurs='unbounded' name='document' type='xs:string' />\r\n          </xs:sequence>\r\n        </xs:complexType>\r\n      </xs:element>\r\n    </xs:all>\r\n  </xs:complexType>\r\n  <xs:element name='wsdlParameters' type='tns:wsdlParameters' />\r\n</xs:schema>");

    $.Constant({Static:true , Public:false}, "SoapEncoding", $.String, "<?xml version='1.0' encoding='UTF-8' ?>\r\n<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'\r\n           xmlns:tns='http://schemas.xmlsoap.org/soap/encoding/'\r\n           targetNamespace='http://schemas.xmlsoap.org/soap/encoding/' >\r\n        \r\n <xs:attribute name='root' >\r\n   <xs:simpleType>\r\n     <xs:restriction base='xs:boolean'>\r\n       <xs:pattern value='0|1' />\r\n     </xs:restriction>\r\n   </xs:simpleType>\r\n </xs:attribute>\r\n\r\n  <xs:attributeGroup name='commonAttributes' >\r\n    <xs:attribute name='id' type='xs:ID' />\r\n    <xs:attribute name='href' type='xs:anyURI' />\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:attributeGroup>\r\n   \r\n  <xs:simpleType name='arrayCoordinate' >\r\n    <xs:restriction base='xs:string' />\r\n  </xs:simpleType>\r\n          \r\n  <xs:attribute name='arrayType' type='xs:string' />\r\n  <xs:attribute name='offset' type='tns:arrayCoordinate' />\r\n  \r\n  <xs:attributeGroup name='arrayAttributes' >\r\n    <xs:attribute ref='tns:arrayType' />\r\n    <xs:attribute ref='tns:offset' />\r\n  </xs:attributeGroup>    \r\n  \r\n  <xs:attribute name='position' type='tns:arrayCoordinate' /> \r\n  \r\n  <xs:attributeGroup name='arrayMemberAttributes' >\r\n    <xs:attribute ref='tns:position' />\r\n  </xs:attributeGroup>    \r\n\r\n  <xs:group name='Array' >\r\n    <xs:sequence>\r\n      <xs:any namespace='##any' minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n    </xs:sequence>\r\n  </xs:group>\r\n\r\n  <xs:element name='Array' type='tns:Array' />\r\n  <xs:complexType name='Array' >\r\n    <xs:group ref='tns:Array' minOccurs='0' />\r\n    <xs:attributeGroup ref='tns:arrayAttributes' />\r\n    <xs:attributeGroup ref='tns:commonAttributes' />\r\n  </xs:complexType> \r\n  <xs:element name='Struct' type='tns:Struct' />\r\n  <xs:group name='Struct' >\r\n    <xs:sequence>\r\n      <xs:any namespace='##any' minOccurs='0' maxOccurs='unbounded' processContents='lax' />\r\n    </xs:sequence>\r\n  </xs:group>\r\n\r\n  <xs:complexType name='Struct' >\r\n    <xs:group ref='tns:Struct' minOccurs='0' />\r\n    <xs:attributeGroup ref='tns:commonAttributes'/>\r\n  </xs:complexType> \r\n  \r\n  <xs:simpleType name='base64' >\r\n    <xs:restriction base='xs:base64Binary' />\r\n  </xs:simpleType>\r\n\r\n  <xs:element name='duration' type='tns:duration' />\r\n  <xs:complexType name='duration' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:duration' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='dateTime' type='tns:dateTime' />\r\n  <xs:complexType name='dateTime' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:dateTime' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n\r\n\r\n  <xs:element name='NOTATION' type='tns:NOTATION' />\r\n  <xs:complexType name='NOTATION' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:QName' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n  \r\n\r\n  <xs:element name='time' type='tns:time' />\r\n  <xs:complexType name='time' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:time' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='date' type='tns:date' />\r\n  <xs:complexType name='date' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:date' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='gYearMonth' type='tns:gYearMonth' />\r\n  <xs:complexType name='gYearMonth' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:gYearMonth' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='gYear' type='tns:gYear' />\r\n  <xs:complexType name='gYear' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:gYear' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='gMonthDay' type='tns:gMonthDay' />\r\n  <xs:complexType name='gMonthDay' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:gMonthDay' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='gDay' type='tns:gDay' />\r\n  <xs:complexType name='gDay' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:gDay' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='gMonth' type='tns:gMonth' />\r\n  <xs:complexType name='gMonth' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:gMonth' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n  \r\n  <xs:element name='boolean' type='tns:boolean' />\r\n  <xs:complexType name='boolean' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:boolean' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='base64Binary' type='tns:base64Binary' />\r\n  <xs:complexType name='base64Binary' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:base64Binary' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='hexBinary' type='tns:hexBinary' />\r\n  <xs:complexType name='hexBinary' >\r\n    <xs:simpleContent>\r\n     <xs:extension base='xs:hexBinary' >\r\n       <xs:attributeGroup ref='tns:commonAttributes' />\r\n     </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='float' type='tns:float' />\r\n  <xs:complexType name='float' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:float' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='double' type='tns:double' />\r\n  <xs:complexType name='double' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:double' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='anyURI' type='tns:anyURI' />\r\n  <xs:complexType name='anyURI' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:anyURI' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='QName' type='tns:QName' />\r\n  <xs:complexType name='QName' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:QName' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  \r\n  <xs:element name='string' type='tns:string' />\r\n  <xs:complexType name='string' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:string' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='normalizedString' type='tns:normalizedString' />\r\n  <xs:complexType name='normalizedString' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:normalizedString' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='token' type='tns:token' />\r\n  <xs:complexType name='token' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:token' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='language' type='tns:language' />\r\n  <xs:complexType name='language' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:language' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='Name' type='tns:Name' />\r\n  <xs:complexType name='Name' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:Name' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='NMTOKEN' type='tns:NMTOKEN' />\r\n  <xs:complexType name='NMTOKEN' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:NMTOKEN' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='NCName' type='tns:NCName' />\r\n  <xs:complexType name='NCName' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:NCName' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='NMTOKENS' type='tns:NMTOKENS' />\r\n  <xs:complexType name='NMTOKENS' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:NMTOKENS' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='ID' type='tns:ID' />\r\n  <xs:complexType name='ID' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:ID' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='IDREF' type='tns:IDREF' />\r\n  <xs:complexType name='IDREF' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:IDREF' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='ENTITY' type='tns:ENTITY' />\r\n  <xs:complexType name='ENTITY' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:ENTITY' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='IDREFS' type='tns:IDREFS' />\r\n  <xs:complexType name='IDREFS' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:IDREFS' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='ENTITIES' type='tns:ENTITIES' />\r\n  <xs:complexType name='ENTITIES' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:ENTITIES' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='decimal' type='tns:decimal' />\r\n  <xs:complexType name='decimal' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:decimal' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='integer' type='tns:integer' />\r\n  <xs:complexType name='integer' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:integer' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='nonPositiveInteger' type='tns:nonPositiveInteger' />\r\n  <xs:complexType name='nonPositiveInteger' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:nonPositiveInteger' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='negativeInteger' type='tns:negativeInteger' />\r\n  <xs:complexType name='negativeInteger' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:negativeInteger' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='long' type='tns:long' />\r\n  <xs:complexType name='long' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:long' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='int' type='tns:int' />\r\n  <xs:complexType name='int' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:int' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='short' type='tns:short' />\r\n  <xs:complexType name='short' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:short' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='byte' type='tns:byte' />\r\n  <xs:complexType name='byte' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:byte' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='nonNegativeInteger' type='tns:nonNegativeInteger' />\r\n  <xs:complexType name='nonNegativeInteger' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:nonNegativeInteger' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='unsignedLong' type='tns:unsignedLong' />\r\n  <xs:complexType name='unsignedLong' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:unsignedLong' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='unsignedInt' type='tns:unsignedInt' />\r\n  <xs:complexType name='unsignedInt' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:unsignedInt' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='unsignedShort' type='tns:unsignedShort' />\r\n  <xs:complexType name='unsignedShort' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:unsignedShort' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='unsignedByte' type='tns:unsignedByte' />\r\n  <xs:complexType name='unsignedByte' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:unsignedByte' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='positiveInteger' type='tns:positiveInteger' />\r\n  <xs:complexType name='positiveInteger' >\r\n    <xs:simpleContent>\r\n      <xs:extension base='xs:positiveInteger' >\r\n        <xs:attributeGroup ref='tns:commonAttributes' />\r\n      </xs:extension>\r\n    </xs:simpleContent>\r\n  </xs:complexType>\r\n\r\n  <xs:element name='anyType' />\r\n</xs:schema>");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Web.Services.Description.ServiceDescriptionImportWarnings */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.ServiceDescriptionImportWarnings", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    NoCodeGenerated: 1, 
    OptionalExtensionsIgnored: 2, 
    RequiredExtensionsIgnored: 4, 
    UnsupportedOperationsIgnored: 8, 
    UnsupportedBindingsIgnored: 16, 
    NoMethodsGenerated: 32, 
    SchemaValidation: 64, 
    WsiConformance: 128, 
  }
);

/* enum System.Web.Services.Description.ServiceDescriptionImportStyle */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.ServiceDescriptionImportStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Client: 0, 
    Server: 1, 
    ServerInterface: 2, 
  }
);

/* class System.Web.Services.Description.ServiceDescriptionImporter */ 

(function ServiceDescriptionImporter$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ServiceDescriptionImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDocument", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"), 
          $asm0A.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSchema", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean, 
          $.Boolean, $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddServiceDescription", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Context", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.ImportContext"), [
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImporterByName", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ProtocolImporter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindUse", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.MessagePart"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindUse", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Operation"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateWebReferences", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.StringCollection"), [
          $asm2B.TypeRef("System.Web.Services.Description.WebReferenceCollection"), $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), $asm2B.TypeRef("System.Web.Services.Description.WebReferenceOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AbstractSchemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllSchemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeCompileUnit", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeGenerationOptions", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeGenerator", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConcreteSchemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Extensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"), [$asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm0A.TypeRef("System.CodeDom.CodeCompileUnit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Import", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"), [
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $asm2F.TypeRef("System.Xml.Serialization.ImportContext"), 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm0A.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeGenerationOptions", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeGenerator", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProtocolName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Style", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
    );

    $.Field({Static:false, Public:false}, "style", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"));

    $.Field({Static:false, Public:false}, "serviceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "allSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "protocolName", $.String);

    $.Field({Static:false, Public:false}, "options", $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Field({Static:false, Public:false}, "codeProvider", $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Field({Static:false, Public:false}, "importers", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.ProtocolImporter")]));

    $.Field({Static:false, Public:false}, "abstractSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "concreteSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "extensions", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:true }, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:true }, "Style", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"));

    $.Property({Static:false, Public:true }, "CodeGenerationOptions", $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "CodeCompileUnit", $asm0A.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Property({Static:false, Public:true }, "CodeGenerator", $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Extensions", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "ProtocolName", $.String);

    $.Property({Static:false, Public:false}, "AllSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "AbstractSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "ConcreteSchemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ServiceDescriptionReflector */ 

(function ServiceDescriptionReflector$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.ServiceDescriptionReflector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateMethods", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Methods", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReflectionContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReflectionImporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaExporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaExporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemasWithPost", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Service", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.Service"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceAttribute", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebServiceAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceDescriptionsWithPost", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UriFixups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reflect", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectInternal", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector")]))
    );

    $.Field({Static:false, Public:false}, "reflectors", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector")]));

    $.Field({Static:false, Public:false}, "reflectorsWithPost", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector")]));

    $.Field({Static:false, Public:false}, "descriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "descriptionsWithPost", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "schemasWithPost", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "serviceAttr", $asm2B.TypeRef("System.Web.Services.WebServiceAttribute"));

    $.Field({Static:false, Public:false}, "description", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Field({Static:false, Public:false}, "methods", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]));

    $.Field({Static:false, Public:false}, "exporter", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaExporter"));

    $.Field({Static:false, Public:false}, "importer", $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"));

    $.Field({Static:false, Public:false}, "serviceType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serviceUrl", $.String);

    $.Field({Static:false, Public:false}, "reflectionContext", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "uriFixups", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]));

    $.Property({Static:false, Public:false}, "UriFixups", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]));

    $.Property({Static:false, Public:true }, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:true }, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "ServiceDescriptionsWithPost", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:false}, "SchemasWithPost", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "ServiceDescription", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:false}, "Service", $asm2B.TypeRef("System.Web.Services.Description.Service"));

    $.Property({Static:false, Public:false}, "ServiceType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Methods", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]));

    $.Property({Static:false, Public:false}, "ServiceUrl", $.String);

    $.Property({Static:false, Public:false}, "SchemaExporter", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaExporter"));

    $.Property({Static:false, Public:false}, "ReflectionImporter", $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"));

    $.Property({Static:false, Public:false}, "ServiceAttribute", $asm2B.TypeRef("System.Web.Services.WebServiceAttribute"));

    $.Property({Static:false, Public:false}, "ReflectionContext", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ServiceDescriptionCollection */ 

(function ServiceDescriptionCollection$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionBaseCollection"), 
      Name: "System.Web.Services.Description.ServiceDescriptionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Binding"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMessage", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Message"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPortType", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.PortType"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetService", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Service"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServiceDescription", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ItemNotFound", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.ServiceDescriptionSerializationWriter */ 

(function ServiceDescriptionSerializationWriter$Members () {
  var $, $thisType;




































































































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), 
      Name: "System.Web.Services.Description.ServiceDescriptionSerializationWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Write10_XmlSchemaAppInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAppInfo"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write100_SoapBindingUse", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write102_Soap12BodyBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12BodyBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write103_MimePart", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimePart"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write104_MimeMultipartRelatedBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimeMultipartRelatedBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write105_SoapHeaderFaultBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write106_SoapHeaderBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write107_SoapHeaderFaultBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write109_Soap12HeaderBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12HeaderBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write11_XmlSchemaAnnotation", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write110_InputBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.InputBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write111_OutputBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.OutputBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write112_SoapFaultBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapFaultBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write114_Soap12FaultBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12FaultBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write115_FaultBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.FaultBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write116_OperationBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.OperationBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write117_Binding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Binding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write118_HttpAddressBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.HttpAddressBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write119_SoapAddressBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write12_XmlSchemaInclude", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaInclude"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write121_Soap12AddressBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12AddressBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write122_Port", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Port"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write123_Service", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Service"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write124_ServiceDescription", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write125_definitions", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write13_XmlSchemaImport", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaImport"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write17_XmlSchemaSimpleTypeList", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write20_XmlSchemaFractionDigitsFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaFractionDigitsFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write21_XmlSchemaMinInclusiveFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinInclusiveFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write22_XmlSchemaMaxLengthFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxLengthFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write23_XmlSchemaLengthFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaLengthFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write24_XmlSchemaTotalDigitsFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaTotalDigitsFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write25_XmlSchemaPatternFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write26_XmlSchemaEnumerationFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaEnumerationFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write27_XmlSchemaMaxInclusiveFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxInclusiveFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write28_XmlSchemaMaxExclusiveFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxExclusiveFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write29_XmlSchemaWhiteSpaceFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpaceFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write30_XmlSchemaMinExclusiveFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinExclusiveFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write31_XmlSchemaMinLengthFacet", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinLengthFacet"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write32_XmlSchemaSimpleTypeRestriction", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write33_XmlSchemaSimpleTypeUnion", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write34_XmlSchemaSimpleType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write35_XmlSchemaUse", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaUse")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write36_XmlSchemaAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write37_XmlSchemaAttributeGroupRef", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write38_XmlSchemaContentProcessing", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write39_XmlSchemaAnyAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write4_Import", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Import"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write40_XmlSchemaAttributeGroup", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write44_XmlSchemaGroupRef", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write46_XmlSchemaAny", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write47_XmlSchemaXPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaXPath"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write49_XmlSchemaKey", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaKey"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write50_XmlSchemaUnique", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaUnique"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write51_XmlSchemaKeyref", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaKeyref"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write52_XmlSchemaElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write53_XmlSchemaSequence", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write54_XmlSchemaChoice", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write55_XmlSchemaAll", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write56_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write57_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write58_XmlSchemaComplexContent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write59_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write6_XmlSchemaForm", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaForm")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write60_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write61_XmlSchemaSimpleContent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write62_XmlSchemaComplexType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write63_XmlSchemaGroup", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write64_XmlSchemaRedefine", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaRedefine"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write65_XmlSchemaNotation", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaNotation"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write66_XmlSchema", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write67_Types", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Types"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write68_MessagePart", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MessagePart"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write69_Message", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Message"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write7_XmlSchemaDerivationMethod", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write71_OperationInput", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.OperationInput"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write72_OperationOutput", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.OperationOutput"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write73_OperationFault", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.OperationFault"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write74_Operation", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Operation"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write75_PortType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.PortType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write77_HttpBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.HttpBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write79_SoapBindingStyle", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write80_SoapBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write82_SoapBindingStyle", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write84_Soap12Binding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12Binding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write85_HttpOperationBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.HttpOperationBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write86_SoapOperationBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapOperationBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write88_Soap12OperationBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12OperationBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write9_XmlSchemaDocumentation", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.Schema.XmlSchemaDocumentation"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write90_HttpUrlEncodedBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.HttpUrlEncodedBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write91_HttpUrlReplacementBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.HttpUrlReplacementBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write93_MimeContentBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimeContentBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write94_MimeXmlBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimeXmlBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write96_MimeTextMatch", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write97_MimeTextBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write98_SoapBindingUse", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write99_SoapBodyBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), $.Boolean, 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.ServiceDescriptionSerializationReader */ 

(function ServiceDescriptionSerializationReader$Members () {
  var $, $thisType;






































































































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"), 
      Name: "System.Web.Services.Description.ServiceDescriptionSerializationReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlSchemaDerivationMethodValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Read10_XmlSchemaAppInfo", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAppInfo"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read100_SoapBindingUse", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read102_Soap12BodyBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12BodyBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read103_MimePart", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimePart"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read104_MimeMultipartRelatedBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeMultipartRelatedBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read105_SoapHeaderFaultBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read106_SoapHeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read107_SoapHeaderFaultBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read109_Soap12HeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12HeaderBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read11_XmlSchemaAnnotation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read110_InputBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.InputBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read111_OutputBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OutputBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read112_SoapFaultBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapFaultBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read114_Soap12FaultBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12FaultBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read115_FaultBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.FaultBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read116_OperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read117_Binding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Binding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read118_HttpAddressBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.HttpAddressBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read119_SoapAddressBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read12_XmlSchemaInclude", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaInclude"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read121_Soap12AddressBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12AddressBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read122_Port", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Port"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read123_Service", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Service"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read124_ServiceDescription", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read125_definitions", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read13_XmlSchemaImport", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read17_XmlSchemaSimpleTypeList", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read20_XmlSchemaFractionDigitsFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaFractionDigitsFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read21_XmlSchemaMinInclusiveFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinInclusiveFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read22_XmlSchemaMaxLengthFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxLengthFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read23_XmlSchemaLengthFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaLengthFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read24_XmlSchemaTotalDigitsFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaTotalDigitsFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read25_XmlSchemaPatternFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read26_XmlSchemaEnumerationFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaEnumerationFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read27_XmlSchemaMaxInclusiveFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxInclusiveFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read28_XmlSchemaMaxExclusiveFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMaxExclusiveFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read29_XmlSchemaWhiteSpaceFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpaceFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read30_XmlSchemaMinExclusiveFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinExclusiveFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read31_XmlSchemaMinLengthFacet", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaMinLengthFacet"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read32_XmlSchemaSimpleTypeRestriction", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read33_XmlSchemaSimpleTypeUnion", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read34_XmlSchemaSimpleType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read35_XmlSchemaUse", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaUse"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read36_XmlSchemaAttribute", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read37_XmlSchemaAttributeGroupRef", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read38_XmlSchemaContentProcessing", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read39_XmlSchemaAnyAttribute", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read4_Import", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Import"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read40_XmlSchemaAttributeGroup", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read44_XmlSchemaGroupRef", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read46_XmlSchemaAny", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAny"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read47_XmlSchemaXPath", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaXPath"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read49_XmlSchemaKey", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaKey"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read50_XmlSchemaUnique", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaUnique"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read51_XmlSchemaKeyref", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaKeyref"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read52_XmlSchemaElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read53_XmlSchemaSequence", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSequence"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read54_XmlSchemaChoice", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaChoice"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read55_XmlSchemaAll", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaAll"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read56_Item", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read57_Item", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read58_XmlSchemaComplexContent", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read59_Item", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read6_XmlSchemaForm", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read60_Item", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read61_XmlSchemaSimpleContent", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read62_XmlSchemaComplexType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read63_XmlSchemaGroup", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read64_XmlSchemaRedefine", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaRedefine"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read65_XmlSchemaNotation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaNotation"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read66_XmlSchema", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchema"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read67_Types", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Types"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read68_MessagePart", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MessagePart"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read69_Message", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Message"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read7_XmlSchemaDerivationMethod", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read71_OperationInput", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationInput"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read72_OperationOutput", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationOutput"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read73_OperationFault", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.OperationFault"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read74_Operation", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Operation"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read75_PortType", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.PortType"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read77_HttpBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.HttpBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read79_SoapBindingStyle", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read80_SoapBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read82_SoapBindingStyle", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read84_Soap12Binding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12Binding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read85_HttpOperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.HttpOperationBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read86_SoapOperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapOperationBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read88_Soap12OperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Soap12OperationBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read9_XmlSchemaDocumentation", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchemaDocumentation"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read90_HttpUrlEncodedBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.HttpUrlEncodedBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read91_HttpUrlReplacementBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.HttpUrlReplacementBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read93_MimeContentBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeContentBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read94_MimeXmlBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeXmlBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read96_MimeTextMatch", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeTextMatch"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read97_MimeTextBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.MimeTextBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read98_SoapBindingUse", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read99_SoapBodyBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), [$.Boolean, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "_XmlSchemaDerivationMethodValues", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "id133_XmlSchemaSimpleTypeUnion", $.String);

    $.Field({Static:false, Public:false}, "id143_maxInclusive", $.String);

    $.Field({Static:false, Public:false}, "id46_body", $.String);

    $.Field({Static:false, Public:false}, "id190_any", $.String);

    $.Field({Static:false, Public:false}, "id88_OperationOutput", $.String);

    $.Field({Static:false, Public:false}, "id6_targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "id158_XmlSchemaMaxLengthFacet", $.String);

    $.Field({Static:false, Public:false}, "id11_portType", $.String);

    $.Field({Static:false, Public:false}, "id182_mixed", $.String);

    $.Field({Static:false, Public:false}, "id172_keyref", $.String);

    $.Field({Static:false, Public:false}, "id187_all", $.String);

    $.Field({Static:false, Public:false}, "id162_itemType", $.String);

    $.Field({Static:false, Public:false}, "id68_InputBinding", $.String);

    $.Field({Static:false, Public:false}, "id25_HttpAddressBinding", $.String);

    $.Field({Static:false, Public:false}, "id82_HttpBinding", $.String);

    $.Field({Static:false, Public:false}, "id17_address", $.String);

    $.Field({Static:false, Public:false}, "id3_ServiceDescription", $.String);

    $.Field({Static:false, Public:false}, "id38_SoapFaultBinding", $.String);

    $.Field({Static:false, Public:false}, "id123_ref", $.String);

    $.Field({Static:false, Public:false}, "id198_XmlSchemaComplexContent", $.String);

    $.Field({Static:false, Public:false}, "id53_parts", $.String);

    $.Field({Static:false, Public:false}, "id35_use", $.String);

    $.Field({Static:false, Public:false}, "id157_XmlSchemaLengthFacet", $.String);

    $.Field({Static:false, Public:false}, "id207_XmlSchemaImport", $.String);

    $.Field({Static:false, Public:false}, "id44_text", $.String);

    $.Field({Static:false, Public:false}, "id117_XmlSchemaAppInfo", $.String);

    $.Field({Static:false, Public:false}, "id203_public", $.String);

    $.Field({Static:false, Public:false}, "id69_urlEncoded", $.String);

    $.Field({Static:false, Public:false}, "id7_documentation", $.String);

    $.Field({Static:false, Public:false}, "id19_Item", $.String);

    $.Field({Static:false, Public:false}, "id129_final", $.String);

    $.Field({Static:false, Public:false}, "id163_XmlSchemaElement", $.String);

    $.Field({Static:false, Public:false}, "id60_capture", $.String);

    $.Field({Static:false, Public:false}, "id37_encodingStyle", $.String);

    $.Field({Static:false, Public:false}, "id185_sequence", $.String);

    $.Field({Static:false, Public:false}, "id166_abstract", $.String);

    $.Field({Static:false, Public:false}, "id23_location", $.String);

    $.Field({Static:false, Public:false}, "id111_XmlSchemaAttributeGroup", $.String);

    $.Field({Static:false, Public:false}, "id192_XmlSchemaSequence", $.String);

    $.Field({Static:false, Public:false}, "id33_FaultBinding", $.String);

    $.Field({Static:false, Public:false}, "id153_XmlSchemaMaxInclusiveFacet", $.String);

    $.Field({Static:false, Public:false}, "id201_XmlSchemaGroup", $.String);

    $.Field({Static:false, Public:false}, "id43_multipartRelated", $.String);

    $.Field({Static:false, Public:false}, "id168_nillable", $.String);

    $.Field({Static:false, Public:false}, "id149_value", $.String);

    $.Field({Static:false, Public:false}, "id64_MimeMultipartRelatedBinding", $.String);

    $.Field({Static:false, Public:false}, "id193_XmlSchemaAny", $.String);

    $.Field({Static:false, Public:false}, "id191_XmlSchemaGroupRef", $.String);

    $.Field({Static:false, Public:false}, "id74_soapAction", $.String);

    $.Field({Static:false, Public:false}, "id63_ignoreCase", $.String);

    $.Field({Static:false, Public:false}, "id101_version", $.String);

    $.Field({Static:false, Public:false}, "id47_header", $.String);

    $.Field({Static:false, Public:false}, "id195_extension", $.String);

    $.Field({Static:false, Public:false}, "id48_Soap12HeaderBinding", $.String);

    $.Field({Static:false, Public:false}, "id134_memberTypes", $.String);

    $.Field({Static:false, Public:false}, "id121_Item", $.String);

    $.Field({Static:false, Public:false}, "id146_minExclusive", $.String);

    $.Field({Static:false, Public:false}, "id84_PortType", $.String);

    $.Field({Static:false, Public:false}, "id42_mimeXml", $.String);

    $.Field({Static:false, Public:false}, "id138_minInclusive", $.String);

    $.Field({Static:false, Public:false}, "id118_source", $.String);

    $.Field({Static:false, Public:false}, "id73_Soap12OperationBinding", $.String);

    $.Field({Static:false, Public:false}, "id131_restriction", $.String);

    $.Field({Static:false, Public:false}, "id152_XmlSchemaMaxExclusiveFacet", $.String);

    $.Field({Static:false, Public:false}, "id135_XmlSchemaSimpleTypeRestriction", $.String);

    $.Field({Static:false, Public:false}, "id188_XmlSchemaAll", $.String);

    $.Field({Static:false, Public:false}, "id116_appinfo", $.String);

    $.Field({Static:false, Public:false}, "id86_parameterOrder", $.String);

    $.Field({Static:false, Public:false}, "id147_minLength", $.String);

    $.Field({Static:false, Public:false}, "id78_HttpOperationBinding", $.String);

    $.Field({Static:false, Public:false}, "id161_XmlSchemaSimpleTypeList", $.String);

    $.Field({Static:false, Public:false}, "id205_XmlSchemaRedefine", $.String);

    $.Field({Static:false, Public:false}, "id194_XmlSchemaSimpleContent", $.String);

    $.Field({Static:false, Public:false}, "id91_MessagePart", $.String);

    $.Field({Static:false, Public:false}, "id92_element", $.String);

    $.Field({Static:false, Public:false}, "id114_processContents", $.String);

    $.Field({Static:false, Public:false}, "id18_Item", $.String);

    $.Field({Static:false, Public:false}, "id50_headerfault", $.String);

    $.Field({Static:false, Public:false}, "id154_XmlSchemaEnumerationFacet", $.String);

    $.Field({Static:false, Public:false}, "id96_XmlSchema", $.String);

    $.Field({Static:false, Public:false}, "id127_form", $.String);

    $.Field({Static:false, Public:false}, "id176_field", $.String);

    $.Field({Static:false, Public:false}, "id49_part", $.String);

    $.Field({Static:false, Public:false}, "id5_Item", $.String);

    $.Field({Static:false, Public:false}, "id57_match", $.String);

    $.Field({Static:false, Public:false}, "id52_Soap12BodyBinding", $.String);

    $.Field({Static:false, Public:false}, "id104_redefine", $.String);

    $.Field({Static:false, Public:false}, "id20_Item", $.String);

    $.Field({Static:false, Public:false}, "id21_Soap12AddressBinding", $.String);

    $.Field({Static:false, Public:false}, "id142_enumeration", $.String);

    $.Field({Static:false, Public:false}, "id24_SoapAddressBinding", $.String);

    $.Field({Static:false, Public:false}, "id103_include", $.String);

    $.Field({Static:false, Public:false}, "id139_maxLength", $.String);

    $.Field({Static:false, Public:false}, "id165_maxOccurs", $.String);

    $.Field({Static:false, Public:false}, "id65_MimePart", $.String);

    $.Field({Static:false, Public:false}, "id102_id", $.String);

    $.Field({Static:false, Public:false}, "id196_Item", $.String);

    $.Field({Static:false, Public:false}, "id140_length", $.String);

    $.Field({Static:false, Public:false}, "id27_type", $.String);

    $.Field({Static:false, Public:false}, "id106_complexType", $.String);

    $.Field({Static:false, Public:false}, "id31_output", $.String);

    $.Field({Static:false, Public:false}, "id1_definitions", $.String);

    $.Field({Static:false, Public:false}, "id4_name", $.String);

    $.Field({Static:false, Public:false}, "id132_union", $.String);

    $.Field({Static:false, Public:false}, "id29_OperationBinding", $.String);

    $.Field({Static:false, Public:false}, "id170_key", $.String);

    $.Field({Static:false, Public:false}, "id45_Item", $.String);

    $.Field({Static:false, Public:false}, "id95_Item", $.String);

    $.Field({Static:false, Public:false}, "id169_substitutionGroup", $.String);

    $.Field({Static:false, Public:false}, "id178_xpath", $.String);

    $.Field({Static:false, Public:false}, "id9_types", $.String);

    $.Field({Static:false, Public:false}, "id97_attributeFormDefault", $.String);

    $.Field({Static:false, Public:false}, "id62_pattern", $.String);

    $.Field({Static:false, Public:false}, "id58_MimeTextMatch", $.String);

    $.Field({Static:false, Public:false}, "id180_XmlSchemaKey", $.String);

    $.Field({Static:false, Public:false}, "id10_message", $.String);

    $.Field({Static:false, Public:false}, "id8_import", $.String);

    $.Field({Static:false, Public:false}, "id148_XmlSchemaMinLengthFacet", $.String);

    $.Field({Static:false, Public:false}, "id105_simpleType", $.String);

    $.Field({Static:false, Public:false}, "id181_XmlSchemaComplexType", $.String);

    $.Field({Static:false, Public:false}, "id164_minOccurs", $.String);

    $.Field({Static:false, Public:false}, "id144_maxExclusive", $.String);

    $.Field({Static:false, Public:false}, "id160_XmlSchemaFractionDigitsFacet", $.String);

    $.Field({Static:false, Public:false}, "id124_XmlSchemaAttribute", $.String);

    $.Field({Static:false, Public:false}, "id209_Import", $.String);

    $.Field({Static:false, Public:false}, "id206_schemaLocation", $.String);

    $.Field({Static:false, Public:false}, "id179_XmlSchemaUnique", $.String);

    $.Field({Static:false, Public:false}, "id75_style", $.String);

    $.Field({Static:false, Public:false}, "id119_XmlSchemaDocumentation", $.String);

    $.Field({Static:false, Public:false}, "id136_base", $.String);

    $.Field({Static:false, Public:false}, "id66_MimeXmlBinding", $.String);

    $.Field({Static:false, Public:false}, "id30_input", $.String);

    $.Field({Static:false, Public:false}, "id40_content", $.String);

    $.Field({Static:false, Public:false}, "id93_Types", $.String);

    $.Field({Static:false, Public:false}, "id94_schema", $.String);

    $.Field({Static:false, Public:false}, "id200_Item", $.String);

    $.Field({Static:false, Public:false}, "id67_MimeContentBinding", $.String);

    $.Field({Static:false, Public:false}, "id59_group", $.String);

    $.Field({Static:false, Public:false}, "id32_fault", $.String);

    $.Field({Static:false, Public:false}, "id80_transport", $.String);

    $.Field({Static:false, Public:false}, "id98_blockDefault", $.String);

    $.Field({Static:false, Public:false}, "id13_service", $.String);

    $.Field({Static:false, Public:false}, "id54_SoapHeaderBinding", $.String);

    $.Field({Static:false, Public:false}, "id204_system", $.String);

    $.Field({Static:false, Public:false}, "id16_Port", $.String);

    $.Field({Static:false, Public:false}, "id108_notation", $.String);

    $.Field({Static:false, Public:false}, "id186_choice", $.String);

    $.Field({Static:false, Public:false}, "id110_attributeGroup", $.String);

    $.Field({Static:false, Public:false}, "id79_Soap12Binding", $.String);

    $.Field({Static:false, Public:false}, "id77_SoapOperationBinding", $.String);

    $.Field({Static:false, Public:false}, "id115_XmlSchemaAnnotation", $.String);

    $.Field({Static:false, Public:false}, "id83_verb", $.String);

    $.Field({Static:false, Public:false}, "id72_HttpUrlEncodedBinding", $.String);

    $.Field({Static:false, Public:false}, "id39_OutputBinding", $.String);

    $.Field({Static:false, Public:false}, "id183_complexContent", $.String);

    $.Field({Static:false, Public:false}, "id202_XmlSchemaNotation", $.String);

    $.Field({Static:false, Public:false}, "id81_SoapBinding", $.String);

    $.Field({Static:false, Public:false}, "id199_Item", $.String);

    $.Field({Static:false, Public:false}, "id28_operation", $.String);

    $.Field({Static:false, Public:false}, "id122_XmlSchemaAttributeGroupRef", $.String);

    $.Field({Static:false, Public:false}, "id155_XmlSchemaPatternFacet", $.String);

    $.Field({Static:false, Public:false}, "id76_soapActionRequired", $.String);

    $.Field({Static:false, Public:false}, "id90_Message", $.String);

    $.Field({Static:false, Public:false}, "id159_XmlSchemaMinInclusiveFacet", $.String);

    $.Field({Static:false, Public:false}, "id208_XmlSchemaInclude", $.String);

    $.Field({Static:false, Public:false}, "id85_Operation", $.String);

    $.Field({Static:false, Public:false}, "id130_list", $.String);

    $.Field({Static:false, Public:false}, "id14_Service", $.String);

    $.Field({Static:false, Public:false}, "id22_required", $.String);

    $.Field({Static:false, Public:false}, "id174_refer", $.String);

    $.Field({Static:false, Public:false}, "id71_HttpUrlReplacementBinding", $.String);

    $.Field({Static:false, Public:false}, "id56_MimeTextBinding", $.String);

    $.Field({Static:false, Public:false}, "id87_OperationFault", $.String);

    $.Field({Static:false, Public:false}, "id125_default", $.String);

    $.Field({Static:false, Public:false}, "id15_port", $.String);

    $.Field({Static:false, Public:false}, "id51_SoapHeaderFaultBinding", $.String);

    $.Field({Static:false, Public:false}, "id128_XmlSchemaSimpleType", $.String);

    $.Field({Static:false, Public:false}, "id36_namespace", $.String);

    $.Field({Static:false, Public:false}, "id175_selector", $.String);

    $.Field({Static:false, Public:false}, "id150_XmlSchemaMinExclusiveFacet", $.String);

    $.Field({Static:false, Public:false}, "id100_elementFormDefault", $.String);

    $.Field({Static:false, Public:false}, "id26_Binding", $.String);

    $.Field({Static:false, Public:false}, "id197_Item", $.String);

    $.Field({Static:false, Public:false}, "id126_fixed", $.String);

    $.Field({Static:false, Public:false}, "id107_annotation", $.String);

    $.Field({Static:false, Public:false}, "id99_finalDefault", $.String);

    $.Field({Static:false, Public:false}, "id137_fractionDigits", $.String);

    $.Field({Static:false, Public:false}, "id70_urlReplacement", $.String);

    $.Field({Static:false, Public:false}, "id189_XmlSchemaChoice", $.String);

    $.Field({Static:false, Public:false}, "id2_Item", $.String);

    $.Field({Static:false, Public:false}, "id112_anyAttribute", $.String);

    $.Field({Static:false, Public:false}, "id89_OperationInput", $.String);

    $.Field({Static:false, Public:false}, "id141_totalDigits", $.String);

    $.Field({Static:false, Public:false}, "id61_repeats", $.String);

    $.Field({Static:false, Public:false}, "id184_simpleContent", $.String);

    $.Field({Static:false, Public:false}, "id55_SoapBodyBinding", $.String);

    $.Field({Static:false, Public:false}, "id145_whiteSpace", $.String);

    $.Field({Static:false, Public:false}, "id167_block", $.String);

    $.Field({Static:false, Public:false}, "id151_XmlSchemaWhiteSpaceFacet", $.String);

    $.Field({Static:false, Public:false}, "id12_binding", $.String);

    $.Field({Static:false, Public:false}, "id109_attribute", $.String);

    $.Field({Static:false, Public:false}, "id171_unique", $.String);

    $.Field({Static:false, Public:false}, "id120_lang", $.String);

    $.Field({Static:false, Public:false}, "id173_XmlSchemaKeyref", $.String);

    $.Field({Static:false, Public:false}, "id177_XmlSchemaXPath", $.String);

    $.Field({Static:false, Public:false}, "id34_Soap12FaultBinding", $.String);

    $.Field({Static:false, Public:false}, "id41_Item", $.String);

    $.Field({Static:false, Public:false}, "id156_XmlSchemaTotalDigitsFacet", $.String);

    $.Field({Static:false, Public:false}, "id113_XmlSchemaAnyAttribute", $.String);

    $.Property({Static:false, Public:false}, "XmlSchemaDerivationMethodValues", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapBinding */ 

(function SoapBinding$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transport", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Style", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transport", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "style", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"));

    $.Field({Static:false, Public:false}, "transport", $.String);

    $.Field({Static:true , Public:false}, "schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/soap/");

    $.Constant({Static:true , Public:true }, "HttpTransport", $.String, "http://schemas.xmlsoap.org/soap/http");

    $.Property({Static:false, Public:true }, "Transport", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["transport"]; });

    $.Property({Static:false, Public:true }, "Style", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["style"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingStyle.Document]; });

    $.Property({Static:true , Public:true }, "Schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["binding", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.Binding.__Type__]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["soap", "http://schemas.xmlsoap.org/wsdl/soap/"]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["soapenc", "http://schemas.xmlsoap.org/soap/encoding/"]; });

})();

/* class System.Web.Services.Description.Soap12Binding */ 

(function Soap12Binding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapBinding"), 
      Name: "System.Web.Services.Description.Soap12Binding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/soap12/");

    $.Constant({Static:true , Public:true }, "HttpTransport", $.String, "http://schemas.xmlsoap.org/soap/http");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["binding", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.Binding.__Type__]; })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute"), function () { return ["soap12", "http://schemas.xmlsoap.org/wsdl/soap12/"]; });

})();

/* class System.Web.Services.Description.SoapOperationBinding */ 

(function SoapOperationBinding$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapOperationBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapAction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Style", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
    );

    $.Field({Static:false, Public:false}, "soapAction", $.String);

    $.Field({Static:false, Public:false}, "style", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"));

    $.Property({Static:false, Public:true }, "SoapAction", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["soapAction"]; });

    $.Property({Static:false, Public:true }, "Style", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["style"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingStyle.Default]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["operation", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.OperationBinding.__Type__]; });

})();

/* class System.Web.Services.Description.Soap12OperationBinding */ 

(function Soap12OperationBinding$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapOperationBinding"), 
      Name: "System.Web.Services.Description.Soap12OperationBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DuplicateByRequestElement", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DuplicateBySoapAction", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Method", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapActionRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DuplicateByRequestElement", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DuplicateBySoapAction", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Method", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapActionRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "soapActionRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "duplicateBySoapAction", $.Type);

    $.Field({Static:false, Public:false}, "duplicateByRequestElement", $.Type);

    $.Field({Static:false, Public:false}, "method", $asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"));

    $.Property({Static:false, Public:true }, "SoapActionRequired", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["soapActionRequired"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Method", $asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"));

    $.Property({Static:false, Public:false}, "DuplicateBySoapAction", $.Type);

    $.Property({Static:false, Public:false}, "DuplicateByRequestElement", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["operation", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.OperationBinding.__Type__]; });

})();

/* class System.Web.Services.Description.SoapBodyBinding */ 

(function SoapBodyBinding$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapBodyBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parts", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parts", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PartsString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "parts", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingUse.Default]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Encoding", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["encodingStyle"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "PartsString", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["parts"]; });

    $.Property({Static:false, Public:true }, "Parts", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["body", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__, $asm2B.System.Web.Services.Description.MimePart.__Type__]; });

})();

/* class System.Web.Services.Description.Soap12BodyBinding */ 

(function Soap12BodyBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), 
      Name: "System.Web.Services.Description.Soap12BodyBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["body", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__, $asm2B.System.Web.Services.Description.MimePart.__Type__]; });

})();

/* class System.Web.Services.Description.SoapFaultBinding */ 

(function SoapFaultBinding$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapFaultBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingUse.Default]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "Encoding", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["encodingStyle"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["fault", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.FaultBinding.__Type__]; });

})();

/* class System.Web.Services.Description.Soap12FaultBinding */ 

(function Soap12FaultBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapFaultBinding"), 
      Name: "System.Web.Services.Description.Soap12FaultBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["fault", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.FaultBinding.__Type__]; });

})();

/* class System.Web.Services.Description.SoapHeaderBinding */ 

(function SoapHeaderBinding$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapHeaderBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapToProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Part", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Fault", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MapToProperty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Message", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Part", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "part", $.String);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "mapToProperty", $.Boolean);

    $.Field({Static:false, Public:false}, "fault", $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"));

    $.Property({Static:false, Public:true }, "MapToProperty", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["message"]; });

    $.Property({Static:false, Public:true }, "Part", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["part"]; });

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingUse.Default]; });

    $.Property({Static:false, Public:true }, "Encoding", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["encodingStyle"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Fault", $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderFaultBinding"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["headerfault"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["header", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.Soap12HeaderBinding */ 

(function Soap12HeaderBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), 
      Name: "System.Web.Services.Description.Soap12HeaderBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["header", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.InputBinding.__Type__, $asm2B.System.Web.Services.Description.OutputBinding.__Type__]; });

})();

/* class System.Web.Services.Description.SoapAddressBinding */ 

(function SoapAddressBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapAddressBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Property({Static:false, Public:true }, "Location", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["location"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["address", "http://schemas.xmlsoap.org/wsdl/soap/", $asm2B.System.Web.Services.Description.Port.__Type__]; });

})();

/* class System.Web.Services.Description.Soap12AddressBinding */ 

(function Soap12AddressBinding$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"), 
      Name: "System.Web.Services.Description.Soap12AddressBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2B.TypeRef("System.Web.Services.Configuration.XmlFormatExtensionAttribute"), function () { return ["address", "http://schemas.xmlsoap.org/wsdl/soap12/", $asm2B.System.Web.Services.Description.Port.__Type__]; });

})();

/* class System.Web.Services.Description.SoapProtocolImporter */ 

(function SoapProtocolImporter$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ProtocolImporter"), 
      Name: "System.Web.Services.Description.SoapProtocolImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMetadataProperty", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMetadataProperty", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.CodeDom.CodeExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMetadata", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMessageStyles", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvokeParams", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")]), $.String, 
          $asm07.TypeRef("System.Collections.IList"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndMetadata", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndNamespace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateExtensionMetadata", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHeaders", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), 
          $.Boolean, $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
          $asm2B.TypeRef("System.Web.Services.Description.MessageBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MetadataPropertiesAdded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapBinding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBinding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapExporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.SoapCodeExporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapImporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.SoapSchemaImporter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypedDataSetSchemaImporterExtension", 
      JSIL.MethodSignature.Return($asm14.TypeRef("System.Data.Design.TypedDataSetSchemaImporterExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlExporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlImporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMessageParts", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), [$asm2B.TypeRef("System.Web.Services.Description.Message"), $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransport", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapTransportImporter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEncodedMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportLiteralMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.MessagePart")]), 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), $asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBindingSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsOperationFlowSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.OperationFlow")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSoapEncodingPresent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareHeaders", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.MessageBinding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReturnMappings", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), $asm0A.TypeRef("System.CodeDom.CodeExpression"), 
          $asm2B.TypeRef("System.Web.Services.Description.SoapParameters"), $.String
        ])
    );

    $.Field({Static:false, Public:false}, "xmlImporter", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"));

    $.Field({Static:false, Public:false}, "xmlExporter", $asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"));

    $.Field({Static:false, Public:false}, "soapImporter", $asm2F.TypeRef("System.Xml.Serialization.SoapSchemaImporter"));

    $.Field({Static:false, Public:false}, "soapExporter", $asm2F.TypeRef("System.Xml.Serialization.SoapCodeExporter"));

    $.Field({Static:false, Public:false}, "xmlMembers", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "soapMembers", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "headers", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "classHeaders", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "propertyNames", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "propertyValues", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "extensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.SoapExtensionImporter")]));

    $.Field({Static:false, Public:false}, "transport", $asm2B.TypeRef("System.Web.Services.Description.SoapTransportImporter"));

    $.Field({Static:false, Public:false}, "soapBinding", $asm2B.TypeRef("System.Web.Services.Description.SoapBinding"));

    $.Field({Static:false, Public:false}, "codeClasses", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "typedDataSetSchemaImporterExtension", $asm14.TypeRef("System.Data.Design.TypedDataSetSchemaImporterExtension"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);

    $.Property({Static:false, Public:true }, "SoapBinding", $asm2B.TypeRef("System.Web.Services.Description.SoapBinding"));

    $.Property({Static:false, Public:true }, "SoapImporter", $asm2F.TypeRef("System.Xml.Serialization.SoapSchemaImporter"));

    $.Property({Static:false, Public:true }, "XmlImporter", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemaImporter"));

    $.Property({Static:false, Public:true }, "XmlExporter", $asm2F.TypeRef("System.Xml.Serialization.XmlCodeExporter"));

    $.Property({Static:false, Public:true }, "SoapExporter", $asm2F.TypeRef("System.Xml.Serialization.SoapCodeExporter"));

    $.Property({Static:true , Public:false}, "TypedDataSetSchemaImporterExtension", $asm14.TypeRef("System.Data.Design.TypedDataSetSchemaImporterExtension"));

    $.Property({Static:false, Public:false}, "MetadataPropertiesAdded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.Soap12ProtocolImporter */ 

(function Soap12ProtocolImporter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"), 
      Name: "System.Web.Services.Description.Soap12ProtocolImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsBindingSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSoapEncodingPresent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapProtocolReflector */ 

(function SoapProtocolReflector$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"), 
      Name: "System.Web.Services.Description.SoapProtocolReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AllowExtensionsToReflectDescription", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AllowExtensionsToReflectMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateEncodedMessage", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Message"), $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateHeaderMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedHeader")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateLiteralMessage", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Message"), $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), 
          $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMessage", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"), $asm2B.TypeRef("System.Web.Services.Description.Message"), 
          $asm2B.TypeRef("System.Web.Services.Description.MessageBinding"), $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapAddressBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapBodyBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapHeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapHeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $.String, $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapOperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapOperationBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ConformsTo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapExporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.SoapSchemaExporter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapImporter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapMethod", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParameterOrder", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectDescription", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethodBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "mappings", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "extensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.SoapExtensionReflector")]));

    $.Field({Static:false, Public:false}, "soapMethod", $asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"));

    $.Property({Static:false, Public:false, Virtual:true }, "ConformsTo", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);

    $.Property({Static:false, Public:false}, "SoapMethod", $asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"));

    $.Property({Static:false, Public:false}, "SoapImporter", $asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter"));

    $.Property({Static:false, Public:false}, "SoapExporter", $asm2F.TypeRef("System.Xml.Serialization.SoapSchemaExporter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapProtocolReflector+<>c__DisplayClass25_0 */ 

(function $l$gc__DisplayClass25_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapProtocolReflector+<>c__DisplayClass25_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateSoapAddressBinding$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "soapAddress", $asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Description.Soap12ProtocolReflector */ 

(function Soap12ProtocolReflector$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolReflector"), 
      Name: "System.Web.Services.Description.Soap12ProtocolReflector", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOperationDuplicates", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.Soap12OperationBinding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapAddressBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapAddressBinding"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapBodyBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapHeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapHeaderBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapHeaderBinding"), [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $.String, $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSoapOperationBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapOperationBinding"), [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingStyle"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DealWithAmbiguity", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.Soap12OperationBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ConformsTo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "requestElements", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "actions", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "soap11PortType", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false, Virtual:true }, "ConformsTo", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.Soap12ProtocolReflector+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.Soap12ProtocolReflector+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateSoapAddressBinding$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "soapAddress", $asm2B.TypeRef("System.Web.Services.Description.Soap12AddressBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Description.SoapExtensionImporter */ 

(function SoapExtensionImporter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapExtensionImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImportContext", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportMethod", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ImportContext", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"))
    );

    $.Field({Static:false, Public:false}, "protocolImporter", $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"));

    $.Property({Static:false, Public:true }, "ImportContext", $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapExtensionReflector */ 

(function SoapExtensionReflector$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapExtensionReflector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReflectionContext", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReflectDescription", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReflectMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReflectionContext", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"))
    );

    $.Field({Static:false, Public:false}, "protocolReflector", $asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"));

    $.Property({Static:false, Public:true }, "ReflectionContext", $asm2B.TypeRef("System.Web.Services.Description.ProtocolReflector"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Web.Services.Description.SoapBindingStyle */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.SoapBindingStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Document: 1, 
    Rpc: 2, 
  }
);

/* enum System.Web.Services.Description.SoapBindingUse */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.SoapBindingUse", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Encoded: 1, 
    Literal: 2, 
  }
);

/* class System.Web.Services.Description.SoapHeaderFaultBinding */ 

(function SoapHeaderFaultBinding$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtension"), 
      Name: "System.Web.Services.Description.SoapHeaderFaultBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Part", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Message", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Part", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "part", $.String);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Property({Static:false, Public:true }, "Message", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["message"]; });

    $.Property({Static:false, Public:true }, "Part", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["part"]; });

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.SoapBindingUse.Default]; });

    $.Property({Static:false, Public:true }, "Encoding", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["encodingStyle"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapTransportImporter */ 

(function SoapTransportImporter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapTransportImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImportContext", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedTransport", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ImportContext", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"))
    );

    $.Field({Static:false, Public:false}, "protocolImporter", $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"));

    $.Property({Static:false, Public:true }, "ImportContext", $asm2B.TypeRef("System.Web.Services.Description.SoapProtocolImporter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapHttpTransportImporter */ 

(function SoapHttpTransportImporter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Description.SoapTransportImporter"), 
      Name: "System.Web.Services.Description.SoapHttpTransportImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedTransport", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapParameters */ 

(function SoapParameters$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm2F.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMappings", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParameter", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapParameter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMapping", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"), [$asm07.TypeRef("System.Collections.ArrayList"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecifiedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InCheckSpecifiedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InParameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutCheckSpecifiedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutParameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Return", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveByRefMapping", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.ArrayList"), $asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping")])
    );

    $.Field({Static:false, Public:false}, "ret", $asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

    $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "inParameters", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "outParameters", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "checkSpecifiedCount", $.Int32);

    $.Field({Static:false, Public:false}, "inCheckSpecifiedCount", $.Int32);

    $.Field({Static:false, Public:false}, "outCheckSpecifiedCount", $.Int32);

    $.Property({Static:false, Public:false}, "Return", $asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

    $.Property({Static:false, Public:false}, "Parameters", $asm07.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:false}, "InParameters", $asm07.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:false}, "OutParameters", $asm07.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:false}, "CheckSpecifiedCount", $.Int32);

    $.Property({Static:false, Public:false}, "InCheckSpecifiedCount", $.Int32);

    $.Property({Static:false, Public:false}, "OutCheckSpecifiedCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.SoapParameter */ 

(function SoapParameter$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.SoapParameter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsByRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCodeFlags", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.CodeFlags")]), [$asm07.TypeRef("System.Collections.IList"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCodeFlags", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.IList"), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.CodeFlags")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm07.TypeRef("System.Collections.IList"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNames", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.IList"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFullNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $asm07.TypeRef("System.Collections.IList"), $.Int32, 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFullNames", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.IList"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.Field({Static:false, Public:false}, "codeFlags", $asm2B.TypeRef("System.Web.Services.Description.CodeFlags"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "mapping", $asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

    $.Field({Static:false, Public:false}, "specifiedName", $.String);

    $.Property({Static:false, Public:false}, "IsOut", $.Boolean);

    $.Property({Static:false, Public:false}, "IsByRef", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.GlobalSoapHeader */ 

(function GlobalSoapHeader$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.GlobalSoapHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "fieldName", $.String);

    $.Field({Static:false, Public:false}, "mapping", $asm2F.TypeRef("System.Xml.Serialization.XmlTypeMapping"));

    $.Field({Static:false, Public:false}, "isEncoded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.LocalSoapHeader */ 

(function LocalSoapHeader$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.LocalSoapHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Field({Static:false, Public:false}, "fieldName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Web.Services.Description.CodeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Description.CodeFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    IsPublic: 1, 
    IsAbstract: 2, 
    IsStruct: 4, 
    IsNew: 8, 
    IsByRef: 16, 
    IsOut: 32, 
    IsInterface: 64, 
  }
);

/* class System.Web.Services.Description.WebCodeGenerator */ 

(function WebCodeGenerator$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.WebCodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddAsyncMethod", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCallbackDeclaration", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeTypeMemberCollection"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCallbackImplementation", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddClass", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $asm0A.TypeRef("System.CodeDom.CodeNamespace"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm2B.TypeRef("System.Web.Services.Description.CodeFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddConstructor", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeConstructor"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $asm2B.TypeRef("System.Web.Services.Description.CodeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCustomAttribute", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), [
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeAttributeArgument")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCustomAttribute", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), [
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCustomAttribute", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), [
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDelegate", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclarationCollection"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeMemberCollection"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddImports", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeNamespace"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMember", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeMember"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $.String, $asm0A.TypeRef("System.CodeDom.CodeExpression"), 
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm2B.TypeRef("System.Web.Services.Description.CodeFlags"), 
          $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMethod", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.CodeFlags")]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm2B.TypeRef("System.Web.Services.Description.CodeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMethod", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberMethod"), [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.CodeFlags")]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")]), 
          $.String, $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $asm2B.TypeRef("System.Web.Services.Description.CodeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArgsClass", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateClass", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $asm2B.TypeRef("System.Web.Services.Description.CodeFlags"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePropertyDeclaration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm0A.TypeRef("System.CodeDom.CodeMemberField"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePropertyDeclaration", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm0A.TypeRef("System.CodeDom.CodeMemberField"), $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FullTypeName", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Serialization.XmlMemberMapping"), $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GeneratedCodeAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeAttributeDeclaration"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespacesForTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProductVersion", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeFieldName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "generatedCodeAttribute", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:true , Public:false}, "GeneratedCodeAttribute", $asm0A.TypeRef("System.CodeDom.CodeAttributeDeclaration"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.WebReference */ 

(function WebReference$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.WebReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"), $asm0A.TypeRef("System.CodeDom.CodeNamespace")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"), $asm0A.TypeRef("System.CodeDom.CodeNamespace"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppSettingBaseUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppSettingUrlKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Documents", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyCode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationWarnings", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProtocolName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Warnings", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"))
    );

    $.Field({Static:false, Public:false}, "proxyCode", $asm0A.TypeRef("System.CodeDom.CodeNamespace"));

    $.Field({Static:false, Public:false}, "documents", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"));

    $.Field({Static:false, Public:false}, "appSettingUrlKey", $.String);

    $.Field({Static:false, Public:false}, "appSettingBaseUrl", $.String);

    $.Field({Static:false, Public:false}, "protocolName", $.String);

    $.Field({Static:false, Public:false}, "warnings", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"));

    $.Field({Static:false, Public:false}, "validationWarnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "AppSettingBaseUrl", $.String);

    $.Property({Static:false, Public:true }, "AppSettingUrlKey", $.String);

    $.Property({Static:false, Public:true }, "Documents", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"));

    $.Property({Static:false, Public:true }, "ProxyCode", $asm0A.TypeRef("System.CodeDom.CodeNamespace"));

    $.Property({Static:false, Public:true }, "ValidationWarnings", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "Warnings", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportWarnings"));

    $.Property({Static:false, Public:true }, "ProtocolName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.WebReferenceCollection */ 

(function WebReferenceCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.WebReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.WebReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.WebReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.WebReference")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.WebReference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.WebReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.WebReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.WebReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.WebReference")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.WebReference"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.WebReferenceOptions */ 

(function WebReferenceOptions$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.WebReferenceOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeGenerationOptions", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Style", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.TextReader"), $asm2F.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream"), $asm2F.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SchemaValidationHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeGenerationOptions", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Style", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Verbose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Constant({Static:true , Public:true }, "TargetNamespace", $.String, "http://microsoft.com/webReference/");

    $.Field({Static:true , Public:false}, "schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "codeGenerationOptions", $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

    $.Field({Static:false, Public:false}, "style", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"));

    $.Field({Static:false, Public:false}, "schemaImporterExtensions", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "verbose", $.Boolean);

    $.Property({Static:false, Public:true }, "CodeGenerationOptions", $asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["codeGenerationOptions"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2F.System.Xml.Serialization.CodeGenerationOptions.GenerateOldAsync]; });

    $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["schemaImporterExtensions"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "Style", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Description.ServiceDescriptionImportStyle.Client]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["style"]; });

    $.Property({Static:false, Public:true }, "Verbose", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["verbose"]; });

    $.Property({Static:true , Public:true }, "Schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlTypeAttribute"), function () { return ["webReferenceOptions"]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["webReferenceOptions"]; });

})();

/* class System.Web.Services.Description.WebReferenceOptionsSerializationWriter */ 

(function WebReferenceOptionsSerializationWriter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), 
      Name: "System.Web.Services.Description.WebReferenceOptionsSerializationWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Write1_CodeGenerationOptions", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write2_ServiceDescriptionImportStyle", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write4_WebReferenceOptions", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.WebReferenceOptions"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write5_webReferenceOptions", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.WebReferenceOptionsSerializationReader */ 

(function WebReferenceOptionsSerializationReader$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"), 
      Name: "System.Web.Services.Description.WebReferenceOptionsSerializationReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeGenerationOptionsValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Read1_CodeGenerationOptions", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read2_ServiceDescriptionImportStyle", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionImportStyle"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read4_WebReferenceOptions", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.WebReferenceOptions"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read5_webReferenceOptions", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "_CodeGenerationOptionsValues", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "id2_Item", $.String);

    $.Field({Static:false, Public:false}, "id5_type", $.String);

    $.Field({Static:false, Public:false}, "id4_schemaImporterExtensions", $.String);

    $.Field({Static:false, Public:false}, "id3_codeGenerationOptions", $.String);

    $.Field({Static:false, Public:false}, "id6_style", $.String);

    $.Field({Static:false, Public:false}, "id7_verbose", $.String);

    $.Field({Static:false, Public:false}, "id1_webReferenceOptions", $.String);

    $.Property({Static:false, Public:false}, "CodeGenerationOptionsValues", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.webReferenceOptionsSerializer */ 

(function webReferenceOptionsSerializer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), 
      Name: "System.Web.Services.Description.webReferenceOptionsSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWriter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.WebServicesInteroperability */ 

(function WebServicesInteroperability$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.WebServicesInteroperability", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSignature", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Hashtable"), $.String, 
          $.String, $.String, 
          $.String, $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeBinding", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2B.TypeRef("System.Web.Services.Description.Binding"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), 
          $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeDescription", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckConformance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2B.TypeRef("System.Web.Services.WsiProfiles"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), 
          $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckConformance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2B.TypeRef("System.Web.Services.WsiProfiles"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"), 
          $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckConformance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2B.TypeRef("System.Web.Services.WsiProfiles"), $asm2B.TypeRef("System.Web.Services.Description.WebReference"), 
          $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckExtensions", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckExtensions", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Binding"), $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), 
          $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckExtensions", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckMessagePart", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.MessagePart"), $.Boolean, 
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckMessageParts", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Description.Message"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckTypes", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckWsdlImports", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOperation", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.Operation"), [$asm2B.TypeRef("System.Web.Services.Description.OperationCollection"), $asm2B.TypeRef("System.Web.Services.Description.OperationBinding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSoapBodyBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.SoapBodyBinding"), [
          $.Boolean, $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection"), 
          $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection"), $.Boolean, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MessageString", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.String, 
          $.String, $.String, 
          $.Boolean, $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.BasicProfileViolation */ 

(function BasicProfileViolation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.BasicProfileViolation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Claims", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Details", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NormativeStatement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Recommendation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "claims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Field({Static:false, Public:false}, "normativeStatement", $.String);

    $.Field({Static:false, Public:false}, "details", $.String);

    $.Field({Static:false, Public:false}, "recommendation", $.String);

    $.Field({Static:false, Public:false}, "elements", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "Claims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true }, "Details", $.String);

    $.Property({Static:false, Public:true }, "Elements", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "NormativeStatement", $.String);

    $.Property({Static:false, Public:true }, "Recommendation", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Description.BasicProfileViolationCollection */ 

(function BasicProfileViolationCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Description.BasicProfileViolationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Web.Services.Description.BasicProfileViolation$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "violations", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation"));

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Description.BasicProfileViolationEnumerator */ 

(function BasicProfileViolationEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Description.BasicProfileViolationEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "list", $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolationCollection"));

    $.Field({Static:false, Public:false}, "idx", $.Int32);

    $.Field({Static:false, Public:false}, "end", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm2B.TypeRef("System.Web.Services.Description.BasicProfileViolation")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Web.Services.Discovery");
/* class System.Web.Services.Discovery.DiscoveryReference */ 

(function DiscoveryReference$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoveryReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AttemptResolve", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilenameFromUrl", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientProtocol", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadExternals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeValidFilename", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDocument", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Resolve", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Resolve", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClientProtocol", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "UriToString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocument", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "clientProtocol", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol"));

    $.Property({Static:false, Public:true }, "ClientProtocol", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultFilename", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.ContractReference */ 

(function ContractReference$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), 
      Name: "System.Web.Services.Discovery.ContractReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Contract", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocRef", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ref", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadExternals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDocument", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Resolve", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Ref", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocument", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IO.Stream")])
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/disco/scl/");

    $.Field({Static:false, Public:false}, "docRef", $.String);

    $.Field({Static:false, Public:false}, "reference", $.String);

    $.Property({Static:false, Public:true }, "Ref", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "DocRef", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["docRef"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Contract", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultFilename", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["contractRef"]; });

})();

/* class System.Web.Services.Discovery.DiscoverySearchPattern */ 

(function DiscoverySearchPattern$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoverySearchPattern", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDiscoveryReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.ContractSearchPattern */ 

(function ContractSearchPattern$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern"), 
      Name: "System.Web.Services.Discovery.ContractSearchPattern", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDiscoveryReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryClientDocumentCollection */ 

(function DiscoveryClientDocumentCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientDocumentCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.DeclareNamespace("System.Web.Services.Protocols");
/* class System.Web.Services.Protocols.WebClientProtocol */ 

(function WebClientProtocol$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Web.Services.Protocols.WebClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToCache", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsyncBufferedSerialize", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.IO.Stream"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginSend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm0A.TypeRef("System.Uri"), $asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSend", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebResponse"), [
          $asm07.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IO.Stream")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncInvokes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BypassCache", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.Cache.RequestCachePolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NullToken", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PendingSyncRequest", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Uri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseDefaultCredentials", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFromCache", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRequestStreamAsyncCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResponseAsyncCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebResponse", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebResponse"), [$asm0A.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebResponse", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebResponse"), [$asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeAsyncRequest", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebRequest"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyClientCallOut", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessAsyncException", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"), $asm07.TypeRef("System.Exception"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessAsyncResponseStreamResult", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"), $asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAsyncResponse", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAsyncResponseStream", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadResponseAsyncCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionGroupName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.ICredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PendingSyncRequest", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebRequest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestEncoding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Uri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseDefaultCredentials", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:true , Public:false}, "getRequestStreamAsyncCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "getResponseAsyncCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "readResponseAsyncCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "cache", $asm2B.TypeRef("System.Web.Services.Protocols.ClientTypeCache"));

    $.Field({Static:true , Public:false}, "bypassCache", $asm0A.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Field({Static:false, Public:false}, "credentials", $asm0A.TypeRef("System.Net.ICredentials"));

    $.Field({Static:false, Public:false}, "preAuthenticate", $.Boolean);

    $.Field({Static:false, Public:false}, "uri", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "timeout", $.Int32);

    $.Field({Static:false, Public:false}, "connectionGroupName", $.String);

    $.Field({Static:false, Public:false}, "requestEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "$debugger", $asm2B.TypeRef("System.Web.Services.Protocols.RemoteDebugger"));

    $.Field({Static:false, Public:false}, "pendingSyncRequest", $asm0A.TypeRef("System.Net.WebRequest"));

    $.Field({Static:false, Public:false}, "nullToken", $.Object);

    $.Field({Static:false, Public:false}, "asyncInvokes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "BypassCache", $asm0A.TypeRef("System.Net.Cache.RequestCachePolicy"));

    $.Property({Static:false, Public:true }, "Credentials", $asm0A.TypeRef("System.Net.ICredentials"));

    $.Property({Static:false, Public:true }, "UseDefaultCredentials", $.Boolean);

    $.Property({Static:false, Public:true }, "ConnectionGroupName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "PendingSyncRequest", $asm0A.TypeRef("System.Net.WebRequest"));

    $.Property({Static:false, Public:true }, "PreAuthenticate", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolPreAuthenticate"]; });

    $.Property({Static:false, Public:true }, "Url", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolUrl"]; });

    $.Property({Static:false, Public:false}, "AsyncInvokes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "NullToken", $.Object);

    $.Property({Static:false, Public:false}, "Uri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "RequestEncoding", $asm07.TypeRef("System.Text.Encoding"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolEncoding"]; });

    $.Property({Static:false, Public:true }, "Timeout", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [100000]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolTimeout"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Web.Services.Protocols.HttpWebClientProtocol */ 

(function HttpWebClientProtocol$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.WebClientProtocol"), 
      Name: "System.Web.Services.Protocols.HttpWebClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CancelAsync", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateXmlMappings", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateXmlMappings", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowAutoRedirect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificates", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CookieContainer", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.CookieContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDecompression", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Proxy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnsafeAuthenticatedConnectionSharing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserAgent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebResponse", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebResponse"), [$asm0A.TypeRef("System.Net.WebRequest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebResponse", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebResponse"), [$asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OperationCompleted", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.WebClientAsyncResult"), [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Exception"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowAutoRedirect", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CookieContainer", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.CookieContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableDecompression", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.IWebProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnsafeAuthenticatedConnectionSharing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UserAgent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "allowAutoRedirect", $.Boolean);

    $.Field({Static:false, Public:false}, "enableDecompression", $.Boolean);

    $.Field({Static:false, Public:false}, "cookieJar", $asm0A.TypeRef("System.Net.CookieContainer"));

    $.Field({Static:false, Public:false}, "clientCertificates", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Field({Static:false, Public:false}, "proxy", $asm0A.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:true , Public:false}, "UserAgentDefault", $.String);

    $.Field({Static:false, Public:false}, "userAgent", $.String);

    $.Field({Static:false, Public:false}, "unsafeAuthenticatedConnectionSharing", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowAutoRedirect", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolAllowAutoRedirect"]; });

    $.Property({Static:false, Public:true }, "CookieContainer", $asm0A.TypeRef("System.Net.CookieContainer"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolCookieContainer"]; });

    $.Property({Static:false, Public:true }, "ClientCertificates", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolClientCertificates"]; });

    $.Property({Static:false, Public:true }, "EnableDecompression", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolEnableDecompression"]; });

    $.Property({Static:false, Public:true }, "UserAgent", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolUserAgent"]; });

    $.Property({Static:false, Public:true }, "Proxy", $asm0A.TypeRef("System.Net.IWebProxy"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true }, "UnsafeAuthenticatedConnectionSharing", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Web.Services.Discovery.DiscoveryClientProtocol */ 

(function DiscoveryClientProtocol$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpWebClientProtocol"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.HttpWebClientProtocol"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddFilename", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Hashtable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Discover", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DiscoverAny", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Download", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Download", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalInformation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Documents", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryExceptionDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InlinedSchemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientReferenceCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRelativePath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUniqueFilename", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Hashtable"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFilenameInUse", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Hashtable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadExternals", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["This method will be removed from a future version. The method call is no longer required for resource discovery", false]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadAll", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResultCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveOneLevel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAll", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResultCollection"), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "references", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientReferenceCollection"));

    $.Field({Static:false, Public:false}, "documents", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"));

    $.Field({Static:false, Public:false}, "inlinedSchemas", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "additionalInformation", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "errors", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryExceptionDictionary"));

    $.Property({Static:false, Public:true }, "AdditionalInformation", $asm07.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:true }, "Documents", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientDocumentCollection"));

    $.Property({Static:false, Public:true }, "Errors", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryExceptionDictionary"));

    $.Property({Static:false, Public:true }, "References", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientReferenceCollection"));

    $.Property({Static:false, Public:false}, "InlinedSchemas", $asm07.TypeRef("System.Collections.Hashtable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile */ 

(function DiscoveryClientResultsFile$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Results", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResultCollection"))
    );

    $.Field({Static:false, Public:false}, "results", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResultCollection"));

    $.Property({Static:false, Public:true }, "Results", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResultCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryClientResultCollection */ 

(function DiscoveryClientResultCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientResultCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientResult"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryClientResult */ 

(function DiscoveryClientResult$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientResult", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "referenceTypeName", $.String);

    $.Field({Static:false, Public:false}, "url", $.String);

    $.Field({Static:false, Public:false}, "filename", $.String);

    $.Property({Static:false, Public:true }, "ReferenceTypeName", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["referenceType"]; });

    $.Property({Static:false, Public:true }, "Url", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["url"]; });

    $.Property({Static:false, Public:true }, "Filename", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["filename"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryClientReferenceCollection */ 

(function DiscoveryClientReferenceCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.Web.Services.Discovery.DiscoveryClientReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"));

    $.Property({Static:false, Public:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryDocument */ 

(function DiscoveryDocument$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/disco/");

    $.Field({Static:false, Public:false}, "references", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "References", $asm07.TypeRef("System.Collections.IList"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["discovery"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentSerializer */ 

(function DiscoveryDocumentSerializer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWriter", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentLinksPattern */ 

(function DiscoveryDocumentLinksPattern$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentLinksPattern", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDiscoveryReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentReference */ 

(function DiscoveryDocumentReference$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ref", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDocumentNoParse", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDocument", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Resolve", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAll", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Ref", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocument", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "reference", $.String);

    $.Property({Static:false, Public:true }, "Ref", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultFilename", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Document", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["discoveryRef"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentSearchPattern */ 

(function DiscoveryDocumentSearchPattern$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentSearchPattern", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDiscoveryReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentSerializationWriter */ 

(function DiscoveryDocumentSerializationWriter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentSerializationWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Write10_discovery", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write3_DiscoveryDocumentReference", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocumentReference"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write5_ContractReference", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.ContractReference"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write7_SchemaReference", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.SchemaReference"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write8_SoapBinding", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.SoapBinding"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write9_DiscoveryDocument", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"), $.Boolean, 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryDocumentSerializationReader */ 

(function DiscoveryDocumentSerializationReader$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.Serialization.XmlSerializationReader"), 
      Name: "System.Web.Services.Discovery.DiscoveryDocumentSerializationReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Read10_discovery", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read3_DiscoveryDocumentReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocumentReference"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read5_ContractReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.ContractReference"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read7_SchemaReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.SchemaReference"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read8_SoapBinding", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.SoapBinding"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read9_DiscoveryDocument", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"), [$.Boolean, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "id1_discovery", $.String);

    $.Field({Static:false, Public:false}, "id4_discoveryRef", $.String);

    $.Field({Static:false, Public:false}, "id19_docRef", $.String);

    $.Field({Static:false, Public:false}, "id8_Item", $.String);

    $.Field({Static:false, Public:false}, "id14_binding", $.String);

    $.Field({Static:false, Public:false}, "id20_DiscoveryDocumentReference", $.String);

    $.Field({Static:false, Public:false}, "id17_targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "id5_contractRef", $.String);

    $.Field({Static:false, Public:false}, "id10_Item", $.String);

    $.Field({Static:false, Public:false}, "id13_Item", $.String);

    $.Field({Static:false, Public:false}, "id7_schemaRef", $.String);

    $.Field({Static:false, Public:false}, "id3_DiscoveryDocument", $.String);

    $.Field({Static:false, Public:false}, "id9_soap", $.String);

    $.Field({Static:false, Public:false}, "id12_address", $.String);

    $.Field({Static:false, Public:false}, "id16_ref", $.String);

    $.Field({Static:false, Public:false}, "id11_SoapBinding", $.String);

    $.Field({Static:false, Public:false}, "id18_ContractReference", $.String);

    $.Field({Static:false, Public:false}, "id2_Item", $.String);

    $.Field({Static:false, Public:false}, "id15_SchemaReference", $.String);

    $.Field({Static:false, Public:false}, "id6_Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DiscoveryExceptionDictionary */ 

(function DiscoveryExceptionDictionary$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.Web.Services.Discovery.DiscoveryExceptionDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryReferenceCollection */ 

(function DiscoveryReferenceCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Discovery.DiscoveryReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Discovery.DiscoveryRequestHandler */ 

(function DiscoveryRequestHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DiscoveryRequestHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirPartOfPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFilePartOfPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DynamicDiscoSearcher */ 

(function DynamicDiscoSearcher$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DynamicDiscoSearcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DiscoveryDocument", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsVirtualSearch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrimarySearchPattern", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecondarySearchPattern", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPhysicalDir", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsExcluded", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeAbsExcludedPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeResultPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDirByPattern", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Search", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SearchInit", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SearchSubDirectories", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "origUrl", $.String);

    $.Field({Static:false, Public:false}, "excludedUrls", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "fileToSkipFirst", $.String);

    $.Field({Static:false, Public:false}, "filesFound", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "primarySearchPatterns", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]));

    $.Field({Static:false, Public:false}, "secondarySearchPatterns", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]));

    $.Field({Static:false, Public:false}, "discoDoc", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"));

    $.Field({Static:false, Public:false}, "excludedUrlsTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "subDirLevel", $.Int32);

    $.Property({Static:false, Public:false}, "DiscoveryDocument", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"));

    $.Property({Static:false, Public:false}, "PrimarySearchPattern", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]));

    $.Property({Static:false, Public:false}, "SecondarySearchPattern", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsVirtualSearch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DynamicDiscoveryDocument */ 

(function DynamicDiscoveryDocument$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DynamicDiscoveryDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludePaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.ExcludePathInfo")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Load", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludePaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.ExcludePathInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "excludePaths", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.ExcludePathInfo")]));

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "urn:schemas-dynamicdiscovery:disco.2000-03-17");

    $.Property({Static:false, Public:true }, "ExcludePaths", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Discovery.ExcludePathInfo")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["exclude", $asm2B.System.Web.Services.Discovery.ExcludePathInfo.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["dynamicDiscovery"]; });

})();

/* class System.Web.Services.Discovery.DynamicPhysicalDiscoSearcher */ 

(function DynamicPhysicalDiscoSearcher$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DynamicDiscoSearcher"), 
      Name: "System.Web.Services.Discovery.DynamicPhysicalDiscoSearcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsVirtualSearch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPhysicalDir", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeAbsExcludedPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeResultPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Search", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SearchSubDirectories", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "startDir", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsVirtualSearch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DynamicVirtualDiscoSearcher */ 

(function DynamicVirtualDiscoSearcher$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DynamicDiscoSearcher"), 
      Name: "System.Web.Services.Discovery.DynamicVirtualDiscoSearcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsVirtualSearch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAppSettings", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DynamicVirtualDiscoSearcher+AppSettings"), [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPhysicalDir", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWebServerForUrl", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeAbsExcludedPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MakeResultPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Search", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SearchSubDirectories", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "rootPathAsdi", $.String);

    $.Field({Static:false, Public:false}, "entryPathPrefix", $.String);

    $.Field({Static:false, Public:false}, "startDir", $.String);

    $.Field({Static:false, Public:false}, "webApps", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "Adsi", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsVirtualSearch", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.DynamicVirtualDiscoSearcher+AppSettings */ 

(function AppSettings$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.DynamicVirtualDiscoSearcher+AppSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "AccessRead", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "Bindings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "VPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.ExcludePathInfo */ 

(function ExcludePathInfo$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.ExcludePathInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["path"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.InvalidContentTypeException */ 

(function InvalidContentTypeException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.Web.Services.Discovery.InvalidContentTypeException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Property({Static:false, Public:false}, "ContentType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.InvalidDocumentContentsException */ 

(function InvalidDocumentContentsException$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.Web.Services.Discovery.InvalidDocumentContentsException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.LinkGrep */ 

(function LinkGrep$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.LinkGrep", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEntireStream", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SearchForLink", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "tagRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "doctypeDirectiveRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "endtagRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "commentRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "whitespaceRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "textRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Discovery.SchemaReference */ 

(function SchemaReference$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), 
      Name: "System.Web.Services.Discovery.SchemaReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ref", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LoadExternals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadExternals", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryClientProtocol"), $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDocument", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Resolve", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Ref", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocument", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.IO.Stream")])
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/disco/schema/");

    $.Field({Static:false, Public:false}, "reference", $.String);

    $.Field({Static:false, Public:false}, "targetNamespace", $.String);

    $.Property({Static:false, Public:true }, "Ref", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "TargetNamespace", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["targetNamespace"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultFilename", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Schema", $asm2F.TypeRef("System.Xml.Schema.XmlSchema"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["schemaRef"]; });

})();

/* class System.Web.Services.Discovery.SoapBinding */ 

(function SoapBinding$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Discovery.SoapBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Address", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/disco/soap/");

    $.Field({Static:false, Public:false}, "binding", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "address", $.String);

    $.Property({Static:false, Public:true }, "Address", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["address"]; });

    $.Property({Static:false, Public:true }, "Binding", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["binding"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["soap"]; });

})();

/* class System.Web.Services.Discovery.XmlSchemaSearchPattern */ 

(function XmlSchemaSearchPattern$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Discovery.DiscoverySearchPattern"), 
      Name: "System.Web.Services.Discovery.XmlSchemaSearchPattern", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDiscoveryReference", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryReference"), [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Pattern", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MimeFormatter */ 

(function MimeFormatter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.MimeFormatter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MimeReturnReader */ 

(function MimeReturnReader$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeFormatter"), 
      Name: "System.Web.Services.Protocols.MimeReturnReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.AnyReturnReader */ 

(function AnyReturnReader$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeReturnReader"), 
      Name: "System.Web.Services.Protocols.AnyReturnReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.BufferedResponseStream */ 

(function BufferedResponseStream$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Web.Services.Protocols.BufferedResponseStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FlushEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "outputStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "flushEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "FlushEnabled", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ClientTypeCache */ 

(function ClientTypeCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ClientTypeCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "cache", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Item", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Web.Services.Protocols.WebClientAsyncResult */ 

(function WebClientAsyncResult$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.WebClientAsyncResult", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.WebClientProtocol"), $.Object, 
          $asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineCompletedSynchronously", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForResponse", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.WebResponse"))
    );

    $.Field({Static:false, Public:false}, "userAsyncState", $.Object);

    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean);

    $.Field({Static:false, Public:false}, "isCompleted", $.Boolean);

    $.Field({Static:false, Public:false}, "manualResetEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "userCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "ClientProtocol", $asm2B.TypeRef("System.Web.Services.Protocols.WebClientProtocol"));

    $.Field({Static:false, Public:false}, "InternalAsyncState", $.Object);

    $.Field({Static:false, Public:false}, "Exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "Response", $asm0A.TypeRef("System.Net.WebResponse"));

    $.Field({Static:false, Public:false}, "Request", $asm0A.TypeRef("System.Net.WebRequest"));

    $.Field({Static:false, Public:false}, "ResponseStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "ResponseBufferedStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "EndSendCalled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Web.Services.Protocols.InvokeCompletedEventHandler */ 

JSIL.MakeDelegate("System.Web.Services.Protocols.InvokeCompletedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm2B.TypeRef("System.Web.Services.Protocols.InvokeCompletedEventArgs")]));

/* class System.Web.Services.Protocols.InvokeCompletedEventArgs */ 

(function InvokeCompletedEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.AsyncCompletedEventArgs"), 
      Name: "System.Web.Services.Protocols.InvokeCompletedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Exception"), 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Results", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "results", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "Results", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UserToken */ 

(function UserToken$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.UserToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.SendOrPostCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Callback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.SendOrPostCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Field({Static:false, Public:false}, "userState", $.Object);

    $.Property({Static:false, Public:false}, "Callback", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Property({Static:false, Public:false}, "UserState", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ServerType */ 

(function ServerType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ServerType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Evidence", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Policy.Evidence"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Evidence", $asm07.TypeRef("System.Security.Policy.Evidence"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DiscoveryServerType */ 

(function DiscoveryServerType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Action$b1.Of($asm0A.System.Uri)))) ();
  };










  function DiscoveryServerType_get_UriFixups () {
    return this.DiscoveryServerType$UriFixups$value;
  }; 



  function DiscoveryServerType_set_UriFixups (value) {
    this.DiscoveryServerType$UriFixups$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddExternal", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaImports", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"), $.String, 
          $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUriFixup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineUris", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Description", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Disco", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.Method({Static:false, Public:true }, "get_UriFixups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])])), 
      DiscoveryServerType_get_UriFixups
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServiceDescription", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"), [$.String])
    );

    $.Method({Static:false, Public:false}, "set_UriFixups", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])])), 
      DiscoveryServerType_set_UriFixups
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "description", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "schemaTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "wsdlTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "discoDoc", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"));

    $.Field({Static:false, Public:false}, "DiscoveryServerType$UriFixups$value", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "UriFixups", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]));

    $.Property({Static:false, Public:false}, "Description", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescription"));

    $.Property({Static:false, Public:false}, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false}, "Disco", $asm2B.TypeRef("System.Web.Services.Discovery.DiscoveryDocument"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "$import", $asm2B.TypeRef("System.Web.Services.Description.Import"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_1 */ 

(function $l$gc__DisplayClass10_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__1", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "contractReference", $asm2B.TypeRef("System.Web.Services.Discovery.ContractReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_2 */ 

(function $l$gc__DisplayClass10_2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass10_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__2", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "binding", $asm2B.TypeRef("System.Web.Services.Discovery.SoapBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass11_0 */ 

(function $l$gc__DisplayClass11_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass11_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddExternal$gb__0", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "include", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaInclude"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass11_1 */ 

(function $l$gc__DisplayClass11_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerType+<>c__DisplayClass11_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lAddExternal$gb__1", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:true }, "$import", $asm2F.TypeRef("System.Xml.Schema.XmlSchemaImport"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.ServerProtocolFactory */ 

(function ServerProtocolFactory$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ServerProtocolFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [
          $asm07.TypeRef("System.Type"), $asm28.TypeRef("System.Web.HttpContext"), 
          $asm28.TypeRef("System.Web.HttpRequest"), $asm28.TypeRef("System.Web.HttpResponse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DiscoveryServerProtocolFactory */ 

(function DiscoveryServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerProtocolFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ServerProtocol */ 

(function ServerProtocol$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ServerProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToCache", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToCache", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateKey", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateServerInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DefaultCreateCustomKeyForAspNetWebServiceMetadataCache", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeServerInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFaultString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFaultString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Exception"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateFaultString", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodAttribute", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebMethodAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OnewayInitException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Request", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Response", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpResponse"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Target", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCreateCustomKeyForAspNetWebServiceMetadataCacheDelegate", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol+CreateCustomKeyForAspNetWebServiceMetadataCache"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromCache", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromCache", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCacheUnderPressure", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContext", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm28.TypeRef("System.Web.HttpContext"), 
          $asm28.TypeRef("System.Web.HttpRequest"), $asm28.TypeRef("System.Web.HttpResponse")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetHttpResponseStatusCode", 
      new JSIL.MethodSignature(null, [$asm28.TypeRef("System.Web.HttpResponse"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteOneWayResponse", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "request", $asm28.TypeRef("System.Web.HttpRequest"));

    $.Field({Static:false, Public:false}, "response", $asm28.TypeRef("System.Web.HttpResponse"));

    $.Field({Static:false, Public:false}, "context", $asm28.TypeRef("System.Web.HttpContext"));

    $.Field({Static:false, Public:false}, "target", $.Object);

    $.Field({Static:false, Public:false}, "methodAttr", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "Context", $asm28.TypeRef("System.Web.HttpContext"));

    $.Property({Static:false, Public:false}, "Request", $asm28.TypeRef("System.Web.HttpRequest"));

    $.Property({Static:false, Public:false}, "Response", $asm28.TypeRef("System.Web.HttpResponse"));

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "Target", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OnewayInitException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "MethodAttribute", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Web.Services.Protocols.ServerProtocol+CreateCustomKeyForAspNetWebServiceMetadataCache */ 

JSIL.MakeDelegate("System.Web.Services.Protocols.ServerProtocol+CreateCustomKeyForAspNetWebServiceMetadataCache", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [
      $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
      $asm07.TypeRef("System.String")
    ]));

/* class System.Web.Services.Protocols.ServerProtocol+ServerProtocolCachePressure */ 

(function ServerProtocolCachePressure$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ServerProtocol+ServerProtocolCachePressure", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Pressure", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ServerProtocol+<>c__DisplayClass43_0 */ 

(function $l$gc__DisplayClass43_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ServerProtocol+<>c__DisplayClass43_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetCreateCustomKeyForAspNetWebServiceMetadataCacheDelegate$gb__0", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "createKeyMethod", $asm07.TypeRef("System.Reflection.MethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Web.Services.Protocols.DiscoveryServerProtocol */ 

(function DiscoveryServerProtocol$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), 
      Name: "System.Web.Services.Protocols.DiscoveryServerProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Discover", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RunUriFixups", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "serverType", $asm2B.TypeRef("System.Web.Services.Protocols.DiscoveryServerType"));

    $.Field({Static:false, Public:false}, "syncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DocumentationServerType */ 

(function DocumentationServerType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Action$b1.Of($asm0A.System.Uri)))) ();
  };









  function DocumentationServerType_get_UriFixups () {
    return this.DocumentationServerType$UriFixups$value;
  }; 

  function DocumentationServerType_set_UriFixups (value) {
    this.DocumentationServerType$UriFixups$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"), 
      Name: "System.Web.Services.Protocols.DocumentationServerType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUriFixup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemasWithPost", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceDescriptions", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServiceDescriptionsWithPost", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"))
    );

    $.Method({Static:false, Public:true }, "get_UriFixups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])])), 
      DocumentationServerType_get_UriFixups
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_UriFixups", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])])), 
      DocumentationServerType_set_UriFixups
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "serviceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "serviceDescriptionsWithPost", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Field({Static:false, Public:false}, "schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "schemasWithPost", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "DocumentationServerType$UriFixups$value", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "UriFixups", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")])]));

    $.Property({Static:false, Public:false}, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false}, "Schemas", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "ServiceDescriptions", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:false}, "ServiceDescriptionsWithPost", $asm2B.TypeRef("System.Web.Services.Description.ServiceDescriptionCollection"));

    $.Property({Static:false, Public:false}, "SchemasWithPost", $asm2F.TypeRef("System.Xml.Serialization.XmlSchemas"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DocumentationServerProtocolFactory */ 

(function DocumentationServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.DocumentationServerProtocolFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.DocumentationServerProtocol */ 

(function DocumentationServerProtocol$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), 
      Name: "System.Web.Services.Protocols.DocumentationServerProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Documentation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledPageInstance", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $.String, $.String, 
          $asm28.TypeRef("System.Web.HttpContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RunUriFixups", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "serverType", $asm2B.TypeRef("System.Web.Services.Protocols.DocumentationServerType"));

    $.Field({Static:false, Public:false}, "handler", $asm28.TypeRef("System.Web.IHttpHandler"));

    $.Field({Static:false, Public:false}, "syncRoot", $.Object);

    $.Constant({Static:true , Public:false}, "MAX_PATH_SIZE", $.Int32, 1024);

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MimeParameterReader */ 

(function MimeParameterReader$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeFormatter"), 
      Name: "System.Web.Services.Protocols.MimeParameterReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ValueCollectionParameterReader */ 

(function ValueCollectionParameterReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeParameterReader"), 
      Name: "System.Web.Services.Protocols.ValueCollectionParameterReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.Field({Static:false, Public:false}, "paramInfos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HtmlFormParameterReader */ 

(function HtmlFormParameterReader$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ValueCollectionParameterReader"), 
      Name: "System.Web.Services.Protocols.HtmlFormParameterReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm28.TypeRef("System.Web.HttpRequest")])
    );

    $.Constant({Static:true , Public:false}, "MimeType", $.String, "application/x-www-form-urlencoded");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MimeParameterWriter */ 

(function MimeParameterWriter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeFormatter"), 
      Name: "System.Web.Services.Protocols.MimeParameterWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UsesWriteRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRequestUrl", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeRequest", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebRequest"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RequestEncoding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRequest", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "UsesWriteRequest", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequestEncoding", $asm07.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UrlEncodedParameterWriter */ 

(function UrlEncodedParameterWriter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeParameterWriter"), 
      Name: "System.Web.Services.Protocols.UrlEncodedParameterWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextWriter"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.TextWriter"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RequestEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RequestEncoding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UrlEncode", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "paramInfos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "numberEncoded", $.Int32);

    $.Field({Static:false, Public:false}, "encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequestEncoding", $asm07.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HtmlFormParameterWriter */ 

(function HtmlFormParameterWriter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.UrlEncodedParameterWriter"), 
      Name: "System.Web.Services.Protocols.HtmlFormParameterWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UsesWriteRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeRequest", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebRequest"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRequest", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "UsesWriteRequest", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpClientMethod */ 

(function HttpClientMethod$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.HttpClientMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "readerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "readerInitializer", $.Object);

    $.Field({Static:false, Public:false}, "writerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "writerInitializer", $.Object);

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpClientType */ 

(function HttpClientType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.HttpClientType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddFormatter", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Type"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod"), [$.String])
    );

    $.Field({Static:false, Public:false}, "methods", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpSimpleClientProtocol */ 

(function HttpSimpleClientProtocol$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpWebClientProtocol"), 
      Name: "System.Web.Services.Protocols.HttpSimpleClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsyncBufferedSerialize", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.IO.Stream"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndInvoke", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClientMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterWriter", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.MimeParameterWriter"), [$asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeAsyncRequest", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebRequest"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsync", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Threading.SendOrPostCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsync", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.Threading.SendOrPostCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsyncCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadResponse", 
      new JSIL.MethodSignature($.Object, [
          $asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod"), $asm0A.TypeRef("System.Net.WebResponse"), 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.Field({Static:false, Public:false}, "clientType", $asm2B.TypeRef("System.Web.Services.Protocols.HttpClientType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Web.Services.Protocols.HttpSimpleClientProtocol+InvokeAsyncState */ 

(function InvokeAsyncState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.HttpSimpleClientProtocol+InvokeAsyncState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod"), $asm2B.TypeRef("System.Web.Services.Protocols.MimeParameterWriter"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "Parameters", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "ParamWriter", $asm2B.TypeRef("System.Web.Services.Protocols.MimeParameterWriter"));

    $.Field({Static:false, Public:false}, "Method", $asm2B.TypeRef("System.Web.Services.Protocols.HttpClientMethod"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpGetClientProtocol */ 

(function HttpGetClientProtocol$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpSimpleClientProtocol"), 
      Name: "System.Web.Services.Protocols.HttpGetClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpGetServerProtocolFactory */ 

(function HttpGetServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.HttpGetServerProtocolFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpServerProtocol */ 

(function HttpServerProtocol$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), 
      Name: "System.Web.Services.Protocols.HttpServerProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "AreUrlParametersSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "serverMethod", $asm2B.TypeRef("System.Web.Services.Protocols.HttpServerMethod"));

    $.Field({Static:false, Public:false}, "serverType", $asm2B.TypeRef("System.Web.Services.Protocols.HttpServerType"));

    $.Field({Static:false, Public:false}, "hasInputPayload", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpGetServerProtocol */ 

(function HttpGetServerProtocol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpServerProtocol"), 
      Name: "System.Web.Services.Protocols.HttpGetServerProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpMethodAttribute */ 

(function HttpMethodAttribute$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.HttpMethodAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterFormatter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnFormatter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterFormatter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReturnFormatter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "returnFormatter", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "parameterFormatter", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ReturnFormatter", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ParameterFormatter", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class System.Web.Services.Protocols.HttpPostClientProtocol */ 

(function HttpPostClientProtocol$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpSimpleClientProtocol"), 
      Name: "System.Web.Services.Protocols.HttpPostClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpPostLocalhostServerProtocolFactory */ 

(function HttpPostLocalhostServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.HttpPostLocalhostServerProtocolFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpPostServerProtocolFactory */ 

(function HttpPostServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.HttpPostServerProtocolFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpPostServerProtocol */ 

(function HttpPostServerProtocol$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpServerProtocol"), 
      Name: "System.Web.Services.Protocols.HttpPostServerProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpServerType */ 

(function HttpServerType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"), 
      Name: "System.Web.Services.Protocols.HttpServerType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.HttpServerMethod"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodIgnoreCase", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.HttpServerMethod"), [$.String])
    );

    $.Field({Static:false, Public:false}, "methods", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.HttpServerMethod */ 

(function HttpServerMethod$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.HttpServerMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "readerTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "readerInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "writerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "writerInitializer", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Web.Services.Protocols.LogicalMethodTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.LogicalMethodTypes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Sync: 1, 
    Async: 2, 
  }
);

/* class System.Web.Services.Protocols.LogicalMethodInfo */ 

(function LogicalMethodInfo$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.LogicalMethodInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm2B.TypeRef("System.Web.Services.WebMethod")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm2B.TypeRef("System.Web.Services.WebMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanMerge", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContractOverride", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodTypes")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodTypes"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndInvoke", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Object, $asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsyncCallbackParameter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ParameterInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsyncResultParameter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ParameterInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsyncStateParameter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ParameterInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BeginMethodInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Binding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Declaration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndMethodInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsVoid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodAttribute", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebMethodAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnTypeCustomAttributeProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCustomAttribute", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOutParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBeginMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEndMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOutParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "methodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "endMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "inParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "outParams", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "retType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "callbackParam", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Field({Static:false, Public:false}, "stateParam", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Field({Static:false, Public:false}, "resultParam", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Field({Static:false, Public:false}, "methodName", $.String);

    $.Field({Static:false, Public:false}, "isVoid", $.Boolean);

    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Field({Static:false, Public:false}, "attribute", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));

    $.Field({Static:false, Public:false}, "declaration", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false}, "hash", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Property({Static:false, Public:false}, "Binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Property({Static:false, Public:false}, "Declaration", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "AsyncResultParameter", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Property({Static:false, Public:true }, "AsyncCallbackParameter", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Property({Static:false, Public:true }, "AsyncStateParameter", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Property({Static:false, Public:true }, "ReturnType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "IsVoid", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "InParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true }, "OutParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:true }, "Parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:false}, "MethodAttribute", $asm2B.TypeRef("System.Web.Services.WebMethodAttribute"));

    $.Property({Static:false, Public:true }, "CustomAttributeProvider", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.Property({Static:false, Public:true }, "ReturnTypeCustomAttributeProvider", $asm07.TypeRef("System.Reflection.ICustomAttributeProvider"));

    $.Property({Static:false, Public:true }, "MethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "BeginMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "EndMethodInfo", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "HashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MatchAttribute */ 

(function MatchAttribute$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.MatchAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capture", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Group", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxRepeats", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capture", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreCase", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxRepeats", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pattern", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "pattern", $.String);

    $.Field({Static:false, Public:false}, "group", $.Int32);

    $.Field({Static:false, Public:false}, "capture", $.Int32);

    $.Field({Static:false, Public:false}, "ignoreCase", $.Boolean);

    $.Field({Static:false, Public:false}, "repeats", $.Int32);

    $.Property({Static:false, Public:true }, "Pattern", $.String);

    $.Property({Static:false, Public:true }, "Group", $.Int32);

    $.Property({Static:false, Public:true }, "Capture", $.Int32);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxRepeats", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Web.Services.Protocols.MimeReturnWriter */ 

(function MimeReturnWriter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeFormatter"), 
      Name: "System.Web.Services.Protocols.MimeReturnWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpResponse"), $asm07.TypeRef("System.IO.Stream"), 
          $.Object
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.NopReturnReader */ 

(function NopReturnReader$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeReturnReader"), 
      Name: "System.Web.Services.Protocols.NopReturnReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.PatternMatcher */ 

(function PatternMatcher$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.PatternMatcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Match", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Field({Static:false, Public:false}, "matchType", $asm2B.TypeRef("System.Web.Services.Protocols.MatchType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MatchType */ 

(function MatchType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.MatchType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Reflect", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.MatchMember")]));

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MatchMember */ 

(function MatchMember$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.MatchMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BadCaptureIndexException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BadGroupIndexException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchClass", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchString", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Reflect", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.Field({Static:false, Public:false}, "memberInfo", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "regex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "group", $.Int32);

    $.Field({Static:false, Public:false}, "capture", $.Int32);

    $.Field({Static:false, Public:false}, "maxRepeats", $.Int32);

    $.Field({Static:false, Public:false}, "matchType", $asm2B.TypeRef("System.Web.Services.Protocols.MatchType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.RemoteDebugger */ 

(function RemoteDebugger$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.RemoteDebugger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CloseSharedResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:false}, "get_Connection", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Interop.INotifyConnection2"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NotifySink", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsClientCallOutEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsServerCallInEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyClientCallOut", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebRequest"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "NotifyClientCallReturn", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebResponse"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "NotifyServerCallEnter", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "NotifyServerCallExit", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpResponse"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OnAppDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnProcessExit", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Web.Services.Interop.INotifySource2.SetNotifyFilter", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Interop.NotifyFilter"), $asm2B.TypeRef("System.Web.Services.Interop.UserThread")])
    )
      .Overrides($asm2B.TypeRef("System.Web.Services.Interop.INotifySource2"), "SetNotifyFilter");

    $.Field({Static:true , Public:false}, "connection", $asm2B.TypeRef("System.Web.Services.Interop.INotifyConnection2"));

    $.Field({Static:true , Public:false}, "getConnection", $.Boolean, true);

    $.Field({Static:false, Public:false}, "notifySink", $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"));

    $.Field({Static:false, Public:false}, "notifyFilter", $asm2B.TypeRef("System.Web.Services.Interop.NotifyFilter"));

    $.Field({Static:false, Public:false}, "userThread", $asm2B.TypeRef("System.Web.Services.Interop.UserThread"));

    $.Constant({Static:true , Public:false}, "INPROC_SERVER", $.Int32, 1);

    $.Field({Static:true , Public:false}, "IID_NotifyConnectionClassGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_NotifyConnection2Guid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "debuggerHeader", $.String, "VsDebuggerCausalityData");

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);


    function RemoteDebugger__cctor () {
      $thisType.IID_NotifyConnectionClassGuid = new $asm07.System.Guid();
      $thisType.IID_NotifyConnection2Guid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RemoteDebugger__cctor
    );

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "Connection", $asm2B.TypeRef("System.Web.Services.Interop.INotifyConnection2"));

    $.Property({Static:false, Public:false}, "NotifySink", $asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"));

    $.ImplementInterfaces(
      /* 0 */ $asm2B.TypeRef("System.Web.Services.Interop.INotifySource2")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.RequestResponseUtils */ 

(function RequestResponseUtils$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.RequestResponseUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateResponseExceptionString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Net.WebResponse")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateResponseExceptionString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBufferSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.Encoding"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.Encoding"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadResponse", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Net.WebResponse")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadResponse", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamToMemoryStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.RequestResponseUtils+HttpUtility */ 

(function HttpUtility$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Web.Services.Protocols.RequestResponseUtils+HttpUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "HtmlDecode", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "HtmlDecode", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.TextWriter")])
    );

    $.Field({Static:true , Public:false}, "s_entityEndingChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.RequestResponseUtils+HttpUtility+HtmlEntities */ 

(function HtmlEntities$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Web.Services.Protocols.RequestResponseUtils+HttpUtility+HtmlEntities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Lookup", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.Field({Static:true , Public:false}, "_lookupLockObject", $.Object);

    $.Field({Static:true , Public:false}, "_entitiesList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "_entitiesLookupTable", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.RuntimeUtils */ 

(function RuntimeUtils$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.RuntimeUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementString", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeUri", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeserializationEvents", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnknownAttribute", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlAttributeEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnknownElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlElementEventArgs")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ScalarFormatter */ 

(function ScalarFormatter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ScalarFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumFromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromString", 
      new JSIL.MethodSignature($.Object, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UrlEncoder */ 

(function UrlEncoder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.UrlEncoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeStringInternal", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexEscape16", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexEscape8", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSafe", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEscapeString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEscapeStringUnicode", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "Max16BitUtf8SequenceLength", $.Int32, 4);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HexUpperChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.ContentType */ 

(function ContentType$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.ContentType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Compose", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compose", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAction", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBase", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCharset", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMediaType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParameter", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsApplication", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHtml", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSoap", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXml", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchesBase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "TextBase", $.String, "text");

    $.Constant({Static:true , Public:false}, "TextXml", $.String, "text/xml");

    $.Constant({Static:true , Public:false}, "TextPlain", $.String, "text/plain");

    $.Constant({Static:true , Public:false}, "TextHtml", $.String, "text/html");

    $.Constant({Static:true , Public:false}, "ApplicationBase", $.String, "application");

    $.Constant({Static:true , Public:false}, "ApplicationXml", $.String, "application/xml");

    $.Constant({Static:true , Public:false}, "ApplicationSoap", $.String, "application/soap+xml");

    $.Constant({Static:true , Public:false}, "ApplicationOctetStream", $.String, "application/octet-stream");

    $.Constant({Static:true , Public:false}, "ContentEncoding", $.String, "Content-Encoding");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.MemberHelper */ 

(function MemberHelper$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.MemberHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.MemberInfo"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $.Object, 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerProtocolHelper */ 

(function SoapServerProtocolHelper$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapServerProtocolHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EncodingNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EnvelopeNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HttpContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerProtocol", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHelper", 
      new JSIL.MethodSignature($.Type, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequestElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RouteRequest", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResponseErrorCode", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.HttpStatusCode"), [$asm28.TypeRef("System.Web.HttpResponse"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapException")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFault", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"), 
          $asm0A.TypeRef("System.Net.HttpStatusCode")
        ])
    );

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"));

    $.Field({Static:false, Public:false}, "requestNamespace", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Property({Static:false, Public:false, Virtual:true }, "Protocol", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Property({Static:false, Public:false, Virtual:true }, "EnvelopeNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EncodingNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "HttpContentType", $.String);

    $.Property({Static:false, Public:false}, "RequestNamespace", $.String);

    $.Property({Static:false, Public:false}, "ServerProtocol", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"));

    $.Property({Static:false, Public:false}, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.Soap11ServerProtocolHelper */ 

(function Soap11ServerProtocolHelper$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocolHelper"), 
      Name: "System.Web.Services.Protocols.Soap11ServerProtocolHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EncodingNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EnvelopeNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HttpContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RouteRequest", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateFaultCode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFault", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"), 
          $asm0A.TypeRef("System.Net.HttpStatusCode")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Property({Static:false, Public:false, Virtual:true }, "Protocol", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Property({Static:false, Public:false, Virtual:true }, "EnvelopeNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EncodingNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "HttpContentType", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.Soap12ServerProtocolHelper */ 

(function Soap12ServerProtocolHelper$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocolHelper"), 
      Name: "System.Web.Services.Protocols.Soap12ServerProtocolHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EncodingNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EnvelopeNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HttpContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RouteRequest", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TranslateFaultCode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFault", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"), 
          $asm0A.TypeRef("System.Net.HttpStatusCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteFaultCodeValue", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode")
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Property({Static:false, Public:false, Virtual:true }, "Protocol", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Property({Static:false, Public:false, Virtual:true }, "EnvelopeNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EncodingNs", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "HttpContentType", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapMessage */ 

(function SoapMessage$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureInStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureNoException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureOutStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureStage", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapMessageStage"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentEncoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapException"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SoapVersion", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stage", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapMessageStage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInParameterValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOutParameterValue", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterValues", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReturnValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitExtensionStreamChain", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeExtensions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunExtensions", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentEncoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Exception", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExtensionStream", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParameterValues", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStage", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapMessageStage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStream", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "stage", $asm2B.TypeRef("System.Web.Services.Protocols.SoapMessageStage"));

    $.Field({Static:false, Public:false}, "headers", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"));

    $.Field({Static:false, Public:false}, "stream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "extensionStream", $asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionStream"));

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Field({Static:false, Public:false}, "contentEncoding", $.String);

    $.Field({Static:false, Public:false}, "parameterValues", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "exception", $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"));

    $.Property({Static:false, Public:true , Virtual:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true }, "Exception", $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:true }, "Headers", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"));

    $.Property({Static:false, Public:true }, "Stream", $asm07.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "ContentType", $.String);

    $.Property({Static:false, Public:true }, "ContentEncoding", $.String);

    $.Property({Static:false, Public:true }, "Stage", $asm2B.TypeRef("System.Web.Services.Protocols.SoapMessageStage"));

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Action", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SoapVersion", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Protocols.SoapProtocolVersion.Default]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapClientMessage */ 

(function SoapClientMessage$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapMessage"), 
      Name: "System.Web.Services.Protocols.SoapClientMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHttpClientProtocol"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMethod"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureInStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureOutStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Client", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapHttpClientProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Method", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMethod"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SoapVersion", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "method", $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMethod"));

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHttpClientProtocol"));

    $.Field({Static:false, Public:false}, "url", $.String);

    $.Field({Static:false, Public:false}, "initializedExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]));

    $.Property({Static:false, Public:true , Virtual:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true }, "Client", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHttpClientProtocol"));

    $.Property({Static:false, Public:true , Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Action", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SoapVersion", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Method", $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMethod"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapClientType */ 

(function SoapClientType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapClientType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateXmlMappings", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Binding", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMethod"), [$.String])
    );

    $.Field({Static:false, Public:false}, "methods", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Field({Static:false, Public:false}, "HighPriExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "LowPriExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "HighPriExtensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "LowPriExtensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "serviceNamespace", $.String);

    $.Field({Static:false, Public:false}, "serviceDefaultIsEncoded", $.Boolean);

    $.Property({Static:false, Public:false}, "Binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapClientMethod */ 

(function SoapClientMethod$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapClientMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "returnSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "parameterSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "inHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "outHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "inHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Field({Static:false, Public:false}, "outHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Field({Static:false, Public:false}, "extensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "extensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "oneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "rpc", $.Boolean);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "paramStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHttpClientProtocol */ 

(function SoapHttpClientProtocol$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.HttpWebClientProtocol"), 
      Name: "System.Web.Services.Protocols.SoapHttpClientProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsyncBufferedSerialize", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Net.WebRequest"), $asm07.TypeRef("System.IO.Stream"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeforeSerialize", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"), [
          $asm0A.TypeRef("System.Net.WebRequest"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineExtensionsHelper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Discover", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndInvoke", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncodingNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnvelopeNs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpContentType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapVersion", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetReaderForMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWriterForMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlWriter"), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeAsyncRequest", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebRequest"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsync", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Threading.SendOrPostCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsync", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Threading.SendOrPostCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeAsyncCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFaultCode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadResponse", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"), $asm0A.TypeRef("System.Net.WebResponse"), 
          $asm07.TypeRef("System.IO.Stream"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSoap12FaultCode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlReader"), $jsilcore.TypeRef("JSIL.Reference", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSoap12FaultCodesRecursive", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSoapException", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapException"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Serialize", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapVersion", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.Field({Static:false, Public:false}, "clientType", $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientType"));

    $.Field({Static:false, Public:false}, "version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Property({Static:false, Public:true }, "SoapVersion", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm2B.System.Web.Services.Protocols.SoapProtocolVersion.Default]; })
      .Attribute($asm2B.TypeRef("System.Web.Services.WebServicesDescriptionAttribute"), function () { return ["ClientProtocolSoapVersion"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "EnvelopeNs", $.String);

    $.Property({Static:false, Public:false}, "EncodingNs", $.String);

    $.Property({Static:false, Public:false}, "HttpContentType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Web.Services.Protocols.SoapHttpClientProtocol+InvokeAsyncState */ 

(function InvokeAsyncState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapHttpClientProtocol+InvokeAsyncState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:true }, "MethodName", $.String);

    $.Field({Static:false, Public:true }, "Parameters", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "Message", $asm2B.TypeRef("System.Web.Services.Protocols.SoapClientMessage"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapDocumentMethodAttribute */ 

(function SoapDocumentMethodAttribute$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapDocumentMethodAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterStyle", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Action", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OneWay", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterStyle", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "requestName", $.String);

    $.Field({Static:false, Public:false}, "responseName", $.String);

    $.Field({Static:false, Public:false}, "requestNamespace", $.String);

    $.Field({Static:false, Public:false}, "responseNamespace", $.String);

    $.Field({Static:false, Public:false}, "oneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "style", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Field({Static:false, Public:false}, "binding", $.String);

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.Property({Static:false, Public:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true }, "RequestNamespace", $.String);

    $.Property({Static:false, Public:true }, "ResponseNamespace", $.String);

    $.Property({Static:false, Public:true }, "RequestElementName", $.String);

    $.Property({Static:false, Public:true }, "ResponseElementName", $.String);

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Property({Static:false, Public:true }, "ParameterStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Property({Static:false, Public:true }, "Binding", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class System.Web.Services.Protocols.SoapDocumentServiceAttribute */ 

(function SoapDocumentServiceAttribute$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapDocumentServiceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterStyle", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoutingStyle", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterStyle", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RoutingStyle", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "paramStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Field({Static:false, Public:false}, "routingStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"));

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Property({Static:false, Public:true }, "ParameterStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Property({Static:false, Public:true }, "RoutingStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Web.Services.Protocols.SoapException */ 

(function SoapException$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Web.Services.Protocols.SoapException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $asm2F.TypeRef("System.Xml.XmlNode"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlNode"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSubCode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlNode"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSuppressedException", 
      new JSIL.MethodSignature($.Type, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Actor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Detail", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Node", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Role", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubCode", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsClientFaultCode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsMustUnderstandFaultCode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsServerFaultCode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsVersionMismatchFaultCode", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.Field({Static:false, Public:false}, "code", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "actor", $.String);

    $.Field({Static:false, Public:false}, "role", $.String);

    $.Field({Static:false, Public:false}, "detail", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "subCode", $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"));

    $.Field({Static:false, Public:false}, "lang", $.String);

    $.Field({Static:true , Public:true , ReadOnly:true }, "ServerFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ClientFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "VersionMismatchFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MustUnderstandFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DetailElementName", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Actor", $.String);

    $.Property({Static:false, Public:true }, "Code", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Detail", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "Lang", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Node", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Role", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "SubCode", $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapExtension */ 

(function SoapExtension$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChainStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessMessage", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapMessage"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapExtensionAttribute */ 

(function SoapExtensionAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapExtensionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ExtensionType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Priority", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Priority", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExtensionType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Priority", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapExtensionStream */ 

(function SoapExtensionStream$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Web.Services.Protocols.SoapExtensionStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureStreamReady", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasWritten", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInnerStream", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStreamReady", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "innerStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "hasWritten", $.Boolean);

    $.Field({Static:false, Public:false}, "streamReady", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:false}, "HasWritten", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.Soap12FaultCodes */ 

(function Soap12FaultCodes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.Soap12FaultCodes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ReceiverFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SenderFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "VersionMismatchFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MustUnderstandFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DataEncodingUnknownFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "RpcProcedureNotPresentFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "RpcBadArgumentsFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "EncodingMissingIdFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "EncodingUntypedValueFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnsupportedMediaTypeFaultCode", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MethodNotAllowed", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapFaultSubCode */ 

(function SoapFaultSubCode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapFaultSubCode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubCode", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "code", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "subCode", $.Type);

    $.Property({Static:false, Public:true }, "Code", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "SubCode", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHeader */ 

(function SoapHeader$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapHeader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Actor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DidUnderstand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodedMustUnderstand", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodedMustUnderstand12", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodedRelay", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalActor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalMustUnderstand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalRelay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MustUnderstand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Relay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Role", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Actor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DidUnderstand", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncodedMustUnderstand", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncodedMustUnderstand12", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncodedRelay", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalActor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalMustUnderstand", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalRelay", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MustUnderstand", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Relay", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Role", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "actor", $.String);

    $.Field({Static:false, Public:false}, "mustUnderstand", $.Boolean);

    $.Field({Static:false, Public:false}, "didUnderstand", $.Boolean);

    $.Field({Static:false, Public:false}, "relay", $.Boolean);

    $.Field({Static:false, Public:false}, "version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Property({Static:false, Public:true }, "EncodedMustUnderstand", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mustUnderstand"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), function () { return ["mustUnderstand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["0"]; });

    $.Property({Static:false, Public:true }, "EncodedMustUnderstand12", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mustUnderstand"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), function () { return ["mustUnderstand"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["0"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "MustUnderstand", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "InternalMustUnderstand", $.Boolean);

    $.Property({Static:false, Public:true }, "Actor", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["actor"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), function () { return ["actor"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Role", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["role"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), function () { return ["role"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "InternalActor", $.String);

    $.Property({Static:false, Public:true }, "DidUnderstand", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "EncodedRelay", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["relay"]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), function () { return ["relay"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["0"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Relay", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapIgnoreAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false, Virtual:true }, "InternalRelay", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlTypeAttribute"))
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.SoapTypeAttribute"));

})();

/* class System.Web.Services.Protocols.SoapHeaderMapping */ 

(function SoapHeaderMapping$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapHeaderMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Custom", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HeaderType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Repeats", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "headerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "repeats", $.Boolean);

    $.Field({Static:false, Public:false}, "custom", $.Boolean);

    $.Field({Static:false, Public:false}, "direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Field({Static:false, Public:false}, "memberInfo", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "HeaderType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Repeats", $.Boolean);

    $.Property({Static:false, Public:true }, "Custom", $.Boolean);

    $.Property({Static:false, Public:true }, "Direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Property({Static:false, Public:true }, "MemberInfo", $asm07.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHeaderHandling */ 

(function SoapHeaderHandling$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapHeaderHandling", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureHeadersUnderstood", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMapping", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]), $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHeaderElementName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHeaderElementName", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHeaderMembers", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]), $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUnknownElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.XmlElementEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUnreferencedObject", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Serialization.UnreferencedObjectEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadHeaders", 
      new JSIL.MethodSignature($.String, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetHeaderMembers", 
      new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]), $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteHeaders", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]), 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"), $.Boolean, 
          $.String, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteUnknownHeaders", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "unknownHeaders", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"));

    $.Field({Static:false, Public:false}, "unreferencedHeaders", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderCollection"));

    $.Field({Static:false, Public:false}, "currentThread", $.Int32);

    $.Field({Static:false, Public:false}, "envelopeNS", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHeaderAttribute */ 

(function SoapHeaderAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapHeaderAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "memberName", $.String);

    $.Field({Static:false, Public:false}, "direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Field({Static:false, Public:false}, "required", $.Boolean);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "Direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Property({Static:false, Public:true }, "Required", $.Boolean)
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["This property will be removed from a future version. The presence of a particular header in a SOAP message is no longer enforced", false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* enum System.Web.Services.Protocols.SoapHeaderDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.SoapHeaderDirection", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    In: 1, 
    Out: 2, 
    InOut: 3, 
    Fault: 4, 
  }
);

/* class System.Web.Services.Protocols.SoapHeaderException */ 

(function SoapHeaderException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapException"), 
      Name: "System.Web.Services.Protocols.SoapHeaderException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $.String, 
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String, $.String, 
          $.String, $asm2B.TypeRef("System.Web.Services.Protocols.SoapFaultSubCode"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHeaderCollection */ 

(function SoapHeaderCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Web.Services.Protocols.SoapHeaderCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Web.Services.Protocols.SoapMessageStage */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.SoapMessageStage", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BeforeSerialize: 1, 
    AfterSerialize: 2, 
    BeforeDeserialize: 4, 
    AfterDeserialize: 8, 
  }
);

/* enum System.Web.Services.Protocols.SoapParameterStyle */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.SoapParameterStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Bare: 1, 
    Wrapped: 2, 
  }
);

/* enum System.Web.Services.Protocols.SoapProtocolVersion */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.SoapProtocolVersion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Soap11: 1, 
    Soap12: 2, 
  }
);

/* class System.Web.Services.Protocols.SoapReflectedHeader */ 

(function SoapReflectedHeader$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapReflectedHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "headerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "memberInfo", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "direction", $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderDirection"));

    $.Field({Static:false, Public:false}, "repeats", $.Boolean);

    $.Field({Static:false, Public:false}, "custom", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapReflectedExtension */ 

(function SoapReflectedExtension$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapReflectedExtension", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionAttribute"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "attribute", $asm2B.TypeRef("System.Web.Services.Protocols.SoapExtensionAttribute"));

    $.Field({Static:false, Public:false}, "priority", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapReflectedMethod */ 

(function SoapReflectedMethod$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapReflectedMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClaimsConformance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "requestMappings", $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"));

    $.Field({Static:false, Public:false}, "responseMappings", $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"));

    $.Field({Static:false, Public:false}, "inHeaderMappings", $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"));

    $.Field({Static:false, Public:false}, "outHeaderMappings", $asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"));

    $.Field({Static:false, Public:false}, "headers", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedHeader")]));

    $.Field({Static:false, Public:false}, "extensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "oneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "rpc", $.Boolean);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "paramStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Field({Static:false, Public:false}, "binding", $asm2B.TypeRef("System.Web.Services.WebServiceBindingAttribute"));

    $.Field({Static:false, Public:false}, "requestElementName", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "portType", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "IsClaimsConformance", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapHeaderAttributeComparer */ 

(function SoapHeaderAttributeComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapHeaderAttributeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapReflector */ 

(function SoapReflector$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("System.Web.Services.Protocols.SoapReflector", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateSoapImporter", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateXmlImporter", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultAction", 
      new JSIL.MethodSignature($.String, [$.String, $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodedNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLiteralNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSoapMethodAttribute", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSoapMethodBinding", 
      new JSIL.MethodSignature($.String, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSoapServiceAttribute", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSoapServiceRoutingStyle", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "HeaderException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"), $asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter"), 
          $.Boolean, $.Boolean, 
          $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"), $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"), 
          $.String, $.String, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), 
          $.Boolean, $.Boolean, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")]), $asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReflectMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"), [
          $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"), $.Boolean, 
          $asm2F.TypeRef("System.Xml.Serialization.XmlReflectionImporter"), $asm2F.TypeRef("System.Xml.Serialization.SoapReflectionImporter"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReflectParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflector+SoapParameterInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceDefaultIsEncoded", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceDefaultIsEncoded", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapReflector+SoapParameterInfo */ 

(function SoapParameterInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapReflector+SoapParameterInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parameterInfo", $asm07.TypeRef("System.Reflection.ParameterInfo"));

    $.Field({Static:false, Public:false}, "xmlAttributes", $asm2F.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Field({Static:false, Public:false}, "soapAttributes", $asm2F.TypeRef("System.Xml.Serialization.SoapAttributes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapReflector+MethodAttribute */ 

(function MethodAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapReflector+MethodAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "binding", $.String);

    $.Field({Static:false, Public:false}, "requestName", $.String);

    $.Field({Static:false, Public:false}, "requestNs", $.String);

    $.Field({Static:false, Public:false}, "responseName", $.String);

    $.Field({Static:false, Public:false}, "responseNs", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapRpcMethodAttribute */ 

(function SoapRpcMethodAttribute$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapRpcMethodAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Action", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OneWay", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "requestName", $.String);

    $.Field({Static:false, Public:false}, "responseName", $.String);

    $.Field({Static:false, Public:false}, "requestNamespace", $.String);

    $.Field({Static:false, Public:false}, "responseNamespace", $.String);

    $.Field({Static:false, Public:false}, "oneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "binding", $.String);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.Property({Static:false, Public:true }, "Binding", $.String);

    $.Property({Static:false, Public:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true }, "RequestNamespace", $.String);

    $.Property({Static:false, Public:true }, "ResponseNamespace", $.String);

    $.Property({Static:false, Public:true }, "RequestElementName", $.String);

    $.Property({Static:false, Public:true }, "ResponseElementName", $.String);

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class System.Web.Services.Protocols.SoapRpcServiceAttribute */ 

(function SoapRpcServiceAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.Web.Services.Protocols.SoapRpcServiceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoutingStyle", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RoutingStyle", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.Field({Static:false, Public:false}, "routingStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"));

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Property({Static:false, Public:true }, "RoutingStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServiceRoutingStyle"));

    $.Property({Static:false, Public:true }, "Use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.Web.Services.Protocols.SoapServerMessage */ 

(function SoapServerMessage$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapMessage"), 
      Name: "System.Web.Services.Protocols.SoapServerMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureInStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureOutStage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Server", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SoapVersion", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocol"));

    $.Field({Static:false, Public:false}, "highPriConfigExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]));

    $.Field({Static:false, Public:false}, "otherExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]));

    $.Field({Static:false, Public:false}, "allExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]));

    $.Property({Static:false, Public:true , Virtual:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Url", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Action", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SoapVersion", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Server", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerType */ 

(function SoapServerType$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"), 
      Name: "System.Web.Services.Protocols.SoapServerType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDefaultIsEncoded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceRoutingOnSoapAction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDuplicateMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMethod", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"), [$.Object])
    );

    $.Field({Static:false, Public:false}, "methods", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "duplicateMethods", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "HighPriExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "LowPriExtensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "HighPriExtensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "LowPriExtensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "serviceNamespace", $.String);

    $.Field({Static:false, Public:false}, "serviceDefaultIsEncoded", $.Boolean);

    $.Field({Static:false, Public:false}, "routingOnSoapAction", $.Boolean);

    $.Field({Static:false, Public:false}, "protocolsSupported", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Property({Static:false, Public:true }, "ServiceNamespace", $.String);

    $.Property({Static:false, Public:true }, "ServiceDefaultIsEncoded", $.Boolean);

    $.Property({Static:false, Public:true }, "ServiceRoutingOnSoapAction", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerProtocolFactory */ 

(function SoapServerProtocolFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory"), 
      Name: "System.Web.Services.Protocols.SoapServerProtocolFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIfRequestCompatible", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerProtocol */ 

(function SoapServerProtocol$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), 
      Name: "System.Web.Services.Protocols.SoapServerProtocol", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckHelperVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineExtensionsHelper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateServerInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateUpgradeEnvelope", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUpgradeHeader", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapUnknownHeader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Message", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OnewayInitException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerMethod", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetReaderForMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWriterForMessage", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlWriter"), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GuessVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ModifyInitializedExtensions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")]), [$asm2B.TypeRef("System.Web.Services.Configuration.PriorityGroup"), $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapExtension")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RouteRequest", 
      new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHelper", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocolHelper"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteException_TryWriteFault", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"), $asm07.TypeRef("System.IO.Stream"), 
          $asm0A.TypeRef("System.Net.HttpStatusCode"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "serverType", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerType"));

    $.Field({Static:false, Public:false}, "serverMethod", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"));

    $.Field({Static:false, Public:false}, "message", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"));

    $.Field({Static:false, Public:false}, "isOneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "onewayInitException", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));

    $.Field({Static:false, Public:false}, "protocolsSupported", $asm2B.TypeRef("System.Web.Services.Configuration.WebServiceProtocols"));

    $.Field({Static:false, Public:false}, "helper", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerProtocolHelper"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false}, "ServerMethod", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMethod"));

    $.Property({Static:false, Public:false}, "Message", $asm2B.TypeRef("System.Web.Services.Protocols.SoapServerMessage"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OnewayInitException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "Version", $asm2B.TypeRef("System.Web.Services.Protocols.SoapProtocolVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerProtocol+SoapEnvelopeReader */ 

(function SoapEnvelopeReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlTextReader"), 
      Name: "System.Web.Services.Protocols.SoapServerProtocol+SoapEnvelopeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.TextReader"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTimeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "readerTimedout", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Web.Services.Protocols.SoapServiceRoutingStyle */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Protocols.SoapServiceRoutingStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SoapAction: 0, 
    RequestElement: 1, 
  }
);

/* class System.Web.Services.Protocols.SoapUnknownHeader */ 

(function SoapUnknownHeader$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SoapHeader"), 
      Name: "System.Web.Services.Protocols.SoapUnknownHeader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Element", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalActor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalMustUnderstand", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalRelay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementAttribute", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Element", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalActor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalMustUnderstand", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalRelay", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "element", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "Element", $asm2F.TypeRef("System.Xml.XmlElement"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "InternalMustUnderstand", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "InternalActor", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "InternalRelay", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.TextReturnReader */ 

(function TextReturnReader$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeReturnReader"), 
      Name: "System.Web.Services.Protocols.TextReturnReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "matcher", $asm2B.TypeRef("System.Web.Services.Protocols.PatternMatcher"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UrlParameterReader */ 

(function UrlParameterReader$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ValueCollectionParameterReader"), 
      Name: "System.Web.Services.Protocols.UrlParameterReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm28.TypeRef("System.Web.HttpRequest")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UrlParameterWriter */ 

(function UrlParameterWriter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.UrlEncodedParameterWriter"), 
      Name: "System.Web.Services.Protocols.UrlParameterWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRequestUrl", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.WebServiceHandler */ 

(function WebServiceHandler$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.WebServiceHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginCoreProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginInvoke", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Callback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CoreProcessRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndCoreProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndInvoke", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleOneWayException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Invoke", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeTransacted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OneWayAsyncInvoke", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OneWayCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OneWayInvoke", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OneWayInvokeTransacted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchContext", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.HttpContext"), [$asm28.TypeRef("System.Web.HttpContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInitException", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceFlush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReturns", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "protocol", $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"));

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "asyncCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "asyncBeginComplete", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "asyncCallbackCalls", $.Int32);

    $.Field({Static:false, Public:false}, "wroteException", $.Boolean);

    $.Field({Static:false, Public:false}, "parameters", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SyncSessionlessHandler */ 

(function SyncSessionlessHandler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.WebServiceHandler"), 
      Name: "System.Web.Services.Protocols.SyncSessionlessHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SyncSessionHandler */ 

(function SyncSessionHandler$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SyncSessionlessHandler"), 
      Name: "System.Web.Services.Protocols.SyncSessionHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"))
    );

    $.ImplementInterfaces(
      /* 1 */ $asm28.TypeRef("System.Web.SessionState.IRequiresSessionState")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.AsyncSessionlessHandler */ 

(function AsyncSessionlessHandler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.SyncSessionlessHandler"), 
      Name: "System.Web.Services.Protocols.AsyncSessionlessHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm28.TypeRef("System.Web.HttpContext"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ImplementInterfaces(
      /* 1 */ $asm28.TypeRef("System.Web.IHttpAsyncHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.AsyncSessionHandler */ 

(function AsyncSessionHandler$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.AsyncSessionlessHandler"), 
      Name: "System.Web.Services.Protocols.AsyncSessionHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"))
    );

    $.ImplementInterfaces(
      /* 2 */ $asm28.TypeRef("System.Web.SessionState.IRequiresSessionState")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.CompletedAsyncResult */ 

(function CompletedAsyncResult$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.CompletedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "asyncState", $.Object);

    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.WebServiceHandlerFactory */ 

(function WebServiceHandlerFactory$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.WebServiceHandlerFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CoreGetHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm07.TypeRef("System.Type"), $asm28.TypeRef("System.Web.HttpContext"), 
          $asm28.TypeRef("System.Web.HttpRequest"), $asm28.TypeRef("System.Web.HttpResponse")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $asm28.TypeRef("System.Web.HttpContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServerProtocolFactories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocolFactory")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseHandler", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.IHttpHandler"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandlerFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.UnsupportedRequestProtocol */ 

(function UnsupportedRequestProtocol$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.ServerProtocol"), 
      Name: "System.Web.Services.Protocols.UnsupportedRequestProtocol", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HttpCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsOneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ServerType", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.ServerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteReturns", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "httpCode", $.Int32);

    $.Property({Static:false, Public:false}, "HttpCode", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsOneWay", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "ServerType", $asm2B.TypeRef("System.Web.Services.Protocols.ServerType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.NopHandler */ 

(function NopHandler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.NopHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.XmlReturn */ 

(function XmlReturn$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.XmlReturn", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEvidenceForType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Policy.Evidence"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.XmlReturnReader */ 

(function XmlReturnReader$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeReturnReader"), 
      Name: "System.Web.Services.Protocols.XmlReturnReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm0A.TypeRef("System.Net.WebResponse"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "xmlSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.XmlReturnWriter */ 

(function XmlReturnWriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm2B.TypeRef("System.Web.Services.Protocols.MimeReturnWriter"), 
      Name: "System.Web.Services.Protocols.XmlReturnWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializer", 
      new JSIL.MethodSignature($.Object, [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetInitializers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpResponse"), $asm07.TypeRef("System.IO.Stream"), 
          $.Object
        ])
    );

    $.Field({Static:false, Public:false}, "xmlSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Web.Services.Protocols.SoapServerMethod */ 

(function SoapServerMethod$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Protocols.SoapServerMethod", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BindingUse", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InHeaderMappings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InHeaderSerializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodInfo", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OneWay", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutHeaderMappings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutHeaderSerializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterSerializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterStyle", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnSerializer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rpc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WsiClaims", 
      JSIL.MethodSignature.Return($asm2B.TypeRef("System.Web.Services.WsiProfiles"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServerTypeEvidence", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Policy.Evidence"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlMappingsForMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.Serialization.XmlMapping")]), [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportHeaderSerializers", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportReflectedMethod", 
      JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSerializers", 
      new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedMethod"), $asm07.TypeRef("System.Security.Policy.Evidence")])
    );

    $.Field({Static:false, Public:false}, "methodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Field({Static:false, Public:false}, "returnSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "parameterSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "inHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "outHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Field({Static:false, Public:false}, "inHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Field({Static:false, Public:false}, "outHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Field({Static:false, Public:false}, "extensions", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapReflectedExtension")]));

    $.Field({Static:false, Public:false}, "extensionInitializers", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "oneWay", $.Boolean);

    $.Field({Static:false, Public:false}, "rpc", $.Boolean);

    $.Field({Static:false, Public:false}, "use", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Field({Static:false, Public:false}, "paramStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Field({Static:false, Public:false}, "wsiClaims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));

    $.Property({Static:false, Public:true }, "MethodInfo", $asm2B.TypeRef("System.Web.Services.Protocols.LogicalMethodInfo"));

    $.Property({Static:false, Public:true }, "ReturnSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Property({Static:false, Public:true }, "ParameterSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Property({Static:false, Public:true }, "InHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Property({Static:false, Public:true }, "OutHeaderSerializer", $asm2F.TypeRef("System.Xml.Serialization.XmlSerializer"));

    $.Property({Static:false, Public:true }, "InHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Property({Static:false, Public:true }, "OutHeaderMappings", $jsilcore.TypeRef("System.Array", [$asm2B.TypeRef("System.Web.Services.Protocols.SoapHeaderMapping")]));

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.Property({Static:false, Public:true }, "OneWay", $.Boolean);

    $.Property({Static:false, Public:true }, "Rpc", $.Boolean);

    $.Property({Static:false, Public:true }, "BindingUse", $asm2B.TypeRef("System.Web.Services.Description.SoapBindingUse"));

    $.Property({Static:false, Public:true }, "ParameterStyle", $asm2B.TypeRef("System.Web.Services.Protocols.SoapParameterStyle"));

    $.Property({Static:false, Public:true }, "WsiClaims", $asm2B.TypeRef("System.Web.Services.WsiProfiles"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Web.Services.Interop");
/* struct System.Web.Services.Interop.CallId */ 

(function CallId$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Web.Services.Interop.CallId", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.IntPtr, $.Int64, 
          $.String, $.String
        ])
    );

    $.Field({Static:false, Public:true }, "szMachine", $.String);

    $.Field({Static:false, Public:true }, "dwPid", $.Int32);

    $.Field({Static:false, Public:true }, "userThread", $.IntPtr);

    $.Field({Static:false, Public:true }, "addStackPointer", $.Int64);

    $.Field({Static:false, Public:true }, "szEntryPoint", $.String);

    $.Field({Static:false, Public:true }, "szDestinationMachine", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Web.Services.Interop.INotifyConnection2 */ 

JSIL.MakeInterface(
  "System.Web.Services.Interop.INotifyConnection2", false, [], function ($) {
    $.Method({}, "RegisterNotifySource", new JSIL.MethodSignature($asm2B.TypeRef("System.Web.Services.Interop.INotifySink2"), [$asm2B.TypeRef("System.Web.Services.Interop.INotifySource2")]));
    $.Method({}, "UnregisterNotifySource", JSIL.MethodSignature.Action($asm2B.TypeRef("System.Web.Services.Interop.INotifySource2")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1AF04045-6659-4aaa-9F4B-2741AC56224B"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Web.Services.Interop.INotifySink2 */ 

JSIL.MakeInterface(
  "System.Web.Services.Interop.INotifySink2", false, [], function ($) {
    $.Method({}, "OnSyncCallOut", new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.CallId"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "OnSyncCallEnter", new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.CallId"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]));
    $.Method({}, "OnSyncCallReturn", new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.CallId"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]));
    $.Method({}, "OnSyncCallExit", new JSIL.MethodSignature(null, [
          $asm2B.TypeRef("System.Web.Services.Interop.CallId"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C43CC2F3-90AF-4e93-9112-DFB8B36749B5"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Web.Services.Interop.INotifySource2 */ 

JSIL.MakeInterface(
  "System.Web.Services.Interop.INotifySource2", false, [], function ($) {
    $.Method({}, "SetNotifyFilter", new JSIL.MethodSignature(null, [$asm2B.TypeRef("System.Web.Services.Interop.NotifyFilter"), $asm2B.TypeRef("System.Web.Services.Interop.UserThread")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["26E7F0F1-B49C-48cb-B43E-78DCD577E1D9"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* enum System.Web.Services.Interop.NotifyFilter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Web.Services.Interop.NotifyFilter", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    All: -1, 
    None: 0, 
    OnSyncCallOut: 1, 
    OnSyncCallEnter: 2, 
    OnSyncCallExit: 4, 
    OnSyncCallReturn: 8, 
    AllSync: 15, 
  }
);

/* class System.Web.Services.Interop.UserThread */ 

(function UserThread$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Web.Services.Interop.UserThread", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "pSidBuffer", $.Int32);

    $.Field({Static:false, Public:false}, "dwSidLen", $.Int32);

    $.Field({Static:false, Public:false}, "dwTid", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ComponentModel");
/* class System.ComponentModel.CompModSwitches */ 

(function CompModSwitches$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ComponentModel.CompModSwitches", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DisableRemoteDebugging", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DynamicDiscoverySearcher", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DynamicDiscoveryVirtualSearch", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Remote", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.Field({Static:true , Public:false}, "dynamicDiscoVirtualSearch", $asm0A.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Field({Static:true , Public:false}, "dynamicDiscoSearcher", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Field({Static:true , Public:false}, "disableRemoteDebugging", $asm0A.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Field({Static:true , Public:false}, "remote", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "DisableRemoteDebugging", $asm0A.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "DynamicDiscoverySearcher", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "DynamicDiscoveryVirtualSearch", $asm0A.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "Remote", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "5EA19964EF3BCFE3516273580C08920DB6013B8E", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

