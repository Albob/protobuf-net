/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm1F = JSIL.DeclareAssembly("System.Runtime.Caching, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Runtime.Caching.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Runtime.Caching.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Runtime.Caching.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.Caching");
/* class System.Runtime.Caching.ChangeMonitor */ 

(function ChangeMonitor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.ChangeMonitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeHelper", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializationComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "NotifyOnChanged", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChanged", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChangedHelper", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Constant({Static:true , Public:false}, "INITIALIZED", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CHANGED", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "INVOKED", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DISPOSED", $.Int32, 8);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NOT_SET", $.Object);

    $.Field({Static:false, Public:false}, "_flags", $asm1F.TypeRef("System.Runtime.Caching.SafeBitVector32"));

    $.Field({Static:false, Public:false}, "_onChangedCallback", $asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback"));

    $.Field({Static:false, Public:false}, "_onChangedState", $.Object);

    $.Property({Static:false, Public:true }, "HasChanged", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "UniqueId", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheEntryChangeMonitor */ 

(function CacheEntryChangeMonitor$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"), 
      Name: "System.Runtime.Caching.CacheEntryChangeMonitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CacheKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CacheKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "LastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:true , Virtual:true }, "RegionName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheItem */ 

(function CacheItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };






  function CacheItem_get_Key () {
    return this.CacheItem$Key$value;
  }; 

  function CacheItem_get_RegionName () {
    return this.CacheItem$RegionName$value;
  }; 

  function CacheItem_get_Value () {
    return this.CacheItem$Value$value;
  }; 

  function CacheItem_set_Key (value) {
    this.CacheItem$Key$value = value;
  }; 

  function CacheItem_set_RegionName (value) {
    this.CacheItem$RegionName$value = value;
  }; 

  function CacheItem_set_Value (value) {
    this.CacheItem$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.String
        ])
    );

    $.Method({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.String), 
      CacheItem_get_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RegionName", 
      JSIL.MethodSignature.Return($.String), 
      CacheItem_get_RegionName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object), 
      CacheItem_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Key", 
      JSIL.MethodSignature.Action($.String), 
      CacheItem_set_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RegionName", 
      JSIL.MethodSignature.Action($.String), 
      CacheItem_set_RegionName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object), 
      CacheItem_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CacheItem$Key$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CacheItem$Value$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CacheItem$RegionName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Key", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "RegionName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheItemPolicy */ 

(function CacheItemPolicy$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheItemPolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbsoluteExpiration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChangeMonitors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Priority", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheItemPriority"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemovedCallback", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SlidingExpiration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateCallback", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AbsoluteExpiration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Priority", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheItemPriority"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemovedCallback", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SlidingExpiration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateCallback", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"))
    );

    $.Field({Static:false, Public:false}, "_absExpiry", $asm07.TypeRef("System.DateTimeOffset"));

    $.Field({Static:false, Public:false}, "_sldExpiry", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_changeMonitors", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]));

    $.Field({Static:false, Public:false}, "_priority", $asm1F.TypeRef("System.Runtime.Caching.CacheItemPriority"));

    $.Field({Static:false, Public:false}, "_removedCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"));

    $.Field({Static:false, Public:false}, "_updateCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"));

    $.Property({Static:false, Public:true }, "AbsoluteExpiration", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:true }, "ChangeMonitors", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]));

    $.Property({Static:false, Public:true }, "Priority", $asm1F.TypeRef("System.Runtime.Caching.CacheItemPriority"));

    $.Property({Static:false, Public:true }, "RemovedCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"));

    $.Property({Static:false, Public:true }, "SlidingExpiration", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "UpdateCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Caching.CacheItemPriority */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Caching.CacheItemPriority", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    NotRemovable: 1, 
  }
);

/* class System.Runtime.Caching.CacheEntryRemovedArguments */ 

(function CacheEntryRemovedArguments$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheEntryRemovedArguments", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItem")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheItem", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemovedReason", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.ObjectCache"))
    );

    $.Field({Static:false, Public:false}, "_cacheItem", $asm1F.TypeRef("System.Runtime.Caching.CacheItem"));

    $.Field({Static:false, Public:false}, "_source", $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"));

    $.Field({Static:false, Public:false}, "_reason", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"));

    $.Property({Static:false, Public:true }, "CacheItem", $asm1F.TypeRef("System.Runtime.Caching.CacheItem"));

    $.Property({Static:false, Public:true }, "RemovedReason", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"));

    $.Property({Static:false, Public:true }, "Source", $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Caching.CacheEntryRemovedCallback */ 

JSIL.MakeDelegate("System.Runtime.Caching.CacheEntryRemovedCallback", true, [], 
  JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedArguments")));

/* enum System.Runtime.Caching.CacheEntryRemovedReason */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Caching.CacheEntryRemovedReason", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Removed: 0, 
    Expired: 1, 
    Evicted: 2, 
    ChangeMonitorChanged: 3, 
    CacheSpecificEviction: 4, 
  }
);

/* class System.Runtime.Caching.CacheEntryUpdateArguments */ 

(function CacheEntryUpdateArguments$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheEntryUpdateArguments", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RegionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemovedReason", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.ObjectCache"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdatedCacheItem", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdatedCacheItemPolicy", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdatedCacheItem", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdatedCacheItemPolicy", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"))
    );

    $.Field({Static:false, Public:false}, "_key", $.String);

    $.Field({Static:false, Public:false}, "_reason", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"));

    $.Field({Static:false, Public:false}, "_regionName", $.String);

    $.Field({Static:false, Public:false}, "_source", $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"));

    $.Field({Static:false, Public:false}, "_updatedCacheItem", $asm1F.TypeRef("System.Runtime.Caching.CacheItem"));

    $.Field({Static:false, Public:false}, "_updatedCacheItemPolicy", $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"));

    $.Property({Static:false, Public:true }, "Key", $.String);

    $.Property({Static:false, Public:true }, "RemovedReason", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"));

    $.Property({Static:false, Public:true }, "RegionName", $.String);

    $.Property({Static:false, Public:true }, "Source", $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"));

    $.Property({Static:false, Public:true }, "UpdatedCacheItem", $asm1F.TypeRef("System.Runtime.Caching.CacheItem"));

    $.Property({Static:false, Public:true }, "UpdatedCacheItemPolicy", $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Caching.CacheEntryUpdateCallback */ 

JSIL.MakeDelegate("System.Runtime.Caching.CacheEntryUpdateCallback", true, [], 
  JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateArguments")));

/* class System.Runtime.Caching.MemoryMonitor */ 

(function MemoryMonitor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PressureHigh", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PressureLast", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PressureLow", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TotalPhysical", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TotalVirtual", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCurrentPressure", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPercentToTrim", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitHistory", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAboveHighPressure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TERABYTE_SHIFT", $.Int32, 40);

    $.Constant({Static:true , Public:false}, "TERABYTE", $.Int64, 1099511627776);

    $.Constant({Static:true , Public:false}, "GIGABYTE_SHIFT", $.Int32, 30);

    $.Constant({Static:true , Public:false}, "GIGABYTE", $.Int64, 1073741824);

    $.Constant({Static:true , Public:false}, "MEGABYTE_SHIFT", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "MEGABYTE", $.Int64, 1048576);

    $.Constant({Static:true , Public:false}, "KILOBYTE_SHIFT", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "KILOBYTE", $.Int64, 1024);

    $.Constant({Static:true , Public:false}, "HISTORY_COUNT", $.Int32, 6);

    $.Field({Static:false, Public:false}, "_pressureHigh", $.Int32);

    $.Field({Static:false, Public:false}, "_pressureLow", $.Int32);

    $.Field({Static:false, Public:false}, "_i0", $.Int32);

    $.Field({Static:false, Public:false}, "_pressureHist", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_pressureTotal", $.Int32);

    $.Field({Static:true , Public:false}, "s_totalPhysical", $.Int64);

    $.Field({Static:true , Public:false}, "s_totalVirtual", $.Int64);

    $.Property({Static:true , Public:false}, "TotalPhysical", $.Int64);

    $.Property({Static:true , Public:false}, "TotalVirtual", $.Int64);

    $.Property({Static:false, Public:false}, "PressureLast", $.Int32);

    $.Property({Static:false, Public:false}, "PressureHigh", $.Int32);

    $.Property({Static:false, Public:false}, "PressureLow", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheMemoryMonitor */ 

(function CacheMemoryMonitor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.MemoryMonitor"), 
      Name: "System.Runtime.Caching.CacheMemoryMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AutoPrivateBytesLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EffectiveProcessMemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCurrentPressure", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPercentToTrim", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitMemoryCacheManager", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:false}, "PRIVATE_BYTES_LIMIT_2GB", $.Int64, 838860800);

    $.Constant({Static:true , Public:false}, "PRIVATE_BYTES_LIMIT_3GB", $.Int64, 1887436800);

    $.Constant({Static:true , Public:false}, "PRIVATE_BYTES_LIMIT_64BIT", $.Int64, 1099511627776);

    $.Constant({Static:true , Public:false}, "SAMPLE_COUNT", $.Int32, 2);

    $.Field({Static:true , Public:false}, "s_memoryCacheManager", $asm1F.TypeRef("System.Runtime.Caching.Hosting.IMemoryCacheManager"));

    $.Field({Static:true , Public:false}, "s_autoPrivateBytesLimit", $.Int64, function ($pi) {
        return $asm07.System.Int64.FromNumber(-1);
      });

    $.Field({Static:true , Public:false}, "s_effectiveProcessMemoryLimit", $.Int64, function ($pi) {
        return $asm07.System.Int64.FromNumber(-1);
      });

    $.Field({Static:false, Public:false}, "_memoryCache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:false, Public:false}, "_cacheSizeSamples", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Field({Static:false, Public:false}, "_cacheSizeSampleTimes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "_idx", $.Int32);

    $.Field({Static:false, Public:false}, "_sizedRefMultiple", $asm1F.TypeRef("System.Runtime.Caching.SRefMultiple"));

    $.Field({Static:false, Public:false}, "_gen2Count", $.Int32);

    $.Field({Static:false, Public:false}, "_memoryLimit", $.Int64);

    $.Property({Static:false, Public:false}, "MemoryLimit", $.Int64);

    $.Property({Static:true , Public:false}, "AutoPrivateBytesLimit", $.Int64);

    $.Property({Static:true , Public:false}, "EffectiveProcessMemoryLimit", $.Int64);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.Dbg */ 

(function Dbg$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("System.Runtime.Caching.Dbg", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AlwaysValidate", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Break", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "CheckValid", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Fail", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "FormatLocalDate", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTagEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTagPresent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception"), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.Constant({Static:true , Public:false}, "TAG_INTERNAL", $.String, "Internal");

    $.Constant({Static:true , Public:false}, "TAG_EXTERNAL", $.String, "External");

    $.Constant({Static:true , Public:false}, "TAG_ALL", $.String, "*");

    $.Constant({Static:true , Public:false}, "DATE_FORMAT", $.String, "yyyy/MM/dd HH:mm:ss.ffff");

    $.Constant({Static:true , Public:false}, "TIME_FORMAT", $.String, "HH:mm:ss:ffff");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* enum System.Runtime.Caching.DefaultCacheCapabilities */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Caching.DefaultCacheCapabilities", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    InMemoryProvider: 1, 
    OutOfProcessProvider: 2, 
    CacheEntryChangeMonitors: 4, 
    AbsoluteExpirations: 8, 
    SlidingExpirations: 16, 
    CacheEntryUpdateCallback: 32, 
    CacheEntryRemovedCallback: 64, 
    CacheRegions: 128, 
  }
);

/* enum System.Runtime.Caching.EntryState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Caching.EntryState", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotInCache: 0, 
    AddingToCache: 1, 
    AddedToCache: 2, 
    RemovingFromCache: 4, 
    RemovedFromCache: 8, 
    Closed: 16, 
  }
);

/* class System.Runtime.Caching.FileChangeMonitor */ 

(function FileChangeMonitor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"), 
      Name: "System.Runtime.Caching.FileChangeMonitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FilePaths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "FilePaths", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "LastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.FileChangeNotificationSystem */ 

(function FileChangeNotificationSystem$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.FileChangeNotificationSystem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTimeOffset")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    )
      .Overrides($asm1F.TypeRef("System.Runtime.Caching.Hosting.IFileChangeNotificationSystem"), "StartMonitoring")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    )
      .Overrides($asm1F.TypeRef("System.Runtime.Caching.Hosting.IFileChangeNotificationSystem"), "StopMonitoring")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_dirMonitors", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_lock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm1F.TypeRef("System.Runtime.Caching.Hosting.IFileChangeNotificationSystem")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.FileChangeNotificationSystem+DirectoryMonitor */ 

(function DirectoryMonitor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.FileChangeNotificationSystem+DirectoryMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Fsw", $asm0A.TypeRef("System.IO.FileSystemWatcher"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.FileChangeNotificationSystem+FileChangeEventTarget */ 

(function FileChangeEventTarget$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.FileChangeNotificationSystem+FileChangeEventTarget", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualsIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChangedHandler", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.IO.FileSystemEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorHandler", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.IO.ErrorEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RenamedHandler", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.IO.RenamedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.IO.FileSystemEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnError", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.IO.ErrorEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnRenamed", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.IO.RenamedEventArgs")])
    );

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_onChangedCallback", $asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback"));

    $.Field({Static:false, Public:false}, "_changedHandler", $asm0A.TypeRef("System.IO.FileSystemEventHandler"));

    $.Field({Static:false, Public:false}, "_errorHandler", $asm0A.TypeRef("System.IO.ErrorEventHandler"));

    $.Field({Static:false, Public:false}, "_renamedHandler", $asm0A.TypeRef("System.IO.RenamedEventHandler"));

    $.Property({Static:false, Public:false}, "ChangedHandler", $asm0A.TypeRef("System.IO.FileSystemEventHandler"));

    $.Property({Static:false, Public:false}, "ErrorHandler", $asm0A.TypeRef("System.IO.ErrorEventHandler"));

    $.Property({Static:false, Public:false}, "RenamedHandler", $asm0A.TypeRef("System.IO.RenamedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.HostFileChangeMonitor */ 

(function HostFileChangeMonitor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.FileChangeMonitor"), 
      Name: "System.Runtime.Caching.HostFileChangeMonitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FilePaths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InitFCN", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SanitizeFilePathsList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "MAX_CHAR_COUNT_OF_LONG_CONVERTED_TO_HEXADECIMAL_STRING", $.Int32, 16);

    $.Field({Static:true , Public:false}, "s_fcn", $asm1F.TypeRef("System.Runtime.Caching.Hosting.IFileChangeNotificationSystem"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_filePaths", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "_uniqueId", $.String);

    $.Field({Static:false, Public:false}, "_fcnState", $.Object);

    $.Field({Static:false, Public:false}, "_lastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:true , Virtual:true }, "FilePaths", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.ObjectCache */ 

(function ObjectCache$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.ObjectCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheItem"), [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCacheEntryChangeMonitor", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheEntryChangeMonitor"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultCacheCapabilities", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.DefaultCacheCapabilities"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Host", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IServiceProvider"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCacheItem", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheItem"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "keys", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Host", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IServiceProvider"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")])]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "_host", $asm07.TypeRef("System.IServiceProvider"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "InfiniteAbsoluteExpiration", $asm07.TypeRef("System.DateTimeOffset"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NoSlidingExpiration", $asm07.TypeRef("System.TimeSpan"));


    function ObjectCache__cctor () {
      $thisType.InfiniteAbsoluteExpiration = new $asm07.System.DateTimeOffset();
      $thisType.NoSlidingExpiration = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ObjectCache__cctor
    );

    $.Property({Static:true , Public:true }, "Host", $asm07.TypeRef("System.IServiceProvider"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultCacheCapabilities", $asm1F.TypeRef("System.Runtime.Caching.DefaultCacheCapabilities"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Caching.MemoryCache */ 

(function MemoryCache$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.ObjectCache"), 
      Name: "System.Runtime.Caching.MemoryCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheItem"), [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrGetExisting", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetExistingInternal", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCacheEntryChangeMonitor", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheEntryChangeMonitor"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeSafeCritical", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllSRefTargets", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheMemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigLess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultCacheCapabilities", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.DefaultCacheCapabilities"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PhysicalMemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PollingInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseMemoryCacheManager", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCacheItem", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.CacheItem"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCount", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntry", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInternal", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLastSize", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStore", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"), [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "OnAppDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUnhandledException", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveEntry", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), [
          $.String, $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.CacheItem"), $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]), $asm07.TypeRef("System.DateTimeOffset"), 
          $asm07.TypeRef("System.TimeSpan"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true }, "Trim", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateConfig", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePolicy", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy"))
    );

    $.Constant({Static:true , Public:false}, "CAPABILITIES", $asm1F.TypeRef("System.Runtime.Caching.DefaultCacheCapabilities"), 125);

    $.Field({Static:true , Public:false, ReadOnly:true }, "OneYear", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false}, "s_initLock", $.Object);

    $.Field({Static:true , Public:false}, "s_defaultCache", $.Type);

    $.Field({Static:true , Public:false}, "s_sentinelRemovedCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"), function ($pi) {
        return $asm1F.System.Runtime.Caching.CacheEntryRemovedCallback.New(null, null, new JSIL.MethodPointerInfo($asm1F.System.Runtime.Caching.MemoryCache_SentinelEntry, "OnCacheEntryRemovedCallback", JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedArguments")), true, false));
      });

    $.Field({Static:false, Public:false}, "_storeRefs", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.GCHandleRef`1", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore")])]));

    $.Field({Static:false, Public:false}, "_storeCount", $.Int32);

    $.Field({Static:false, Public:false}, "_disposed", $.Int32);

    $.Field({Static:false, Public:false}, "_stats", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStatistics"));

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_perfCounters", $asm1F.TypeRef("System.Runtime.Caching.PerfCounters"));

    $.Field({Static:false, Public:false}, "_configLess", $.Boolean);

    $.Field({Static:false, Public:false}, "_useMemoryCacheManager", $.Boolean);

    $.Field({Static:false, Public:false}, "_onAppDomainUnload", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false}, "_onUnhandledException", $asm07.TypeRef("System.UnhandledExceptionEventHandler"));


    function MemoryCache__cctor () {
      $thisType.OneYear = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MemoryCache__cctor
    );

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigLess", $.Boolean);

    $.Property({Static:false, Public:false}, "AllSRefTargets", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:false, Public:true }, "CacheMemoryLimit", $.Int64);

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultCacheCapabilities", $asm1F.TypeRef("System.Runtime.Caching.DefaultCacheCapabilities"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "UseMemoryCacheManager", $.Boolean);

    $.Property({Static:false, Public:true }, "PhysicalMemoryLimit", $.Int64);

    $.Property({Static:false, Public:true }, "PollingInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Caching.MemoryCache+SentinelEntry */ 

(function SentinelEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCache+SentinelEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheEntryUpdateCallback", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpensiveObjectDependency", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPolicyValid", 
      new JSIL.MethodSignature($.Boolean, [$asm1F.TypeRef("System.Runtime.Caching.CacheItemPolicy")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnCacheEntryRemovedCallback", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedArguments"))
    );

    $.Field({Static:false, Public:false}, "_key", $.String);

    $.Field({Static:false, Public:false}, "_expensiveObjectDependency", $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"));

    $.Field({Static:false, Public:false}, "_updateCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"));

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:false}, "ExpensiveObjectDependency", $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"));

    $.Property({Static:false, Public:false}, "CacheEntryUpdateCallback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryUpdateCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheEntryChangeMonitor */ 

(function MemoryCacheEntryChangeMonitor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.CacheEntryChangeMonitor"), 
      Name: "System.Runtime.Caching.MemoryCacheEntryChangeMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), $.String, 
          $asm1F.TypeRef("System.Runtime.Caching.MemoryCache")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CacheKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Dependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RegionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCacheEntryReleased", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartMonitoring", 
      new JSIL.MethodSignature(null, [
          $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DATETIME_MINVALUE_UTC", $asm07.TypeRef("System.DateTime"));

    $.Constant({Static:true , Public:false}, "MAX_CHAR_COUNT_OF_LONG_CONVERTED_TO_HEXADECIMAL_STRING", $.Int32, 16);

    $.Field({Static:false, Public:false}, "_keys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "_regionName", $.String);

    $.Field({Static:false, Public:false}, "_uniqueId", $.String);

    $.Field({Static:false, Public:false}, "_lastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.Field({Static:false, Public:false}, "_dependencies", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")]));


    function MemoryCacheEntryChangeMonitor__cctor () {
      $thisType.DATETIME_MINVALUE_UTC = new $asm07.System.DateTime();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MemoryCacheEntryChangeMonitor__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CacheKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "RegionName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LastModified", $asm07.TypeRef("System.DateTimeOffset"));

    $.Property({Static:false, Public:false}, "Dependencies", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheKey */ 

(function MemoryCacheKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCacheKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hash", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_key", $.String);

    $.Field({Static:false, Public:false}, "_hash", $.Int32);

    $.Field({Static:false, Public:false}, "_bits", $.Byte);

    $.Property({Static:false, Public:false}, "Hash", $.Int32);

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheEntry */ 

(function MemoryCacheEntry$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey"), 
      Name: "System.Runtime.Caching.MemoryCacheEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.DateTimeOffset"), $asm07.TypeRef("System.TimeSpan"), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheItemPriority"), $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCache")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependent", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntryChangeMonitor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCacheEntryRemovedCallback", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallNotifyOnChanged", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConfigureUpdateSentinel", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpiresBucket", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpiresEntryRef", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SlidingExp", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.EntryState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsageBucket", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UsageEntryRef", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UtcAbsExp", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UtcCreated", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UtcLastUpdateUsage", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasExpiration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasUsage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InExpires", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InUsage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDependencyChanged", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependent", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntryChangeMonitor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExpiresBucket", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExpiresEntryRef", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.EntryState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UsageEntryRef", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UtcAbsExp", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UtcLastUpdateUsage", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateSlidingExp", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm1F.TypeRef("System.Runtime.Caching.CacheExpires")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateSlidingExpForUpdateSentinel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateUsage", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm1F.TypeRef("System.Runtime.Caching.CacheUsage")])
    );

    $.Constant({Static:true , Public:false}, "EntryStateMask", $.Byte, 31);

    $.Field({Static:false, Public:false}, "_value", $.Object);

    $.Field({Static:false, Public:false}, "_utcCreated", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_utcAbsExp", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_slidingExp", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_expiresEntryRef", $asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"));

    $.Field({Static:false, Public:false}, "_expiresBucket", $.Byte);

    $.Field({Static:false, Public:false}, "_usageBucket", $.Byte);

    $.Field({Static:false, Public:false}, "_usageEntryRef", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Field({Static:false, Public:false}, "_utcLastUpdateUsage", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_callback", $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedCallback"));

    $.Field({Static:false, Public:false}, "_fields", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry+SeldomUsedFields"));

    $.Property({Static:false, Public:false}, "Value", $.Object);

    $.Property({Static:false, Public:false}, "UtcAbsExp", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "UtcCreated", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ExpiresEntryRef", $asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"));

    $.Property({Static:false, Public:false}, "ExpiresBucket", $.Byte);

    $.Property({Static:false, Public:false}, "SlidingExp", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "State", $asm1F.TypeRef("System.Runtime.Caching.EntryState"));

    $.Property({Static:false, Public:false}, "UsageBucket", $.Byte);

    $.Property({Static:false, Public:false}, "UsageEntryRef", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Property({Static:false, Public:false}, "UtcLastUpdateUsage", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheEntry+SeldomUsedFields */ 

(function SeldomUsedFields$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCacheEntry+SeldomUsedFields", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_dependencies", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor")]));

    $.Field({Static:false, Public:false}, "_dependents", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntryChangeMonitor"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntryChangeMonitor")]));

    $.Field({Static:false, Public:false}, "_cache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:false, Public:false}, "_updateSentinel", $asm07.TypeRef("System.Tuple`2", [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheEqualityComparer */ 

(function MemoryCacheEqualityComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCacheEqualityComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheStatistics */ 

(function MemoryCacheStatistics$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCacheStatistics", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustTimer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheManagerThread", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CacheManagerTimerCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheMemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PhysicalMemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PollingInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPercentToTrim", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeConfiguration", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTrimStats", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateConfig", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"))
    );

    $.Constant({Static:true , Public:false}, "MEMORYSTATUS_INTERVAL_5_SECONDS", $.Int32, 5000);

    $.Constant({Static:true , Public:false}, "MEMORYSTATUS_INTERVAL_30_SECONDS", $.Int32, 30000);

    $.Field({Static:false, Public:false}, "_configCacheMemoryLimitMegabytes", $.Int32);

    $.Field({Static:false, Public:false}, "_configPhysicalMemoryLimitPercentage", $.Int32);

    $.Field({Static:false, Public:false}, "_configPollingInterval", $.Int32);

    $.Field({Static:false, Public:false}, "_inCacheManagerThread", $.Int32);

    $.Field({Static:false, Public:false}, "_disposed", $.Int32);

    $.Field({Static:false, Public:false}, "_lastTrimCount", $.Int64);

    $.Field({Static:false, Public:false}, "_lastTrimDurationTicks", $.Int64);

    $.Field({Static:false, Public:false}, "_lastTrimGen2Count", $.Int32);

    $.Field({Static:false, Public:false}, "_lastTrimPercent", $.Int32);

    $.Field({Static:false, Public:false}, "_lastTrimTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_pollingInterval", $.Int32);

    $.Field({Static:false, Public:false}, "_timerHandleRef", $asm1F.TypeRef("System.Runtime.Caching.GCHandleRef`1", [$asm07.TypeRef("System.Threading.Timer")]));

    $.Field({Static:false, Public:false}, "_timerLock", $.Object);

    $.Field({Static:false, Public:false}, "_totalCountBeforeTrim", $.Int64);

    $.Field({Static:false, Public:false}, "_cacheMemoryMonitor", $asm1F.TypeRef("System.Runtime.Caching.CacheMemoryMonitor"));

    $.Field({Static:false, Public:false}, "_memoryCache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:false, Public:false}, "_physicalMemoryMonitor", $asm1F.TypeRef("System.Runtime.Caching.PhysicalMemoryMonitor"));

    $.Property({Static:false, Public:false}, "CacheMemoryLimit", $.Int64);

    $.Property({Static:false, Public:false}, "PhysicalMemoryLimit", $.Int64);

    $.Property({Static:false, Public:false}, "PollingInterval", $asm07.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.MemoryCacheStore */ 

(function MemoryCacheStore$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.MemoryCacheStore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCache"), $asm1F.TypeRef("System.Runtime.Caching.PerfCounters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetExisting", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToCache", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BlockInsert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Get", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Usage", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.CacheUsage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), [
          $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), 
          $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromCache", 
      new JSIL.MethodSignature(null, [
          $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), $asm1F.TypeRef("System.Runtime.Caching.CacheEntryRemovedReason"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheKey"), $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrimInternal", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnblockInsert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateExpAndUsage", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitInsertBlock", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "INSERT_BLOCK_WAIT", $.Int32, 10000);

    $.Constant({Static:true , Public:false}, "MAX_COUNT", $.Int32, 1073741823);

    $.Field({Static:false, Public:false}, "_entries", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "_entriesLock", $.Object);

    $.Field({Static:false, Public:false}, "_expires", $asm1F.TypeRef("System.Runtime.Caching.CacheExpires"));

    $.Field({Static:false, Public:false}, "_usage", $asm1F.TypeRef("System.Runtime.Caching.CacheUsage"));

    $.Field({Static:false, Public:false}, "_disposed", $.Int32);

    $.Field({Static:false, Public:false}, "_insertBlock", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "_useInsertBlock", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "_cache", $asm1F.TypeRef("System.Runtime.Caching.MemoryCache"));

    $.Field({Static:false, Public:false}, "_perfCounters", $asm1F.TypeRef("System.Runtime.Caching.PerfCounters"));

    $.Property({Static:false, Public:false}, "Usage", $asm1F.TypeRef("System.Runtime.Caching.CacheUsage"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Caching.OnChangedCallback */ 

JSIL.MakeDelegate("System.Runtime.Caching.OnChangedCallback", true, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Object")));

/* enum System.Runtime.Caching.PerfCounterName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Runtime.Caching.PerfCounterName", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Entries: 0, 
    Hits: 1, 
    HitRatio: 2, 
    HitRatioBase: 3, 
    Misses: 4, 
    Trims: 5, 
    Turnover: 6, 
  }
);

/* class System.Runtime.Caching.PerfCounters */ 

(function PerfCounters$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.PerfCounters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Decrement", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.PerfCounterName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureAppIdInited", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Increment", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.PerfCounterName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementBy", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.PerfCounterName"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDisposableMembers", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "PERF_COUNTER_CATEGORY", $.String, ".NET Memory Cache 4.0");

    $.Constant({Static:true , Public:false}, "CACHE_ENTRIES", $.String, "Cache Entries");

    $.Constant({Static:true , Public:false}, "CACHE_HITS", $.String, "Cache Hits");

    $.Constant({Static:true , Public:false}, "CACHE_HIT_RATIO", $.String, "Cache Hit Ratio");

    $.Constant({Static:true , Public:false}, "CACHE_HIT_RATIO_BASE", $.String, "Cache Hit Ratio Base");

    $.Constant({Static:true , Public:false}, "CACHE_MISSES", $.String, "Cache Misses");

    $.Constant({Static:true , Public:false}, "CACHE_TRIMS", $.String, "Cache Trims");

    $.Constant({Static:true , Public:false}, "CACHE_TURNOVER", $.String, "Cache Turnover Rate");

    $.Constant({Static:true , Public:false}, "NUM_COUNTERS", $.Int32, 7);

    $.Field({Static:true , Public:false}, "s_appId", $.String);

    $.Field({Static:false, Public:false}, "_counters", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Diagnostics.PerformanceCounter")]));

    $.Field({Static:false, Public:false}, "_counterValues", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.PhysicalMemoryMonitor */ 

(function PhysicalMemoryMonitor$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.MemoryMonitor"), 
      Name: "System.Runtime.Caching.PhysicalMemoryMonitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemoryLimit", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCurrentPressure", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetPercentToTrim", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Constant({Static:true , Public:false}, "MIN_TOTAL_MEMORY_TRIM_PERCENT", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "TARGET_TOTAL_MEMORY_TRIM_INTERVAL_TICKS", $.Int64, function ($pi) {
        return ($asm07.System.UInt64.FromNumber(-1294967296)).ToInt64();
      });

    $.Property({Static:false, Public:false}, "MemoryLimit", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.SafeRegistryHandle */ 

(function SafeRegistryHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Runtime.Caching.SafeRegistryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* struct System.Runtime.Caching.SafeBitVector32 */ 

(function SafeBitVector32$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.SafeBitVector32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "ChangeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "_data", $asm07.TypeRef("System.Int32"));

    $.Property({Static:false, Public:false}, "Item", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Caching.SqlChangeMonitor */ 

(function SqlChangeMonitor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm1F.TypeRef("System.Runtime.Caching.ChangeMonitor"), 
      Name: "System.Runtime.Caching.SqlChangeMonitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm11.TypeRef("System.Data.SqlClient.SqlDependency"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDependencyChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm11.TypeRef("System.Data.SqlClient.SqlNotificationEventArgs")])
    );

    $.Field({Static:false, Public:false}, "_uniqueId", $.String);

    $.Field({Static:false, Public:false}, "_sqlDependency", $asm11.TypeRef("System.Data.SqlClient.SqlDependency"));

    $.Property({Static:false, Public:true , Virtual:true }, "UniqueId", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.SRef */ 

(function SRef$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.SRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ApproximateSize", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_sizedRef", $.Object);

    $.Property({Static:false, Public:false}, "ApproximateSize", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.SRefMultiple */ 

(function SRefMultiple$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.SRefMultiple", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApproximateSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "_srefs", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.SRef")]));

    $.Field({Static:false, Public:false}, "_sizes", $jsilcore.TypeRef("System.Array", [$.Int64]));

    $.Property({Static:false, Public:false}, "ApproximateSize", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.GCHandleRef`1 */ 

(function GCHandleRef$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.GCHandleRef`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_handle", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Field({Static:false, Public:false}, "_t", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Target", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Runtime.Caching.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetModuleFileName", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "KERNEL32.DLL", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatusEx", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.MEMORYSTATUSEX")])]), 
      {
        Module: "KERNEL32.DLL", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegCloseKey", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ADVAPI32.DLL", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "KERNEL32.DLL");

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "ADVAPI32.DLL");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* struct System.Runtime.Caching.MEMORYSTATUSEX */ 

(function MEMORYSTATUSEX$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.MEMORYSTATUSEX", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dwLength", $.Int32);

    $.Field({Static:false, Public:false}, "dwMemoryLoad", $.Int32);

    $.Field({Static:false, Public:false}, "ullTotalPhys", $.Int64);

    $.Field({Static:false, Public:false}, "ullAvailPhys", $.Int64);

    $.Field({Static:false, Public:false}, "ullTotalPageFile", $.Int64);

    $.Field({Static:false, Public:false}, "ullAvailPageFile", $.Int64);

    $.Field({Static:false, Public:false}, "ullTotalVirtual", $.Int64);

    $.Field({Static:false, Public:false}, "ullAvailVirtual", $.Int64);

    $.Field({Static:false, Public:false}, "ullAvailExtendedVirtual", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.ExpiresEntryRef */ 

(function ExpiresEntryRef$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.ExpiresEntryRef", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PageIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "INVALID", $.Type);

    $.Constant({Static:true , Public:false}, "ENTRY_MASK", $.UInt32, 255);

    $.Constant({Static:true , Public:false}, "PAGE_MASK", $.UInt32, 4294967040);

    $.Constant({Static:true , Public:false}, "PAGE_SHIFT", $.Int32, 8);

    $.Field({Static:false, Public:false}, "_ref", $.UInt32);


    function ExpiresEntryRef__cctor () {
      $thisType.INVALID = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ExpiresEntryRef__cctor
    );

    $.Property({Static:false, Public:false}, "PageIndex", $.Int32);

    $.Property({Static:false, Public:false}, "Index", $.Int32);

    $.Property({Static:false, Public:false}, "IsInvalid", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.ExpiresEntry */ 

(function ExpiresEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.ExpiresEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "_utcExpires", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false, Offset: 0}, "_next", $asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"));

    $.Field({Static:false, Public:false, Offset: 4}, "_cFree", $.Int32);

    $.Field({Static:false, Public:false, Offset: 8}, "_cacheEntry", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* struct System.Runtime.Caching.ExpiresPage */ 

(function ExpiresPage$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.ExpiresPage", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_entries", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresEntry")]));

    $.Field({Static:false, Public:false}, "_pageNext", $.Int32);

    $.Field({Static:false, Public:false}, "_pagePrev", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.ExpiresPageList */ 

(function ExpiresPageList$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.ExpiresPageList", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_head", $.Int32);

    $.Field({Static:false, Public:false}, "_tail", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.ExpiresBucket */ 

(function ExpiresBucket$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.ExpiresBucket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1F.TypeRef("System.Runtime.Caching.CacheExpires"), $.Byte, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCount", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddExpiresEntryToFreeList", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToListHead", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToListTail", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Expand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushExpiredItems", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCountIndex", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpiresCount", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFreeExpiresEntry", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.ExpiresEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitZeroPages", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToListHead", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToListTail", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reduce", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCacheEntry", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCacheEntryNoLock", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCount", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromList", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromListHead", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCounts", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateMinEntries", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UtcUpdateCacheEntry", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), $asm07.TypeRef("System.DateTime")])
    );

    $.Constant({Static:true , Public:false}, "NUM_ENTRIES", $.Int32, 127);

    $.Constant({Static:true , Public:false}, "LENGTH_ENTRIES", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "MIN_PAGES_INCREMENT", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "MAX_PAGES_INCREMENT", $.Int32, 340);

    $.Constant({Static:true , Public:false}, "MIN_LOAD_FACTOR", $.Double, 0.5);

    $.Constant({Static:true , Public:false}, "COUNTS_LENGTH", $.Int32, 4);

    $.Field({Static:true , Public:false, ReadOnly:true }, "COUNT_INTERVAL", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cacheExpires", $asm1F.TypeRef("System.Runtime.Caching.CacheExpires"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_bucket", $.Byte);

    $.Field({Static:false, Public:false}, "_pages", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresPage")]));

    $.Field({Static:false, Public:false}, "_cEntriesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_cPagesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_cEntriesInFlush", $.Int32);

    $.Field({Static:false, Public:false}, "_minEntriesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_freePageList", $asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList"));

    $.Field({Static:false, Public:false}, "_freeEntryList", $asm1F.TypeRef("System.Runtime.Caching.ExpiresPageList"));

    $.Field({Static:false, Public:false}, "_blockReduce", $.Boolean);

    $.Field({Static:false, Public:false}, "_utcMinExpires", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_counts", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_utcLastCountReset", $asm07.TypeRef("System.DateTime"));


    function ExpiresBucket__cctor () {
      $thisType.COUNT_INTERVAL = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ExpiresBucket__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheExpires */ 

(function CacheExpires$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheExpires", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableExpirationTimer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushExpiredItems", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushExpiredItems", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemoryCacheStore", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TimerCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "UtcCalcExpiresBucket", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UtcUpdate", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"), $asm07.TypeRef("System.DateTime")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MIN_UPDATE_DELTA", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MIN_FLUSH_INTERVAL", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_tsPerBucket", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "NUMBUCKETS", $.Int32, 30);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_tsPerCycle", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cacheStore", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buckets", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.ExpiresBucket")]));

    $.Field({Static:false, Public:false}, "_timerHandleRef", $asm1F.TypeRef("System.Runtime.Caching.GCHandleRef`1", [$asm07.TypeRef("System.Threading.Timer")]));

    $.Field({Static:false, Public:false}, "_utcLastFlush", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_inFlush", $.Int32);


    function CacheExpires__cctor () {
      $thisType.MIN_UPDATE_DELTA = new $asm07.System.TimeSpan();
      $thisType.MIN_FLUSH_INTERVAL = new $asm07.System.TimeSpan();
      $thisType._tsPerBucket = new $asm07.System.TimeSpan();
      $thisType._tsPerCycle = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CacheExpires__cctor
    );

    $.Property({Static:false, Public:false}, "MemoryCacheStore", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.UsageEntryRef */ 

(function UsageEntryRef$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.UsageEntryRef", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRef1", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRef2", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PageIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ref1Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ref2Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "INVALID", $.Type);

    $.Constant({Static:true , Public:false}, "ENTRY_MASK", $.UInt32, 255);

    $.Constant({Static:true , Public:false}, "PAGE_MASK", $.UInt32, 4294967040);

    $.Constant({Static:true , Public:false}, "PAGE_SHIFT", $.Int32, 8);

    $.Field({Static:false, Public:false}, "_ref", $.UInt32);


    function UsageEntryRef__cctor () {
      $thisType.INVALID = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UsageEntryRef__cctor
    );

    $.Property({Static:false, Public:false}, "PageIndex", $.Int32);

    $.Property({Static:false, Public:false}, "Ref1Index", $.Int32);

    $.Property({Static:false, Public:false}, "Ref2Index", $.Int32);

    $.Property({Static:false, Public:false}, "IsRef1", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRef2", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInvalid", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.UsageEntryLink */ 

(function UsageEntryLink$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.UsageEntryLink", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_next", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Field({Static:false, Public:false}, "_prev", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.UsageEntry */ 

(function UsageEntry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.UsageEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "_ref1", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryLink"));

    $.Field({Static:false, Public:false, Offset: 4}, "_cFree", $.Int32);

    $.Field({Static:false, Public:false, Offset: 8}, "_ref2", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryLink"));

    $.Field({Static:false, Public:false, Offset: 16}, "_utcDate", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false, Offset: 24}, "_cacheEntry", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* struct System.Runtime.Caching.UsagePage */ 

(function UsagePage$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.UsagePage", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_entries", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.UsageEntry")]));

    $.Field({Static:false, Public:false}, "_pageNext", $.Int32);

    $.Field({Static:false, Public:false}, "_pagePrev", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Caching.UsagePageList */ 

(function UsagePageList$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Caching.UsagePageList", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "_head", $.Int32);

    $.Field({Static:false, Public:false}, "_tail", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.UsageBucket */ 

(function UsageBucket$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.UsageBucket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1F.TypeRef("System.Runtime.Caching.CacheUsage"), $.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToListHead", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToListTail", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUsageEntryToFreeList", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Expand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushUnderUsedItems", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFreeUsageEntry", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitZeroPages", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToListHead", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToListTail", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reduce", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCacheEntry", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveEntryFromLastRefList", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromList", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromListHead", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm1F.TypeRef("System.Runtime.Caching.UsagePageList")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateCacheEntry", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateMinEntries", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "NUM_ENTRIES", $.Int32, 127);

    $.Constant({Static:true , Public:false}, "LENGTH_ENTRIES", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "MIN_PAGES_INCREMENT", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "MAX_PAGES_INCREMENT", $.Int32, 340);

    $.Constant({Static:true , Public:false}, "MIN_LOAD_FACTOR", $.Double, 0.5);

    $.Field({Static:false, Public:false}, "_cacheUsage", $asm1F.TypeRef("System.Runtime.Caching.CacheUsage"));

    $.Field({Static:false, Public:false}, "_bucket", $.Byte);

    $.Field({Static:false, Public:false}, "_pages", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.UsagePage")]));

    $.Field({Static:false, Public:false}, "_cEntriesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_cPagesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_cEntriesInFlush", $.Int32);

    $.Field({Static:false, Public:false}, "_minEntriesInUse", $.Int32);

    $.Field({Static:false, Public:false}, "_freePageList", $asm1F.TypeRef("System.Runtime.Caching.UsagePageList"));

    $.Field({Static:false, Public:false}, "_freeEntryList", $asm1F.TypeRef("System.Runtime.Caching.UsagePageList"));

    $.Field({Static:false, Public:false}, "_lastRefHead", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Field({Static:false, Public:false}, "_lastRefTail", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Field({Static:false, Public:false}, "_addRef2Head", $asm1F.TypeRef("System.Runtime.Caching.UsageEntryRef"));

    $.Field({Static:false, Public:false}, "_blockReduce", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.CacheUsage */ 

(function CacheUsage$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.CacheUsage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushUnderUsedItems", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemoryCacheStore", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCacheEntry"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NEWADD_INTERVAL", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CORRELATED_REQUEST_TIMEOUT", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MIN_LIFETIME_FOR_USAGE", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "NUMBUCKETS", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "MAX_REMOVE", $.Int32, 1024);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cacheStore", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buckets", $jsilcore.TypeRef("System.Array", [$asm1F.TypeRef("System.Runtime.Caching.UsageBucket")]));

    $.Field({Static:false, Public:false}, "_inFlush", $.Int32);


    function CacheUsage__cctor () {
      $thisType.NEWADD_INTERVAL = new $asm07.System.TimeSpan();
      $thisType.CORRELATED_REQUEST_TIMEOUT = new $asm07.System.TimeSpan();
      $thisType.MIN_LIFETIME_FOR_USAGE = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CacheUsage__cctor
    );

    $.Property({Static:false, Public:false}, "MemoryCacheStore", $asm1F.TypeRef("System.Runtime.Caching.MemoryCacheStore"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Caching.Hosting");
/* interface System.Runtime.Caching.Hosting.IApplicationIdentifier */ 

JSIL.MakeInterface(
  "System.Runtime.Caching.Hosting.IApplicationIdentifier", true, [], function ($) {
    $.Method({}, "GetApplicationId", JSIL.MethodSignature.Return($.String));
  }, []);

/* interface System.Runtime.Caching.Hosting.IFileChangeNotificationSystem */ 

JSIL.MakeInterface(
  "System.Runtime.Caching.Hosting.IFileChangeNotificationSystem", true, [], function ($) {
    $.Method({}, "StartMonitoring", new JSIL.MethodSignature(null, [
          $.String, $asm1F.TypeRef("System.Runtime.Caching.OnChangedCallback"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTimeOffset")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]));
    $.Method({}, "StopMonitoring", new JSIL.MethodSignature(null, [$.String, $.Object]));
  }, []);

/* interface System.Runtime.Caching.Hosting.IMemoryCacheManager */ 

JSIL.MakeInterface(
  "System.Runtime.Caching.Hosting.IMemoryCacheManager", true, [], function ($) {
    $.Method({}, "UpdateCacheSize", new JSIL.MethodSignature(null, [$.Int64, $asm1F.TypeRef("System.Runtime.Caching.MemoryCache")]));
    $.Method({}, "ReleaseCache", JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.MemoryCache")));
  }, []);

JSIL.DeclareNamespace("System.Runtime.Caching.Configuration");
/* class System.Runtime.Caching.Configuration.CachingSectionGroup */ 

(function CachingSectionGroup$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Runtime.Caching.Configuration.CachingSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemoryCaches", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheSection"))
    );

    $.Property({Static:false, Public:true }, "MemoryCaches", $asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheSection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["memoryCache"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.Configuration.ConfigUtil */ 

(function ConfigUtil$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Runtime.Caching.Configuration.ConfigUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIntValue", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), $.String, 
          $.Int32, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIntValueFromTimeSpan", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("System.Collections.Specialized.NameValueCollection"), $.String, 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "CacheMemoryLimitMegabytes", $.String, "cacheMemoryLimitMegabytes");

    $.Constant({Static:true , Public:false}, "PhysicalMemoryLimitPercentage", $.String, "physicalMemoryLimitPercentage");

    $.Constant({Static:true , Public:false}, "PollingInterval", $.String, "pollingInterval");

    $.Constant({Static:true , Public:false}, "UseMemoryCacheManager", $.String, "useMemoryCacheManager");

    $.Constant({Static:true , Public:false}, "DefaultPollingTimeMilliseconds", $.Int32, 120000);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.Configuration.MemoryCacheElement */ 

(function MemoryCacheElement$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Caching.Configuration.MemoryCacheElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheMemoryLimitMegabytes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PhysicalMemoryLimitPercentage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PollingInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CacheMemoryLimitMegabytes", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PhysicalMemoryLimitPercentage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PollingInterval", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:true , Public:false}, "_properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propPhysicalMemoryLimitPercentage", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propCacheMemoryLimitMegabytes", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propPollingInterval", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0E.System.Configuration.WhiteSpaceTrimStringConverter.__Type__]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "PhysicalMemoryLimitPercentage", $.Int32)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["physicalMemoryLimitPercentage"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.IntegerValidatorAttribute"));

    $.Property({Static:false, Public:true }, "CacheMemoryLimitMegabytes", $.Int32)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["cacheMemoryLimitMegabytes"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.IntegerValidatorAttribute"));

    $.Property({Static:false, Public:true }, "PollingInterval", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["pollingInterval"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0E.System.Configuration.InfiniteTimeSpanConverter.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.Configuration.MemoryCacheSection */ 

(function MemoryCacheSection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Runtime.Caching.Configuration.MemoryCacheSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamedCaches", 
      JSIL.MethodSignature.Return($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.Field({Static:true , Public:false}, "_properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_propNamedCaches", $asm0E.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "NamedCaches", $asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["namedCaches"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection */ 

(function MemoryCacheSettingsCollection$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Configuration.ConfigurationElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElementCollectionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement")])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"));

    $.Property({Static:false, Public:true }, "Item", $asm1F.TypeRef("System.Runtime.Caching.Configuration.MemoryCacheElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm0E.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm1F.System.Runtime.Caching.Configuration.MemoryCacheElement.__Type__]; });

})();

JSIL.DeclareNamespace("System.Runtime.Caching.Resources");
/* class System.Runtime.Caching.Resources.R */ 

(function R$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Runtime.Caching.Resources.R", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_out_of_range", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Collection_contains_null_element", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Collection_contains_null_or_empty_string", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Config_unable_to_get_section", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Default_is_reserved", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty_collection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Empty_string_invalid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Init_not_complete", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Invalid_argument_combination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Invalid_callback_combination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Invalid_expiration_combination", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Invalid_state", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Method_already_invoked", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Property_already_set", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RegionName_not_supported", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TimeSpan_invalid_format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Update_callback_must_be_null", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Value_must_be_boolean", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Value_must_be_non_negative_integer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Value_must_be_positive_integer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Value_too_big", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Argument_out_of_range", $.String);

    $.Property({Static:true , Public:false}, "Collection_contains_null_element", $.String);

    $.Property({Static:true , Public:false}, "Collection_contains_null_or_empty_string", $.String);

    $.Property({Static:true , Public:false}, "Config_unable_to_get_section", $.String);

    $.Property({Static:true , Public:false}, "Default_is_reserved", $.String);

    $.Property({Static:true , Public:false}, "Empty_collection", $.String);

    $.Property({Static:true , Public:false}, "Init_not_complete", $.String);

    $.Property({Static:true , Public:false}, "Invalid_argument_combination", $.String);

    $.Property({Static:true , Public:false}, "Invalid_callback_combination", $.String);

    $.Property({Static:true , Public:false}, "Invalid_expiration_combination", $.String);

    $.Property({Static:true , Public:false}, "Invalid_state", $.String);

    $.Property({Static:true , Public:false}, "Method_already_invoked", $.String);

    $.Property({Static:true , Public:false}, "Property_already_set", $.String);

    $.Property({Static:true , Public:false}, "TimeSpan_invalid_format", $.String);

    $.Property({Static:true , Public:false}, "Update_callback_must_be_null", $.String);

    $.Property({Static:true , Public:false}, "Value_must_be_non_negative_integer", $.String);

    $.Property({Static:true , Public:false}, "Value_must_be_positive_integer", $.String);

    $.Property({Static:true , Public:false}, "Value_too_big", $.String);

    $.Property({Static:true , Public:false}, "Value_must_be_boolean", $.String);

    $.Property({Static:true , Public:false}, "Empty_string_invalid", $.String);

    $.Property({Static:true , Public:false}, "RegionName_not_supported", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Caching.Resources.RH */ 

(function RH$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Runtime.Caching.Resources.RH", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

